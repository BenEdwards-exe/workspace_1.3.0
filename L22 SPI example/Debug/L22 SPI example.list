
L22 SPI example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005354  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  080054ec  080054ec  000154ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005620  08005620  00020020  2**0
                  CONTENTS
  4 .ARM          00000008  08005620  08005620  00015620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005628  08005628  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005628  08005628  00015628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800562c  0800562c  0001562c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08005630  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000dd4  20000020  08005650  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000df4  08005650  00020df4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e68d  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002068  00000000  00000000  0002e6dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b28  00000000  00000000  00030748  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a20  00000000  00000000  00031270  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001706d  00000000  00000000  00031c90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000aaca  00000000  00000000  00048cfd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008812c  00000000  00000000  000537c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000db8f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cf0  00000000  00000000  000db970  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000020 	.word	0x20000020
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080054d4 	.word	0x080054d4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000024 	.word	0x20000024
 80001d4:	080054d4 	.word	0x080054d4

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b598      	push	{r3, r4, r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004dc:	f000 fcdc 	bl	8000e98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e0:	f000 f872 	bl	80005c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e4:	f000 f92e 	bl	8000744 <MX_GPIO_Init>
  MX_SPI1_Init();
 80004e8:	f000 f8cc 	bl	8000684 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80004ec:	f000 f900 	bl	80006f0 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 80004f0:	f002 fcb6 	bl	8002e60 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  fres = f_mount(&fs, "", 1);
 80004f4:	2201      	movs	r2, #1
 80004f6:	4926      	ldr	r1, [pc, #152]	; (8000590 <main+0xb8>)
 80004f8:	4826      	ldr	r0, [pc, #152]	; (8000594 <main+0xbc>)
 80004fa:	f004 fb41 	bl	8004b80 <f_mount>
 80004fe:	4603      	mov	r3, r0
 8000500:	461a      	mov	r2, r3
 8000502:	4b25      	ldr	r3, [pc, #148]	; (8000598 <main+0xc0>)
 8000504:	701a      	strb	r2, [r3, #0]
  if (fres == FR_OK) {
 8000506:	4b24      	ldr	r3, [pc, #144]	; (8000598 <main+0xc0>)
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	2b00      	cmp	r3, #0
 800050c:	d106      	bne.n	800051c <main+0x44>
	  HAL_UART_Transmit(&huart1, "FS OK!\n", 7, 10);
 800050e:	230a      	movs	r3, #10
 8000510:	2207      	movs	r2, #7
 8000512:	4922      	ldr	r1, [pc, #136]	; (800059c <main+0xc4>)
 8000514:	4822      	ldr	r0, [pc, #136]	; (80005a0 <main+0xc8>)
 8000516:	f002 f844 	bl	80025a2 <HAL_UART_Transmit>
 800051a:	e005      	b.n	8000528 <main+0x50>
  }
  else {
	  HAL_UART_Transmit(&huart1, "FS MOUNT ERROR!\n", 16, 10);
 800051c:	230a      	movs	r3, #10
 800051e:	2210      	movs	r2, #16
 8000520:	4920      	ldr	r1, [pc, #128]	; (80005a4 <main+0xcc>)
 8000522:	481f      	ldr	r0, [pc, #124]	; (80005a0 <main+0xc8>)
 8000524:	f002 f83d 	bl	80025a2 <HAL_UART_Transmit>
  }


  fres = f_open(&fil, "myfile.txt", FA_WRITE | FA_CREATE_ALWAYS);
 8000528:	220a      	movs	r2, #10
 800052a:	491f      	ldr	r1, [pc, #124]	; (80005a8 <main+0xd0>)
 800052c:	481f      	ldr	r0, [pc, #124]	; (80005ac <main+0xd4>)
 800052e:	f004 fb6d 	bl	8004c0c <f_open>
 8000532:	4603      	mov	r3, r0
 8000534:	461a      	mov	r2, r3
 8000536:	4b18      	ldr	r3, [pc, #96]	; (8000598 <main+0xc0>)
 8000538:	701a      	strb	r2, [r3, #0]
  if (fres == FR_OK) {
 800053a:	4b17      	ldr	r3, [pc, #92]	; (8000598 <main+0xc0>)
 800053c:	781b      	ldrb	r3, [r3, #0]
 800053e:	2b00      	cmp	r3, #0
 8000540:	d106      	bne.n	8000550 <main+0x78>
	  HAL_UART_Transmit(&huart1, "f_open OK!\n", 11, 10);
 8000542:	230a      	movs	r3, #10
 8000544:	220b      	movs	r2, #11
 8000546:	491a      	ldr	r1, [pc, #104]	; (80005b0 <main+0xd8>)
 8000548:	4815      	ldr	r0, [pc, #84]	; (80005a0 <main+0xc8>)
 800054a:	f002 f82a 	bl	80025a2 <HAL_UART_Transmit>
 800054e:	e005      	b.n	800055c <main+0x84>
  }
  else {
	  HAL_UART_Transmit(&huart1, "f_open ERROR!\n", 14, 10);
 8000550:	230a      	movs	r3, #10
 8000552:	220e      	movs	r2, #14
 8000554:	4917      	ldr	r1, [pc, #92]	; (80005b4 <main+0xdc>)
 8000556:	4812      	ldr	r0, [pc, #72]	; (80005a0 <main+0xc8>)
 8000558:	f002 f823 	bl	80025a2 <HAL_UART_Transmit>
  }

  outlen = sprintf((char*) outstr, "my first file!");
 800055c:	4a16      	ldr	r2, [pc, #88]	; (80005b8 <main+0xe0>)
 800055e:	4b17      	ldr	r3, [pc, #92]	; (80005bc <main+0xe4>)
 8000560:	4614      	mov	r4, r2
 8000562:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000564:	6020      	str	r0, [r4, #0]
 8000566:	6061      	str	r1, [r4, #4]
 8000568:	60a2      	str	r2, [r4, #8]
 800056a:	881a      	ldrh	r2, [r3, #0]
 800056c:	789b      	ldrb	r3, [r3, #2]
 800056e:	81a2      	strh	r2, [r4, #12]
 8000570:	73a3      	strb	r3, [r4, #14]
 8000572:	230e      	movs	r3, #14
 8000574:	461a      	mov	r2, r3
 8000576:	4b12      	ldr	r3, [pc, #72]	; (80005c0 <main+0xe8>)
 8000578:	601a      	str	r2, [r3, #0]
  f_write(&fil, outstr, outlen, &numwritten);
 800057a:	4b11      	ldr	r3, [pc, #68]	; (80005c0 <main+0xe8>)
 800057c:	681a      	ldr	r2, [r3, #0]
 800057e:	4b11      	ldr	r3, [pc, #68]	; (80005c4 <main+0xec>)
 8000580:	490d      	ldr	r1, [pc, #52]	; (80005b8 <main+0xe0>)
 8000582:	480a      	ldr	r0, [pc, #40]	; (80005ac <main+0xd4>)
 8000584:	f004 fd00 	bl	8004f88 <f_write>

  f_close(&fil);
 8000588:	4808      	ldr	r0, [pc, #32]	; (80005ac <main+0xd4>)
 800058a:	f004 fef0 	bl	800536e <f_close>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800058e:	e7fe      	b.n	800058e <main+0xb6>
 8000590:	080054ec 	.word	0x080054ec
 8000594:	20000084 	.word	0x20000084
 8000598:	20000744 	.word	0x20000744
 800059c:	080054f0 	.word	0x080054f0
 80005a0:	200006ac 	.word	0x200006ac
 80005a4:	080054f8 	.word	0x080054f8
 80005a8:	0800550c 	.word	0x0800550c
 80005ac:	20000748 	.word	0x20000748
 80005b0:	08005518 	.word	0x08005518
 80005b4:	08005524 	.word	0x08005524
 80005b8:	200002bc 	.word	0x200002bc
 80005bc:	08005534 	.word	0x08005534
 80005c0:	200006a4 	.word	0x200006a4
 80005c4:	200006a8 	.word	0x200006a8

080005c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b094      	sub	sp, #80	; 0x50
 80005cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ce:	f107 0320 	add.w	r3, r7, #32
 80005d2:	2230      	movs	r2, #48	; 0x30
 80005d4:	2100      	movs	r1, #0
 80005d6:	4618      	mov	r0, r3
 80005d8:	f004 ff74 	bl	80054c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005dc:	f107 030c 	add.w	r3, r7, #12
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	605a      	str	r2, [r3, #4]
 80005e6:	609a      	str	r2, [r3, #8]
 80005e8:	60da      	str	r2, [r3, #12]
 80005ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ec:	2300      	movs	r3, #0
 80005ee:	60bb      	str	r3, [r7, #8]
 80005f0:	4b22      	ldr	r3, [pc, #136]	; (800067c <SystemClock_Config+0xb4>)
 80005f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f4:	4a21      	ldr	r2, [pc, #132]	; (800067c <SystemClock_Config+0xb4>)
 80005f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005fa:	6413      	str	r3, [r2, #64]	; 0x40
 80005fc:	4b1f      	ldr	r3, [pc, #124]	; (800067c <SystemClock_Config+0xb4>)
 80005fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000600:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000604:	60bb      	str	r3, [r7, #8]
 8000606:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000608:	2300      	movs	r3, #0
 800060a:	607b      	str	r3, [r7, #4]
 800060c:	4b1c      	ldr	r3, [pc, #112]	; (8000680 <SystemClock_Config+0xb8>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a1b      	ldr	r2, [pc, #108]	; (8000680 <SystemClock_Config+0xb8>)
 8000612:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000616:	6013      	str	r3, [r2, #0]
 8000618:	4b19      	ldr	r3, [pc, #100]	; (8000680 <SystemClock_Config+0xb8>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000620:	607b      	str	r3, [r7, #4]
 8000622:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000624:	2302      	movs	r3, #2
 8000626:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000628:	2301      	movs	r3, #1
 800062a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800062c:	2310      	movs	r3, #16
 800062e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000630:	2300      	movs	r3, #0
 8000632:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000634:	f107 0320 	add.w	r3, r7, #32
 8000638:	4618      	mov	r0, r3
 800063a:	f000 ff43 	bl	80014c4 <HAL_RCC_OscConfig>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000644:	f000 f8e8 	bl	8000818 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000648:	230f      	movs	r3, #15
 800064a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800064c:	2300      	movs	r3, #0
 800064e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000650:	2300      	movs	r3, #0
 8000652:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000654:	2300      	movs	r3, #0
 8000656:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000658:	2300      	movs	r3, #0
 800065a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800065c:	f107 030c 	add.w	r3, r7, #12
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f001 f99e 	bl	80019a4 <HAL_RCC_ClockConfig>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800066e:	f000 f8d3 	bl	8000818 <Error_Handler>
  }
}
 8000672:	bf00      	nop
 8000674:	3750      	adds	r7, #80	; 0x50
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	40023800 	.word	0x40023800
 8000680:	40007000 	.word	0x40007000

08000684 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000688:	4b17      	ldr	r3, [pc, #92]	; (80006e8 <MX_SPI1_Init+0x64>)
 800068a:	4a18      	ldr	r2, [pc, #96]	; (80006ec <MX_SPI1_Init+0x68>)
 800068c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800068e:	4b16      	ldr	r3, [pc, #88]	; (80006e8 <MX_SPI1_Init+0x64>)
 8000690:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000694:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000696:	4b14      	ldr	r3, [pc, #80]	; (80006e8 <MX_SPI1_Init+0x64>)
 8000698:	2200      	movs	r2, #0
 800069a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800069c:	4b12      	ldr	r3, [pc, #72]	; (80006e8 <MX_SPI1_Init+0x64>)
 800069e:	2200      	movs	r2, #0
 80006a0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006a2:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <MX_SPI1_Init+0x64>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006a8:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <MX_SPI1_Init+0x64>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006ae:	4b0e      	ldr	r3, [pc, #56]	; (80006e8 <MX_SPI1_Init+0x64>)
 80006b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006b4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006b6:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <MX_SPI1_Init+0x64>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006bc:	4b0a      	ldr	r3, [pc, #40]	; (80006e8 <MX_SPI1_Init+0x64>)
 80006be:	2200      	movs	r2, #0
 80006c0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006c2:	4b09      	ldr	r3, [pc, #36]	; (80006e8 <MX_SPI1_Init+0x64>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006c8:	4b07      	ldr	r3, [pc, #28]	; (80006e8 <MX_SPI1_Init+0x64>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006ce:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <MX_SPI1_Init+0x64>)
 80006d0:	220a      	movs	r2, #10
 80006d2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006d4:	4804      	ldr	r0, [pc, #16]	; (80006e8 <MX_SPI1_Init+0x64>)
 80006d6:	f001 fb31 	bl	8001d3c <HAL_SPI_Init>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80006e0:	f000 f89a 	bl	8000818 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006e4:	bf00      	nop
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	200006ec 	.word	0x200006ec
 80006ec:	40013000 	.word	0x40013000

080006f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006f4:	4b11      	ldr	r3, [pc, #68]	; (800073c <MX_USART1_UART_Init+0x4c>)
 80006f6:	4a12      	ldr	r2, [pc, #72]	; (8000740 <MX_USART1_UART_Init+0x50>)
 80006f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006fa:	4b10      	ldr	r3, [pc, #64]	; (800073c <MX_USART1_UART_Init+0x4c>)
 80006fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000700:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000702:	4b0e      	ldr	r3, [pc, #56]	; (800073c <MX_USART1_UART_Init+0x4c>)
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000708:	4b0c      	ldr	r3, [pc, #48]	; (800073c <MX_USART1_UART_Init+0x4c>)
 800070a:	2200      	movs	r2, #0
 800070c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800070e:	4b0b      	ldr	r3, [pc, #44]	; (800073c <MX_USART1_UART_Init+0x4c>)
 8000710:	2200      	movs	r2, #0
 8000712:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000714:	4b09      	ldr	r3, [pc, #36]	; (800073c <MX_USART1_UART_Init+0x4c>)
 8000716:	220c      	movs	r2, #12
 8000718:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800071a:	4b08      	ldr	r3, [pc, #32]	; (800073c <MX_USART1_UART_Init+0x4c>)
 800071c:	2200      	movs	r2, #0
 800071e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000720:	4b06      	ldr	r3, [pc, #24]	; (800073c <MX_USART1_UART_Init+0x4c>)
 8000722:	2200      	movs	r2, #0
 8000724:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000726:	4805      	ldr	r0, [pc, #20]	; (800073c <MX_USART1_UART_Init+0x4c>)
 8000728:	f001 feee 	bl	8002508 <HAL_UART_Init>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000732:	f000 f871 	bl	8000818 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	200006ac 	.word	0x200006ac
 8000740:	40011000 	.word	0x40011000

08000744 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b088      	sub	sp, #32
 8000748:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074a:	f107 030c 	add.w	r3, r7, #12
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	605a      	str	r2, [r3, #4]
 8000754:	609a      	str	r2, [r3, #8]
 8000756:	60da      	str	r2, [r3, #12]
 8000758:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	60bb      	str	r3, [r7, #8]
 800075e:	4b2b      	ldr	r3, [pc, #172]	; (800080c <MX_GPIO_Init+0xc8>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a2a      	ldr	r2, [pc, #168]	; (800080c <MX_GPIO_Init+0xc8>)
 8000764:	f043 0301 	orr.w	r3, r3, #1
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b28      	ldr	r3, [pc, #160]	; (800080c <MX_GPIO_Init+0xc8>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0301 	and.w	r3, r3, #1
 8000772:	60bb      	str	r3, [r7, #8]
 8000774:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	607b      	str	r3, [r7, #4]
 800077a:	4b24      	ldr	r3, [pc, #144]	; (800080c <MX_GPIO_Init+0xc8>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a23      	ldr	r2, [pc, #140]	; (800080c <MX_GPIO_Init+0xc8>)
 8000780:	f043 0308 	orr.w	r3, r3, #8
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b21      	ldr	r3, [pc, #132]	; (800080c <MX_GPIO_Init+0xc8>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0308 	and.w	r3, r3, #8
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	603b      	str	r3, [r7, #0]
 8000796:	4b1d      	ldr	r3, [pc, #116]	; (800080c <MX_GPIO_Init+0xc8>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a1c      	ldr	r2, [pc, #112]	; (800080c <MX_GPIO_Init+0xc8>)
 800079c:	f043 0302 	orr.w	r3, r3, #2
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b1a      	ldr	r3, [pc, #104]	; (800080c <MX_GPIO_Init+0xc8>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0302 	and.w	r3, r3, #2
 80007aa:	603b      	str	r3, [r7, #0]
 80007ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80007ae:	2200      	movs	r2, #0
 80007b0:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80007b4:	4816      	ldr	r0, [pc, #88]	; (8000810 <MX_GPIO_Init+0xcc>)
 80007b6:	f000 fe6b 	bl	8001490 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 80007ba:	2200      	movs	r2, #0
 80007bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007c0:	4814      	ldr	r0, [pc, #80]	; (8000814 <MX_GPIO_Init+0xd0>)
 80007c2:	f000 fe65 	bl	8001490 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80007c6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80007ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007cc:	2301      	movs	r3, #1
 80007ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	2300      	movs	r3, #0
 80007d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d4:	2300      	movs	r3, #0
 80007d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007d8:	f107 030c 	add.w	r3, r7, #12
 80007dc:	4619      	mov	r1, r3
 80007de:	480c      	ldr	r0, [pc, #48]	; (8000810 <MX_GPIO_Init+0xcc>)
 80007e0:	f000 fcd4 	bl	800118c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80007e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80007e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ea:	2301      	movs	r3, #1
 80007ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ee:	2300      	movs	r3, #0
 80007f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f2:	2300      	movs	r3, #0
 80007f4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f6:	f107 030c 	add.w	r3, r7, #12
 80007fa:	4619      	mov	r1, r3
 80007fc:	4805      	ldr	r0, [pc, #20]	; (8000814 <MX_GPIO_Init+0xd0>)
 80007fe:	f000 fcc5 	bl	800118c <HAL_GPIO_Init>

}
 8000802:	bf00      	nop
 8000804:	3720      	adds	r7, #32
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	40023800 	.word	0x40023800
 8000810:	40020c00 	.word	0x40020c00
 8000814:	40020000 	.word	0x40020000

08000818 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800081c:	bf00      	nop
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr
	...

08000828 <Select>:
#include "main.h"

extern SPI_HandleTypeDef hspi1;

void Select()
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 800082c:	2200      	movs	r2, #0
 800082e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000832:	4804      	ldr	r0, [pc, #16]	; (8000844 <Select+0x1c>)
 8000834:	f000 fe2c 	bl	8001490 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000838:	2001      	movs	r0, #1
 800083a:	f000 fb9f 	bl	8000f7c <HAL_Delay>
}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40020000 	.word	0x40020000

08000848 <Deselect>:

void Deselect()
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 800084c:	2201      	movs	r2, #1
 800084e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000852:	4804      	ldr	r0, [pc, #16]	; (8000864 <Deselect+0x1c>)
 8000854:	f000 fe1c 	bl	8001490 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000858:	2001      	movs	r0, #1
 800085a:	f000 fb8f 	bl	8000f7c <HAL_Delay>
}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	40020000 	.word	0x40020000

08000868 <SD_Select>:

void SD_Select()
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
	Select();
 800086c:	f7ff ffdc 	bl	8000828 <Select>
}
 8000870:	bf00      	nop
 8000872:	bd80      	pop	{r7, pc}

08000874 <SD_Deselect>:
void SD_Deselect()
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
	Deselect();
 8000878:	f7ff ffe6 	bl	8000848 <Deselect>
}
 800087c:	bf00      	nop
 800087e:	bd80      	pop	{r7, pc}

08000880 <SD_ReceiveByte>:

uint8_t SD_ReceiveByte()
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b084      	sub	sp, #16
 8000884:	af02      	add	r7, sp, #8
	uint8_t dummy = 0xff;
 8000886:	23ff      	movs	r3, #255	; 0xff
 8000888:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, 10);
 800088a:	1dba      	adds	r2, r7, #6
 800088c:	1df9      	adds	r1, r7, #7
 800088e:	230a      	movs	r3, #10
 8000890:	9300      	str	r3, [sp, #0]
 8000892:	2301      	movs	r3, #1
 8000894:	4803      	ldr	r0, [pc, #12]	; (80008a4 <SD_ReceiveByte+0x24>)
 8000896:	f001 fbe9 	bl	800206c <HAL_SPI_TransmitReceive>
	return data;
 800089a:	79bb      	ldrb	r3, [r7, #6]
}
 800089c:	4618      	mov	r0, r3
 800089e:	3708      	adds	r7, #8
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	200006ec 	.word	0x200006ec

080008a8 <SD_SendCommand>:

uint8_t SD_SendCommand(uint8_t cmd, uint32_t args)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b086      	sub	sp, #24
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	4603      	mov	r3, r0
 80008b0:	6039      	str	r1, [r7, #0]
 80008b2:	71fb      	strb	r3, [r7, #7]
	uint8_t res;
	uint32_t tickstart = HAL_GetTick();
 80008b4:	f000 fb56 	bl	8000f64 <HAL_GetTick>
 80008b8:	6138      	str	r0, [r7, #16]
	do
	{
		res = SD_ReceiveByte();
 80008ba:	f7ff ffe1 	bl	8000880 <SD_ReceiveByte>
 80008be:	4603      	mov	r3, r0
 80008c0:	73fb      	strb	r3, [r7, #15]
	} while (((HAL_GetTick() - tickstart) < 50) && (res != 0xff));
 80008c2:	f000 fb4f 	bl	8000f64 <HAL_GetTick>
 80008c6:	4602      	mov	r2, r0
 80008c8:	693b      	ldr	r3, [r7, #16]
 80008ca:	1ad3      	subs	r3, r2, r3
 80008cc:	2b31      	cmp	r3, #49	; 0x31
 80008ce:	d802      	bhi.n	80008d6 <SD_SendCommand+0x2e>
 80008d0:	7bfb      	ldrb	r3, [r7, #15]
 80008d2:	2bff      	cmp	r3, #255	; 0xff
 80008d4:	d1f1      	bne.n	80008ba <SD_SendCommand+0x12>

	uint8_t cmdbuffer[6];
	cmdbuffer[0] = 0x40 | cmd;
 80008d6:	79fb      	ldrb	r3, [r7, #7]
 80008d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	723b      	strb	r3, [r7, #8]
	cmdbuffer[1] = (uint8_t)(args >> 24);
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	0e1b      	lsrs	r3, r3, #24
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	727b      	strb	r3, [r7, #9]
	cmdbuffer[2] = (uint8_t)(args >> 16);
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	0c1b      	lsrs	r3, r3, #16
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	72bb      	strb	r3, [r7, #10]
	cmdbuffer[3] = (uint8_t)(args >> 8);
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	0a1b      	lsrs	r3, r3, #8
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	72fb      	strb	r3, [r7, #11]
	cmdbuffer[4] = (uint8_t)(args);
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	b2db      	uxtb	r3, r3
 80008fc:	733b      	strb	r3, [r7, #12]
	if (cmd == 0)
 80008fe:	79fb      	ldrb	r3, [r7, #7]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d102      	bne.n	800090a <SD_SendCommand+0x62>
		cmdbuffer[5] = 0x95;
 8000904:	2395      	movs	r3, #149	; 0x95
 8000906:	737b      	strb	r3, [r7, #13]
 8000908:	e007      	b.n	800091a <SD_SendCommand+0x72>
	else if (cmd == 8)
 800090a:	79fb      	ldrb	r3, [r7, #7]
 800090c:	2b08      	cmp	r3, #8
 800090e:	d102      	bne.n	8000916 <SD_SendCommand+0x6e>
		cmdbuffer[5] = 0x87;
 8000910:	2387      	movs	r3, #135	; 0x87
 8000912:	737b      	strb	r3, [r7, #13]
 8000914:	e001      	b.n	800091a <SD_SendCommand+0x72>
	else
		cmdbuffer[5] = 1;
 8000916:	2301      	movs	r3, #1
 8000918:	737b      	strb	r3, [r7, #13]

	HAL_SPI_Transmit(&hspi1, cmdbuffer, 6, 10);
 800091a:	f107 0108 	add.w	r1, r7, #8
 800091e:	230a      	movs	r3, #10
 8000920:	2206      	movs	r2, #6
 8000922:	480c      	ldr	r0, [pc, #48]	; (8000954 <SD_SendCommand+0xac>)
 8000924:	f001 fa6e 	bl	8001e04 <HAL_SPI_Transmit>

	// read response code
	uint8_t n = 10;
 8000928:	230a      	movs	r3, #10
 800092a:	75fb      	strb	r3, [r7, #23]
	do
	{
		res = SD_ReceiveByte();
 800092c:	f7ff ffa8 	bl	8000880 <SD_ReceiveByte>
 8000930:	4603      	mov	r3, r0
 8000932:	73fb      	strb	r3, [r7, #15]
		n--;
 8000934:	7dfb      	ldrb	r3, [r7, #23]
 8000936:	3b01      	subs	r3, #1
 8000938:	75fb      	strb	r3, [r7, #23]
	} while (((res & 0x80) == 0x80) && (n > 0));
 800093a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800093e:	2b00      	cmp	r3, #0
 8000940:	da02      	bge.n	8000948 <SD_SendCommand+0xa0>
 8000942:	7dfb      	ldrb	r3, [r7, #23]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d1f1      	bne.n	800092c <SD_SendCommand+0x84>

	return res;
 8000948:	7bfb      	ldrb	r3, [r7, #15]
}
 800094a:	4618      	mov	r0, r3
 800094c:	3718      	adds	r7, #24
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	200006ec 	.word	0x200006ec

08000958 <SD_Init>:



uint8_t SD_Init()
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b086      	sub	sp, #24
 800095c:	af00      	add	r7, sp, #0
	Deselect();
 800095e:	f7ff ff73 	bl	8000848 <Deselect>

	uint8_t dummy = 0xff;
 8000962:	23ff      	movs	r3, #255	; 0xff
 8000964:	72fb      	strb	r3, [r7, #11]
	for (int i = 0; i < 10; i++)
 8000966:	2300      	movs	r3, #0
 8000968:	617b      	str	r3, [r7, #20]
 800096a:	e009      	b.n	8000980 <SD_Init+0x28>
	{
		HAL_SPI_Transmit(&hspi1, &dummy, 1, 10);
 800096c:	f107 010b 	add.w	r1, r7, #11
 8000970:	230a      	movs	r3, #10
 8000972:	2201      	movs	r2, #1
 8000974:	482d      	ldr	r0, [pc, #180]	; (8000a2c <SD_Init+0xd4>)
 8000976:	f001 fa45 	bl	8001e04 <HAL_SPI_Transmit>
	for (int i = 0; i < 10; i++)
 800097a:	697b      	ldr	r3, [r7, #20]
 800097c:	3301      	adds	r3, #1
 800097e:	617b      	str	r3, [r7, #20]
 8000980:	697b      	ldr	r3, [r7, #20]
 8000982:	2b09      	cmp	r3, #9
 8000984:	ddf2      	ble.n	800096c <SD_Init+0x14>
	}

	Select();
 8000986:	f7ff ff4f 	bl	8000828 <Select>

	// send command 0
	if (SD_SendCommand(0, 0) != 1)
 800098a:	2100      	movs	r1, #0
 800098c:	2000      	movs	r0, #0
 800098e:	f7ff ff8b 	bl	80008a8 <SD_SendCommand>
 8000992:	4603      	mov	r3, r0
 8000994:	2b01      	cmp	r3, #1
 8000996:	d001      	beq.n	800099c <SD_Init+0x44>
		return 0;
 8000998:	2300      	movs	r3, #0
 800099a:	e042      	b.n	8000a22 <SD_Init+0xca>

	// send command 8
	if (SD_SendCommand(8, 0x1aa) != 1)
 800099c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80009a0:	2008      	movs	r0, #8
 80009a2:	f7ff ff81 	bl	80008a8 <SD_SendCommand>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b01      	cmp	r3, #1
 80009aa:	d001      	beq.n	80009b0 <SD_Init+0x58>
		return 0;
 80009ac:	2300      	movs	r3, #0
 80009ae:	e038      	b.n	8000a22 <SD_Init+0xca>

	// read R7 response after cmd8
	uint8_t cmdreturn[4];
	for (int i = 0; i < 4; i++)
 80009b0:	2300      	movs	r3, #0
 80009b2:	613b      	str	r3, [r7, #16]
 80009b4:	e00b      	b.n	80009ce <SD_Init+0x76>
		cmdreturn[i] = SD_ReceiveByte();
 80009b6:	f7ff ff63 	bl	8000880 <SD_ReceiveByte>
 80009ba:	4603      	mov	r3, r0
 80009bc:	4619      	mov	r1, r3
 80009be:	1d3a      	adds	r2, r7, #4
 80009c0:	693b      	ldr	r3, [r7, #16]
 80009c2:	4413      	add	r3, r2
 80009c4:	460a      	mov	r2, r1
 80009c6:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 4; i++)
 80009c8:	693b      	ldr	r3, [r7, #16]
 80009ca:	3301      	adds	r3, #1
 80009cc:	613b      	str	r3, [r7, #16]
 80009ce:	693b      	ldr	r3, [r7, #16]
 80009d0:	2b03      	cmp	r3, #3
 80009d2:	ddf0      	ble.n	80009b6 <SD_Init+0x5e>

	if ((cmdreturn[2] != 1) && (cmdreturn[3] != 0xaa))
 80009d4:	79bb      	ldrb	r3, [r7, #6]
 80009d6:	2b01      	cmp	r3, #1
 80009d8:	d004      	beq.n	80009e4 <SD_Init+0x8c>
 80009da:	79fb      	ldrb	r3, [r7, #7]
 80009dc:	2baa      	cmp	r3, #170	; 0xaa
 80009de:	d001      	beq.n	80009e4 <SD_Init+0x8c>
		return 0;
 80009e0:	2300      	movs	r3, #0
 80009e2:	e01e      	b.n	8000a22 <SD_Init+0xca>

	uint32_t tickstart = HAL_GetTick();
 80009e4:	f000 fabe 	bl	8000f64 <HAL_GetTick>
 80009e8:	60f8      	str	r0, [r7, #12]
	do
	{
		if (SD_SendCommand(55, 0) <= 1)
 80009ea:	2100      	movs	r1, #0
 80009ec:	2037      	movs	r0, #55	; 0x37
 80009ee:	f7ff ff5b 	bl	80008a8 <SD_SendCommand>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b01      	cmp	r3, #1
 80009f6:	d807      	bhi.n	8000a08 <SD_Init+0xb0>
		{
			if (SD_SendCommand(41, 1 << 30) == 0)
 80009f8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80009fc:	2029      	movs	r0, #41	; 0x29
 80009fe:	f7ff ff53 	bl	80008a8 <SD_SendCommand>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d008      	beq.n	8000a1a <SD_Init+0xc2>
			{
				// ok!
				break;
			}
		}
	} while ((HAL_GetTick() - tickstart) < 1000);
 8000a08:	f000 faac 	bl	8000f64 <HAL_GetTick>
 8000a0c:	4602      	mov	r2, r0
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	1ad3      	subs	r3, r2, r3
 8000a12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a16:	d3e8      	bcc.n	80009ea <SD_Init+0x92>
 8000a18:	e000      	b.n	8000a1c <SD_Init+0xc4>
				break;
 8000a1a:	bf00      	nop

	Deselect();
 8000a1c:	f7ff ff14 	bl	8000848 <Deselect>

	return 1;
 8000a20:	2301      	movs	r3, #1
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3718      	adds	r7, #24
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	200006ec 	.word	0x200006ec

08000a30 <SD_RxDataBlock>:


uint8_t SD_RxDataBlock(uint8_t* buff, uint16_t len)
{
 8000a30:	b590      	push	{r4, r7, lr}
 8000a32:	b087      	sub	sp, #28
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
 8000a38:	460b      	mov	r3, r1
 8000a3a:	807b      	strh	r3, [r7, #2]
	uint8_t token;

	uint32_t ticksstart = HAL_GetTick();
 8000a3c:	f000 fa92 	bl	8000f64 <HAL_GetTick>
 8000a40:	6138      	str	r0, [r7, #16]

	// loop until response received or timeout
	do
	{
		token = SD_ReceiveByte();
 8000a42:	f7ff ff1d 	bl	8000880 <SD_ReceiveByte>
 8000a46:	4603      	mov	r3, r0
 8000a48:	73fb      	strb	r3, [r7, #15]
	} while ((token == 0xff) && (HAL_GetTick() - ticksstart < 20));
 8000a4a:	7bfb      	ldrb	r3, [r7, #15]
 8000a4c:	2bff      	cmp	r3, #255	; 0xff
 8000a4e:	d106      	bne.n	8000a5e <SD_RxDataBlock+0x2e>
 8000a50:	f000 fa88 	bl	8000f64 <HAL_GetTick>
 8000a54:	4602      	mov	r2, r0
 8000a56:	693b      	ldr	r3, [r7, #16]
 8000a58:	1ad3      	subs	r3, r2, r3
 8000a5a:	2b13      	cmp	r3, #19
 8000a5c:	d9f1      	bls.n	8000a42 <SD_RxDataBlock+0x12>

	// check for invalid response
	if (token != 0xfe)
 8000a5e:	7bfb      	ldrb	r3, [r7, #15]
 8000a60:	2bfe      	cmp	r3, #254	; 0xfe
 8000a62:	d001      	beq.n	8000a68 <SD_RxDataBlock+0x38>
		return 0;
 8000a64:	2300      	movs	r3, #0
 8000a66:	e015      	b.n	8000a94 <SD_RxDataBlock+0x64>

	// receive data
	for (int i = 0; i < len; i++)
 8000a68:	2300      	movs	r3, #0
 8000a6a:	617b      	str	r3, [r7, #20]
 8000a6c:	e009      	b.n	8000a82 <SD_RxDataBlock+0x52>
	{
		buff[i] = SD_ReceiveByte();
 8000a6e:	697b      	ldr	r3, [r7, #20]
 8000a70:	687a      	ldr	r2, [r7, #4]
 8000a72:	18d4      	adds	r4, r2, r3
 8000a74:	f7ff ff04 	bl	8000880 <SD_ReceiveByte>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	7023      	strb	r3, [r4, #0]
	for (int i = 0; i < len; i++)
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	3301      	adds	r3, #1
 8000a80:	617b      	str	r3, [r7, #20]
 8000a82:	887b      	ldrh	r3, [r7, #2]
 8000a84:	697a      	ldr	r2, [r7, #20]
 8000a86:	429a      	cmp	r2, r3
 8000a88:	dbf1      	blt.n	8000a6e <SD_RxDataBlock+0x3e>
	}

	// read and discard CRC
	SD_ReceiveByte();
 8000a8a:	f7ff fef9 	bl	8000880 <SD_ReceiveByte>
	SD_ReceiveByte();
 8000a8e:	f7ff fef7 	bl	8000880 <SD_ReceiveByte>

	// return success
	return 1;
 8000a92:	2301      	movs	r3, #1
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	371c      	adds	r7, #28
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd90      	pop	{r4, r7, pc}

08000a9c <SD_Read>:

uint8_t SD_Read(uint8_t* rxbuffer, uint32_t address, uint32_t numblocks)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b086      	sub	sp, #24
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	60f8      	str	r0, [r7, #12]
 8000aa4:	60b9      	str	r1, [r7, #8]
 8000aa6:	607a      	str	r2, [r7, #4]
	Select();
 8000aa8:	f7ff febe 	bl	8000828 <Select>

	if (numblocks == 1)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d111      	bne.n	8000ad6 <SD_Read+0x3a>
	{
		// read single block
		if (SD_SendCommand(17, address) != 0)
 8000ab2:	68b9      	ldr	r1, [r7, #8]
 8000ab4:	2011      	movs	r0, #17
 8000ab6:	f7ff fef7 	bl	80008a8 <SD_SendCommand>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <SD_Read+0x28>
			return 0;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	e030      	b.n	8000b26 <SD_Read+0x8a>

		SD_RxDataBlock(rxbuffer, 512);
 8000ac4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ac8:	68f8      	ldr	r0, [r7, #12]
 8000aca:	f7ff ffb1 	bl	8000a30 <SD_RxDataBlock>

		Deselect();
 8000ace:	f7ff febb 	bl	8000848 <Deselect>

		return 1;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	e027      	b.n	8000b26 <SD_Read+0x8a>
	}
	else
	{
		// read multiple blocks
		if (SD_SendCommand(18, address) != 0)
 8000ad6:	68b9      	ldr	r1, [r7, #8]
 8000ad8:	2012      	movs	r0, #18
 8000ada:	f7ff fee5 	bl	80008a8 <SD_SendCommand>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <SD_Read+0x4c>
			return 0;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	e01e      	b.n	8000b26 <SD_Read+0x8a>

		for (int i = 0; i < numblocks; i++)
 8000ae8:	2300      	movs	r3, #0
 8000aea:	617b      	str	r3, [r7, #20]
 8000aec:	e00e      	b.n	8000b0c <SD_Read+0x70>
		{
			if (!SD_RxDataBlock(rxbuffer, 512))
 8000aee:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000af2:	68f8      	ldr	r0, [r7, #12]
 8000af4:	f7ff ff9c 	bl	8000a30 <SD_RxDataBlock>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d00b      	beq.n	8000b16 <SD_Read+0x7a>
				break;

			rxbuffer += 512;
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000b04:	60fb      	str	r3, [r7, #12]
		for (int i = 0; i < numblocks; i++)
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	3301      	adds	r3, #1
 8000b0a:	617b      	str	r3, [r7, #20]
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	687a      	ldr	r2, [r7, #4]
 8000b10:	429a      	cmp	r2, r3
 8000b12:	d8ec      	bhi.n	8000aee <SD_Read+0x52>
 8000b14:	e000      	b.n	8000b18 <SD_Read+0x7c>
				break;
 8000b16:	bf00      	nop
		}

		// stop receiving
		SD_SendCommand(12, 0);
 8000b18:	2100      	movs	r1, #0
 8000b1a:	200c      	movs	r0, #12
 8000b1c:	f7ff fec4 	bl	80008a8 <SD_SendCommand>

		Deselect();
 8000b20:	f7ff fe92 	bl	8000848 <Deselect>

		return 1;
 8000b24:	2301      	movs	r3, #1
	}
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3718      	adds	r7, #24
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
	...

08000b30 <SD_TxDataBlock>:

uint8_t SD_TxDataBlock(uint8_t* buff, uint8_t token)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b086      	sub	sp, #24
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
 8000b38:	460b      	mov	r3, r1
 8000b3a:	70fb      	strb	r3, [r7, #3]
	uint8_t crc[2] = {0, 0};
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	733b      	strb	r3, [r7, #12]
 8000b40:	2300      	movs	r3, #0
 8000b42:	737b      	strb	r3, [r7, #13]
	uint8_t resp;

	// transmit token
	HAL_SPI_Transmit(&hspi1, &token, 1, 10);
 8000b44:	1cf9      	adds	r1, r7, #3
 8000b46:	230a      	movs	r3, #10
 8000b48:	2201      	movs	r2, #1
 8000b4a:	481b      	ldr	r0, [pc, #108]	; (8000bb8 <SD_TxDataBlock+0x88>)
 8000b4c:	f001 f95a 	bl	8001e04 <HAL_SPI_Transmit>

	// transmit data bytes
	HAL_SPI_Transmit(&hspi1, buff, 512, 10);
 8000b50:	230a      	movs	r3, #10
 8000b52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b56:	6879      	ldr	r1, [r7, #4]
 8000b58:	4817      	ldr	r0, [pc, #92]	; (8000bb8 <SD_TxDataBlock+0x88>)
 8000b5a:	f001 f953 	bl	8001e04 <HAL_SPI_Transmit>

	// transmit dummy crc
	HAL_SPI_Transmit(&hspi1, crc, 2, 10);
 8000b5e:	f107 010c 	add.w	r1, r7, #12
 8000b62:	230a      	movs	r3, #10
 8000b64:	2202      	movs	r2, #2
 8000b66:	4814      	ldr	r0, [pc, #80]	; (8000bb8 <SD_TxDataBlock+0x88>)
 8000b68:	f001 f94c 	bl	8001e04 <HAL_SPI_Transmit>

	// wait for data response token
	for (int i = 0; i < 64; i++)
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	613b      	str	r3, [r7, #16]
 8000b70:	e00b      	b.n	8000b8a <SD_TxDataBlock+0x5a>
	{
		resp = SD_ReceiveByte();
 8000b72:	f7ff fe85 	bl	8000880 <SD_ReceiveByte>
 8000b76:	4603      	mov	r3, r0
 8000b78:	75fb      	strb	r3, [r7, #23]

		if ((resp & 0x1f) == 0x05)
 8000b7a:	7dfb      	ldrb	r3, [r7, #23]
 8000b7c:	f003 031f 	and.w	r3, r3, #31
 8000b80:	2b05      	cmp	r3, #5
 8000b82:	d006      	beq.n	8000b92 <SD_TxDataBlock+0x62>
	for (int i = 0; i < 64; i++)
 8000b84:	693b      	ldr	r3, [r7, #16]
 8000b86:	3301      	adds	r3, #1
 8000b88:	613b      	str	r3, [r7, #16]
 8000b8a:	693b      	ldr	r3, [r7, #16]
 8000b8c:	2b3f      	cmp	r3, #63	; 0x3f
 8000b8e:	ddf0      	ble.n	8000b72 <SD_TxDataBlock+0x42>
 8000b90:	e000      	b.n	8000b94 <SD_TxDataBlock+0x64>
			break;
 8000b92:	bf00      	nop
	}

	// now wait for programming to finish. TODO: add a timeout here...
	while (SD_ReceiveByte() == 0);
 8000b94:	bf00      	nop
 8000b96:	f7ff fe73 	bl	8000880 <SD_ReceiveByte>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d0fa      	beq.n	8000b96 <SD_TxDataBlock+0x66>

	// return success if data was accepted
	if ((resp & 0x1f) == 0x05)
 8000ba0:	7dfb      	ldrb	r3, [r7, #23]
 8000ba2:	f003 031f 	and.w	r3, r3, #31
 8000ba6:	2b05      	cmp	r3, #5
 8000ba8:	d101      	bne.n	8000bae <SD_TxDataBlock+0x7e>
		return 1;
 8000baa:	2301      	movs	r3, #1
 8000bac:	e000      	b.n	8000bb0 <SD_TxDataBlock+0x80>

	return 0;
 8000bae:	2300      	movs	r3, #0
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	3718      	adds	r7, #24
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	200006ec 	.word	0x200006ec

08000bbc <SD_Write>:

uint8_t SD_Write(uint8_t* txbuffer, uint32_t address, uint32_t numblocks)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b086      	sub	sp, #24
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	60f8      	str	r0, [r7, #12]
 8000bc4:	60b9      	str	r1, [r7, #8]
 8000bc6:	607a      	str	r2, [r7, #4]
	Select();
 8000bc8:	f7ff fe2e 	bl	8000828 <Select>

	if (numblocks == 1)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	2b01      	cmp	r3, #1
 8000bd0:	d10b      	bne.n	8000bea <SD_Write+0x2e>
	{
		if (SD_SendCommand(24, address) == 0)
 8000bd2:	68b9      	ldr	r1, [r7, #8]
 8000bd4:	2018      	movs	r0, #24
 8000bd6:	f7ff fe67 	bl	80008a8 <SD_SendCommand>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d12b      	bne.n	8000c38 <SD_Write+0x7c>
		{
			SD_TxDataBlock(txbuffer, 0xfe);
 8000be0:	21fe      	movs	r1, #254	; 0xfe
 8000be2:	68f8      	ldr	r0, [r7, #12]
 8000be4:	f7ff ffa4 	bl	8000b30 <SD_TxDataBlock>
 8000be8:	e026      	b.n	8000c38 <SD_Write+0x7c>
		}
	}
	else
	{
		if (SD_SendCommand(25, address) == 0)
 8000bea:	68b9      	ldr	r1, [r7, #8]
 8000bec:	2019      	movs	r0, #25
 8000bee:	f7ff fe5b 	bl	80008a8 <SD_SendCommand>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d11f      	bne.n	8000c38 <SD_Write+0x7c>
		{
			for (int i = 0; i < numblocks; i++)
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	617b      	str	r3, [r7, #20]
 8000bfc:	e00d      	b.n	8000c1a <SD_Write+0x5e>
			{
				if (!SD_TxDataBlock(txbuffer, 0xfc))
 8000bfe:	21fc      	movs	r1, #252	; 0xfc
 8000c00:	68f8      	ldr	r0, [r7, #12]
 8000c02:	f7ff ff95 	bl	8000b30 <SD_TxDataBlock>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d00b      	beq.n	8000c24 <SD_Write+0x68>
					break;

				txbuffer += 512;
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000c12:	60fb      	str	r3, [r7, #12]
			for (int i = 0; i < numblocks; i++)
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	3301      	adds	r3, #1
 8000c18:	617b      	str	r3, [r7, #20]
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	687a      	ldr	r2, [r7, #4]
 8000c1e:	429a      	cmp	r2, r3
 8000c20:	d8ed      	bhi.n	8000bfe <SD_Write+0x42>
 8000c22:	e000      	b.n	8000c26 <SD_Write+0x6a>
					break;
 8000c24:	bf00      	nop
			}

			uint8_t token = 0xfd;
 8000c26:	23fd      	movs	r3, #253	; 0xfd
 8000c28:	74fb      	strb	r3, [r7, #19]
			HAL_SPI_Transmit(&hspi1, &token, 1, 10);
 8000c2a:	f107 0113 	add.w	r1, r7, #19
 8000c2e:	230a      	movs	r3, #10
 8000c30:	2201      	movs	r2, #1
 8000c32:	4805      	ldr	r0, [pc, #20]	; (8000c48 <SD_Write+0x8c>)
 8000c34:	f001 f8e6 	bl	8001e04 <HAL_SPI_Transmit>
		}
	}

	Deselect();
 8000c38:	f7ff fe06 	bl	8000848 <Deselect>

	return 1;
 8000c3c:	2301      	movs	r3, #1
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3718      	adds	r7, #24
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	200006ec 	.word	0x200006ec

08000c4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	607b      	str	r3, [r7, #4]
 8000c56:	4b10      	ldr	r3, [pc, #64]	; (8000c98 <HAL_MspInit+0x4c>)
 8000c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c5a:	4a0f      	ldr	r2, [pc, #60]	; (8000c98 <HAL_MspInit+0x4c>)
 8000c5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c60:	6453      	str	r3, [r2, #68]	; 0x44
 8000c62:	4b0d      	ldr	r3, [pc, #52]	; (8000c98 <HAL_MspInit+0x4c>)
 8000c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c6a:	607b      	str	r3, [r7, #4]
 8000c6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	603b      	str	r3, [r7, #0]
 8000c72:	4b09      	ldr	r3, [pc, #36]	; (8000c98 <HAL_MspInit+0x4c>)
 8000c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c76:	4a08      	ldr	r2, [pc, #32]	; (8000c98 <HAL_MspInit+0x4c>)
 8000c78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c7e:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <HAL_MspInit+0x4c>)
 8000c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c86:	603b      	str	r3, [r7, #0]
 8000c88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	370c      	adds	r7, #12
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	40023800 	.word	0x40023800

08000c9c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b08a      	sub	sp, #40	; 0x28
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca4:	f107 0314 	add.w	r3, r7, #20
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]
 8000cb2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a19      	ldr	r2, [pc, #100]	; (8000d20 <HAL_SPI_MspInit+0x84>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d12b      	bne.n	8000d16 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	613b      	str	r3, [r7, #16]
 8000cc2:	4b18      	ldr	r3, [pc, #96]	; (8000d24 <HAL_SPI_MspInit+0x88>)
 8000cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc6:	4a17      	ldr	r2, [pc, #92]	; (8000d24 <HAL_SPI_MspInit+0x88>)
 8000cc8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ccc:	6453      	str	r3, [r2, #68]	; 0x44
 8000cce:	4b15      	ldr	r3, [pc, #84]	; (8000d24 <HAL_SPI_MspInit+0x88>)
 8000cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cd6:	613b      	str	r3, [r7, #16]
 8000cd8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60fb      	str	r3, [r7, #12]
 8000cde:	4b11      	ldr	r3, [pc, #68]	; (8000d24 <HAL_SPI_MspInit+0x88>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	4a10      	ldr	r2, [pc, #64]	; (8000d24 <HAL_SPI_MspInit+0x88>)
 8000ce4:	f043 0301 	orr.w	r3, r3, #1
 8000ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cea:	4b0e      	ldr	r3, [pc, #56]	; (8000d24 <HAL_SPI_MspInit+0x88>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	f003 0301 	and.w	r3, r3, #1
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000cf6:	23e0      	movs	r3, #224	; 0xe0
 8000cf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d02:	2303      	movs	r3, #3
 8000d04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d06:	2305      	movs	r3, #5
 8000d08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0a:	f107 0314 	add.w	r3, r7, #20
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4805      	ldr	r0, [pc, #20]	; (8000d28 <HAL_SPI_MspInit+0x8c>)
 8000d12:	f000 fa3b 	bl	800118c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d16:	bf00      	nop
 8000d18:	3728      	adds	r7, #40	; 0x28
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40013000 	.word	0x40013000
 8000d24:	40023800 	.word	0x40023800
 8000d28:	40020000 	.word	0x40020000

08000d2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b08a      	sub	sp, #40	; 0x28
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d34:	f107 0314 	add.w	r3, r7, #20
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]
 8000d40:	60da      	str	r2, [r3, #12]
 8000d42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a19      	ldr	r2, [pc, #100]	; (8000db0 <HAL_UART_MspInit+0x84>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d12b      	bne.n	8000da6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	613b      	str	r3, [r7, #16]
 8000d52:	4b18      	ldr	r3, [pc, #96]	; (8000db4 <HAL_UART_MspInit+0x88>)
 8000d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d56:	4a17      	ldr	r2, [pc, #92]	; (8000db4 <HAL_UART_MspInit+0x88>)
 8000d58:	f043 0310 	orr.w	r3, r3, #16
 8000d5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d5e:	4b15      	ldr	r3, [pc, #84]	; (8000db4 <HAL_UART_MspInit+0x88>)
 8000d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d62:	f003 0310 	and.w	r3, r3, #16
 8000d66:	613b      	str	r3, [r7, #16]
 8000d68:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	60fb      	str	r3, [r7, #12]
 8000d6e:	4b11      	ldr	r3, [pc, #68]	; (8000db4 <HAL_UART_MspInit+0x88>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	4a10      	ldr	r2, [pc, #64]	; (8000db4 <HAL_UART_MspInit+0x88>)
 8000d74:	f043 0302 	orr.w	r3, r3, #2
 8000d78:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7a:	4b0e      	ldr	r3, [pc, #56]	; (8000db4 <HAL_UART_MspInit+0x88>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	f003 0302 	and.w	r3, r3, #2
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d86:	23c0      	movs	r3, #192	; 0xc0
 8000d88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d92:	2303      	movs	r3, #3
 8000d94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d96:	2307      	movs	r3, #7
 8000d98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d9a:	f107 0314 	add.w	r3, r7, #20
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4805      	ldr	r0, [pc, #20]	; (8000db8 <HAL_UART_MspInit+0x8c>)
 8000da2:	f000 f9f3 	bl	800118c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000da6:	bf00      	nop
 8000da8:	3728      	adds	r7, #40	; 0x28
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40011000 	.word	0x40011000
 8000db4:	40023800 	.word	0x40023800
 8000db8:	40020400 	.word	0x40020400

08000dbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000dc0:	bf00      	nop
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr

08000dca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dce:	e7fe      	b.n	8000dce <HardFault_Handler+0x4>

08000dd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dd4:	e7fe      	b.n	8000dd4 <MemManage_Handler+0x4>

08000dd6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dda:	e7fe      	b.n	8000dda <BusFault_Handler+0x4>

08000ddc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000de0:	e7fe      	b.n	8000de0 <UsageFault_Handler+0x4>

08000de2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000de2:	b480      	push	{r7}
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000de6:	bf00      	nop
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr

08000df0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr

08000dfe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e02:	bf00      	nop
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e10:	f000 f894 	bl	8000f3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e14:	bf00      	nop
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e1c:	4b08      	ldr	r3, [pc, #32]	; (8000e40 <SystemInit+0x28>)
 8000e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e22:	4a07      	ldr	r2, [pc, #28]	; (8000e40 <SystemInit+0x28>)
 8000e24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e2c:	4b04      	ldr	r3, [pc, #16]	; (8000e40 <SystemInit+0x28>)
 8000e2e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e32:	609a      	str	r2, [r3, #8]
#endif
}
 8000e34:	bf00      	nop
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	e000ed00 	.word	0xe000ed00

08000e44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e7c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000e48:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000e4a:	e003      	b.n	8000e54 <LoopCopyDataInit>

08000e4c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000e4c:	4b0c      	ldr	r3, [pc, #48]	; (8000e80 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000e4e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000e50:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000e52:	3104      	adds	r1, #4

08000e54 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000e54:	480b      	ldr	r0, [pc, #44]	; (8000e84 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000e56:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000e58:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000e5a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000e5c:	d3f6      	bcc.n	8000e4c <CopyDataInit>
  ldr  r2, =_sbss
 8000e5e:	4a0b      	ldr	r2, [pc, #44]	; (8000e8c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000e60:	e002      	b.n	8000e68 <LoopFillZerobss>

08000e62 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000e62:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000e64:	f842 3b04 	str.w	r3, [r2], #4

08000e68 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000e68:	4b09      	ldr	r3, [pc, #36]	; (8000e90 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000e6a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000e6c:	d3f9      	bcc.n	8000e62 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e6e:	f7ff ffd3 	bl	8000e18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e72:	f004 fb03 	bl	800547c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e76:	f7ff fb2f 	bl	80004d8 <main>
  bx  lr    
 8000e7a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e7c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000e80:	08005630 	.word	0x08005630
  ldr  r0, =_sdata
 8000e84:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000e88:	20000020 	.word	0x20000020
  ldr  r2, =_sbss
 8000e8c:	20000020 	.word	0x20000020
  ldr  r3, = _ebss
 8000e90:	20000df4 	.word	0x20000df4

08000e94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e94:	e7fe      	b.n	8000e94 <ADC_IRQHandler>
	...

08000e98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e9c:	4b0e      	ldr	r3, [pc, #56]	; (8000ed8 <HAL_Init+0x40>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a0d      	ldr	r2, [pc, #52]	; (8000ed8 <HAL_Init+0x40>)
 8000ea2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ea6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ea8:	4b0b      	ldr	r3, [pc, #44]	; (8000ed8 <HAL_Init+0x40>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a0a      	ldr	r2, [pc, #40]	; (8000ed8 <HAL_Init+0x40>)
 8000eae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000eb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eb4:	4b08      	ldr	r3, [pc, #32]	; (8000ed8 <HAL_Init+0x40>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a07      	ldr	r2, [pc, #28]	; (8000ed8 <HAL_Init+0x40>)
 8000eba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ebe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ec0:	2003      	movs	r0, #3
 8000ec2:	f000 f92f 	bl	8001124 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ec6:	2000      	movs	r0, #0
 8000ec8:	f000 f808 	bl	8000edc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ecc:	f7ff febe 	bl	8000c4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ed0:	2300      	movs	r3, #0
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40023c00 	.word	0x40023c00

08000edc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ee4:	4b12      	ldr	r3, [pc, #72]	; (8000f30 <HAL_InitTick+0x54>)
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	4b12      	ldr	r3, [pc, #72]	; (8000f34 <HAL_InitTick+0x58>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	4619      	mov	r1, r3
 8000eee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ef2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000efa:	4618      	mov	r0, r3
 8000efc:	f000 f939 	bl	8001172 <HAL_SYSTICK_Config>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	e00e      	b.n	8000f28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2b0f      	cmp	r3, #15
 8000f0e:	d80a      	bhi.n	8000f26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f10:	2200      	movs	r2, #0
 8000f12:	6879      	ldr	r1, [r7, #4]
 8000f14:	f04f 30ff 	mov.w	r0, #4294967295
 8000f18:	f000 f90f 	bl	800113a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f1c:	4a06      	ldr	r2, [pc, #24]	; (8000f38 <HAL_InitTick+0x5c>)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f22:	2300      	movs	r3, #0
 8000f24:	e000      	b.n	8000f28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f26:	2301      	movs	r3, #1
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	20000000 	.word	0x20000000
 8000f34:	20000008 	.word	0x20000008
 8000f38:	20000004 	.word	0x20000004

08000f3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f40:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <HAL_IncTick+0x20>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	461a      	mov	r2, r3
 8000f46:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <HAL_IncTick+0x24>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	4a04      	ldr	r2, [pc, #16]	; (8000f60 <HAL_IncTick+0x24>)
 8000f4e:	6013      	str	r3, [r2, #0]
}
 8000f50:	bf00      	nop
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	20000008 	.word	0x20000008
 8000f60:	20000978 	.word	0x20000978

08000f64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  return uwTick;
 8000f68:	4b03      	ldr	r3, [pc, #12]	; (8000f78 <HAL_GetTick+0x14>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	20000978 	.word	0x20000978

08000f7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f84:	f7ff ffee 	bl	8000f64 <HAL_GetTick>
 8000f88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f94:	d005      	beq.n	8000fa2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f96:	4b09      	ldr	r3, [pc, #36]	; (8000fbc <HAL_Delay+0x40>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	4413      	add	r3, r2
 8000fa0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fa2:	bf00      	nop
 8000fa4:	f7ff ffde 	bl	8000f64 <HAL_GetTick>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	68bb      	ldr	r3, [r7, #8]
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	68fa      	ldr	r2, [r7, #12]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d8f7      	bhi.n	8000fa4 <HAL_Delay+0x28>
  {
  }
}
 8000fb4:	bf00      	nop
 8000fb6:	3710      	adds	r7, #16
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	20000008 	.word	0x20000008

08000fc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f003 0307 	and.w	r3, r3, #7
 8000fce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fd0:	4b0c      	ldr	r3, [pc, #48]	; (8001004 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fd6:	68ba      	ldr	r2, [r7, #8]
 8000fd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fdc:	4013      	ands	r3, r2
 8000fde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fe8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ff0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ff2:	4a04      	ldr	r2, [pc, #16]	; (8001004 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	60d3      	str	r3, [r2, #12]
}
 8000ff8:	bf00      	nop
 8000ffa:	3714      	adds	r7, #20
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800100c:	4b04      	ldr	r3, [pc, #16]	; (8001020 <__NVIC_GetPriorityGrouping+0x18>)
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	0a1b      	lsrs	r3, r3, #8
 8001012:	f003 0307 	and.w	r3, r3, #7
}
 8001016:	4618      	mov	r0, r3
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	6039      	str	r1, [r7, #0]
 800102e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001034:	2b00      	cmp	r3, #0
 8001036:	db0a      	blt.n	800104e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	b2da      	uxtb	r2, r3
 800103c:	490c      	ldr	r1, [pc, #48]	; (8001070 <__NVIC_SetPriority+0x4c>)
 800103e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001042:	0112      	lsls	r2, r2, #4
 8001044:	b2d2      	uxtb	r2, r2
 8001046:	440b      	add	r3, r1
 8001048:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800104c:	e00a      	b.n	8001064 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	b2da      	uxtb	r2, r3
 8001052:	4908      	ldr	r1, [pc, #32]	; (8001074 <__NVIC_SetPriority+0x50>)
 8001054:	79fb      	ldrb	r3, [r7, #7]
 8001056:	f003 030f 	and.w	r3, r3, #15
 800105a:	3b04      	subs	r3, #4
 800105c:	0112      	lsls	r2, r2, #4
 800105e:	b2d2      	uxtb	r2, r2
 8001060:	440b      	add	r3, r1
 8001062:	761a      	strb	r2, [r3, #24]
}
 8001064:	bf00      	nop
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	e000e100 	.word	0xe000e100
 8001074:	e000ed00 	.word	0xe000ed00

08001078 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001078:	b480      	push	{r7}
 800107a:	b089      	sub	sp, #36	; 0x24
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	60b9      	str	r1, [r7, #8]
 8001082:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	f003 0307 	and.w	r3, r3, #7
 800108a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	f1c3 0307 	rsb	r3, r3, #7
 8001092:	2b04      	cmp	r3, #4
 8001094:	bf28      	it	cs
 8001096:	2304      	movcs	r3, #4
 8001098:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	3304      	adds	r3, #4
 800109e:	2b06      	cmp	r3, #6
 80010a0:	d902      	bls.n	80010a8 <NVIC_EncodePriority+0x30>
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	3b03      	subs	r3, #3
 80010a6:	e000      	b.n	80010aa <NVIC_EncodePriority+0x32>
 80010a8:	2300      	movs	r3, #0
 80010aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ac:	f04f 32ff 	mov.w	r2, #4294967295
 80010b0:	69bb      	ldr	r3, [r7, #24]
 80010b2:	fa02 f303 	lsl.w	r3, r2, r3
 80010b6:	43da      	mvns	r2, r3
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	401a      	ands	r2, r3
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010c0:	f04f 31ff 	mov.w	r1, #4294967295
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	fa01 f303 	lsl.w	r3, r1, r3
 80010ca:	43d9      	mvns	r1, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d0:	4313      	orrs	r3, r2
         );
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3724      	adds	r7, #36	; 0x24
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
	...

080010e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	3b01      	subs	r3, #1
 80010ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010f0:	d301      	bcc.n	80010f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010f2:	2301      	movs	r3, #1
 80010f4:	e00f      	b.n	8001116 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010f6:	4a0a      	ldr	r2, [pc, #40]	; (8001120 <SysTick_Config+0x40>)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	3b01      	subs	r3, #1
 80010fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010fe:	210f      	movs	r1, #15
 8001100:	f04f 30ff 	mov.w	r0, #4294967295
 8001104:	f7ff ff8e 	bl	8001024 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001108:	4b05      	ldr	r3, [pc, #20]	; (8001120 <SysTick_Config+0x40>)
 800110a:	2200      	movs	r2, #0
 800110c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800110e:	4b04      	ldr	r3, [pc, #16]	; (8001120 <SysTick_Config+0x40>)
 8001110:	2207      	movs	r2, #7
 8001112:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001114:	2300      	movs	r3, #0
}
 8001116:	4618      	mov	r0, r3
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	e000e010 	.word	0xe000e010

08001124 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	f7ff ff47 	bl	8000fc0 <__NVIC_SetPriorityGrouping>
}
 8001132:	bf00      	nop
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800113a:	b580      	push	{r7, lr}
 800113c:	b086      	sub	sp, #24
 800113e:	af00      	add	r7, sp, #0
 8001140:	4603      	mov	r3, r0
 8001142:	60b9      	str	r1, [r7, #8]
 8001144:	607a      	str	r2, [r7, #4]
 8001146:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001148:	2300      	movs	r3, #0
 800114a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800114c:	f7ff ff5c 	bl	8001008 <__NVIC_GetPriorityGrouping>
 8001150:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001152:	687a      	ldr	r2, [r7, #4]
 8001154:	68b9      	ldr	r1, [r7, #8]
 8001156:	6978      	ldr	r0, [r7, #20]
 8001158:	f7ff ff8e 	bl	8001078 <NVIC_EncodePriority>
 800115c:	4602      	mov	r2, r0
 800115e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001162:	4611      	mov	r1, r2
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff ff5d 	bl	8001024 <__NVIC_SetPriority>
}
 800116a:	bf00      	nop
 800116c:	3718      	adds	r7, #24
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b082      	sub	sp, #8
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f7ff ffb0 	bl	80010e0 <SysTick_Config>
 8001180:	4603      	mov	r3, r0
}
 8001182:	4618      	mov	r0, r3
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
	...

0800118c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800118c:	b480      	push	{r7}
 800118e:	b089      	sub	sp, #36	; 0x24
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001196:	2300      	movs	r3, #0
 8001198:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800119a:	2300      	movs	r3, #0
 800119c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800119e:	2300      	movs	r3, #0
 80011a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011a2:	2300      	movs	r3, #0
 80011a4:	61fb      	str	r3, [r7, #28]
 80011a6:	e159      	b.n	800145c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011a8:	2201      	movs	r2, #1
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	697a      	ldr	r2, [r7, #20]
 80011b8:	4013      	ands	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011bc:	693a      	ldr	r2, [r7, #16]
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	f040 8148 	bne.w	8001456 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d00b      	beq.n	80011e6 <HAL_GPIO_Init+0x5a>
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	d007      	beq.n	80011e6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011da:	2b11      	cmp	r3, #17
 80011dc:	d003      	beq.n	80011e6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	2b12      	cmp	r3, #18
 80011e4:	d130      	bne.n	8001248 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	2203      	movs	r2, #3
 80011f2:	fa02 f303 	lsl.w	r3, r2, r3
 80011f6:	43db      	mvns	r3, r3
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	4013      	ands	r3, r2
 80011fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	68da      	ldr	r2, [r3, #12]
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	4313      	orrs	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800121c:	2201      	movs	r2, #1
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	43db      	mvns	r3, r3
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	4013      	ands	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	091b      	lsrs	r3, r3, #4
 8001232:	f003 0201 	and.w	r2, r3, #1
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4313      	orrs	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	2203      	movs	r2, #3
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	43db      	mvns	r3, r3
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	4013      	ands	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	689a      	ldr	r2, [r3, #8]
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	4313      	orrs	r3, r2
 8001270:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	2b02      	cmp	r3, #2
 800127e:	d003      	beq.n	8001288 <HAL_GPIO_Init+0xfc>
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	2b12      	cmp	r3, #18
 8001286:	d123      	bne.n	80012d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	08da      	lsrs	r2, r3, #3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	3208      	adds	r2, #8
 8001290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001294:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	f003 0307 	and.w	r3, r3, #7
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	220f      	movs	r2, #15
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	43db      	mvns	r3, r3
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	4013      	ands	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	691a      	ldr	r2, [r3, #16]
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	f003 0307 	and.w	r3, r3, #7
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	4313      	orrs	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	08da      	lsrs	r2, r3, #3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	3208      	adds	r2, #8
 80012ca:	69b9      	ldr	r1, [r7, #24]
 80012cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	2203      	movs	r2, #3
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	43db      	mvns	r3, r3
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	4013      	ands	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f003 0203 	and.w	r2, r3, #3
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800130c:	2b00      	cmp	r3, #0
 800130e:	f000 80a2 	beq.w	8001456 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	60fb      	str	r3, [r7, #12]
 8001316:	4b56      	ldr	r3, [pc, #344]	; (8001470 <HAL_GPIO_Init+0x2e4>)
 8001318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131a:	4a55      	ldr	r2, [pc, #340]	; (8001470 <HAL_GPIO_Init+0x2e4>)
 800131c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001320:	6453      	str	r3, [r2, #68]	; 0x44
 8001322:	4b53      	ldr	r3, [pc, #332]	; (8001470 <HAL_GPIO_Init+0x2e4>)
 8001324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001326:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800132e:	4a51      	ldr	r2, [pc, #324]	; (8001474 <HAL_GPIO_Init+0x2e8>)
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	089b      	lsrs	r3, r3, #2
 8001334:	3302      	adds	r3, #2
 8001336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800133a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	f003 0303 	and.w	r3, r3, #3
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	220f      	movs	r2, #15
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	43db      	mvns	r3, r3
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	4013      	ands	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a48      	ldr	r2, [pc, #288]	; (8001478 <HAL_GPIO_Init+0x2ec>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d019      	beq.n	800138e <HAL_GPIO_Init+0x202>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a47      	ldr	r2, [pc, #284]	; (800147c <HAL_GPIO_Init+0x2f0>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d013      	beq.n	800138a <HAL_GPIO_Init+0x1fe>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a46      	ldr	r2, [pc, #280]	; (8001480 <HAL_GPIO_Init+0x2f4>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d00d      	beq.n	8001386 <HAL_GPIO_Init+0x1fa>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a45      	ldr	r2, [pc, #276]	; (8001484 <HAL_GPIO_Init+0x2f8>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d007      	beq.n	8001382 <HAL_GPIO_Init+0x1f6>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a44      	ldr	r2, [pc, #272]	; (8001488 <HAL_GPIO_Init+0x2fc>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d101      	bne.n	800137e <HAL_GPIO_Init+0x1f2>
 800137a:	2304      	movs	r3, #4
 800137c:	e008      	b.n	8001390 <HAL_GPIO_Init+0x204>
 800137e:	2307      	movs	r3, #7
 8001380:	e006      	b.n	8001390 <HAL_GPIO_Init+0x204>
 8001382:	2303      	movs	r3, #3
 8001384:	e004      	b.n	8001390 <HAL_GPIO_Init+0x204>
 8001386:	2302      	movs	r3, #2
 8001388:	e002      	b.n	8001390 <HAL_GPIO_Init+0x204>
 800138a:	2301      	movs	r3, #1
 800138c:	e000      	b.n	8001390 <HAL_GPIO_Init+0x204>
 800138e:	2300      	movs	r3, #0
 8001390:	69fa      	ldr	r2, [r7, #28]
 8001392:	f002 0203 	and.w	r2, r2, #3
 8001396:	0092      	lsls	r2, r2, #2
 8001398:	4093      	lsls	r3, r2
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	4313      	orrs	r3, r2
 800139e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013a0:	4934      	ldr	r1, [pc, #208]	; (8001474 <HAL_GPIO_Init+0x2e8>)
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	089b      	lsrs	r3, r3, #2
 80013a6:	3302      	adds	r3, #2
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013ae:	4b37      	ldr	r3, [pc, #220]	; (800148c <HAL_GPIO_Init+0x300>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	43db      	mvns	r3, r3
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	4013      	ands	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d003      	beq.n	80013d2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013d2:	4a2e      	ldr	r2, [pc, #184]	; (800148c <HAL_GPIO_Init+0x300>)
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80013d8:	4b2c      	ldr	r3, [pc, #176]	; (800148c <HAL_GPIO_Init+0x300>)
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	43db      	mvns	r3, r3
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	4013      	ands	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d003      	beq.n	80013fc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013fc:	4a23      	ldr	r2, [pc, #140]	; (800148c <HAL_GPIO_Init+0x300>)
 80013fe:	69bb      	ldr	r3, [r7, #24]
 8001400:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001402:	4b22      	ldr	r3, [pc, #136]	; (800148c <HAL_GPIO_Init+0x300>)
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	43db      	mvns	r3, r3
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	4013      	ands	r3, r2
 8001410:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d003      	beq.n	8001426 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	4313      	orrs	r3, r2
 8001424:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001426:	4a19      	ldr	r2, [pc, #100]	; (800148c <HAL_GPIO_Init+0x300>)
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800142c:	4b17      	ldr	r3, [pc, #92]	; (800148c <HAL_GPIO_Init+0x300>)
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	43db      	mvns	r3, r3
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	4013      	ands	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001444:	2b00      	cmp	r3, #0
 8001446:	d003      	beq.n	8001450 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	4313      	orrs	r3, r2
 800144e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001450:	4a0e      	ldr	r2, [pc, #56]	; (800148c <HAL_GPIO_Init+0x300>)
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	3301      	adds	r3, #1
 800145a:	61fb      	str	r3, [r7, #28]
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	2b0f      	cmp	r3, #15
 8001460:	f67f aea2 	bls.w	80011a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001464:	bf00      	nop
 8001466:	3724      	adds	r7, #36	; 0x24
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr
 8001470:	40023800 	.word	0x40023800
 8001474:	40013800 	.word	0x40013800
 8001478:	40020000 	.word	0x40020000
 800147c:	40020400 	.word	0x40020400
 8001480:	40020800 	.word	0x40020800
 8001484:	40020c00 	.word	0x40020c00
 8001488:	40021000 	.word	0x40021000
 800148c:	40013c00 	.word	0x40013c00

08001490 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	460b      	mov	r3, r1
 800149a:	807b      	strh	r3, [r7, #2]
 800149c:	4613      	mov	r3, r2
 800149e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014a0:	787b      	ldrb	r3, [r7, #1]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d003      	beq.n	80014ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014a6:	887a      	ldrh	r2, [r7, #2]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014ac:	e003      	b.n	80014b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014ae:	887b      	ldrh	r3, [r7, #2]
 80014b0:	041a      	lsls	r2, r3, #16
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	619a      	str	r2, [r3, #24]
}
 80014b6:	bf00      	nop
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
	...

080014c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b086      	sub	sp, #24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d101      	bne.n	80014d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e25b      	b.n	800198e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 0301 	and.w	r3, r3, #1
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d075      	beq.n	80015ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014e2:	4ba3      	ldr	r3, [pc, #652]	; (8001770 <HAL_RCC_OscConfig+0x2ac>)
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	f003 030c 	and.w	r3, r3, #12
 80014ea:	2b04      	cmp	r3, #4
 80014ec:	d00c      	beq.n	8001508 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014ee:	4ba0      	ldr	r3, [pc, #640]	; (8001770 <HAL_RCC_OscConfig+0x2ac>)
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014f6:	2b08      	cmp	r3, #8
 80014f8:	d112      	bne.n	8001520 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014fa:	4b9d      	ldr	r3, [pc, #628]	; (8001770 <HAL_RCC_OscConfig+0x2ac>)
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001502:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001506:	d10b      	bne.n	8001520 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001508:	4b99      	ldr	r3, [pc, #612]	; (8001770 <HAL_RCC_OscConfig+0x2ac>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001510:	2b00      	cmp	r3, #0
 8001512:	d05b      	beq.n	80015cc <HAL_RCC_OscConfig+0x108>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d157      	bne.n	80015cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	e236      	b.n	800198e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001528:	d106      	bne.n	8001538 <HAL_RCC_OscConfig+0x74>
 800152a:	4b91      	ldr	r3, [pc, #580]	; (8001770 <HAL_RCC_OscConfig+0x2ac>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a90      	ldr	r2, [pc, #576]	; (8001770 <HAL_RCC_OscConfig+0x2ac>)
 8001530:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001534:	6013      	str	r3, [r2, #0]
 8001536:	e01d      	b.n	8001574 <HAL_RCC_OscConfig+0xb0>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001540:	d10c      	bne.n	800155c <HAL_RCC_OscConfig+0x98>
 8001542:	4b8b      	ldr	r3, [pc, #556]	; (8001770 <HAL_RCC_OscConfig+0x2ac>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a8a      	ldr	r2, [pc, #552]	; (8001770 <HAL_RCC_OscConfig+0x2ac>)
 8001548:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800154c:	6013      	str	r3, [r2, #0]
 800154e:	4b88      	ldr	r3, [pc, #544]	; (8001770 <HAL_RCC_OscConfig+0x2ac>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a87      	ldr	r2, [pc, #540]	; (8001770 <HAL_RCC_OscConfig+0x2ac>)
 8001554:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001558:	6013      	str	r3, [r2, #0]
 800155a:	e00b      	b.n	8001574 <HAL_RCC_OscConfig+0xb0>
 800155c:	4b84      	ldr	r3, [pc, #528]	; (8001770 <HAL_RCC_OscConfig+0x2ac>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a83      	ldr	r2, [pc, #524]	; (8001770 <HAL_RCC_OscConfig+0x2ac>)
 8001562:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001566:	6013      	str	r3, [r2, #0]
 8001568:	4b81      	ldr	r3, [pc, #516]	; (8001770 <HAL_RCC_OscConfig+0x2ac>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a80      	ldr	r2, [pc, #512]	; (8001770 <HAL_RCC_OscConfig+0x2ac>)
 800156e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001572:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d013      	beq.n	80015a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800157c:	f7ff fcf2 	bl	8000f64 <HAL_GetTick>
 8001580:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001582:	e008      	b.n	8001596 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001584:	f7ff fcee 	bl	8000f64 <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	2b64      	cmp	r3, #100	; 0x64
 8001590:	d901      	bls.n	8001596 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001592:	2303      	movs	r3, #3
 8001594:	e1fb      	b.n	800198e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001596:	4b76      	ldr	r3, [pc, #472]	; (8001770 <HAL_RCC_OscConfig+0x2ac>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d0f0      	beq.n	8001584 <HAL_RCC_OscConfig+0xc0>
 80015a2:	e014      	b.n	80015ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a4:	f7ff fcde 	bl	8000f64 <HAL_GetTick>
 80015a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015aa:	e008      	b.n	80015be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015ac:	f7ff fcda 	bl	8000f64 <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	2b64      	cmp	r3, #100	; 0x64
 80015b8:	d901      	bls.n	80015be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	e1e7      	b.n	800198e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015be:	4b6c      	ldr	r3, [pc, #432]	; (8001770 <HAL_RCC_OscConfig+0x2ac>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d1f0      	bne.n	80015ac <HAL_RCC_OscConfig+0xe8>
 80015ca:	e000      	b.n	80015ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0302 	and.w	r3, r3, #2
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d063      	beq.n	80016a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015da:	4b65      	ldr	r3, [pc, #404]	; (8001770 <HAL_RCC_OscConfig+0x2ac>)
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	f003 030c 	and.w	r3, r3, #12
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d00b      	beq.n	80015fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015e6:	4b62      	ldr	r3, [pc, #392]	; (8001770 <HAL_RCC_OscConfig+0x2ac>)
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015ee:	2b08      	cmp	r3, #8
 80015f0:	d11c      	bne.n	800162c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015f2:	4b5f      	ldr	r3, [pc, #380]	; (8001770 <HAL_RCC_OscConfig+0x2ac>)
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d116      	bne.n	800162c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015fe:	4b5c      	ldr	r3, [pc, #368]	; (8001770 <HAL_RCC_OscConfig+0x2ac>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0302 	and.w	r3, r3, #2
 8001606:	2b00      	cmp	r3, #0
 8001608:	d005      	beq.n	8001616 <HAL_RCC_OscConfig+0x152>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	68db      	ldr	r3, [r3, #12]
 800160e:	2b01      	cmp	r3, #1
 8001610:	d001      	beq.n	8001616 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e1bb      	b.n	800198e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001616:	4b56      	ldr	r3, [pc, #344]	; (8001770 <HAL_RCC_OscConfig+0x2ac>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	691b      	ldr	r3, [r3, #16]
 8001622:	00db      	lsls	r3, r3, #3
 8001624:	4952      	ldr	r1, [pc, #328]	; (8001770 <HAL_RCC_OscConfig+0x2ac>)
 8001626:	4313      	orrs	r3, r2
 8001628:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800162a:	e03a      	b.n	80016a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d020      	beq.n	8001676 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001634:	4b4f      	ldr	r3, [pc, #316]	; (8001774 <HAL_RCC_OscConfig+0x2b0>)
 8001636:	2201      	movs	r2, #1
 8001638:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800163a:	f7ff fc93 	bl	8000f64 <HAL_GetTick>
 800163e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001640:	e008      	b.n	8001654 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001642:	f7ff fc8f 	bl	8000f64 <HAL_GetTick>
 8001646:	4602      	mov	r2, r0
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	2b02      	cmp	r3, #2
 800164e:	d901      	bls.n	8001654 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001650:	2303      	movs	r3, #3
 8001652:	e19c      	b.n	800198e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001654:	4b46      	ldr	r3, [pc, #280]	; (8001770 <HAL_RCC_OscConfig+0x2ac>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 0302 	and.w	r3, r3, #2
 800165c:	2b00      	cmp	r3, #0
 800165e:	d0f0      	beq.n	8001642 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001660:	4b43      	ldr	r3, [pc, #268]	; (8001770 <HAL_RCC_OscConfig+0x2ac>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	691b      	ldr	r3, [r3, #16]
 800166c:	00db      	lsls	r3, r3, #3
 800166e:	4940      	ldr	r1, [pc, #256]	; (8001770 <HAL_RCC_OscConfig+0x2ac>)
 8001670:	4313      	orrs	r3, r2
 8001672:	600b      	str	r3, [r1, #0]
 8001674:	e015      	b.n	80016a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001676:	4b3f      	ldr	r3, [pc, #252]	; (8001774 <HAL_RCC_OscConfig+0x2b0>)
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800167c:	f7ff fc72 	bl	8000f64 <HAL_GetTick>
 8001680:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001682:	e008      	b.n	8001696 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001684:	f7ff fc6e 	bl	8000f64 <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b02      	cmp	r3, #2
 8001690:	d901      	bls.n	8001696 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e17b      	b.n	800198e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001696:	4b36      	ldr	r3, [pc, #216]	; (8001770 <HAL_RCC_OscConfig+0x2ac>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0302 	and.w	r3, r3, #2
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d1f0      	bne.n	8001684 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0308 	and.w	r3, r3, #8
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d030      	beq.n	8001710 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	695b      	ldr	r3, [r3, #20]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d016      	beq.n	80016e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016b6:	4b30      	ldr	r3, [pc, #192]	; (8001778 <HAL_RCC_OscConfig+0x2b4>)
 80016b8:	2201      	movs	r2, #1
 80016ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016bc:	f7ff fc52 	bl	8000f64 <HAL_GetTick>
 80016c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016c2:	e008      	b.n	80016d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016c4:	f7ff fc4e 	bl	8000f64 <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e15b      	b.n	800198e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016d6:	4b26      	ldr	r3, [pc, #152]	; (8001770 <HAL_RCC_OscConfig+0x2ac>)
 80016d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016da:	f003 0302 	and.w	r3, r3, #2
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d0f0      	beq.n	80016c4 <HAL_RCC_OscConfig+0x200>
 80016e2:	e015      	b.n	8001710 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016e4:	4b24      	ldr	r3, [pc, #144]	; (8001778 <HAL_RCC_OscConfig+0x2b4>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ea:	f7ff fc3b 	bl	8000f64 <HAL_GetTick>
 80016ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016f0:	e008      	b.n	8001704 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016f2:	f7ff fc37 	bl	8000f64 <HAL_GetTick>
 80016f6:	4602      	mov	r2, r0
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d901      	bls.n	8001704 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001700:	2303      	movs	r3, #3
 8001702:	e144      	b.n	800198e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001704:	4b1a      	ldr	r3, [pc, #104]	; (8001770 <HAL_RCC_OscConfig+0x2ac>)
 8001706:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001708:	f003 0302 	and.w	r3, r3, #2
 800170c:	2b00      	cmp	r3, #0
 800170e:	d1f0      	bne.n	80016f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 0304 	and.w	r3, r3, #4
 8001718:	2b00      	cmp	r3, #0
 800171a:	f000 80a0 	beq.w	800185e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800171e:	2300      	movs	r3, #0
 8001720:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001722:	4b13      	ldr	r3, [pc, #76]	; (8001770 <HAL_RCC_OscConfig+0x2ac>)
 8001724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d10f      	bne.n	800174e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	60bb      	str	r3, [r7, #8]
 8001732:	4b0f      	ldr	r3, [pc, #60]	; (8001770 <HAL_RCC_OscConfig+0x2ac>)
 8001734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001736:	4a0e      	ldr	r2, [pc, #56]	; (8001770 <HAL_RCC_OscConfig+0x2ac>)
 8001738:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800173c:	6413      	str	r3, [r2, #64]	; 0x40
 800173e:	4b0c      	ldr	r3, [pc, #48]	; (8001770 <HAL_RCC_OscConfig+0x2ac>)
 8001740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001746:	60bb      	str	r3, [r7, #8]
 8001748:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800174a:	2301      	movs	r3, #1
 800174c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800174e:	4b0b      	ldr	r3, [pc, #44]	; (800177c <HAL_RCC_OscConfig+0x2b8>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001756:	2b00      	cmp	r3, #0
 8001758:	d121      	bne.n	800179e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800175a:	4b08      	ldr	r3, [pc, #32]	; (800177c <HAL_RCC_OscConfig+0x2b8>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a07      	ldr	r2, [pc, #28]	; (800177c <HAL_RCC_OscConfig+0x2b8>)
 8001760:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001764:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001766:	f7ff fbfd 	bl	8000f64 <HAL_GetTick>
 800176a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800176c:	e011      	b.n	8001792 <HAL_RCC_OscConfig+0x2ce>
 800176e:	bf00      	nop
 8001770:	40023800 	.word	0x40023800
 8001774:	42470000 	.word	0x42470000
 8001778:	42470e80 	.word	0x42470e80
 800177c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001780:	f7ff fbf0 	bl	8000f64 <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b02      	cmp	r3, #2
 800178c:	d901      	bls.n	8001792 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e0fd      	b.n	800198e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001792:	4b81      	ldr	r3, [pc, #516]	; (8001998 <HAL_RCC_OscConfig+0x4d4>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800179a:	2b00      	cmp	r3, #0
 800179c:	d0f0      	beq.n	8001780 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d106      	bne.n	80017b4 <HAL_RCC_OscConfig+0x2f0>
 80017a6:	4b7d      	ldr	r3, [pc, #500]	; (800199c <HAL_RCC_OscConfig+0x4d8>)
 80017a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017aa:	4a7c      	ldr	r2, [pc, #496]	; (800199c <HAL_RCC_OscConfig+0x4d8>)
 80017ac:	f043 0301 	orr.w	r3, r3, #1
 80017b0:	6713      	str	r3, [r2, #112]	; 0x70
 80017b2:	e01c      	b.n	80017ee <HAL_RCC_OscConfig+0x32a>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	2b05      	cmp	r3, #5
 80017ba:	d10c      	bne.n	80017d6 <HAL_RCC_OscConfig+0x312>
 80017bc:	4b77      	ldr	r3, [pc, #476]	; (800199c <HAL_RCC_OscConfig+0x4d8>)
 80017be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017c0:	4a76      	ldr	r2, [pc, #472]	; (800199c <HAL_RCC_OscConfig+0x4d8>)
 80017c2:	f043 0304 	orr.w	r3, r3, #4
 80017c6:	6713      	str	r3, [r2, #112]	; 0x70
 80017c8:	4b74      	ldr	r3, [pc, #464]	; (800199c <HAL_RCC_OscConfig+0x4d8>)
 80017ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017cc:	4a73      	ldr	r2, [pc, #460]	; (800199c <HAL_RCC_OscConfig+0x4d8>)
 80017ce:	f043 0301 	orr.w	r3, r3, #1
 80017d2:	6713      	str	r3, [r2, #112]	; 0x70
 80017d4:	e00b      	b.n	80017ee <HAL_RCC_OscConfig+0x32a>
 80017d6:	4b71      	ldr	r3, [pc, #452]	; (800199c <HAL_RCC_OscConfig+0x4d8>)
 80017d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017da:	4a70      	ldr	r2, [pc, #448]	; (800199c <HAL_RCC_OscConfig+0x4d8>)
 80017dc:	f023 0301 	bic.w	r3, r3, #1
 80017e0:	6713      	str	r3, [r2, #112]	; 0x70
 80017e2:	4b6e      	ldr	r3, [pc, #440]	; (800199c <HAL_RCC_OscConfig+0x4d8>)
 80017e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017e6:	4a6d      	ldr	r2, [pc, #436]	; (800199c <HAL_RCC_OscConfig+0x4d8>)
 80017e8:	f023 0304 	bic.w	r3, r3, #4
 80017ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d015      	beq.n	8001822 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017f6:	f7ff fbb5 	bl	8000f64 <HAL_GetTick>
 80017fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017fc:	e00a      	b.n	8001814 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017fe:	f7ff fbb1 	bl	8000f64 <HAL_GetTick>
 8001802:	4602      	mov	r2, r0
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	f241 3288 	movw	r2, #5000	; 0x1388
 800180c:	4293      	cmp	r3, r2
 800180e:	d901      	bls.n	8001814 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001810:	2303      	movs	r3, #3
 8001812:	e0bc      	b.n	800198e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001814:	4b61      	ldr	r3, [pc, #388]	; (800199c <HAL_RCC_OscConfig+0x4d8>)
 8001816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001818:	f003 0302 	and.w	r3, r3, #2
 800181c:	2b00      	cmp	r3, #0
 800181e:	d0ee      	beq.n	80017fe <HAL_RCC_OscConfig+0x33a>
 8001820:	e014      	b.n	800184c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001822:	f7ff fb9f 	bl	8000f64 <HAL_GetTick>
 8001826:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001828:	e00a      	b.n	8001840 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800182a:	f7ff fb9b 	bl	8000f64 <HAL_GetTick>
 800182e:	4602      	mov	r2, r0
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	f241 3288 	movw	r2, #5000	; 0x1388
 8001838:	4293      	cmp	r3, r2
 800183a:	d901      	bls.n	8001840 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800183c:	2303      	movs	r3, #3
 800183e:	e0a6      	b.n	800198e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001840:	4b56      	ldr	r3, [pc, #344]	; (800199c <HAL_RCC_OscConfig+0x4d8>)
 8001842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001844:	f003 0302 	and.w	r3, r3, #2
 8001848:	2b00      	cmp	r3, #0
 800184a:	d1ee      	bne.n	800182a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800184c:	7dfb      	ldrb	r3, [r7, #23]
 800184e:	2b01      	cmp	r3, #1
 8001850:	d105      	bne.n	800185e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001852:	4b52      	ldr	r3, [pc, #328]	; (800199c <HAL_RCC_OscConfig+0x4d8>)
 8001854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001856:	4a51      	ldr	r2, [pc, #324]	; (800199c <HAL_RCC_OscConfig+0x4d8>)
 8001858:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800185c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	699b      	ldr	r3, [r3, #24]
 8001862:	2b00      	cmp	r3, #0
 8001864:	f000 8092 	beq.w	800198c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001868:	4b4c      	ldr	r3, [pc, #304]	; (800199c <HAL_RCC_OscConfig+0x4d8>)
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	f003 030c 	and.w	r3, r3, #12
 8001870:	2b08      	cmp	r3, #8
 8001872:	d05c      	beq.n	800192e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	699b      	ldr	r3, [r3, #24]
 8001878:	2b02      	cmp	r3, #2
 800187a:	d141      	bne.n	8001900 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800187c:	4b48      	ldr	r3, [pc, #288]	; (80019a0 <HAL_RCC_OscConfig+0x4dc>)
 800187e:	2200      	movs	r2, #0
 8001880:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001882:	f7ff fb6f 	bl	8000f64 <HAL_GetTick>
 8001886:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001888:	e008      	b.n	800189c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800188a:	f7ff fb6b 	bl	8000f64 <HAL_GetTick>
 800188e:	4602      	mov	r2, r0
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	2b02      	cmp	r3, #2
 8001896:	d901      	bls.n	800189c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001898:	2303      	movs	r3, #3
 800189a:	e078      	b.n	800198e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800189c:	4b3f      	ldr	r3, [pc, #252]	; (800199c <HAL_RCC_OscConfig+0x4d8>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d1f0      	bne.n	800188a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	69da      	ldr	r2, [r3, #28]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6a1b      	ldr	r3, [r3, #32]
 80018b0:	431a      	orrs	r2, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b6:	019b      	lsls	r3, r3, #6
 80018b8:	431a      	orrs	r2, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018be:	085b      	lsrs	r3, r3, #1
 80018c0:	3b01      	subs	r3, #1
 80018c2:	041b      	lsls	r3, r3, #16
 80018c4:	431a      	orrs	r2, r3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ca:	061b      	lsls	r3, r3, #24
 80018cc:	4933      	ldr	r1, [pc, #204]	; (800199c <HAL_RCC_OscConfig+0x4d8>)
 80018ce:	4313      	orrs	r3, r2
 80018d0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018d2:	4b33      	ldr	r3, [pc, #204]	; (80019a0 <HAL_RCC_OscConfig+0x4dc>)
 80018d4:	2201      	movs	r2, #1
 80018d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d8:	f7ff fb44 	bl	8000f64 <HAL_GetTick>
 80018dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018de:	e008      	b.n	80018f2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018e0:	f7ff fb40 	bl	8000f64 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e04d      	b.n	800198e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018f2:	4b2a      	ldr	r3, [pc, #168]	; (800199c <HAL_RCC_OscConfig+0x4d8>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d0f0      	beq.n	80018e0 <HAL_RCC_OscConfig+0x41c>
 80018fe:	e045      	b.n	800198c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001900:	4b27      	ldr	r3, [pc, #156]	; (80019a0 <HAL_RCC_OscConfig+0x4dc>)
 8001902:	2200      	movs	r2, #0
 8001904:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001906:	f7ff fb2d 	bl	8000f64 <HAL_GetTick>
 800190a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800190c:	e008      	b.n	8001920 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800190e:	f7ff fb29 	bl	8000f64 <HAL_GetTick>
 8001912:	4602      	mov	r2, r0
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	2b02      	cmp	r3, #2
 800191a:	d901      	bls.n	8001920 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800191c:	2303      	movs	r3, #3
 800191e:	e036      	b.n	800198e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001920:	4b1e      	ldr	r3, [pc, #120]	; (800199c <HAL_RCC_OscConfig+0x4d8>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001928:	2b00      	cmp	r3, #0
 800192a:	d1f0      	bne.n	800190e <HAL_RCC_OscConfig+0x44a>
 800192c:	e02e      	b.n	800198c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	699b      	ldr	r3, [r3, #24]
 8001932:	2b01      	cmp	r3, #1
 8001934:	d101      	bne.n	800193a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e029      	b.n	800198e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800193a:	4b18      	ldr	r3, [pc, #96]	; (800199c <HAL_RCC_OscConfig+0x4d8>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	69db      	ldr	r3, [r3, #28]
 800194a:	429a      	cmp	r2, r3
 800194c:	d11c      	bne.n	8001988 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001958:	429a      	cmp	r2, r3
 800195a:	d115      	bne.n	8001988 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800195c:	68fa      	ldr	r2, [r7, #12]
 800195e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001962:	4013      	ands	r3, r2
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001968:	4293      	cmp	r3, r2
 800196a:	d10d      	bne.n	8001988 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001976:	429a      	cmp	r2, r3
 8001978:	d106      	bne.n	8001988 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001984:	429a      	cmp	r2, r3
 8001986:	d001      	beq.n	800198c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e000      	b.n	800198e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	3718      	adds	r7, #24
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	40007000 	.word	0x40007000
 800199c:	40023800 	.word	0x40023800
 80019a0:	42470060 	.word	0x42470060

080019a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d101      	bne.n	80019b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e0cc      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019b8:	4b68      	ldr	r3, [pc, #416]	; (8001b5c <HAL_RCC_ClockConfig+0x1b8>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 030f 	and.w	r3, r3, #15
 80019c0:	683a      	ldr	r2, [r7, #0]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d90c      	bls.n	80019e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019c6:	4b65      	ldr	r3, [pc, #404]	; (8001b5c <HAL_RCC_ClockConfig+0x1b8>)
 80019c8:	683a      	ldr	r2, [r7, #0]
 80019ca:	b2d2      	uxtb	r2, r2
 80019cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ce:	4b63      	ldr	r3, [pc, #396]	; (8001b5c <HAL_RCC_ClockConfig+0x1b8>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 030f 	and.w	r3, r3, #15
 80019d6:	683a      	ldr	r2, [r7, #0]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d001      	beq.n	80019e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e0b8      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0302 	and.w	r3, r3, #2
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d020      	beq.n	8001a2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0304 	and.w	r3, r3, #4
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d005      	beq.n	8001a04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019f8:	4b59      	ldr	r3, [pc, #356]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	4a58      	ldr	r2, [pc, #352]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 80019fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0308 	and.w	r3, r3, #8
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d005      	beq.n	8001a1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a10:	4b53      	ldr	r3, [pc, #332]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	4a52      	ldr	r2, [pc, #328]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a1c:	4b50      	ldr	r3, [pc, #320]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	494d      	ldr	r1, [pc, #308]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d044      	beq.n	8001ac4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d107      	bne.n	8001a52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a42:	4b47      	ldr	r3, [pc, #284]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d119      	bne.n	8001a82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e07f      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d003      	beq.n	8001a62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a5e:	2b03      	cmp	r3, #3
 8001a60:	d107      	bne.n	8001a72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a62:	4b3f      	ldr	r3, [pc, #252]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d109      	bne.n	8001a82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e06f      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a72:	4b3b      	ldr	r3, [pc, #236]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d101      	bne.n	8001a82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e067      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a82:	4b37      	ldr	r3, [pc, #220]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	f023 0203 	bic.w	r2, r3, #3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	4934      	ldr	r1, [pc, #208]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a90:	4313      	orrs	r3, r2
 8001a92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a94:	f7ff fa66 	bl	8000f64 <HAL_GetTick>
 8001a98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a9a:	e00a      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a9c:	f7ff fa62 	bl	8000f64 <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e04f      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ab2:	4b2b      	ldr	r3, [pc, #172]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	f003 020c 	and.w	r2, r3, #12
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d1eb      	bne.n	8001a9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ac4:	4b25      	ldr	r3, [pc, #148]	; (8001b5c <HAL_RCC_ClockConfig+0x1b8>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 030f 	and.w	r3, r3, #15
 8001acc:	683a      	ldr	r2, [r7, #0]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d20c      	bcs.n	8001aec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ad2:	4b22      	ldr	r3, [pc, #136]	; (8001b5c <HAL_RCC_ClockConfig+0x1b8>)
 8001ad4:	683a      	ldr	r2, [r7, #0]
 8001ad6:	b2d2      	uxtb	r2, r2
 8001ad8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ada:	4b20      	ldr	r3, [pc, #128]	; (8001b5c <HAL_RCC_ClockConfig+0x1b8>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 030f 	and.w	r3, r3, #15
 8001ae2:	683a      	ldr	r2, [r7, #0]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d001      	beq.n	8001aec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e032      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0304 	and.w	r3, r3, #4
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d008      	beq.n	8001b0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001af8:	4b19      	ldr	r3, [pc, #100]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	4916      	ldr	r1, [pc, #88]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001b06:	4313      	orrs	r3, r2
 8001b08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0308 	and.w	r3, r3, #8
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d009      	beq.n	8001b2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b16:	4b12      	ldr	r3, [pc, #72]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	691b      	ldr	r3, [r3, #16]
 8001b22:	00db      	lsls	r3, r3, #3
 8001b24:	490e      	ldr	r1, [pc, #56]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001b26:	4313      	orrs	r3, r2
 8001b28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b2a:	f000 f821 	bl	8001b70 <HAL_RCC_GetSysClockFreq>
 8001b2e:	4601      	mov	r1, r0
 8001b30:	4b0b      	ldr	r3, [pc, #44]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	091b      	lsrs	r3, r3, #4
 8001b36:	f003 030f 	and.w	r3, r3, #15
 8001b3a:	4a0a      	ldr	r2, [pc, #40]	; (8001b64 <HAL_RCC_ClockConfig+0x1c0>)
 8001b3c:	5cd3      	ldrb	r3, [r2, r3]
 8001b3e:	fa21 f303 	lsr.w	r3, r1, r3
 8001b42:	4a09      	ldr	r2, [pc, #36]	; (8001b68 <HAL_RCC_ClockConfig+0x1c4>)
 8001b44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b46:	4b09      	ldr	r3, [pc, #36]	; (8001b6c <HAL_RCC_ClockConfig+0x1c8>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7ff f9c6 	bl	8000edc <HAL_InitTick>

  return HAL_OK;
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3710      	adds	r7, #16
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	40023c00 	.word	0x40023c00
 8001b60:	40023800 	.word	0x40023800
 8001b64:	08005588 	.word	0x08005588
 8001b68:	20000000 	.word	0x20000000
 8001b6c:	20000004 	.word	0x20000004

08001b70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b72:	b085      	sub	sp, #20
 8001b74:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b76:	2300      	movs	r3, #0
 8001b78:	607b      	str	r3, [r7, #4]
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	60fb      	str	r3, [r7, #12]
 8001b7e:	2300      	movs	r3, #0
 8001b80:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001b82:	2300      	movs	r3, #0
 8001b84:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b86:	4b50      	ldr	r3, [pc, #320]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x158>)
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	f003 030c 	and.w	r3, r3, #12
 8001b8e:	2b04      	cmp	r3, #4
 8001b90:	d007      	beq.n	8001ba2 <HAL_RCC_GetSysClockFreq+0x32>
 8001b92:	2b08      	cmp	r3, #8
 8001b94:	d008      	beq.n	8001ba8 <HAL_RCC_GetSysClockFreq+0x38>
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	f040 808d 	bne.w	8001cb6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b9c:	4b4b      	ldr	r3, [pc, #300]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x15c>)
 8001b9e:	60bb      	str	r3, [r7, #8]
       break;
 8001ba0:	e08c      	b.n	8001cbc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ba2:	4b4b      	ldr	r3, [pc, #300]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001ba4:	60bb      	str	r3, [r7, #8]
      break;
 8001ba6:	e089      	b.n	8001cbc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ba8:	4b47      	ldr	r3, [pc, #284]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x158>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bb0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bb2:	4b45      	ldr	r3, [pc, #276]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x158>)
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d023      	beq.n	8001c06 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bbe:	4b42      	ldr	r3, [pc, #264]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x158>)
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	099b      	lsrs	r3, r3, #6
 8001bc4:	f04f 0400 	mov.w	r4, #0
 8001bc8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001bcc:	f04f 0200 	mov.w	r2, #0
 8001bd0:	ea03 0501 	and.w	r5, r3, r1
 8001bd4:	ea04 0602 	and.w	r6, r4, r2
 8001bd8:	4a3d      	ldr	r2, [pc, #244]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001bda:	fb02 f106 	mul.w	r1, r2, r6
 8001bde:	2200      	movs	r2, #0
 8001be0:	fb02 f205 	mul.w	r2, r2, r5
 8001be4:	440a      	add	r2, r1
 8001be6:	493a      	ldr	r1, [pc, #232]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001be8:	fba5 0101 	umull	r0, r1, r5, r1
 8001bec:	1853      	adds	r3, r2, r1
 8001bee:	4619      	mov	r1, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f04f 0400 	mov.w	r4, #0
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	4623      	mov	r3, r4
 8001bfa:	f7fe faed 	bl	80001d8 <__aeabi_uldivmod>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	460c      	mov	r4, r1
 8001c02:	60fb      	str	r3, [r7, #12]
 8001c04:	e049      	b.n	8001c9a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c06:	4b30      	ldr	r3, [pc, #192]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x158>)
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	099b      	lsrs	r3, r3, #6
 8001c0c:	f04f 0400 	mov.w	r4, #0
 8001c10:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001c14:	f04f 0200 	mov.w	r2, #0
 8001c18:	ea03 0501 	and.w	r5, r3, r1
 8001c1c:	ea04 0602 	and.w	r6, r4, r2
 8001c20:	4629      	mov	r1, r5
 8001c22:	4632      	mov	r2, r6
 8001c24:	f04f 0300 	mov.w	r3, #0
 8001c28:	f04f 0400 	mov.w	r4, #0
 8001c2c:	0154      	lsls	r4, r2, #5
 8001c2e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c32:	014b      	lsls	r3, r1, #5
 8001c34:	4619      	mov	r1, r3
 8001c36:	4622      	mov	r2, r4
 8001c38:	1b49      	subs	r1, r1, r5
 8001c3a:	eb62 0206 	sbc.w	r2, r2, r6
 8001c3e:	f04f 0300 	mov.w	r3, #0
 8001c42:	f04f 0400 	mov.w	r4, #0
 8001c46:	0194      	lsls	r4, r2, #6
 8001c48:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001c4c:	018b      	lsls	r3, r1, #6
 8001c4e:	1a5b      	subs	r3, r3, r1
 8001c50:	eb64 0402 	sbc.w	r4, r4, r2
 8001c54:	f04f 0100 	mov.w	r1, #0
 8001c58:	f04f 0200 	mov.w	r2, #0
 8001c5c:	00e2      	lsls	r2, r4, #3
 8001c5e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001c62:	00d9      	lsls	r1, r3, #3
 8001c64:	460b      	mov	r3, r1
 8001c66:	4614      	mov	r4, r2
 8001c68:	195b      	adds	r3, r3, r5
 8001c6a:	eb44 0406 	adc.w	r4, r4, r6
 8001c6e:	f04f 0100 	mov.w	r1, #0
 8001c72:	f04f 0200 	mov.w	r2, #0
 8001c76:	02a2      	lsls	r2, r4, #10
 8001c78:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001c7c:	0299      	lsls	r1, r3, #10
 8001c7e:	460b      	mov	r3, r1
 8001c80:	4614      	mov	r4, r2
 8001c82:	4618      	mov	r0, r3
 8001c84:	4621      	mov	r1, r4
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	f04f 0400 	mov.w	r4, #0
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	4623      	mov	r3, r4
 8001c90:	f7fe faa2 	bl	80001d8 <__aeabi_uldivmod>
 8001c94:	4603      	mov	r3, r0
 8001c96:	460c      	mov	r4, r1
 8001c98:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c9a:	4b0b      	ldr	r3, [pc, #44]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x158>)
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	0c1b      	lsrs	r3, r3, #16
 8001ca0:	f003 0303 	and.w	r3, r3, #3
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001caa:	68fa      	ldr	r2, [r7, #12]
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cb2:	60bb      	str	r3, [r7, #8]
      break;
 8001cb4:	e002      	b.n	8001cbc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cb6:	4b05      	ldr	r3, [pc, #20]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x15c>)
 8001cb8:	60bb      	str	r3, [r7, #8]
      break;
 8001cba:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cbc:	68bb      	ldr	r3, [r7, #8]
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3714      	adds	r7, #20
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	40023800 	.word	0x40023800
 8001ccc:	00f42400 	.word	0x00f42400
 8001cd0:	017d7840 	.word	0x017d7840

08001cd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cd8:	4b03      	ldr	r3, [pc, #12]	; (8001ce8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001cda:	681b      	ldr	r3, [r3, #0]
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	20000000 	.word	0x20000000

08001cec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001cf0:	f7ff fff0 	bl	8001cd4 <HAL_RCC_GetHCLKFreq>
 8001cf4:	4601      	mov	r1, r0
 8001cf6:	4b05      	ldr	r3, [pc, #20]	; (8001d0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	0a9b      	lsrs	r3, r3, #10
 8001cfc:	f003 0307 	and.w	r3, r3, #7
 8001d00:	4a03      	ldr	r2, [pc, #12]	; (8001d10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d02:	5cd3      	ldrb	r3, [r2, r3]
 8001d04:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	40023800 	.word	0x40023800
 8001d10:	08005598 	.word	0x08005598

08001d14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d18:	f7ff ffdc 	bl	8001cd4 <HAL_RCC_GetHCLKFreq>
 8001d1c:	4601      	mov	r1, r0
 8001d1e:	4b05      	ldr	r3, [pc, #20]	; (8001d34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	0b5b      	lsrs	r3, r3, #13
 8001d24:	f003 0307 	and.w	r3, r3, #7
 8001d28:	4a03      	ldr	r2, [pc, #12]	; (8001d38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d2a:	5cd3      	ldrb	r3, [r2, r3]
 8001d2c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	40023800 	.word	0x40023800
 8001d38:	08005598 	.word	0x08005598

08001d3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d101      	bne.n	8001d4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e056      	b.n	8001dfc <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2200      	movs	r2, #0
 8001d52:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d106      	bne.n	8001d6e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2200      	movs	r2, #0
 8001d64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f7fe ff97 	bl	8000c9c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2202      	movs	r2, #2
 8001d72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d84:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685a      	ldr	r2, [r3, #4]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	431a      	orrs	r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	431a      	orrs	r2, r3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	691b      	ldr	r3, [r3, #16]
 8001d9a:	431a      	orrs	r2, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	695b      	ldr	r3, [r3, #20]
 8001da0:	431a      	orrs	r2, r3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	699b      	ldr	r3, [r3, #24]
 8001da6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001daa:	431a      	orrs	r2, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	69db      	ldr	r3, [r3, #28]
 8001db0:	431a      	orrs	r2, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6a1b      	ldr	r3, [r3, #32]
 8001db6:	ea42 0103 	orr.w	r1, r2, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	430a      	orrs	r2, r1
 8001dc4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	699b      	ldr	r3, [r3, #24]
 8001dca:	0c1b      	lsrs	r3, r3, #16
 8001dcc:	f003 0104 	and.w	r1, r3, #4
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	69da      	ldr	r2, [r3, #28]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001dea:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2200      	movs	r2, #0
 8001df0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2201      	movs	r2, #1
 8001df6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001dfa:	2300      	movs	r3, #0
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3708      	adds	r7, #8
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b088      	sub	sp, #32
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	60f8      	str	r0, [r7, #12]
 8001e0c:	60b9      	str	r1, [r7, #8]
 8001e0e:	603b      	str	r3, [r7, #0]
 8001e10:	4613      	mov	r3, r2
 8001e12:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001e14:	2300      	movs	r3, #0
 8001e16:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d101      	bne.n	8001e26 <HAL_SPI_Transmit+0x22>
 8001e22:	2302      	movs	r3, #2
 8001e24:	e11e      	b.n	8002064 <HAL_SPI_Transmit+0x260>
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2201      	movs	r2, #1
 8001e2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001e2e:	f7ff f899 	bl	8000f64 <HAL_GetTick>
 8001e32:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001e34:	88fb      	ldrh	r3, [r7, #6]
 8001e36:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d002      	beq.n	8001e4a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001e44:	2302      	movs	r3, #2
 8001e46:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001e48:	e103      	b.n	8002052 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d002      	beq.n	8001e56 <HAL_SPI_Transmit+0x52>
 8001e50:	88fb      	ldrh	r3, [r7, #6]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d102      	bne.n	8001e5c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001e5a:	e0fa      	b.n	8002052 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2203      	movs	r2, #3
 8001e60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2200      	movs	r2, #0
 8001e68:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	68ba      	ldr	r2, [r7, #8]
 8001e6e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	88fa      	ldrh	r2, [r7, #6]
 8001e74:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	88fa      	ldrh	r2, [r7, #6]
 8001e7a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	2200      	movs	r2, #0
 8001e86:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2200      	movs	r2, #0
 8001e92:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2200      	movs	r2, #0
 8001e98:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ea2:	d107      	bne.n	8001eb4 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001eb2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ebe:	2b40      	cmp	r3, #64	; 0x40
 8001ec0:	d007      	beq.n	8001ed2 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ed0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001eda:	d14b      	bne.n	8001f74 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d002      	beq.n	8001eea <HAL_SPI_Transmit+0xe6>
 8001ee4:	8afb      	ldrh	r3, [r7, #22]
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d13e      	bne.n	8001f68 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eee:	881a      	ldrh	r2, [r3, #0]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efa:	1c9a      	adds	r2, r3, #2
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	3b01      	subs	r3, #1
 8001f08:	b29a      	uxth	r2, r3
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001f0e:	e02b      	b.n	8001f68 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d112      	bne.n	8001f44 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f22:	881a      	ldrh	r2, [r3, #0]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2e:	1c9a      	adds	r2, r3, #2
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	3b01      	subs	r3, #1
 8001f3c:	b29a      	uxth	r2, r3
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	86da      	strh	r2, [r3, #54]	; 0x36
 8001f42:	e011      	b.n	8001f68 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f44:	f7ff f80e 	bl	8000f64 <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	683a      	ldr	r2, [r7, #0]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d803      	bhi.n	8001f5c <HAL_SPI_Transmit+0x158>
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f5a:	d102      	bne.n	8001f62 <HAL_SPI_Transmit+0x15e>
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d102      	bne.n	8001f68 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001f66:	e074      	b.n	8002052 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d1ce      	bne.n	8001f10 <HAL_SPI_Transmit+0x10c>
 8001f72:	e04c      	b.n	800200e <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d002      	beq.n	8001f82 <HAL_SPI_Transmit+0x17e>
 8001f7c:	8afb      	ldrh	r3, [r7, #22]
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d140      	bne.n	8002004 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	330c      	adds	r3, #12
 8001f8c:	7812      	ldrb	r2, [r2, #0]
 8001f8e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f94:	1c5a      	adds	r2, r3, #1
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	3b01      	subs	r3, #1
 8001fa2:	b29a      	uxth	r2, r3
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001fa8:	e02c      	b.n	8002004 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	f003 0302 	and.w	r3, r3, #2
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d113      	bne.n	8001fe0 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	330c      	adds	r3, #12
 8001fc2:	7812      	ldrb	r2, [r2, #0]
 8001fc4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fca:	1c5a      	adds	r2, r3, #1
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	3b01      	subs	r3, #1
 8001fd8:	b29a      	uxth	r2, r3
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	86da      	strh	r2, [r3, #54]	; 0x36
 8001fde:	e011      	b.n	8002004 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001fe0:	f7fe ffc0 	bl	8000f64 <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	683a      	ldr	r2, [r7, #0]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d803      	bhi.n	8001ff8 <HAL_SPI_Transmit+0x1f4>
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ff6:	d102      	bne.n	8001ffe <HAL_SPI_Transmit+0x1fa>
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d102      	bne.n	8002004 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002002:	e026      	b.n	8002052 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002008:	b29b      	uxth	r3, r3
 800200a:	2b00      	cmp	r3, #0
 800200c:	d1cd      	bne.n	8001faa <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	6839      	ldr	r1, [r7, #0]
 8002012:	68f8      	ldr	r0, [r7, #12]
 8002014:	f000 fa36 	bl	8002484 <SPI_EndRxTxTransaction>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d002      	beq.n	8002024 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2220      	movs	r2, #32
 8002022:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d10a      	bne.n	8002042 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800202c:	2300      	movs	r3, #0
 800202e:	613b      	str	r3, [r7, #16]
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	613b      	str	r3, [r7, #16]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	613b      	str	r3, [r7, #16]
 8002040:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002046:	2b00      	cmp	r3, #0
 8002048:	d002      	beq.n	8002050 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	77fb      	strb	r3, [r7, #31]
 800204e:	e000      	b.n	8002052 <HAL_SPI_Transmit+0x24e>
  }

error:
 8002050:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2201      	movs	r2, #1
 8002056:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2200      	movs	r2, #0
 800205e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002062:	7ffb      	ldrb	r3, [r7, #31]
}
 8002064:	4618      	mov	r0, r3
 8002066:	3720      	adds	r7, #32
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b08c      	sub	sp, #48	; 0x30
 8002070:	af00      	add	r7, sp, #0
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	60b9      	str	r1, [r7, #8]
 8002076:	607a      	str	r2, [r7, #4]
 8002078:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800207a:	2301      	movs	r3, #1
 800207c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800207e:	2300      	movs	r3, #0
 8002080:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800208a:	2b01      	cmp	r3, #1
 800208c:	d101      	bne.n	8002092 <HAL_SPI_TransmitReceive+0x26>
 800208e:	2302      	movs	r3, #2
 8002090:	e18a      	b.n	80023a8 <HAL_SPI_TransmitReceive+0x33c>
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2201      	movs	r2, #1
 8002096:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800209a:	f7fe ff63 	bl	8000f64 <HAL_GetTick>
 800209e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80020a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80020b0:	887b      	ldrh	r3, [r7, #2]
 80020b2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80020b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d00f      	beq.n	80020dc <HAL_SPI_TransmitReceive+0x70>
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80020c2:	d107      	bne.n	80020d4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d103      	bne.n	80020d4 <HAL_SPI_TransmitReceive+0x68>
 80020cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80020d0:	2b04      	cmp	r3, #4
 80020d2:	d003      	beq.n	80020dc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80020d4:	2302      	movs	r3, #2
 80020d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80020da:	e15b      	b.n	8002394 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d005      	beq.n	80020ee <HAL_SPI_TransmitReceive+0x82>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d002      	beq.n	80020ee <HAL_SPI_TransmitReceive+0x82>
 80020e8:	887b      	ldrh	r3, [r7, #2]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d103      	bne.n	80020f6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80020f4:	e14e      	b.n	8002394 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	2b04      	cmp	r3, #4
 8002100:	d003      	beq.n	800210a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2205      	movs	r2, #5
 8002106:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2200      	movs	r2, #0
 800210e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	887a      	ldrh	r2, [r7, #2]
 800211a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	887a      	ldrh	r2, [r7, #2]
 8002120:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	68ba      	ldr	r2, [r7, #8]
 8002126:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	887a      	ldrh	r2, [r7, #2]
 800212c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	887a      	ldrh	r2, [r7, #2]
 8002132:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2200      	movs	r2, #0
 8002138:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2200      	movs	r2, #0
 800213e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800214a:	2b40      	cmp	r3, #64	; 0x40
 800214c:	d007      	beq.n	800215e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800215c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002166:	d178      	bne.n	800225a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d002      	beq.n	8002176 <HAL_SPI_TransmitReceive+0x10a>
 8002170:	8b7b      	ldrh	r3, [r7, #26]
 8002172:	2b01      	cmp	r3, #1
 8002174:	d166      	bne.n	8002244 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217a:	881a      	ldrh	r2, [r3, #0]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002186:	1c9a      	adds	r2, r3, #2
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002190:	b29b      	uxth	r3, r3
 8002192:	3b01      	subs	r3, #1
 8002194:	b29a      	uxth	r2, r3
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800219a:	e053      	b.n	8002244 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d11b      	bne.n	80021e2 <HAL_SPI_TransmitReceive+0x176>
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d016      	beq.n	80021e2 <HAL_SPI_TransmitReceive+0x176>
 80021b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d113      	bne.n	80021e2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021be:	881a      	ldrh	r2, [r3, #0]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ca:	1c9a      	adds	r2, r3, #2
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	3b01      	subs	r3, #1
 80021d8:	b29a      	uxth	r2, r3
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80021de:	2300      	movs	r3, #0
 80021e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f003 0301 	and.w	r3, r3, #1
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d119      	bne.n	8002224 <HAL_SPI_TransmitReceive+0x1b8>
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d014      	beq.n	8002224 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	68da      	ldr	r2, [r3, #12]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002204:	b292      	uxth	r2, r2
 8002206:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800220c:	1c9a      	adds	r2, r3, #2
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002216:	b29b      	uxth	r3, r3
 8002218:	3b01      	subs	r3, #1
 800221a:	b29a      	uxth	r2, r3
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002220:	2301      	movs	r3, #1
 8002222:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002224:	f7fe fe9e 	bl	8000f64 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002230:	429a      	cmp	r2, r3
 8002232:	d807      	bhi.n	8002244 <HAL_SPI_TransmitReceive+0x1d8>
 8002234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800223a:	d003      	beq.n	8002244 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002242:	e0a7      	b.n	8002394 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002248:	b29b      	uxth	r3, r3
 800224a:	2b00      	cmp	r3, #0
 800224c:	d1a6      	bne.n	800219c <HAL_SPI_TransmitReceive+0x130>
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002252:	b29b      	uxth	r3, r3
 8002254:	2b00      	cmp	r3, #0
 8002256:	d1a1      	bne.n	800219c <HAL_SPI_TransmitReceive+0x130>
 8002258:	e07c      	b.n	8002354 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d002      	beq.n	8002268 <HAL_SPI_TransmitReceive+0x1fc>
 8002262:	8b7b      	ldrh	r3, [r7, #26]
 8002264:	2b01      	cmp	r3, #1
 8002266:	d16b      	bne.n	8002340 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	330c      	adds	r3, #12
 8002272:	7812      	ldrb	r2, [r2, #0]
 8002274:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227a:	1c5a      	adds	r2, r3, #1
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002284:	b29b      	uxth	r3, r3
 8002286:	3b01      	subs	r3, #1
 8002288:	b29a      	uxth	r2, r3
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800228e:	e057      	b.n	8002340 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	2b02      	cmp	r3, #2
 800229c:	d11c      	bne.n	80022d8 <HAL_SPI_TransmitReceive+0x26c>
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d017      	beq.n	80022d8 <HAL_SPI_TransmitReceive+0x26c>
 80022a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d114      	bne.n	80022d8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	330c      	adds	r3, #12
 80022b8:	7812      	ldrb	r2, [r2, #0]
 80022ba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c0:	1c5a      	adds	r2, r3, #1
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	3b01      	subs	r3, #1
 80022ce:	b29a      	uxth	r2, r3
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80022d4:	2300      	movs	r3, #0
 80022d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d119      	bne.n	800231a <HAL_SPI_TransmitReceive+0x2ae>
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d014      	beq.n	800231a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	68da      	ldr	r2, [r3, #12]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022fa:	b2d2      	uxtb	r2, r2
 80022fc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002302:	1c5a      	adds	r2, r3, #1
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800230c:	b29b      	uxth	r3, r3
 800230e:	3b01      	subs	r3, #1
 8002310:	b29a      	uxth	r2, r3
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002316:	2301      	movs	r3, #1
 8002318:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800231a:	f7fe fe23 	bl	8000f64 <HAL_GetTick>
 800231e:	4602      	mov	r2, r0
 8002320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002326:	429a      	cmp	r2, r3
 8002328:	d803      	bhi.n	8002332 <HAL_SPI_TransmitReceive+0x2c6>
 800232a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800232c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002330:	d102      	bne.n	8002338 <HAL_SPI_TransmitReceive+0x2cc>
 8002332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002334:	2b00      	cmp	r3, #0
 8002336:	d103      	bne.n	8002340 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800233e:	e029      	b.n	8002394 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002344:	b29b      	uxth	r3, r3
 8002346:	2b00      	cmp	r3, #0
 8002348:	d1a2      	bne.n	8002290 <HAL_SPI_TransmitReceive+0x224>
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800234e:	b29b      	uxth	r3, r3
 8002350:	2b00      	cmp	r3, #0
 8002352:	d19d      	bne.n	8002290 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002354:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002356:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002358:	68f8      	ldr	r0, [r7, #12]
 800235a:	f000 f893 	bl	8002484 <SPI_EndRxTxTransaction>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d006      	beq.n	8002372 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2220      	movs	r2, #32
 800236e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002370:	e010      	b.n	8002394 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d10b      	bne.n	8002392 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800237a:	2300      	movs	r3, #0
 800237c:	617b      	str	r3, [r7, #20]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	617b      	str	r3, [r7, #20]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	617b      	str	r3, [r7, #20]
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	e000      	b.n	8002394 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002392:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2201      	movs	r2, #1
 8002398:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2200      	movs	r2, #0
 80023a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80023a4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3730      	adds	r7, #48	; 0x30
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	603b      	str	r3, [r7, #0]
 80023bc:	4613      	mov	r3, r2
 80023be:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80023c0:	e04c      	b.n	800245c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023c8:	d048      	beq.n	800245c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80023ca:	f7fe fdcb 	bl	8000f64 <HAL_GetTick>
 80023ce:	4602      	mov	r2, r0
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	683a      	ldr	r2, [r7, #0]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d902      	bls.n	80023e0 <SPI_WaitFlagStateUntilTimeout+0x30>
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d13d      	bne.n	800245c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	685a      	ldr	r2, [r3, #4]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80023ee:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80023f8:	d111      	bne.n	800241e <SPI_WaitFlagStateUntilTimeout+0x6e>
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002402:	d004      	beq.n	800240e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800240c:	d107      	bne.n	800241e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800241c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002422:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002426:	d10f      	bne.n	8002448 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002436:	601a      	str	r2, [r3, #0]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002446:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2201      	movs	r2, #1
 800244c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2200      	movs	r2, #0
 8002454:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e00f      	b.n	800247c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	689a      	ldr	r2, [r3, #8]
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	4013      	ands	r3, r2
 8002466:	68ba      	ldr	r2, [r7, #8]
 8002468:	429a      	cmp	r2, r3
 800246a:	bf0c      	ite	eq
 800246c:	2301      	moveq	r3, #1
 800246e:	2300      	movne	r3, #0
 8002470:	b2db      	uxtb	r3, r3
 8002472:	461a      	mov	r2, r3
 8002474:	79fb      	ldrb	r3, [r7, #7]
 8002476:	429a      	cmp	r2, r3
 8002478:	d1a3      	bne.n	80023c2 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800247a:	2300      	movs	r3, #0
}
 800247c:	4618      	mov	r0, r3
 800247e:	3710      	adds	r7, #16
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b088      	sub	sp, #32
 8002488:	af02      	add	r7, sp, #8
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002490:	4b1b      	ldr	r3, [pc, #108]	; (8002500 <SPI_EndRxTxTransaction+0x7c>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a1b      	ldr	r2, [pc, #108]	; (8002504 <SPI_EndRxTxTransaction+0x80>)
 8002496:	fba2 2303 	umull	r2, r3, r2, r3
 800249a:	0d5b      	lsrs	r3, r3, #21
 800249c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80024a0:	fb02 f303 	mul.w	r3, r2, r3
 80024a4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80024ae:	d112      	bne.n	80024d6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	9300      	str	r3, [sp, #0]
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	2200      	movs	r2, #0
 80024b8:	2180      	movs	r1, #128	; 0x80
 80024ba:	68f8      	ldr	r0, [r7, #12]
 80024bc:	f7ff ff78 	bl	80023b0 <SPI_WaitFlagStateUntilTimeout>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d016      	beq.n	80024f4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ca:	f043 0220 	orr.w	r2, r3, #32
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e00f      	b.n	80024f6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d00a      	beq.n	80024f2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	3b01      	subs	r3, #1
 80024e0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ec:	2b80      	cmp	r3, #128	; 0x80
 80024ee:	d0f2      	beq.n	80024d6 <SPI_EndRxTxTransaction+0x52>
 80024f0:	e000      	b.n	80024f4 <SPI_EndRxTxTransaction+0x70>
        break;
 80024f2:	bf00      	nop
  }

  return HAL_OK;
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3718      	adds	r7, #24
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	20000000 	.word	0x20000000
 8002504:	165e9f81 	.word	0x165e9f81

08002508 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d101      	bne.n	800251a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e03f      	b.n	800259a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002520:	b2db      	uxtb	r3, r3
 8002522:	2b00      	cmp	r3, #0
 8002524:	d106      	bne.n	8002534 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f7fe fbfc 	bl	8000d2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2224      	movs	r2, #36	; 0x24
 8002538:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	68da      	ldr	r2, [r3, #12]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800254a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f000 f90b 	bl	8002768 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	691a      	ldr	r2, [r3, #16]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002560:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	695a      	ldr	r2, [r3, #20]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002570:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	68da      	ldr	r2, [r3, #12]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002580:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2220      	movs	r2, #32
 800258c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2220      	movs	r2, #32
 8002594:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3708      	adds	r7, #8
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025a2:	b580      	push	{r7, lr}
 80025a4:	b088      	sub	sp, #32
 80025a6:	af02      	add	r7, sp, #8
 80025a8:	60f8      	str	r0, [r7, #12]
 80025aa:	60b9      	str	r1, [r7, #8]
 80025ac:	603b      	str	r3, [r7, #0]
 80025ae:	4613      	mov	r3, r2
 80025b0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80025b2:	2300      	movs	r3, #0
 80025b4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b20      	cmp	r3, #32
 80025c0:	f040 8083 	bne.w	80026ca <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d002      	beq.n	80025d0 <HAL_UART_Transmit+0x2e>
 80025ca:	88fb      	ldrh	r3, [r7, #6]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d101      	bne.n	80025d4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e07b      	b.n	80026cc <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d101      	bne.n	80025e2 <HAL_UART_Transmit+0x40>
 80025de:	2302      	movs	r3, #2
 80025e0:	e074      	b.n	80026cc <HAL_UART_Transmit+0x12a>
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2201      	movs	r2, #1
 80025e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2200      	movs	r2, #0
 80025ee:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2221      	movs	r2, #33	; 0x21
 80025f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80025f8:	f7fe fcb4 	bl	8000f64 <HAL_GetTick>
 80025fc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	88fa      	ldrh	r2, [r7, #6]
 8002602:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	88fa      	ldrh	r2, [r7, #6]
 8002608:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2200      	movs	r2, #0
 800260e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002612:	e042      	b.n	800269a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002618:	b29b      	uxth	r3, r3
 800261a:	3b01      	subs	r3, #1
 800261c:	b29a      	uxth	r2, r3
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800262a:	d122      	bne.n	8002672 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	9300      	str	r3, [sp, #0]
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	2200      	movs	r2, #0
 8002634:	2180      	movs	r1, #128	; 0x80
 8002636:	68f8      	ldr	r0, [r7, #12]
 8002638:	f000 f84c 	bl	80026d4 <UART_WaitOnFlagUntilTimeout>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e042      	b.n	80026cc <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	881b      	ldrh	r3, [r3, #0]
 800264e:	461a      	mov	r2, r3
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002658:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d103      	bne.n	800266a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	3302      	adds	r3, #2
 8002666:	60bb      	str	r3, [r7, #8]
 8002668:	e017      	b.n	800269a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	3301      	adds	r3, #1
 800266e:	60bb      	str	r3, [r7, #8]
 8002670:	e013      	b.n	800269a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	9300      	str	r3, [sp, #0]
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	2200      	movs	r2, #0
 800267a:	2180      	movs	r1, #128	; 0x80
 800267c:	68f8      	ldr	r0, [r7, #12]
 800267e:	f000 f829 	bl	80026d4 <UART_WaitOnFlagUntilTimeout>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d001      	beq.n	800268c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002688:	2303      	movs	r3, #3
 800268a:	e01f      	b.n	80026cc <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	1c5a      	adds	r2, r3, #1
 8002690:	60ba      	str	r2, [r7, #8]
 8002692:	781a      	ldrb	r2, [r3, #0]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800269e:	b29b      	uxth	r3, r3
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d1b7      	bne.n	8002614 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	9300      	str	r3, [sp, #0]
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	2200      	movs	r2, #0
 80026ac:	2140      	movs	r1, #64	; 0x40
 80026ae:	68f8      	ldr	r0, [r7, #12]
 80026b0:	f000 f810 	bl	80026d4 <UART_WaitOnFlagUntilTimeout>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e006      	b.n	80026cc <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2220      	movs	r2, #32
 80026c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80026c6:	2300      	movs	r3, #0
 80026c8:	e000      	b.n	80026cc <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80026ca:	2302      	movs	r3, #2
  }
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3718      	adds	r7, #24
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	603b      	str	r3, [r7, #0]
 80026e0:	4613      	mov	r3, r2
 80026e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026e4:	e02c      	b.n	8002740 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026ec:	d028      	beq.n	8002740 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d007      	beq.n	8002704 <UART_WaitOnFlagUntilTimeout+0x30>
 80026f4:	f7fe fc36 	bl	8000f64 <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	69ba      	ldr	r2, [r7, #24]
 8002700:	429a      	cmp	r2, r3
 8002702:	d21d      	bcs.n	8002740 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	68da      	ldr	r2, [r3, #12]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002712:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	695a      	ldr	r2, [r3, #20]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f022 0201 	bic.w	r2, r2, #1
 8002722:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2220      	movs	r2, #32
 8002728:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2220      	movs	r2, #32
 8002730:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2200      	movs	r2, #0
 8002738:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e00f      	b.n	8002760 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	4013      	ands	r3, r2
 800274a:	68ba      	ldr	r2, [r7, #8]
 800274c:	429a      	cmp	r2, r3
 800274e:	bf0c      	ite	eq
 8002750:	2301      	moveq	r3, #1
 8002752:	2300      	movne	r3, #0
 8002754:	b2db      	uxtb	r3, r3
 8002756:	461a      	mov	r2, r3
 8002758:	79fb      	ldrb	r3, [r7, #7]
 800275a:	429a      	cmp	r2, r3
 800275c:	d0c3      	beq.n	80026e6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800275e:	2300      	movs	r3, #0
}
 8002760:	4618      	mov	r0, r3
 8002762:	3710      	adds	r7, #16
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}

08002768 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800276c:	b085      	sub	sp, #20
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	691b      	ldr	r3, [r3, #16]
 8002778:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	68da      	ldr	r2, [r3, #12]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	430a      	orrs	r2, r1
 8002786:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	689a      	ldr	r2, [r3, #8]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	691b      	ldr	r3, [r3, #16]
 8002790:	431a      	orrs	r2, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	695b      	ldr	r3, [r3, #20]
 8002796:	431a      	orrs	r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	69db      	ldr	r3, [r3, #28]
 800279c:	4313      	orrs	r3, r2
 800279e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80027aa:	f023 030c 	bic.w	r3, r3, #12
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	6812      	ldr	r2, [r2, #0]
 80027b2:	68f9      	ldr	r1, [r7, #12]
 80027b4:	430b      	orrs	r3, r1
 80027b6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	695b      	ldr	r3, [r3, #20]
 80027be:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	699a      	ldr	r2, [r3, #24]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	430a      	orrs	r2, r1
 80027cc:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	69db      	ldr	r3, [r3, #28]
 80027d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027d6:	f040 818b 	bne.w	8002af0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4ac1      	ldr	r2, [pc, #772]	; (8002ae4 <UART_SetConfig+0x37c>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d005      	beq.n	80027f0 <UART_SetConfig+0x88>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4abf      	ldr	r2, [pc, #764]	; (8002ae8 <UART_SetConfig+0x380>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	f040 80bd 	bne.w	800296a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80027f0:	f7ff fa90 	bl	8001d14 <HAL_RCC_GetPCLK2Freq>
 80027f4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	461d      	mov	r5, r3
 80027fa:	f04f 0600 	mov.w	r6, #0
 80027fe:	46a8      	mov	r8, r5
 8002800:	46b1      	mov	r9, r6
 8002802:	eb18 0308 	adds.w	r3, r8, r8
 8002806:	eb49 0409 	adc.w	r4, r9, r9
 800280a:	4698      	mov	r8, r3
 800280c:	46a1      	mov	r9, r4
 800280e:	eb18 0805 	adds.w	r8, r8, r5
 8002812:	eb49 0906 	adc.w	r9, r9, r6
 8002816:	f04f 0100 	mov.w	r1, #0
 800281a:	f04f 0200 	mov.w	r2, #0
 800281e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002822:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002826:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800282a:	4688      	mov	r8, r1
 800282c:	4691      	mov	r9, r2
 800282e:	eb18 0005 	adds.w	r0, r8, r5
 8002832:	eb49 0106 	adc.w	r1, r9, r6
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	461d      	mov	r5, r3
 800283c:	f04f 0600 	mov.w	r6, #0
 8002840:	196b      	adds	r3, r5, r5
 8002842:	eb46 0406 	adc.w	r4, r6, r6
 8002846:	461a      	mov	r2, r3
 8002848:	4623      	mov	r3, r4
 800284a:	f7fd fcc5 	bl	80001d8 <__aeabi_uldivmod>
 800284e:	4603      	mov	r3, r0
 8002850:	460c      	mov	r4, r1
 8002852:	461a      	mov	r2, r3
 8002854:	4ba5      	ldr	r3, [pc, #660]	; (8002aec <UART_SetConfig+0x384>)
 8002856:	fba3 2302 	umull	r2, r3, r3, r2
 800285a:	095b      	lsrs	r3, r3, #5
 800285c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	461d      	mov	r5, r3
 8002864:	f04f 0600 	mov.w	r6, #0
 8002868:	46a9      	mov	r9, r5
 800286a:	46b2      	mov	sl, r6
 800286c:	eb19 0309 	adds.w	r3, r9, r9
 8002870:	eb4a 040a 	adc.w	r4, sl, sl
 8002874:	4699      	mov	r9, r3
 8002876:	46a2      	mov	sl, r4
 8002878:	eb19 0905 	adds.w	r9, r9, r5
 800287c:	eb4a 0a06 	adc.w	sl, sl, r6
 8002880:	f04f 0100 	mov.w	r1, #0
 8002884:	f04f 0200 	mov.w	r2, #0
 8002888:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800288c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002890:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002894:	4689      	mov	r9, r1
 8002896:	4692      	mov	sl, r2
 8002898:	eb19 0005 	adds.w	r0, r9, r5
 800289c:	eb4a 0106 	adc.w	r1, sl, r6
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	461d      	mov	r5, r3
 80028a6:	f04f 0600 	mov.w	r6, #0
 80028aa:	196b      	adds	r3, r5, r5
 80028ac:	eb46 0406 	adc.w	r4, r6, r6
 80028b0:	461a      	mov	r2, r3
 80028b2:	4623      	mov	r3, r4
 80028b4:	f7fd fc90 	bl	80001d8 <__aeabi_uldivmod>
 80028b8:	4603      	mov	r3, r0
 80028ba:	460c      	mov	r4, r1
 80028bc:	461a      	mov	r2, r3
 80028be:	4b8b      	ldr	r3, [pc, #556]	; (8002aec <UART_SetConfig+0x384>)
 80028c0:	fba3 1302 	umull	r1, r3, r3, r2
 80028c4:	095b      	lsrs	r3, r3, #5
 80028c6:	2164      	movs	r1, #100	; 0x64
 80028c8:	fb01 f303 	mul.w	r3, r1, r3
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	3332      	adds	r3, #50	; 0x32
 80028d2:	4a86      	ldr	r2, [pc, #536]	; (8002aec <UART_SetConfig+0x384>)
 80028d4:	fba2 2303 	umull	r2, r3, r2, r3
 80028d8:	095b      	lsrs	r3, r3, #5
 80028da:	005b      	lsls	r3, r3, #1
 80028dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80028e0:	4498      	add	r8, r3
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	461d      	mov	r5, r3
 80028e6:	f04f 0600 	mov.w	r6, #0
 80028ea:	46a9      	mov	r9, r5
 80028ec:	46b2      	mov	sl, r6
 80028ee:	eb19 0309 	adds.w	r3, r9, r9
 80028f2:	eb4a 040a 	adc.w	r4, sl, sl
 80028f6:	4699      	mov	r9, r3
 80028f8:	46a2      	mov	sl, r4
 80028fa:	eb19 0905 	adds.w	r9, r9, r5
 80028fe:	eb4a 0a06 	adc.w	sl, sl, r6
 8002902:	f04f 0100 	mov.w	r1, #0
 8002906:	f04f 0200 	mov.w	r2, #0
 800290a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800290e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002912:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002916:	4689      	mov	r9, r1
 8002918:	4692      	mov	sl, r2
 800291a:	eb19 0005 	adds.w	r0, r9, r5
 800291e:	eb4a 0106 	adc.w	r1, sl, r6
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	461d      	mov	r5, r3
 8002928:	f04f 0600 	mov.w	r6, #0
 800292c:	196b      	adds	r3, r5, r5
 800292e:	eb46 0406 	adc.w	r4, r6, r6
 8002932:	461a      	mov	r2, r3
 8002934:	4623      	mov	r3, r4
 8002936:	f7fd fc4f 	bl	80001d8 <__aeabi_uldivmod>
 800293a:	4603      	mov	r3, r0
 800293c:	460c      	mov	r4, r1
 800293e:	461a      	mov	r2, r3
 8002940:	4b6a      	ldr	r3, [pc, #424]	; (8002aec <UART_SetConfig+0x384>)
 8002942:	fba3 1302 	umull	r1, r3, r3, r2
 8002946:	095b      	lsrs	r3, r3, #5
 8002948:	2164      	movs	r1, #100	; 0x64
 800294a:	fb01 f303 	mul.w	r3, r1, r3
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	00db      	lsls	r3, r3, #3
 8002952:	3332      	adds	r3, #50	; 0x32
 8002954:	4a65      	ldr	r2, [pc, #404]	; (8002aec <UART_SetConfig+0x384>)
 8002956:	fba2 2303 	umull	r2, r3, r2, r3
 800295a:	095b      	lsrs	r3, r3, #5
 800295c:	f003 0207 	and.w	r2, r3, #7
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4442      	add	r2, r8
 8002966:	609a      	str	r2, [r3, #8]
 8002968:	e26f      	b.n	8002e4a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800296a:	f7ff f9bf 	bl	8001cec <HAL_RCC_GetPCLK1Freq>
 800296e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	461d      	mov	r5, r3
 8002974:	f04f 0600 	mov.w	r6, #0
 8002978:	46a8      	mov	r8, r5
 800297a:	46b1      	mov	r9, r6
 800297c:	eb18 0308 	adds.w	r3, r8, r8
 8002980:	eb49 0409 	adc.w	r4, r9, r9
 8002984:	4698      	mov	r8, r3
 8002986:	46a1      	mov	r9, r4
 8002988:	eb18 0805 	adds.w	r8, r8, r5
 800298c:	eb49 0906 	adc.w	r9, r9, r6
 8002990:	f04f 0100 	mov.w	r1, #0
 8002994:	f04f 0200 	mov.w	r2, #0
 8002998:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800299c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80029a0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80029a4:	4688      	mov	r8, r1
 80029a6:	4691      	mov	r9, r2
 80029a8:	eb18 0005 	adds.w	r0, r8, r5
 80029ac:	eb49 0106 	adc.w	r1, r9, r6
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	461d      	mov	r5, r3
 80029b6:	f04f 0600 	mov.w	r6, #0
 80029ba:	196b      	adds	r3, r5, r5
 80029bc:	eb46 0406 	adc.w	r4, r6, r6
 80029c0:	461a      	mov	r2, r3
 80029c2:	4623      	mov	r3, r4
 80029c4:	f7fd fc08 	bl	80001d8 <__aeabi_uldivmod>
 80029c8:	4603      	mov	r3, r0
 80029ca:	460c      	mov	r4, r1
 80029cc:	461a      	mov	r2, r3
 80029ce:	4b47      	ldr	r3, [pc, #284]	; (8002aec <UART_SetConfig+0x384>)
 80029d0:	fba3 2302 	umull	r2, r3, r3, r2
 80029d4:	095b      	lsrs	r3, r3, #5
 80029d6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	461d      	mov	r5, r3
 80029de:	f04f 0600 	mov.w	r6, #0
 80029e2:	46a9      	mov	r9, r5
 80029e4:	46b2      	mov	sl, r6
 80029e6:	eb19 0309 	adds.w	r3, r9, r9
 80029ea:	eb4a 040a 	adc.w	r4, sl, sl
 80029ee:	4699      	mov	r9, r3
 80029f0:	46a2      	mov	sl, r4
 80029f2:	eb19 0905 	adds.w	r9, r9, r5
 80029f6:	eb4a 0a06 	adc.w	sl, sl, r6
 80029fa:	f04f 0100 	mov.w	r1, #0
 80029fe:	f04f 0200 	mov.w	r2, #0
 8002a02:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a06:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002a0a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002a0e:	4689      	mov	r9, r1
 8002a10:	4692      	mov	sl, r2
 8002a12:	eb19 0005 	adds.w	r0, r9, r5
 8002a16:	eb4a 0106 	adc.w	r1, sl, r6
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	461d      	mov	r5, r3
 8002a20:	f04f 0600 	mov.w	r6, #0
 8002a24:	196b      	adds	r3, r5, r5
 8002a26:	eb46 0406 	adc.w	r4, r6, r6
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	4623      	mov	r3, r4
 8002a2e:	f7fd fbd3 	bl	80001d8 <__aeabi_uldivmod>
 8002a32:	4603      	mov	r3, r0
 8002a34:	460c      	mov	r4, r1
 8002a36:	461a      	mov	r2, r3
 8002a38:	4b2c      	ldr	r3, [pc, #176]	; (8002aec <UART_SetConfig+0x384>)
 8002a3a:	fba3 1302 	umull	r1, r3, r3, r2
 8002a3e:	095b      	lsrs	r3, r3, #5
 8002a40:	2164      	movs	r1, #100	; 0x64
 8002a42:	fb01 f303 	mul.w	r3, r1, r3
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	00db      	lsls	r3, r3, #3
 8002a4a:	3332      	adds	r3, #50	; 0x32
 8002a4c:	4a27      	ldr	r2, [pc, #156]	; (8002aec <UART_SetConfig+0x384>)
 8002a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a52:	095b      	lsrs	r3, r3, #5
 8002a54:	005b      	lsls	r3, r3, #1
 8002a56:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002a5a:	4498      	add	r8, r3
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	461d      	mov	r5, r3
 8002a60:	f04f 0600 	mov.w	r6, #0
 8002a64:	46a9      	mov	r9, r5
 8002a66:	46b2      	mov	sl, r6
 8002a68:	eb19 0309 	adds.w	r3, r9, r9
 8002a6c:	eb4a 040a 	adc.w	r4, sl, sl
 8002a70:	4699      	mov	r9, r3
 8002a72:	46a2      	mov	sl, r4
 8002a74:	eb19 0905 	adds.w	r9, r9, r5
 8002a78:	eb4a 0a06 	adc.w	sl, sl, r6
 8002a7c:	f04f 0100 	mov.w	r1, #0
 8002a80:	f04f 0200 	mov.w	r2, #0
 8002a84:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a88:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002a8c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002a90:	4689      	mov	r9, r1
 8002a92:	4692      	mov	sl, r2
 8002a94:	eb19 0005 	adds.w	r0, r9, r5
 8002a98:	eb4a 0106 	adc.w	r1, sl, r6
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	461d      	mov	r5, r3
 8002aa2:	f04f 0600 	mov.w	r6, #0
 8002aa6:	196b      	adds	r3, r5, r5
 8002aa8:	eb46 0406 	adc.w	r4, r6, r6
 8002aac:	461a      	mov	r2, r3
 8002aae:	4623      	mov	r3, r4
 8002ab0:	f7fd fb92 	bl	80001d8 <__aeabi_uldivmod>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	460c      	mov	r4, r1
 8002ab8:	461a      	mov	r2, r3
 8002aba:	4b0c      	ldr	r3, [pc, #48]	; (8002aec <UART_SetConfig+0x384>)
 8002abc:	fba3 1302 	umull	r1, r3, r3, r2
 8002ac0:	095b      	lsrs	r3, r3, #5
 8002ac2:	2164      	movs	r1, #100	; 0x64
 8002ac4:	fb01 f303 	mul.w	r3, r1, r3
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	00db      	lsls	r3, r3, #3
 8002acc:	3332      	adds	r3, #50	; 0x32
 8002ace:	4a07      	ldr	r2, [pc, #28]	; (8002aec <UART_SetConfig+0x384>)
 8002ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad4:	095b      	lsrs	r3, r3, #5
 8002ad6:	f003 0207 	and.w	r2, r3, #7
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4442      	add	r2, r8
 8002ae0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002ae2:	e1b2      	b.n	8002e4a <UART_SetConfig+0x6e2>
 8002ae4:	40011000 	.word	0x40011000
 8002ae8:	40011400 	.word	0x40011400
 8002aec:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4ad7      	ldr	r2, [pc, #860]	; (8002e54 <UART_SetConfig+0x6ec>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d005      	beq.n	8002b06 <UART_SetConfig+0x39e>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4ad6      	ldr	r2, [pc, #856]	; (8002e58 <UART_SetConfig+0x6f0>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	f040 80d1 	bne.w	8002ca8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002b06:	f7ff f905 	bl	8001d14 <HAL_RCC_GetPCLK2Freq>
 8002b0a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	469a      	mov	sl, r3
 8002b10:	f04f 0b00 	mov.w	fp, #0
 8002b14:	46d0      	mov	r8, sl
 8002b16:	46d9      	mov	r9, fp
 8002b18:	eb18 0308 	adds.w	r3, r8, r8
 8002b1c:	eb49 0409 	adc.w	r4, r9, r9
 8002b20:	4698      	mov	r8, r3
 8002b22:	46a1      	mov	r9, r4
 8002b24:	eb18 080a 	adds.w	r8, r8, sl
 8002b28:	eb49 090b 	adc.w	r9, r9, fp
 8002b2c:	f04f 0100 	mov.w	r1, #0
 8002b30:	f04f 0200 	mov.w	r2, #0
 8002b34:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002b38:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002b3c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002b40:	4688      	mov	r8, r1
 8002b42:	4691      	mov	r9, r2
 8002b44:	eb1a 0508 	adds.w	r5, sl, r8
 8002b48:	eb4b 0609 	adc.w	r6, fp, r9
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	4619      	mov	r1, r3
 8002b52:	f04f 0200 	mov.w	r2, #0
 8002b56:	f04f 0300 	mov.w	r3, #0
 8002b5a:	f04f 0400 	mov.w	r4, #0
 8002b5e:	0094      	lsls	r4, r2, #2
 8002b60:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002b64:	008b      	lsls	r3, r1, #2
 8002b66:	461a      	mov	r2, r3
 8002b68:	4623      	mov	r3, r4
 8002b6a:	4628      	mov	r0, r5
 8002b6c:	4631      	mov	r1, r6
 8002b6e:	f7fd fb33 	bl	80001d8 <__aeabi_uldivmod>
 8002b72:	4603      	mov	r3, r0
 8002b74:	460c      	mov	r4, r1
 8002b76:	461a      	mov	r2, r3
 8002b78:	4bb8      	ldr	r3, [pc, #736]	; (8002e5c <UART_SetConfig+0x6f4>)
 8002b7a:	fba3 2302 	umull	r2, r3, r3, r2
 8002b7e:	095b      	lsrs	r3, r3, #5
 8002b80:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	469b      	mov	fp, r3
 8002b88:	f04f 0c00 	mov.w	ip, #0
 8002b8c:	46d9      	mov	r9, fp
 8002b8e:	46e2      	mov	sl, ip
 8002b90:	eb19 0309 	adds.w	r3, r9, r9
 8002b94:	eb4a 040a 	adc.w	r4, sl, sl
 8002b98:	4699      	mov	r9, r3
 8002b9a:	46a2      	mov	sl, r4
 8002b9c:	eb19 090b 	adds.w	r9, r9, fp
 8002ba0:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002ba4:	f04f 0100 	mov.w	r1, #0
 8002ba8:	f04f 0200 	mov.w	r2, #0
 8002bac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002bb0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002bb4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002bb8:	4689      	mov	r9, r1
 8002bba:	4692      	mov	sl, r2
 8002bbc:	eb1b 0509 	adds.w	r5, fp, r9
 8002bc0:	eb4c 060a 	adc.w	r6, ip, sl
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	4619      	mov	r1, r3
 8002bca:	f04f 0200 	mov.w	r2, #0
 8002bce:	f04f 0300 	mov.w	r3, #0
 8002bd2:	f04f 0400 	mov.w	r4, #0
 8002bd6:	0094      	lsls	r4, r2, #2
 8002bd8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002bdc:	008b      	lsls	r3, r1, #2
 8002bde:	461a      	mov	r2, r3
 8002be0:	4623      	mov	r3, r4
 8002be2:	4628      	mov	r0, r5
 8002be4:	4631      	mov	r1, r6
 8002be6:	f7fd faf7 	bl	80001d8 <__aeabi_uldivmod>
 8002bea:	4603      	mov	r3, r0
 8002bec:	460c      	mov	r4, r1
 8002bee:	461a      	mov	r2, r3
 8002bf0:	4b9a      	ldr	r3, [pc, #616]	; (8002e5c <UART_SetConfig+0x6f4>)
 8002bf2:	fba3 1302 	umull	r1, r3, r3, r2
 8002bf6:	095b      	lsrs	r3, r3, #5
 8002bf8:	2164      	movs	r1, #100	; 0x64
 8002bfa:	fb01 f303 	mul.w	r3, r1, r3
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	011b      	lsls	r3, r3, #4
 8002c02:	3332      	adds	r3, #50	; 0x32
 8002c04:	4a95      	ldr	r2, [pc, #596]	; (8002e5c <UART_SetConfig+0x6f4>)
 8002c06:	fba2 2303 	umull	r2, r3, r2, r3
 8002c0a:	095b      	lsrs	r3, r3, #5
 8002c0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c10:	4498      	add	r8, r3
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	469b      	mov	fp, r3
 8002c16:	f04f 0c00 	mov.w	ip, #0
 8002c1a:	46d9      	mov	r9, fp
 8002c1c:	46e2      	mov	sl, ip
 8002c1e:	eb19 0309 	adds.w	r3, r9, r9
 8002c22:	eb4a 040a 	adc.w	r4, sl, sl
 8002c26:	4699      	mov	r9, r3
 8002c28:	46a2      	mov	sl, r4
 8002c2a:	eb19 090b 	adds.w	r9, r9, fp
 8002c2e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002c32:	f04f 0100 	mov.w	r1, #0
 8002c36:	f04f 0200 	mov.w	r2, #0
 8002c3a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c3e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002c42:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002c46:	4689      	mov	r9, r1
 8002c48:	4692      	mov	sl, r2
 8002c4a:	eb1b 0509 	adds.w	r5, fp, r9
 8002c4e:	eb4c 060a 	adc.w	r6, ip, sl
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	4619      	mov	r1, r3
 8002c58:	f04f 0200 	mov.w	r2, #0
 8002c5c:	f04f 0300 	mov.w	r3, #0
 8002c60:	f04f 0400 	mov.w	r4, #0
 8002c64:	0094      	lsls	r4, r2, #2
 8002c66:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002c6a:	008b      	lsls	r3, r1, #2
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	4623      	mov	r3, r4
 8002c70:	4628      	mov	r0, r5
 8002c72:	4631      	mov	r1, r6
 8002c74:	f7fd fab0 	bl	80001d8 <__aeabi_uldivmod>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	460c      	mov	r4, r1
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	4b77      	ldr	r3, [pc, #476]	; (8002e5c <UART_SetConfig+0x6f4>)
 8002c80:	fba3 1302 	umull	r1, r3, r3, r2
 8002c84:	095b      	lsrs	r3, r3, #5
 8002c86:	2164      	movs	r1, #100	; 0x64
 8002c88:	fb01 f303 	mul.w	r3, r1, r3
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	011b      	lsls	r3, r3, #4
 8002c90:	3332      	adds	r3, #50	; 0x32
 8002c92:	4a72      	ldr	r2, [pc, #456]	; (8002e5c <UART_SetConfig+0x6f4>)
 8002c94:	fba2 2303 	umull	r2, r3, r2, r3
 8002c98:	095b      	lsrs	r3, r3, #5
 8002c9a:	f003 020f 	and.w	r2, r3, #15
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4442      	add	r2, r8
 8002ca4:	609a      	str	r2, [r3, #8]
 8002ca6:	e0d0      	b.n	8002e4a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002ca8:	f7ff f820 	bl	8001cec <HAL_RCC_GetPCLK1Freq>
 8002cac:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	469a      	mov	sl, r3
 8002cb2:	f04f 0b00 	mov.w	fp, #0
 8002cb6:	46d0      	mov	r8, sl
 8002cb8:	46d9      	mov	r9, fp
 8002cba:	eb18 0308 	adds.w	r3, r8, r8
 8002cbe:	eb49 0409 	adc.w	r4, r9, r9
 8002cc2:	4698      	mov	r8, r3
 8002cc4:	46a1      	mov	r9, r4
 8002cc6:	eb18 080a 	adds.w	r8, r8, sl
 8002cca:	eb49 090b 	adc.w	r9, r9, fp
 8002cce:	f04f 0100 	mov.w	r1, #0
 8002cd2:	f04f 0200 	mov.w	r2, #0
 8002cd6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002cda:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002cde:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002ce2:	4688      	mov	r8, r1
 8002ce4:	4691      	mov	r9, r2
 8002ce6:	eb1a 0508 	adds.w	r5, sl, r8
 8002cea:	eb4b 0609 	adc.w	r6, fp, r9
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	f04f 0200 	mov.w	r2, #0
 8002cf8:	f04f 0300 	mov.w	r3, #0
 8002cfc:	f04f 0400 	mov.w	r4, #0
 8002d00:	0094      	lsls	r4, r2, #2
 8002d02:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002d06:	008b      	lsls	r3, r1, #2
 8002d08:	461a      	mov	r2, r3
 8002d0a:	4623      	mov	r3, r4
 8002d0c:	4628      	mov	r0, r5
 8002d0e:	4631      	mov	r1, r6
 8002d10:	f7fd fa62 	bl	80001d8 <__aeabi_uldivmod>
 8002d14:	4603      	mov	r3, r0
 8002d16:	460c      	mov	r4, r1
 8002d18:	461a      	mov	r2, r3
 8002d1a:	4b50      	ldr	r3, [pc, #320]	; (8002e5c <UART_SetConfig+0x6f4>)
 8002d1c:	fba3 2302 	umull	r2, r3, r3, r2
 8002d20:	095b      	lsrs	r3, r3, #5
 8002d22:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	469b      	mov	fp, r3
 8002d2a:	f04f 0c00 	mov.w	ip, #0
 8002d2e:	46d9      	mov	r9, fp
 8002d30:	46e2      	mov	sl, ip
 8002d32:	eb19 0309 	adds.w	r3, r9, r9
 8002d36:	eb4a 040a 	adc.w	r4, sl, sl
 8002d3a:	4699      	mov	r9, r3
 8002d3c:	46a2      	mov	sl, r4
 8002d3e:	eb19 090b 	adds.w	r9, r9, fp
 8002d42:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002d46:	f04f 0100 	mov.w	r1, #0
 8002d4a:	f04f 0200 	mov.w	r2, #0
 8002d4e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d52:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002d56:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002d5a:	4689      	mov	r9, r1
 8002d5c:	4692      	mov	sl, r2
 8002d5e:	eb1b 0509 	adds.w	r5, fp, r9
 8002d62:	eb4c 060a 	adc.w	r6, ip, sl
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	f04f 0200 	mov.w	r2, #0
 8002d70:	f04f 0300 	mov.w	r3, #0
 8002d74:	f04f 0400 	mov.w	r4, #0
 8002d78:	0094      	lsls	r4, r2, #2
 8002d7a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002d7e:	008b      	lsls	r3, r1, #2
 8002d80:	461a      	mov	r2, r3
 8002d82:	4623      	mov	r3, r4
 8002d84:	4628      	mov	r0, r5
 8002d86:	4631      	mov	r1, r6
 8002d88:	f7fd fa26 	bl	80001d8 <__aeabi_uldivmod>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	460c      	mov	r4, r1
 8002d90:	461a      	mov	r2, r3
 8002d92:	4b32      	ldr	r3, [pc, #200]	; (8002e5c <UART_SetConfig+0x6f4>)
 8002d94:	fba3 1302 	umull	r1, r3, r3, r2
 8002d98:	095b      	lsrs	r3, r3, #5
 8002d9a:	2164      	movs	r1, #100	; 0x64
 8002d9c:	fb01 f303 	mul.w	r3, r1, r3
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	011b      	lsls	r3, r3, #4
 8002da4:	3332      	adds	r3, #50	; 0x32
 8002da6:	4a2d      	ldr	r2, [pc, #180]	; (8002e5c <UART_SetConfig+0x6f4>)
 8002da8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dac:	095b      	lsrs	r3, r3, #5
 8002dae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002db2:	4498      	add	r8, r3
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	469b      	mov	fp, r3
 8002db8:	f04f 0c00 	mov.w	ip, #0
 8002dbc:	46d9      	mov	r9, fp
 8002dbe:	46e2      	mov	sl, ip
 8002dc0:	eb19 0309 	adds.w	r3, r9, r9
 8002dc4:	eb4a 040a 	adc.w	r4, sl, sl
 8002dc8:	4699      	mov	r9, r3
 8002dca:	46a2      	mov	sl, r4
 8002dcc:	eb19 090b 	adds.w	r9, r9, fp
 8002dd0:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002dd4:	f04f 0100 	mov.w	r1, #0
 8002dd8:	f04f 0200 	mov.w	r2, #0
 8002ddc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002de0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002de4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002de8:	4689      	mov	r9, r1
 8002dea:	4692      	mov	sl, r2
 8002dec:	eb1b 0509 	adds.w	r5, fp, r9
 8002df0:	eb4c 060a 	adc.w	r6, ip, sl
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	4619      	mov	r1, r3
 8002dfa:	f04f 0200 	mov.w	r2, #0
 8002dfe:	f04f 0300 	mov.w	r3, #0
 8002e02:	f04f 0400 	mov.w	r4, #0
 8002e06:	0094      	lsls	r4, r2, #2
 8002e08:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002e0c:	008b      	lsls	r3, r1, #2
 8002e0e:	461a      	mov	r2, r3
 8002e10:	4623      	mov	r3, r4
 8002e12:	4628      	mov	r0, r5
 8002e14:	4631      	mov	r1, r6
 8002e16:	f7fd f9df 	bl	80001d8 <__aeabi_uldivmod>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	460c      	mov	r4, r1
 8002e1e:	461a      	mov	r2, r3
 8002e20:	4b0e      	ldr	r3, [pc, #56]	; (8002e5c <UART_SetConfig+0x6f4>)
 8002e22:	fba3 1302 	umull	r1, r3, r3, r2
 8002e26:	095b      	lsrs	r3, r3, #5
 8002e28:	2164      	movs	r1, #100	; 0x64
 8002e2a:	fb01 f303 	mul.w	r3, r1, r3
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	011b      	lsls	r3, r3, #4
 8002e32:	3332      	adds	r3, #50	; 0x32
 8002e34:	4a09      	ldr	r2, [pc, #36]	; (8002e5c <UART_SetConfig+0x6f4>)
 8002e36:	fba2 2303 	umull	r2, r3, r2, r3
 8002e3a:	095b      	lsrs	r3, r3, #5
 8002e3c:	f003 020f 	and.w	r2, r3, #15
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4442      	add	r2, r8
 8002e46:	609a      	str	r2, [r3, #8]
}
 8002e48:	e7ff      	b.n	8002e4a <UART_SetConfig+0x6e2>
 8002e4a:	bf00      	nop
 8002e4c:	3714      	adds	r7, #20
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e54:	40011000 	.word	0x40011000
 8002e58:	40011400 	.word	0x40011400
 8002e5c:	51eb851f 	.word	0x51eb851f

08002e60 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8002e64:	4904      	ldr	r1, [pc, #16]	; (8002e78 <MX_FATFS_Init+0x18>)
 8002e66:	4805      	ldr	r0, [pc, #20]	; (8002e7c <MX_FATFS_Init+0x1c>)
 8002e68:	f002 faf8 	bl	800545c <FATFS_LinkDriver>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	461a      	mov	r2, r3
 8002e70:	4b03      	ldr	r3, [pc, #12]	; (8002e80 <MX_FATFS_Init+0x20>)
 8002e72:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8002e74:	bf00      	nop
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	2000097c 	.word	0x2000097c
 8002e7c:	2000000c 	.word	0x2000000c
 8002e80:	20000980 	.word	0x20000980

08002e84 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8002e84:	b480      	push	{r7}
 8002e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8002e88:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	if (SD_Init() == 1)
 8002e9e:	f7fd fd5b 	bl	8000958 <SD_Init>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d103      	bne.n	8002eb0 <USER_initialize+0x1c>
		Stat = 0;
 8002ea8:	4b06      	ldr	r3, [pc, #24]	; (8002ec4 <USER_initialize+0x30>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	701a      	strb	r2, [r3, #0]
 8002eae:	e002      	b.n	8002eb6 <USER_initialize+0x22>
	else
		Stat = STA_NOINIT;
 8002eb0:	4b04      	ldr	r3, [pc, #16]	; (8002ec4 <USER_initialize+0x30>)
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	701a      	strb	r2, [r3, #0]

    return Stat;
 8002eb6:	4b03      	ldr	r3, [pc, #12]	; (8002ec4 <USER_initialize+0x30>)
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3708      	adds	r7, #8
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	20000009 	.word	0x20000009

08002ec8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	4603      	mov	r3, r0
 8002ed0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return Stat;
 8002ed2:	4b04      	ldr	r3, [pc, #16]	; (8002ee4 <USER_status+0x1c>)
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	370c      	adds	r7, #12
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr
 8002ee4:	20000009 	.word	0x20000009

08002ee8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60b9      	str	r1, [r7, #8]
 8002ef0:	607a      	str	r2, [r7, #4]
 8002ef2:	603b      	str	r3, [r7, #0]
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	if (SD_Read(buff, sector << 9, count) == 1)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	025b      	lsls	r3, r3, #9
 8002efc:	683a      	ldr	r2, [r7, #0]
 8002efe:	4619      	mov	r1, r3
 8002f00:	68b8      	ldr	r0, [r7, #8]
 8002f02:	f7fd fdcb 	bl	8000a9c <SD_Read>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d101      	bne.n	8002f10 <USER_read+0x28>
		return RES_OK;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	e000      	b.n	8002f12 <USER_read+0x2a>
	else
		return RES_ERROR;
 8002f10:	2301      	movs	r3, #1
  /* USER CODE END READ */
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3710      	adds	r7, #16
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}

08002f1a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{ 
 8002f1a:	b580      	push	{r7, lr}
 8002f1c:	b084      	sub	sp, #16
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	607a      	str	r2, [r7, #4]
 8002f24:	603b      	str	r3, [r7, #0]
 8002f26:	4603      	mov	r3, r0
 8002f28:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	if (SD_Write((unsigned char*)buff, sector << 9, count) == 1)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	025b      	lsls	r3, r3, #9
 8002f2e:	683a      	ldr	r2, [r7, #0]
 8002f30:	4619      	mov	r1, r3
 8002f32:	68b8      	ldr	r0, [r7, #8]
 8002f34:	f7fd fe42 	bl	8000bbc <SD_Write>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d101      	bne.n	8002f42 <USER_write+0x28>
		return RES_OK;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	e000      	b.n	8002f44 <USER_write+0x2a>
	else
		return RES_ERROR;
 8002f42:	2301      	movs	r3, #1
  /* USER CODE END WRITE */
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3710      	adds	r7, #16
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8002f4c:	b590      	push	{r4, r7, lr}
 8002f4e:	b089      	sub	sp, #36	; 0x24
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	4603      	mov	r3, r0
 8002f54:	603a      	str	r2, [r7, #0]
 8002f56:	71fb      	strb	r3, [r7, #7]
 8002f58:	460b      	mov	r3, r1
 8002f5a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	77fb      	strb	r3, [r7, #31]
    uint8_t* ptr = buff;
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	61bb      	str	r3, [r7, #24]
    uint32_t csize;
    uint16_t mult;
    uint16_t read_bl_len;

    SD_Select();
 8002f64:	f7fd fc80 	bl	8000868 <SD_Select>

    switch (cmd)
 8002f68:	79bb      	ldrb	r3, [r7, #6]
 8002f6a:	2b0e      	cmp	r3, #14
 8002f6c:	f200 80c7 	bhi.w	80030fe <USER_ioctl+0x1b2>
 8002f70:	a201      	add	r2, pc, #4	; (adr r2, 8002f78 <USER_ioctl+0x2c>)
 8002f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f76:	bf00      	nop
 8002f78:	08002fb5 	.word	0x08002fb5
 8002f7c:	08002fbb 	.word	0x08002fbb
 8002f80:	08003037 	.word	0x08003037
 8002f84:	08003045 	.word	0x08003045
 8002f88:	08003053 	.word	0x08003053
 8002f8c:	08003059 	.word	0x08003059
 8002f90:	0800305f 	.word	0x0800305f
 8002f94:	08003065 	.word	0x08003065
 8002f98:	0800306b 	.word	0x0800306b
 8002f9c:	080030ff 	.word	0x080030ff
 8002fa0:	080030ff 	.word	0x080030ff
 8002fa4:	08003071 	.word	0x08003071
 8002fa8:	08003093 	.word	0x08003093
 8002fac:	080030b5 	.word	0x080030b5
 8002fb0:	080030e9 	.word	0x080030e9
    {
    	case CTRL_SYNC:/* Complete pending write process (needed at _FS_READONLY == 0) */
    		res = RES_OK;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	77fb      	strb	r3, [r7, #31]
    		break;
 8002fb8:	e0a1      	b.n	80030fe <USER_ioctl+0x1b2>
    	case GET_SECTOR_COUNT:	/* Get media size (needed at _USE_MKFS == 1) */
    		if ((SD_SendCommand(9, 0) == 0) && SD_RxDataBlock((unsigned char*)csd, 16)) res = RES_OK;
 8002fba:	2100      	movs	r1, #0
 8002fbc:	2009      	movs	r0, #9
 8002fbe:	f7fd fc73 	bl	80008a8 <SD_SendCommand>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d108      	bne.n	8002fda <USER_ioctl+0x8e>
 8002fc8:	2110      	movs	r1, #16
 8002fca:	4850      	ldr	r0, [pc, #320]	; (800310c <USER_ioctl+0x1c0>)
 8002fcc:	f7fd fd30 	bl	8000a30 <SD_RxDataBlock>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d001      	beq.n	8002fda <USER_ioctl+0x8e>
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	77fb      	strb	r3, [r7, #31]
    		csize = (((uint32_t)csd[6] & 0x3) << 10) + ((uint32_t) csd[7] << 2) + (((uint32_t) csd[8] & 0xc0) >> 6) + 1;
 8002fda:	4b4c      	ldr	r3, [pc, #304]	; (800310c <USER_ioctl+0x1c0>)
 8002fdc:	799b      	ldrb	r3, [r3, #6]
 8002fde:	029b      	lsls	r3, r3, #10
 8002fe0:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 8002fe4:	4b49      	ldr	r3, [pc, #292]	; (800310c <USER_ioctl+0x1c0>)
 8002fe6:	79db      	ldrb	r3, [r3, #7]
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	4413      	add	r3, r2
 8002fec:	4a47      	ldr	r2, [pc, #284]	; (800310c <USER_ioctl+0x1c0>)
 8002fee:	7a12      	ldrb	r2, [r2, #8]
 8002ff0:	0992      	lsrs	r2, r2, #6
 8002ff2:	b2d2      	uxtb	r2, r2
 8002ff4:	4413      	add	r3, r2
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	613b      	str	r3, [r7, #16]
    		read_bl_len = csd[5] & 0x0f;
 8002ffa:	4b44      	ldr	r3, [pc, #272]	; (800310c <USER_ioctl+0x1c0>)
 8002ffc:	795b      	ldrb	r3, [r3, #5]
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	f003 030f 	and.w	r3, r3, #15
 8003004:	81fb      	strh	r3, [r7, #14]
    		mult = ((csd[9] & 0x3) << 1) + ((csd[10] & 0x80) >> 7);
 8003006:	4b41      	ldr	r3, [pc, #260]	; (800310c <USER_ioctl+0x1c0>)
 8003008:	7a5b      	ldrb	r3, [r3, #9]
 800300a:	005b      	lsls	r3, r3, #1
 800300c:	b29b      	uxth	r3, r3
 800300e:	f003 0306 	and.w	r3, r3, #6
 8003012:	b29a      	uxth	r2, r3
 8003014:	4b3d      	ldr	r3, [pc, #244]	; (800310c <USER_ioctl+0x1c0>)
 8003016:	7a9b      	ldrb	r3, [r3, #10]
 8003018:	09db      	lsrs	r3, r3, #7
 800301a:	b2db      	uxtb	r3, r3
 800301c:	b29b      	uxth	r3, r3
 800301e:	4413      	add	r3, r2
 8003020:	81bb      	strh	r3, [r7, #12]
    		*(unsigned long*) buff = (unsigned long) csize << (2+mult+read_bl_len-9);
 8003022:	89bb      	ldrh	r3, [r7, #12]
 8003024:	1c9a      	adds	r2, r3, #2
 8003026:	89fb      	ldrh	r3, [r7, #14]
 8003028:	4413      	add	r3, r2
 800302a:	3b09      	subs	r3, #9
 800302c:	693a      	ldr	r2, [r7, #16]
 800302e:	409a      	lsls	r2, r3
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	601a      	str	r2, [r3, #0]
    		break;
 8003034:	e063      	b.n	80030fe <USER_ioctl+0x1b2>
    	case GET_SECTOR_SIZE:	/* Get sector size (needed at _MAX_SS != _MIN_SS) */
    		*(unsigned short*)buff = 512;
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	f44f 7200 	mov.w	r2, #512	; 0x200
 800303c:	801a      	strh	r2, [r3, #0]
    		res = RES_OK;
 800303e:	2300      	movs	r3, #0
 8003040:	77fb      	strb	r3, [r7, #31]
    		break;
 8003042:	e05c      	b.n	80030fe <USER_ioctl+0x1b2>
    	case GET_BLOCK_SIZE: /* Get erase block size (needed at _USE_MKFS == 1) */
    		*(unsigned short*)buff = 512;
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	f44f 7200 	mov.w	r2, #512	; 0x200
 800304a:	801a      	strh	r2, [r3, #0]
    		res = RES_OK;
 800304c:	2300      	movs	r3, #0
 800304e:	77fb      	strb	r3, [r7, #31]
    		break;
 8003050:	e055      	b.n	80030fe <USER_ioctl+0x1b2>
    	case CTRL_TRIM:/* Inform device that the data on the block of sectors is no longer used (needed at _USE_TRIM == 1) */
    		res = RES_OK;
 8003052:	2300      	movs	r3, #0
 8003054:	77fb      	strb	r3, [r7, #31]
    		break;
 8003056:	e052      	b.n	80030fe <USER_ioctl+0x1b2>

    	/* Generic command (Not used by FatFs) */
    	case CTRL_POWER:	/* Get/Set power status */
    		res = RES_OK;
 8003058:	2300      	movs	r3, #0
 800305a:	77fb      	strb	r3, [r7, #31]
    		break;
 800305c:	e04f      	b.n	80030fe <USER_ioctl+0x1b2>
    	case CTRL_LOCK:	/* Lock/Unlock media removal */
    		res = RES_OK;
 800305e:	2300      	movs	r3, #0
 8003060:	77fb      	strb	r3, [r7, #31]
    		break;
 8003062:	e04c      	b.n	80030fe <USER_ioctl+0x1b2>
    	case CTRL_EJECT:	/* Eject media */
    		res = RES_OK;
 8003064:	2300      	movs	r3, #0
 8003066:	77fb      	strb	r3, [r7, #31]
    		break;
 8003068:	e049      	b.n	80030fe <USER_ioctl+0x1b2>
    	case CTRL_FORMAT:	/* Create physical format on the media */
    		res = RES_OK;
 800306a:	2300      	movs	r3, #0
 800306c:	77fb      	strb	r3, [r7, #31]
    		break;
 800306e:	e046      	b.n	80030fe <USER_ioctl+0x1b2>

    	/* MMC/SDC specific ioctl command */
    	case MMC_GET_TYPE:	/* Get card type */
    		break;
    	case MMC_GET_CSD:	/* Get CSD */
    		if ((SD_SendCommand(9, 0) == 0) && SD_RxDataBlock((unsigned char*)buff, 16)) res = RES_OK;
 8003070:	2100      	movs	r1, #0
 8003072:	2009      	movs	r0, #9
 8003074:	f7fd fc18 	bl	80008a8 <SD_SendCommand>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d13a      	bne.n	80030f4 <USER_ioctl+0x1a8>
 800307e:	2110      	movs	r1, #16
 8003080:	6838      	ldr	r0, [r7, #0]
 8003082:	f7fd fcd5 	bl	8000a30 <SD_RxDataBlock>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d033      	beq.n	80030f4 <USER_ioctl+0x1a8>
 800308c:	2300      	movs	r3, #0
 800308e:	77fb      	strb	r3, [r7, #31]
    		break;
 8003090:	e030      	b.n	80030f4 <USER_ioctl+0x1a8>
    	case MMC_GET_CID:	/* Get CID */
    		if ((SD_SendCommand(10, 0) == 0) && SD_RxDataBlock((unsigned char*)buff, 16)) res = RES_OK;
 8003092:	2100      	movs	r1, #0
 8003094:	200a      	movs	r0, #10
 8003096:	f7fd fc07 	bl	80008a8 <SD_SendCommand>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d12b      	bne.n	80030f8 <USER_ioctl+0x1ac>
 80030a0:	2110      	movs	r1, #16
 80030a2:	6838      	ldr	r0, [r7, #0]
 80030a4:	f7fd fcc4 	bl	8000a30 <SD_RxDataBlock>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d024      	beq.n	80030f8 <USER_ioctl+0x1ac>
 80030ae:	2300      	movs	r3, #0
 80030b0:	77fb      	strb	r3, [r7, #31]
    		break;
 80030b2:	e021      	b.n	80030f8 <USER_ioctl+0x1ac>
    	case MMC_GET_OCR:	/* Get OCR */
    		if (SD_SendCommand(58, 0) == 0)
 80030b4:	2100      	movs	r1, #0
 80030b6:	203a      	movs	r0, #58	; 0x3a
 80030b8:	f7fd fbf6 	bl	80008a8 <SD_SendCommand>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d11c      	bne.n	80030fc <USER_ioctl+0x1b0>
    		{
    			for (int i = 0; i < 4; i++)
 80030c2:	2300      	movs	r3, #0
 80030c4:	617b      	str	r3, [r7, #20]
 80030c6:	e009      	b.n	80030dc <USER_ioctl+0x190>
    			{
    				*ptr++ = SD_ReceiveByte();
 80030c8:	69bc      	ldr	r4, [r7, #24]
 80030ca:	1c63      	adds	r3, r4, #1
 80030cc:	61bb      	str	r3, [r7, #24]
 80030ce:	f7fd fbd7 	bl	8000880 <SD_ReceiveByte>
 80030d2:	4603      	mov	r3, r0
 80030d4:	7023      	strb	r3, [r4, #0]
    			for (int i = 0; i < 4; i++)
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	3301      	adds	r3, #1
 80030da:	617b      	str	r3, [r7, #20]
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	2b03      	cmp	r3, #3
 80030e0:	ddf2      	ble.n	80030c8 <USER_ioctl+0x17c>
    			}
    			res = RES_OK;
 80030e2:	2300      	movs	r3, #0
 80030e4:	77fb      	strb	r3, [r7, #31]
    		}
    		break;
 80030e6:	e009      	b.n	80030fc <USER_ioctl+0x1b0>
    	case MMC_GET_SDSTAT:	/* Get SD status */
    		*(unsigned char*)buff = Stat;
 80030e8:	4b09      	ldr	r3, [pc, #36]	; (8003110 <USER_ioctl+0x1c4>)
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	b2da      	uxtb	r2, r3
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	701a      	strb	r2, [r3, #0]
    		break;
 80030f2:	e004      	b.n	80030fe <USER_ioctl+0x1b2>
    		break;
 80030f4:	bf00      	nop
 80030f6:	e002      	b.n	80030fe <USER_ioctl+0x1b2>
    		break;
 80030f8:	bf00      	nop
 80030fa:	e000      	b.n	80030fe <USER_ioctl+0x1b2>
    		break;
 80030fc:	bf00      	nop
    }

    SD_Deselect();
 80030fe:	f7fd fbb9 	bl	8000874 <SD_Deselect>

    return res;
 8003102:	7ffb      	ldrb	r3, [r7, #31]
  /* USER CODE END IOCTL */
}
 8003104:	4618      	mov	r0, r3
 8003106:	3724      	adds	r7, #36	; 0x24
 8003108:	46bd      	mov	sp, r7
 800310a:	bd90      	pop	{r4, r7, pc}
 800310c:	20000de4 	.word	0x20000de4
 8003110:	20000009 	.word	0x20000009

08003114 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	4603      	mov	r3, r0
 800311c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800311e:	79fb      	ldrb	r3, [r7, #7]
 8003120:	4a08      	ldr	r2, [pc, #32]	; (8003144 <disk_status+0x30>)
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	4413      	add	r3, r2
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	79fa      	ldrb	r2, [r7, #7]
 800312c:	4905      	ldr	r1, [pc, #20]	; (8003144 <disk_status+0x30>)
 800312e:	440a      	add	r2, r1
 8003130:	7a12      	ldrb	r2, [r2, #8]
 8003132:	4610      	mov	r0, r2
 8003134:	4798      	blx	r3
 8003136:	4603      	mov	r3, r0
 8003138:	73fb      	strb	r3, [r7, #15]
  return stat;
 800313a:	7bfb      	ldrb	r3, [r7, #15]
}
 800313c:	4618      	mov	r0, r3
 800313e:	3710      	adds	r7, #16
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}
 8003144:	20000064 	.word	0x20000064

08003148 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	4603      	mov	r3, r0
 8003150:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8003152:	2300      	movs	r3, #0
 8003154:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8003156:	79fb      	ldrb	r3, [r7, #7]
 8003158:	4a0d      	ldr	r2, [pc, #52]	; (8003190 <disk_initialize+0x48>)
 800315a:	5cd3      	ldrb	r3, [r2, r3]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d111      	bne.n	8003184 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8003160:	79fb      	ldrb	r3, [r7, #7]
 8003162:	4a0b      	ldr	r2, [pc, #44]	; (8003190 <disk_initialize+0x48>)
 8003164:	2101      	movs	r1, #1
 8003166:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8003168:	79fb      	ldrb	r3, [r7, #7]
 800316a:	4a09      	ldr	r2, [pc, #36]	; (8003190 <disk_initialize+0x48>)
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	4413      	add	r3, r2
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	79fa      	ldrb	r2, [r7, #7]
 8003176:	4906      	ldr	r1, [pc, #24]	; (8003190 <disk_initialize+0x48>)
 8003178:	440a      	add	r2, r1
 800317a:	7a12      	ldrb	r2, [r2, #8]
 800317c:	4610      	mov	r0, r2
 800317e:	4798      	blx	r3
 8003180:	4603      	mov	r3, r0
 8003182:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8003184:	7bfb      	ldrb	r3, [r7, #15]
}
 8003186:	4618      	mov	r0, r3
 8003188:	3710      	adds	r7, #16
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	20000064 	.word	0x20000064

08003194 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8003194:	b590      	push	{r4, r7, lr}
 8003196:	b087      	sub	sp, #28
 8003198:	af00      	add	r7, sp, #0
 800319a:	60b9      	str	r1, [r7, #8]
 800319c:	607a      	str	r2, [r7, #4]
 800319e:	603b      	str	r3, [r7, #0]
 80031a0:	4603      	mov	r3, r0
 80031a2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80031a4:	7bfb      	ldrb	r3, [r7, #15]
 80031a6:	4a0a      	ldr	r2, [pc, #40]	; (80031d0 <disk_read+0x3c>)
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	4413      	add	r3, r2
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	689c      	ldr	r4, [r3, #8]
 80031b0:	7bfb      	ldrb	r3, [r7, #15]
 80031b2:	4a07      	ldr	r2, [pc, #28]	; (80031d0 <disk_read+0x3c>)
 80031b4:	4413      	add	r3, r2
 80031b6:	7a18      	ldrb	r0, [r3, #8]
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	68b9      	ldr	r1, [r7, #8]
 80031be:	47a0      	blx	r4
 80031c0:	4603      	mov	r3, r0
 80031c2:	75fb      	strb	r3, [r7, #23]
  return res;
 80031c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	371c      	adds	r7, #28
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd90      	pop	{r4, r7, pc}
 80031ce:	bf00      	nop
 80031d0:	20000064 	.word	0x20000064

080031d4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80031d4:	b590      	push	{r4, r7, lr}
 80031d6:	b087      	sub	sp, #28
 80031d8:	af00      	add	r7, sp, #0
 80031da:	60b9      	str	r1, [r7, #8]
 80031dc:	607a      	str	r2, [r7, #4]
 80031de:	603b      	str	r3, [r7, #0]
 80031e0:	4603      	mov	r3, r0
 80031e2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80031e4:	7bfb      	ldrb	r3, [r7, #15]
 80031e6:	4a0a      	ldr	r2, [pc, #40]	; (8003210 <disk_write+0x3c>)
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	4413      	add	r3, r2
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	68dc      	ldr	r4, [r3, #12]
 80031f0:	7bfb      	ldrb	r3, [r7, #15]
 80031f2:	4a07      	ldr	r2, [pc, #28]	; (8003210 <disk_write+0x3c>)
 80031f4:	4413      	add	r3, r2
 80031f6:	7a18      	ldrb	r0, [r3, #8]
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	68b9      	ldr	r1, [r7, #8]
 80031fe:	47a0      	blx	r4
 8003200:	4603      	mov	r3, r0
 8003202:	75fb      	strb	r3, [r7, #23]
  return res;
 8003204:	7dfb      	ldrb	r3, [r7, #23]
}
 8003206:	4618      	mov	r0, r3
 8003208:	371c      	adds	r7, #28
 800320a:	46bd      	mov	sp, r7
 800320c:	bd90      	pop	{r4, r7, pc}
 800320e:	bf00      	nop
 8003210:	20000064 	.word	0x20000064

08003214 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
 800321a:	4603      	mov	r3, r0
 800321c:	603a      	str	r2, [r7, #0]
 800321e:	71fb      	strb	r3, [r7, #7]
 8003220:	460b      	mov	r3, r1
 8003222:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003224:	79fb      	ldrb	r3, [r7, #7]
 8003226:	4a09      	ldr	r2, [pc, #36]	; (800324c <disk_ioctl+0x38>)
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	4413      	add	r3, r2
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	691b      	ldr	r3, [r3, #16]
 8003230:	79fa      	ldrb	r2, [r7, #7]
 8003232:	4906      	ldr	r1, [pc, #24]	; (800324c <disk_ioctl+0x38>)
 8003234:	440a      	add	r2, r1
 8003236:	7a10      	ldrb	r0, [r2, #8]
 8003238:	79b9      	ldrb	r1, [r7, #6]
 800323a:	683a      	ldr	r2, [r7, #0]
 800323c:	4798      	blx	r3
 800323e:	4603      	mov	r3, r0
 8003240:	73fb      	strb	r3, [r7, #15]
  return res;
 8003242:	7bfb      	ldrb	r3, [r7, #15]
}
 8003244:	4618      	mov	r0, r3
 8003246:	3710      	adds	r7, #16
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}
 800324c:	20000064 	.word	0x20000064

08003250 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8003250:	b480      	push	{r7}
 8003252:	b085      	sub	sp, #20
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	3301      	adds	r3, #1
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8003260:	89fb      	ldrh	r3, [r7, #14]
 8003262:	021b      	lsls	r3, r3, #8
 8003264:	b21a      	sxth	r2, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	b21b      	sxth	r3, r3
 800326c:	4313      	orrs	r3, r2
 800326e:	b21b      	sxth	r3, r3
 8003270:	81fb      	strh	r3, [r7, #14]
	return rv;
 8003272:	89fb      	ldrh	r3, [r7, #14]
}
 8003274:	4618      	mov	r0, r3
 8003276:	3714      	adds	r7, #20
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8003280:	b480      	push	{r7}
 8003282:	b085      	sub	sp, #20
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	3303      	adds	r3, #3
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	021b      	lsls	r3, r3, #8
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	3202      	adds	r2, #2
 8003298:	7812      	ldrb	r2, [r2, #0]
 800329a:	4313      	orrs	r3, r2
 800329c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	021b      	lsls	r3, r3, #8
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	3201      	adds	r2, #1
 80032a6:	7812      	ldrb	r2, [r2, #0]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	021b      	lsls	r3, r3, #8
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	7812      	ldrb	r2, [r2, #0]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	60fb      	str	r3, [r7, #12]
	return rv;
 80032b8:	68fb      	ldr	r3, [r7, #12]
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3714      	adds	r7, #20
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr

080032c6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80032c6:	b480      	push	{r7}
 80032c8:	b083      	sub	sp, #12
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]
 80032ce:	460b      	mov	r3, r1
 80032d0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	1c5a      	adds	r2, r3, #1
 80032d6:	607a      	str	r2, [r7, #4]
 80032d8:	887a      	ldrh	r2, [r7, #2]
 80032da:	b2d2      	uxtb	r2, r2
 80032dc:	701a      	strb	r2, [r3, #0]
 80032de:	887b      	ldrh	r3, [r7, #2]
 80032e0:	0a1b      	lsrs	r3, r3, #8
 80032e2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	1c5a      	adds	r2, r3, #1
 80032e8:	607a      	str	r2, [r7, #4]
 80032ea:	887a      	ldrh	r2, [r7, #2]
 80032ec:	b2d2      	uxtb	r2, r2
 80032ee:	701a      	strb	r2, [r3, #0]
}
 80032f0:	bf00      	nop
 80032f2:	370c      	adds	r7, #12
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr

080032fc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	1c5a      	adds	r2, r3, #1
 800330a:	607a      	str	r2, [r7, #4]
 800330c:	683a      	ldr	r2, [r7, #0]
 800330e:	b2d2      	uxtb	r2, r2
 8003310:	701a      	strb	r2, [r3, #0]
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	0a1b      	lsrs	r3, r3, #8
 8003316:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	1c5a      	adds	r2, r3, #1
 800331c:	607a      	str	r2, [r7, #4]
 800331e:	683a      	ldr	r2, [r7, #0]
 8003320:	b2d2      	uxtb	r2, r2
 8003322:	701a      	strb	r2, [r3, #0]
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	0a1b      	lsrs	r3, r3, #8
 8003328:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	1c5a      	adds	r2, r3, #1
 800332e:	607a      	str	r2, [r7, #4]
 8003330:	683a      	ldr	r2, [r7, #0]
 8003332:	b2d2      	uxtb	r2, r2
 8003334:	701a      	strb	r2, [r3, #0]
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	0a1b      	lsrs	r3, r3, #8
 800333a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	1c5a      	adds	r2, r3, #1
 8003340:	607a      	str	r2, [r7, #4]
 8003342:	683a      	ldr	r2, [r7, #0]
 8003344:	b2d2      	uxtb	r2, r2
 8003346:	701a      	strb	r2, [r3, #0]
}
 8003348:	bf00      	nop
 800334a:	370c      	adds	r7, #12
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr

08003354 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8003354:	b480      	push	{r7}
 8003356:	b087      	sub	sp, #28
 8003358:	af00      	add	r7, sp, #0
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	60b9      	str	r1, [r7, #8]
 800335e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d00d      	beq.n	800338a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800336e:	693a      	ldr	r2, [r7, #16]
 8003370:	1c53      	adds	r3, r2, #1
 8003372:	613b      	str	r3, [r7, #16]
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	1c59      	adds	r1, r3, #1
 8003378:	6179      	str	r1, [r7, #20]
 800337a:	7812      	ldrb	r2, [r2, #0]
 800337c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	3b01      	subs	r3, #1
 8003382:	607b      	str	r3, [r7, #4]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d1f1      	bne.n	800336e <mem_cpy+0x1a>
	}
}
 800338a:	bf00      	nop
 800338c:	371c      	adds	r7, #28
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr

08003396 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8003396:	b480      	push	{r7}
 8003398:	b087      	sub	sp, #28
 800339a:	af00      	add	r7, sp, #0
 800339c:	60f8      	str	r0, [r7, #12]
 800339e:	60b9      	str	r1, [r7, #8]
 80033a0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	1c5a      	adds	r2, r3, #1
 80033aa:	617a      	str	r2, [r7, #20]
 80033ac:	68ba      	ldr	r2, [r7, #8]
 80033ae:	b2d2      	uxtb	r2, r2
 80033b0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	3b01      	subs	r3, #1
 80033b6:	607b      	str	r3, [r7, #4]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d1f3      	bne.n	80033a6 <mem_set+0x10>
}
 80033be:	bf00      	nop
 80033c0:	371c      	adds	r7, #28
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr

080033ca <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80033ca:	b480      	push	{r7}
 80033cc:	b089      	sub	sp, #36	; 0x24
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	60f8      	str	r0, [r7, #12]
 80033d2:	60b9      	str	r1, [r7, #8]
 80033d4:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	61fb      	str	r3, [r7, #28]
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80033de:	2300      	movs	r3, #0
 80033e0:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	1c5a      	adds	r2, r3, #1
 80033e6:	61fa      	str	r2, [r7, #28]
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	4619      	mov	r1, r3
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	1c5a      	adds	r2, r3, #1
 80033f0:	61ba      	str	r2, [r7, #24]
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	1acb      	subs	r3, r1, r3
 80033f6:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	3b01      	subs	r3, #1
 80033fc:	607b      	str	r3, [r7, #4]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d002      	beq.n	800340a <mem_cmp+0x40>
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d0eb      	beq.n	80033e2 <mem_cmp+0x18>

	return r;
 800340a:	697b      	ldr	r3, [r7, #20]
}
 800340c:	4618      	mov	r0, r3
 800340e:	3724      	adds	r7, #36	; 0x24
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr

08003418 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8003422:	e002      	b.n	800342a <chk_chr+0x12>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	3301      	adds	r3, #1
 8003428:	607b      	str	r3, [r7, #4]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d005      	beq.n	800343e <chk_chr+0x26>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	461a      	mov	r2, r3
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	4293      	cmp	r3, r2
 800343c:	d1f2      	bne.n	8003424 <chk_chr+0xc>
	return *str;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	781b      	ldrb	r3, [r3, #0]
}
 8003442:	4618      	mov	r0, r3
 8003444:	370c      	adds	r7, #12
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
	...

08003450 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003450:	b480      	push	{r7}
 8003452:	b085      	sub	sp, #20
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800345a:	2300      	movs	r3, #0
 800345c:	60bb      	str	r3, [r7, #8]
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	60fb      	str	r3, [r7, #12]
 8003462:	e029      	b.n	80034b8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8003464:	4a27      	ldr	r2, [pc, #156]	; (8003504 <chk_lock+0xb4>)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	011b      	lsls	r3, r3, #4
 800346a:	4413      	add	r3, r2
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d01d      	beq.n	80034ae <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003472:	4a24      	ldr	r2, [pc, #144]	; (8003504 <chk_lock+0xb4>)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	011b      	lsls	r3, r3, #4
 8003478:	4413      	add	r3, r2
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	429a      	cmp	r2, r3
 8003482:	d116      	bne.n	80034b2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8003484:	4a1f      	ldr	r2, [pc, #124]	; (8003504 <chk_lock+0xb4>)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	011b      	lsls	r3, r3, #4
 800348a:	4413      	add	r3, r2
 800348c:	3304      	adds	r3, #4
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003494:	429a      	cmp	r2, r3
 8003496:	d10c      	bne.n	80034b2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8003498:	4a1a      	ldr	r2, [pc, #104]	; (8003504 <chk_lock+0xb4>)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	011b      	lsls	r3, r3, #4
 800349e:	4413      	add	r3, r2
 80034a0:	3308      	adds	r3, #8
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d102      	bne.n	80034b2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80034ac:	e007      	b.n	80034be <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80034ae:	2301      	movs	r3, #1
 80034b0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	3301      	adds	r3, #1
 80034b6:	60fb      	str	r3, [r7, #12]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d9d2      	bls.n	8003464 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d109      	bne.n	80034d8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d102      	bne.n	80034d0 <chk_lock+0x80>
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d101      	bne.n	80034d4 <chk_lock+0x84>
 80034d0:	2300      	movs	r3, #0
 80034d2:	e010      	b.n	80034f6 <chk_lock+0xa6>
 80034d4:	2312      	movs	r3, #18
 80034d6:	e00e      	b.n	80034f6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d108      	bne.n	80034f0 <chk_lock+0xa0>
 80034de:	4a09      	ldr	r2, [pc, #36]	; (8003504 <chk_lock+0xb4>)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	011b      	lsls	r3, r3, #4
 80034e4:	4413      	add	r3, r2
 80034e6:	330c      	adds	r3, #12
 80034e8:	881b      	ldrh	r3, [r3, #0]
 80034ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034ee:	d101      	bne.n	80034f4 <chk_lock+0xa4>
 80034f0:	2310      	movs	r3, #16
 80034f2:	e000      	b.n	80034f6 <chk_lock+0xa6>
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3714      	adds	r7, #20
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop
 8003504:	20000044 	.word	0x20000044

08003508 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800350e:	2300      	movs	r3, #0
 8003510:	607b      	str	r3, [r7, #4]
 8003512:	e002      	b.n	800351a <enq_lock+0x12>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	3301      	adds	r3, #1
 8003518:	607b      	str	r3, [r7, #4]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2b01      	cmp	r3, #1
 800351e:	d806      	bhi.n	800352e <enq_lock+0x26>
 8003520:	4a09      	ldr	r2, [pc, #36]	; (8003548 <enq_lock+0x40>)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	011b      	lsls	r3, r3, #4
 8003526:	4413      	add	r3, r2
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d1f2      	bne.n	8003514 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2b02      	cmp	r3, #2
 8003532:	bf14      	ite	ne
 8003534:	2301      	movne	r3, #1
 8003536:	2300      	moveq	r3, #0
 8003538:	b2db      	uxtb	r3, r3
}
 800353a:	4618      	mov	r0, r3
 800353c:	370c      	adds	r7, #12
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	20000044 	.word	0x20000044

0800354c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800354c:	b480      	push	{r7}
 800354e:	b085      	sub	sp, #20
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003556:	2300      	movs	r3, #0
 8003558:	60fb      	str	r3, [r7, #12]
 800355a:	e01f      	b.n	800359c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800355c:	4a41      	ldr	r2, [pc, #260]	; (8003664 <inc_lock+0x118>)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	011b      	lsls	r3, r3, #4
 8003562:	4413      	add	r3, r2
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	429a      	cmp	r2, r3
 800356c:	d113      	bne.n	8003596 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800356e:	4a3d      	ldr	r2, [pc, #244]	; (8003664 <inc_lock+0x118>)
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	011b      	lsls	r3, r3, #4
 8003574:	4413      	add	r3, r2
 8003576:	3304      	adds	r3, #4
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800357e:	429a      	cmp	r2, r3
 8003580:	d109      	bne.n	8003596 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8003582:	4a38      	ldr	r2, [pc, #224]	; (8003664 <inc_lock+0x118>)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	011b      	lsls	r3, r3, #4
 8003588:	4413      	add	r3, r2
 800358a:	3308      	adds	r3, #8
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8003592:	429a      	cmp	r2, r3
 8003594:	d006      	beq.n	80035a4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	3301      	adds	r3, #1
 800359a:	60fb      	str	r3, [r7, #12]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d9dc      	bls.n	800355c <inc_lock+0x10>
 80035a2:	e000      	b.n	80035a6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80035a4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d132      	bne.n	8003612 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80035ac:	2300      	movs	r3, #0
 80035ae:	60fb      	str	r3, [r7, #12]
 80035b0:	e002      	b.n	80035b8 <inc_lock+0x6c>
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	3301      	adds	r3, #1
 80035b6:	60fb      	str	r3, [r7, #12]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d806      	bhi.n	80035cc <inc_lock+0x80>
 80035be:	4a29      	ldr	r2, [pc, #164]	; (8003664 <inc_lock+0x118>)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	011b      	lsls	r3, r3, #4
 80035c4:	4413      	add	r3, r2
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d1f2      	bne.n	80035b2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d101      	bne.n	80035d6 <inc_lock+0x8a>
 80035d2:	2300      	movs	r3, #0
 80035d4:	e040      	b.n	8003658 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	4922      	ldr	r1, [pc, #136]	; (8003664 <inc_lock+0x118>)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	011b      	lsls	r3, r3, #4
 80035e0:	440b      	add	r3, r1
 80035e2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	689a      	ldr	r2, [r3, #8]
 80035e8:	491e      	ldr	r1, [pc, #120]	; (8003664 <inc_lock+0x118>)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	011b      	lsls	r3, r3, #4
 80035ee:	440b      	add	r3, r1
 80035f0:	3304      	adds	r3, #4
 80035f2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	695a      	ldr	r2, [r3, #20]
 80035f8:	491a      	ldr	r1, [pc, #104]	; (8003664 <inc_lock+0x118>)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	011b      	lsls	r3, r3, #4
 80035fe:	440b      	add	r3, r1
 8003600:	3308      	adds	r3, #8
 8003602:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8003604:	4a17      	ldr	r2, [pc, #92]	; (8003664 <inc_lock+0x118>)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	011b      	lsls	r3, r3, #4
 800360a:	4413      	add	r3, r2
 800360c:	330c      	adds	r3, #12
 800360e:	2200      	movs	r2, #0
 8003610:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d009      	beq.n	800362c <inc_lock+0xe0>
 8003618:	4a12      	ldr	r2, [pc, #72]	; (8003664 <inc_lock+0x118>)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	011b      	lsls	r3, r3, #4
 800361e:	4413      	add	r3, r2
 8003620:	330c      	adds	r3, #12
 8003622:	881b      	ldrh	r3, [r3, #0]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d001      	beq.n	800362c <inc_lock+0xe0>
 8003628:	2300      	movs	r3, #0
 800362a:	e015      	b.n	8003658 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d108      	bne.n	8003644 <inc_lock+0xf8>
 8003632:	4a0c      	ldr	r2, [pc, #48]	; (8003664 <inc_lock+0x118>)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	011b      	lsls	r3, r3, #4
 8003638:	4413      	add	r3, r2
 800363a:	330c      	adds	r3, #12
 800363c:	881b      	ldrh	r3, [r3, #0]
 800363e:	3301      	adds	r3, #1
 8003640:	b29a      	uxth	r2, r3
 8003642:	e001      	b.n	8003648 <inc_lock+0xfc>
 8003644:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003648:	4906      	ldr	r1, [pc, #24]	; (8003664 <inc_lock+0x118>)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	011b      	lsls	r3, r3, #4
 800364e:	440b      	add	r3, r1
 8003650:	330c      	adds	r3, #12
 8003652:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	3301      	adds	r3, #1
}
 8003658:	4618      	mov	r0, r3
 800365a:	3714      	adds	r7, #20
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr
 8003664:	20000044 	.word	0x20000044

08003668 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8003668:	b480      	push	{r7}
 800366a:	b085      	sub	sp, #20
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	3b01      	subs	r3, #1
 8003674:	607b      	str	r3, [r7, #4]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2b01      	cmp	r3, #1
 800367a:	d825      	bhi.n	80036c8 <dec_lock+0x60>
		n = Files[i].ctr;
 800367c:	4a17      	ldr	r2, [pc, #92]	; (80036dc <dec_lock+0x74>)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	011b      	lsls	r3, r3, #4
 8003682:	4413      	add	r3, r2
 8003684:	330c      	adds	r3, #12
 8003686:	881b      	ldrh	r3, [r3, #0]
 8003688:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800368a:	89fb      	ldrh	r3, [r7, #14]
 800368c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003690:	d101      	bne.n	8003696 <dec_lock+0x2e>
 8003692:	2300      	movs	r3, #0
 8003694:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8003696:	89fb      	ldrh	r3, [r7, #14]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d002      	beq.n	80036a2 <dec_lock+0x3a>
 800369c:	89fb      	ldrh	r3, [r7, #14]
 800369e:	3b01      	subs	r3, #1
 80036a0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80036a2:	4a0e      	ldr	r2, [pc, #56]	; (80036dc <dec_lock+0x74>)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	011b      	lsls	r3, r3, #4
 80036a8:	4413      	add	r3, r2
 80036aa:	330c      	adds	r3, #12
 80036ac:	89fa      	ldrh	r2, [r7, #14]
 80036ae:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80036b0:	89fb      	ldrh	r3, [r7, #14]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d105      	bne.n	80036c2 <dec_lock+0x5a>
 80036b6:	4a09      	ldr	r2, [pc, #36]	; (80036dc <dec_lock+0x74>)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	011b      	lsls	r3, r3, #4
 80036bc:	4413      	add	r3, r2
 80036be:	2200      	movs	r2, #0
 80036c0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80036c2:	2300      	movs	r3, #0
 80036c4:	737b      	strb	r3, [r7, #13]
 80036c6:	e001      	b.n	80036cc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80036c8:	2302      	movs	r3, #2
 80036ca:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80036cc:	7b7b      	ldrb	r3, [r7, #13]
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3714      	adds	r7, #20
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	20000044 	.word	0x20000044

080036e0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b085      	sub	sp, #20
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80036e8:	2300      	movs	r3, #0
 80036ea:	60fb      	str	r3, [r7, #12]
 80036ec:	e010      	b.n	8003710 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80036ee:	4a0d      	ldr	r2, [pc, #52]	; (8003724 <clear_lock+0x44>)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	011b      	lsls	r3, r3, #4
 80036f4:	4413      	add	r3, r2
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d105      	bne.n	800370a <clear_lock+0x2a>
 80036fe:	4a09      	ldr	r2, [pc, #36]	; (8003724 <clear_lock+0x44>)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	011b      	lsls	r3, r3, #4
 8003704:	4413      	add	r3, r2
 8003706:	2200      	movs	r2, #0
 8003708:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	3301      	adds	r3, #1
 800370e:	60fb      	str	r3, [r7, #12]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2b01      	cmp	r3, #1
 8003714:	d9eb      	bls.n	80036ee <clear_lock+0xe>
	}
}
 8003716:	bf00      	nop
 8003718:	3714      	adds	r7, #20
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr
 8003722:	bf00      	nop
 8003724:	20000044 	.word	0x20000044

08003728 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b086      	sub	sp, #24
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8003730:	2300      	movs	r3, #0
 8003732:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	78db      	ldrb	r3, [r3, #3]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d034      	beq.n	80037a6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003740:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	7858      	ldrb	r0, [r3, #1]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800374c:	2301      	movs	r3, #1
 800374e:	697a      	ldr	r2, [r7, #20]
 8003750:	f7ff fd40 	bl	80031d4 <disk_write>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d002      	beq.n	8003760 <sync_window+0x38>
			res = FR_DISK_ERR;
 800375a:	2301      	movs	r3, #1
 800375c:	73fb      	strb	r3, [r7, #15]
 800375e:	e022      	b.n	80037a6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a1b      	ldr	r3, [r3, #32]
 800376a:	697a      	ldr	r2, [r7, #20]
 800376c:	1ad2      	subs	r2, r2, r3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	699b      	ldr	r3, [r3, #24]
 8003772:	429a      	cmp	r2, r3
 8003774:	d217      	bcs.n	80037a6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	789b      	ldrb	r3, [r3, #2]
 800377a:	613b      	str	r3, [r7, #16]
 800377c:	e010      	b.n	80037a0 <sync_window+0x78>
					wsect += fs->fsize;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	699b      	ldr	r3, [r3, #24]
 8003782:	697a      	ldr	r2, [r7, #20]
 8003784:	4413      	add	r3, r2
 8003786:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	7858      	ldrb	r0, [r3, #1]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8003792:	2301      	movs	r3, #1
 8003794:	697a      	ldr	r2, [r7, #20]
 8003796:	f7ff fd1d 	bl	80031d4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	3b01      	subs	r3, #1
 800379e:	613b      	str	r3, [r7, #16]
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d8eb      	bhi.n	800377e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80037a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3718      	adds	r7, #24
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80037ba:	2300      	movs	r3, #0
 80037bc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c2:	683a      	ldr	r2, [r7, #0]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d01b      	beq.n	8003800 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f7ff ffad 	bl	8003728 <sync_window>
 80037ce:	4603      	mov	r3, r0
 80037d0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80037d2:	7bfb      	ldrb	r3, [r7, #15]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d113      	bne.n	8003800 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	7858      	ldrb	r0, [r3, #1]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80037e2:	2301      	movs	r3, #1
 80037e4:	683a      	ldr	r2, [r7, #0]
 80037e6:	f7ff fcd5 	bl	8003194 <disk_read>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d004      	beq.n	80037fa <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80037f0:	f04f 33ff 	mov.w	r3, #4294967295
 80037f4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	683a      	ldr	r2, [r7, #0]
 80037fe:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8003800:	7bfb      	ldrb	r3, [r7, #15]
}
 8003802:	4618      	mov	r0, r3
 8003804:	3710      	adds	r7, #16
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
	...

0800380c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f7ff ff87 	bl	8003728 <sync_window>
 800381a:	4603      	mov	r3, r0
 800381c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800381e:	7bfb      	ldrb	r3, [r7, #15]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d158      	bne.n	80038d6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	2b03      	cmp	r3, #3
 800382a:	d148      	bne.n	80038be <sync_fs+0xb2>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	791b      	ldrb	r3, [r3, #4]
 8003830:	2b01      	cmp	r3, #1
 8003832:	d144      	bne.n	80038be <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	3330      	adds	r3, #48	; 0x30
 8003838:	f44f 7200 	mov.w	r2, #512	; 0x200
 800383c:	2100      	movs	r1, #0
 800383e:	4618      	mov	r0, r3
 8003840:	f7ff fda9 	bl	8003396 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	3330      	adds	r3, #48	; 0x30
 8003848:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800384c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8003850:	4618      	mov	r0, r3
 8003852:	f7ff fd38 	bl	80032c6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	3330      	adds	r3, #48	; 0x30
 800385a:	4921      	ldr	r1, [pc, #132]	; (80038e0 <sync_fs+0xd4>)
 800385c:	4618      	mov	r0, r3
 800385e:	f7ff fd4d 	bl	80032fc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	3330      	adds	r3, #48	; 0x30
 8003866:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800386a:	491e      	ldr	r1, [pc, #120]	; (80038e4 <sync_fs+0xd8>)
 800386c:	4618      	mov	r0, r3
 800386e:	f7ff fd45 	bl	80032fc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	3330      	adds	r3, #48	; 0x30
 8003876:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	691b      	ldr	r3, [r3, #16]
 800387e:	4619      	mov	r1, r3
 8003880:	4610      	mov	r0, r2
 8003882:	f7ff fd3b 	bl	80032fc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	3330      	adds	r3, #48	; 0x30
 800388a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	4619      	mov	r1, r3
 8003894:	4610      	mov	r0, r2
 8003896:	f7ff fd31 	bl	80032fc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	69db      	ldr	r3, [r3, #28]
 800389e:	1c5a      	adds	r2, r3, #1
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	7858      	ldrb	r0, [r3, #1]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038b2:	2301      	movs	r3, #1
 80038b4:	f7ff fc8e 	bl	80031d4 <disk_write>
			fs->fsi_flag = 0;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	785b      	ldrb	r3, [r3, #1]
 80038c2:	2200      	movs	r2, #0
 80038c4:	2100      	movs	r1, #0
 80038c6:	4618      	mov	r0, r3
 80038c8:	f7ff fca4 	bl	8003214 <disk_ioctl>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d001      	beq.n	80038d6 <sync_fs+0xca>
 80038d2:	2301      	movs	r3, #1
 80038d4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80038d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3710      	adds	r7, #16
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	41615252 	.word	0x41615252
 80038e4:	61417272 	.word	0x61417272

080038e8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	3b02      	subs	r3, #2
 80038f6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	695b      	ldr	r3, [r3, #20]
 80038fc:	3b02      	subs	r3, #2
 80038fe:	683a      	ldr	r2, [r7, #0]
 8003900:	429a      	cmp	r2, r3
 8003902:	d301      	bcc.n	8003908 <clust2sect+0x20>
 8003904:	2300      	movs	r3, #0
 8003906:	e008      	b.n	800391a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	895b      	ldrh	r3, [r3, #10]
 800390c:	461a      	mov	r2, r3
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	fb03 f202 	mul.w	r2, r3, r2
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003918:	4413      	add	r3, r2
}
 800391a:	4618      	mov	r0, r3
 800391c:	370c      	adds	r7, #12
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr

08003926 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8003926:	b580      	push	{r7, lr}
 8003928:	b086      	sub	sp, #24
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
 800392e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	2b01      	cmp	r3, #1
 800393a:	d904      	bls.n	8003946 <get_fat+0x20>
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	695b      	ldr	r3, [r3, #20]
 8003940:	683a      	ldr	r2, [r7, #0]
 8003942:	429a      	cmp	r2, r3
 8003944:	d302      	bcc.n	800394c <get_fat+0x26>
		val = 1;	/* Internal error */
 8003946:	2301      	movs	r3, #1
 8003948:	617b      	str	r3, [r7, #20]
 800394a:	e08c      	b.n	8003a66 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800394c:	f04f 33ff 	mov.w	r3, #4294967295
 8003950:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	2b02      	cmp	r3, #2
 8003958:	d045      	beq.n	80039e6 <get_fat+0xc0>
 800395a:	2b03      	cmp	r3, #3
 800395c:	d05d      	beq.n	8003a1a <get_fat+0xf4>
 800395e:	2b01      	cmp	r3, #1
 8003960:	d177      	bne.n	8003a52 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	60fb      	str	r3, [r7, #12]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	085b      	lsrs	r3, r3, #1
 800396a:	68fa      	ldr	r2, [r7, #12]
 800396c:	4413      	add	r3, r2
 800396e:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	6a1a      	ldr	r2, [r3, #32]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	0a5b      	lsrs	r3, r3, #9
 8003978:	4413      	add	r3, r2
 800397a:	4619      	mov	r1, r3
 800397c:	6938      	ldr	r0, [r7, #16]
 800397e:	f7ff ff17 	bl	80037b0 <move_window>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d167      	bne.n	8003a58 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	1c5a      	adds	r2, r3, #1
 800398c:	60fa      	str	r2, [r7, #12]
 800398e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003992:	693a      	ldr	r2, [r7, #16]
 8003994:	4413      	add	r3, r2
 8003996:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800399a:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	6a1a      	ldr	r2, [r3, #32]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	0a5b      	lsrs	r3, r3, #9
 80039a4:	4413      	add	r3, r2
 80039a6:	4619      	mov	r1, r3
 80039a8:	6938      	ldr	r0, [r7, #16]
 80039aa:	f7ff ff01 	bl	80037b0 <move_window>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d153      	bne.n	8003a5c <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039ba:	693a      	ldr	r2, [r7, #16]
 80039bc:	4413      	add	r3, r2
 80039be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80039c2:	021b      	lsls	r3, r3, #8
 80039c4:	461a      	mov	r2, r3
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	f003 0301 	and.w	r3, r3, #1
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d002      	beq.n	80039dc <get_fat+0xb6>
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	091b      	lsrs	r3, r3, #4
 80039da:	e002      	b.n	80039e2 <get_fat+0xbc>
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039e2:	617b      	str	r3, [r7, #20]
			break;
 80039e4:	e03f      	b.n	8003a66 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	6a1a      	ldr	r2, [r3, #32]
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	0a1b      	lsrs	r3, r3, #8
 80039ee:	4413      	add	r3, r2
 80039f0:	4619      	mov	r1, r3
 80039f2:	6938      	ldr	r0, [r7, #16]
 80039f4:	f7ff fedc 	bl	80037b0 <move_window>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d130      	bne.n	8003a60 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	005b      	lsls	r3, r3, #1
 8003a08:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8003a0c:	4413      	add	r3, r2
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7ff fc1e 	bl	8003250 <ld_word>
 8003a14:	4603      	mov	r3, r0
 8003a16:	617b      	str	r3, [r7, #20]
			break;
 8003a18:	e025      	b.n	8003a66 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	6a1a      	ldr	r2, [r3, #32]
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	09db      	lsrs	r3, r3, #7
 8003a22:	4413      	add	r3, r2
 8003a24:	4619      	mov	r1, r3
 8003a26:	6938      	ldr	r0, [r7, #16]
 8003a28:	f7ff fec2 	bl	80037b0 <move_window>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d118      	bne.n	8003a64 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8003a40:	4413      	add	r3, r2
 8003a42:	4618      	mov	r0, r3
 8003a44:	f7ff fc1c 	bl	8003280 <ld_dword>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003a4e:	617b      	str	r3, [r7, #20]
			break;
 8003a50:	e009      	b.n	8003a66 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8003a52:	2301      	movs	r3, #1
 8003a54:	617b      	str	r3, [r7, #20]
 8003a56:	e006      	b.n	8003a66 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003a58:	bf00      	nop
 8003a5a:	e004      	b.n	8003a66 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003a5c:	bf00      	nop
 8003a5e:	e002      	b.n	8003a66 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003a60:	bf00      	nop
 8003a62:	e000      	b.n	8003a66 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003a64:	bf00      	nop
		}
	}

	return val;
 8003a66:	697b      	ldr	r3, [r7, #20]
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3718      	adds	r7, #24
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8003a70:	b590      	push	{r4, r7, lr}
 8003a72:	b089      	sub	sp, #36	; 0x24
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	60f8      	str	r0, [r7, #12]
 8003a78:	60b9      	str	r1, [r7, #8]
 8003a7a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8003a7c:	2302      	movs	r3, #2
 8003a7e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	f240 80d6 	bls.w	8003c34 <put_fat+0x1c4>
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	695b      	ldr	r3, [r3, #20]
 8003a8c:	68ba      	ldr	r2, [r7, #8]
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	f080 80d0 	bcs.w	8003c34 <put_fat+0x1c4>
		switch (fs->fs_type) {
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d073      	beq.n	8003b84 <put_fat+0x114>
 8003a9c:	2b03      	cmp	r3, #3
 8003a9e:	f000 8091 	beq.w	8003bc4 <put_fat+0x154>
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	f040 80c6 	bne.w	8003c34 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	61bb      	str	r3, [r7, #24]
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	085b      	lsrs	r3, r3, #1
 8003ab0:	69ba      	ldr	r2, [r7, #24]
 8003ab2:	4413      	add	r3, r2
 8003ab4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6a1a      	ldr	r2, [r3, #32]
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	0a5b      	lsrs	r3, r3, #9
 8003abe:	4413      	add	r3, r2
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	68f8      	ldr	r0, [r7, #12]
 8003ac4:	f7ff fe74 	bl	80037b0 <move_window>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003acc:	7ffb      	ldrb	r3, [r7, #31]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	f040 80a9 	bne.w	8003c26 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003ada:	69bb      	ldr	r3, [r7, #24]
 8003adc:	1c59      	adds	r1, r3, #1
 8003ade:	61b9      	str	r1, [r7, #24]
 8003ae0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ae4:	4413      	add	r3, r2
 8003ae6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	f003 0301 	and.w	r3, r3, #1
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d00d      	beq.n	8003b0e <put_fat+0x9e>
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	b25b      	sxtb	r3, r3
 8003af8:	f003 030f 	and.w	r3, r3, #15
 8003afc:	b25a      	sxtb	r2, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	011b      	lsls	r3, r3, #4
 8003b04:	b25b      	sxtb	r3, r3
 8003b06:	4313      	orrs	r3, r2
 8003b08:	b25b      	sxtb	r3, r3
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	e001      	b.n	8003b12 <put_fat+0xa2>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	697a      	ldr	r2, [r7, #20]
 8003b14:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2201      	movs	r2, #1
 8003b1a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6a1a      	ldr	r2, [r3, #32]
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	0a5b      	lsrs	r3, r3, #9
 8003b24:	4413      	add	r3, r2
 8003b26:	4619      	mov	r1, r3
 8003b28:	68f8      	ldr	r0, [r7, #12]
 8003b2a:	f7ff fe41 	bl	80037b0 <move_window>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003b32:	7ffb      	ldrb	r3, [r7, #31]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d178      	bne.n	8003c2a <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003b3e:	69bb      	ldr	r3, [r7, #24]
 8003b40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b44:	4413      	add	r3, r2
 8003b46:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	f003 0301 	and.w	r3, r3, #1
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d003      	beq.n	8003b5a <put_fat+0xea>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	091b      	lsrs	r3, r3, #4
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	e00e      	b.n	8003b78 <put_fat+0x108>
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	b25b      	sxtb	r3, r3
 8003b60:	f023 030f 	bic.w	r3, r3, #15
 8003b64:	b25a      	sxtb	r2, r3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	0a1b      	lsrs	r3, r3, #8
 8003b6a:	b25b      	sxtb	r3, r3
 8003b6c:	f003 030f 	and.w	r3, r3, #15
 8003b70:	b25b      	sxtb	r3, r3
 8003b72:	4313      	orrs	r3, r2
 8003b74:	b25b      	sxtb	r3, r3
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	697a      	ldr	r2, [r7, #20]
 8003b7a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	70da      	strb	r2, [r3, #3]
			break;
 8003b82:	e057      	b.n	8003c34 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6a1a      	ldr	r2, [r3, #32]
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	0a1b      	lsrs	r3, r3, #8
 8003b8c:	4413      	add	r3, r2
 8003b8e:	4619      	mov	r1, r3
 8003b90:	68f8      	ldr	r0, [r7, #12]
 8003b92:	f7ff fe0d 	bl	80037b0 <move_window>
 8003b96:	4603      	mov	r3, r0
 8003b98:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003b9a:	7ffb      	ldrb	r3, [r7, #31]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d146      	bne.n	8003c2e <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	005b      	lsls	r3, r3, #1
 8003baa:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8003bae:	4413      	add	r3, r2
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	b292      	uxth	r2, r2
 8003bb4:	4611      	mov	r1, r2
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f7ff fb85 	bl	80032c6 <st_word>
			fs->wflag = 1;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	70da      	strb	r2, [r3, #3]
			break;
 8003bc2:	e037      	b.n	8003c34 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6a1a      	ldr	r2, [r3, #32]
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	09db      	lsrs	r3, r3, #7
 8003bcc:	4413      	add	r3, r2
 8003bce:	4619      	mov	r1, r3
 8003bd0:	68f8      	ldr	r0, [r7, #12]
 8003bd2:	f7ff fded 	bl	80037b0 <move_window>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003bda:	7ffb      	ldrb	r3, [r7, #31]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d128      	bne.n	8003c32 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8003bf4:	4413      	add	r3, r2
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f7ff fb42 	bl	8003280 <ld_dword>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003c02:	4323      	orrs	r3, r4
 8003c04:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8003c14:	4413      	add	r3, r2
 8003c16:	6879      	ldr	r1, [r7, #4]
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f7ff fb6f 	bl	80032fc <st_dword>
			fs->wflag = 1;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2201      	movs	r2, #1
 8003c22:	70da      	strb	r2, [r3, #3]
			break;
 8003c24:	e006      	b.n	8003c34 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8003c26:	bf00      	nop
 8003c28:	e004      	b.n	8003c34 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8003c2a:	bf00      	nop
 8003c2c:	e002      	b.n	8003c34 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8003c2e:	bf00      	nop
 8003c30:	e000      	b.n	8003c34 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8003c32:	bf00      	nop
		}
	}
	return res;
 8003c34:	7ffb      	ldrb	r3, [r7, #31]
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3724      	adds	r7, #36	; 0x24
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd90      	pop	{r4, r7, pc}

08003c3e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8003c3e:	b580      	push	{r7, lr}
 8003c40:	b088      	sub	sp, #32
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	60f8      	str	r0, [r7, #12]
 8003c46:	60b9      	str	r1, [r7, #8]
 8003c48:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d904      	bls.n	8003c64 <remove_chain+0x26>
 8003c5a:	69bb      	ldr	r3, [r7, #24]
 8003c5c:	695b      	ldr	r3, [r3, #20]
 8003c5e:	68ba      	ldr	r2, [r7, #8]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d301      	bcc.n	8003c68 <remove_chain+0x2a>
 8003c64:	2302      	movs	r3, #2
 8003c66:	e04b      	b.n	8003d00 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d00c      	beq.n	8003c88 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8003c6e:	f04f 32ff 	mov.w	r2, #4294967295
 8003c72:	6879      	ldr	r1, [r7, #4]
 8003c74:	69b8      	ldr	r0, [r7, #24]
 8003c76:	f7ff fefb 	bl	8003a70 <put_fat>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8003c7e:	7ffb      	ldrb	r3, [r7, #31]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d001      	beq.n	8003c88 <remove_chain+0x4a>
 8003c84:	7ffb      	ldrb	r3, [r7, #31]
 8003c86:	e03b      	b.n	8003d00 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8003c88:	68b9      	ldr	r1, [r7, #8]
 8003c8a:	68f8      	ldr	r0, [r7, #12]
 8003c8c:	f7ff fe4b 	bl	8003926 <get_fat>
 8003c90:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d031      	beq.n	8003cfc <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d101      	bne.n	8003ca2 <remove_chain+0x64>
 8003c9e:	2302      	movs	r3, #2
 8003ca0:	e02e      	b.n	8003d00 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ca8:	d101      	bne.n	8003cae <remove_chain+0x70>
 8003caa:	2301      	movs	r3, #1
 8003cac:	e028      	b.n	8003d00 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8003cae:	2200      	movs	r2, #0
 8003cb0:	68b9      	ldr	r1, [r7, #8]
 8003cb2:	69b8      	ldr	r0, [r7, #24]
 8003cb4:	f7ff fedc 	bl	8003a70 <put_fat>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8003cbc:	7ffb      	ldrb	r3, [r7, #31]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d001      	beq.n	8003cc6 <remove_chain+0x88>
 8003cc2:	7ffb      	ldrb	r3, [r7, #31]
 8003cc4:	e01c      	b.n	8003d00 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8003cc6:	69bb      	ldr	r3, [r7, #24]
 8003cc8:	691a      	ldr	r2, [r3, #16]
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	695b      	ldr	r3, [r3, #20]
 8003cce:	3b02      	subs	r3, #2
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d20b      	bcs.n	8003cec <remove_chain+0xae>
			fs->free_clst++;
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	691b      	ldr	r3, [r3, #16]
 8003cd8:	1c5a      	adds	r2, r3, #1
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	791b      	ldrb	r3, [r3, #4]
 8003ce2:	f043 0301 	orr.w	r3, r3, #1
 8003ce6:	b2da      	uxtb	r2, r3
 8003ce8:	69bb      	ldr	r3, [r7, #24]
 8003cea:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	695b      	ldr	r3, [r3, #20]
 8003cf4:	68ba      	ldr	r2, [r7, #8]
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d3c6      	bcc.n	8003c88 <remove_chain+0x4a>
 8003cfa:	e000      	b.n	8003cfe <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8003cfc:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3720      	adds	r7, #32
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b088      	sub	sp, #32
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d10d      	bne.n	8003d3a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d004      	beq.n	8003d34 <create_chain+0x2c>
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	695b      	ldr	r3, [r3, #20]
 8003d2e:	69ba      	ldr	r2, [r7, #24]
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d31b      	bcc.n	8003d6c <create_chain+0x64>
 8003d34:	2301      	movs	r3, #1
 8003d36:	61bb      	str	r3, [r7, #24]
 8003d38:	e018      	b.n	8003d6c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8003d3a:	6839      	ldr	r1, [r7, #0]
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f7ff fdf2 	bl	8003926 <get_fat>
 8003d42:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d801      	bhi.n	8003d4e <create_chain+0x46>
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e070      	b.n	8003e30 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d54:	d101      	bne.n	8003d5a <create_chain+0x52>
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	e06a      	b.n	8003e30 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	695b      	ldr	r3, [r3, #20]
 8003d5e:	68fa      	ldr	r2, [r7, #12]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d201      	bcs.n	8003d68 <create_chain+0x60>
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	e063      	b.n	8003e30 <create_chain+0x128>
		scl = clst;
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8003d6c:	69bb      	ldr	r3, [r7, #24]
 8003d6e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	3301      	adds	r3, #1
 8003d74:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	695b      	ldr	r3, [r3, #20]
 8003d7a:	69fa      	ldr	r2, [r7, #28]
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d307      	bcc.n	8003d90 <create_chain+0x88>
				ncl = 2;
 8003d80:	2302      	movs	r3, #2
 8003d82:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8003d84:	69fa      	ldr	r2, [r7, #28]
 8003d86:	69bb      	ldr	r3, [r7, #24]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d901      	bls.n	8003d90 <create_chain+0x88>
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	e04f      	b.n	8003e30 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8003d90:	69f9      	ldr	r1, [r7, #28]
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f7ff fdc7 	bl	8003926 <get_fat>
 8003d98:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d00e      	beq.n	8003dbe <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d003      	beq.n	8003dae <create_chain+0xa6>
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dac:	d101      	bne.n	8003db2 <create_chain+0xaa>
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	e03e      	b.n	8003e30 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8003db2:	69fa      	ldr	r2, [r7, #28]
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d1da      	bne.n	8003d70 <create_chain+0x68>
 8003dba:	2300      	movs	r3, #0
 8003dbc:	e038      	b.n	8003e30 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8003dbe:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8003dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8003dc4:	69f9      	ldr	r1, [r7, #28]
 8003dc6:	6938      	ldr	r0, [r7, #16]
 8003dc8:	f7ff fe52 	bl	8003a70 <put_fat>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8003dd0:	7dfb      	ldrb	r3, [r7, #23]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d109      	bne.n	8003dea <create_chain+0xe2>
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d006      	beq.n	8003dea <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8003ddc:	69fa      	ldr	r2, [r7, #28]
 8003dde:	6839      	ldr	r1, [r7, #0]
 8003de0:	6938      	ldr	r0, [r7, #16]
 8003de2:	f7ff fe45 	bl	8003a70 <put_fat>
 8003de6:	4603      	mov	r3, r0
 8003de8:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8003dea:	7dfb      	ldrb	r3, [r7, #23]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d116      	bne.n	8003e1e <create_chain+0x116>
		fs->last_clst = ncl;
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	69fa      	ldr	r2, [r7, #28]
 8003df4:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	691a      	ldr	r2, [r3, #16]
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	695b      	ldr	r3, [r3, #20]
 8003dfe:	3b02      	subs	r3, #2
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d804      	bhi.n	8003e0e <create_chain+0x106>
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	691b      	ldr	r3, [r3, #16]
 8003e08:	1e5a      	subs	r2, r3, #1
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	791b      	ldrb	r3, [r3, #4]
 8003e12:	f043 0301 	orr.w	r3, r3, #1
 8003e16:	b2da      	uxtb	r2, r3
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	711a      	strb	r2, [r3, #4]
 8003e1c:	e007      	b.n	8003e2e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8003e1e:	7dfb      	ldrb	r3, [r7, #23]
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d102      	bne.n	8003e2a <create_chain+0x122>
 8003e24:	f04f 33ff 	mov.w	r3, #4294967295
 8003e28:	e000      	b.n	8003e2c <create_chain+0x124>
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8003e2e:	69fb      	ldr	r3, [r7, #28]
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3720      	adds	r7, #32
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}

08003e38 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b087      	sub	sp, #28
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e4c:	3304      	adds	r3, #4
 8003e4e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	0a5b      	lsrs	r3, r3, #9
 8003e54:	68fa      	ldr	r2, [r7, #12]
 8003e56:	8952      	ldrh	r2, [r2, #10]
 8003e58:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e5c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	1d1a      	adds	r2, r3, #4
 8003e62:	613a      	str	r2, [r7, #16]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d101      	bne.n	8003e72 <clmt_clust+0x3a>
 8003e6e:	2300      	movs	r3, #0
 8003e70:	e010      	b.n	8003e94 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8003e72:	697a      	ldr	r2, [r7, #20]
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d307      	bcc.n	8003e8a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8003e7a:	697a      	ldr	r2, [r7, #20]
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	617b      	str	r3, [r7, #20]
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	3304      	adds	r3, #4
 8003e86:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8003e88:	e7e9      	b.n	8003e5e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8003e8a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	4413      	add	r3, r2
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	371c      	adds	r7, #28
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b086      	sub	sp, #24
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003eb6:	d204      	bcs.n	8003ec2 <dir_sdi+0x22>
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	f003 031f 	and.w	r3, r3, #31
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d001      	beq.n	8003ec6 <dir_sdi+0x26>
		return FR_INT_ERR;
 8003ec2:	2302      	movs	r3, #2
 8003ec4:	e063      	b.n	8003f8e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	683a      	ldr	r2, [r7, #0]
 8003eca:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d106      	bne.n	8003ee6 <dir_sdi+0x46>
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	781b      	ldrb	r3, [r3, #0]
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d902      	bls.n	8003ee6 <dir_sdi+0x46>
		clst = fs->dirbase;
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d10c      	bne.n	8003f06 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	095b      	lsrs	r3, r3, #5
 8003ef0:	693a      	ldr	r2, [r7, #16]
 8003ef2:	8912      	ldrh	r2, [r2, #8]
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d301      	bcc.n	8003efc <dir_sdi+0x5c>
 8003ef8:	2302      	movs	r3, #2
 8003efa:	e048      	b.n	8003f8e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	61da      	str	r2, [r3, #28]
 8003f04:	e029      	b.n	8003f5a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	895b      	ldrh	r3, [r3, #10]
 8003f0a:	025b      	lsls	r3, r3, #9
 8003f0c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8003f0e:	e019      	b.n	8003f44 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6979      	ldr	r1, [r7, #20]
 8003f14:	4618      	mov	r0, r3
 8003f16:	f7ff fd06 	bl	8003926 <get_fat>
 8003f1a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f22:	d101      	bne.n	8003f28 <dir_sdi+0x88>
 8003f24:	2301      	movs	r3, #1
 8003f26:	e032      	b.n	8003f8e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d904      	bls.n	8003f38 <dir_sdi+0x98>
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	695b      	ldr	r3, [r3, #20]
 8003f32:	697a      	ldr	r2, [r7, #20]
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d301      	bcc.n	8003f3c <dir_sdi+0x9c>
 8003f38:	2302      	movs	r3, #2
 8003f3a:	e028      	b.n	8003f8e <dir_sdi+0xee>
			ofs -= csz;
 8003f3c:	683a      	ldr	r2, [r7, #0]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8003f44:	683a      	ldr	r2, [r7, #0]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d2e1      	bcs.n	8003f10 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8003f4c:	6979      	ldr	r1, [r7, #20]
 8003f4e:	6938      	ldr	r0, [r7, #16]
 8003f50:	f7ff fcca 	bl	80038e8 <clust2sect>
 8003f54:	4602      	mov	r2, r0
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	697a      	ldr	r2, [r7, #20]
 8003f5e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	69db      	ldr	r3, [r3, #28]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d101      	bne.n	8003f6c <dir_sdi+0xcc>
 8003f68:	2302      	movs	r3, #2
 8003f6a:	e010      	b.n	8003f8e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	69da      	ldr	r2, [r3, #28]
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	0a5b      	lsrs	r3, r3, #9
 8003f74:	441a      	add	r2, r3
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f86:	441a      	add	r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8003f8c:	2300      	movs	r3, #0
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3718      	adds	r7, #24
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}

08003f96 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8003f96:	b580      	push	{r7, lr}
 8003f98:	b086      	sub	sp, #24
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
 8003f9e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	3320      	adds	r3, #32
 8003fac:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	69db      	ldr	r3, [r3, #28]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d003      	beq.n	8003fbe <dir_next+0x28>
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003fbc:	d301      	bcc.n	8003fc2 <dir_next+0x2c>
 8003fbe:	2304      	movs	r3, #4
 8003fc0:	e0aa      	b.n	8004118 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	f040 8098 	bne.w	80040fe <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	69db      	ldr	r3, [r3, #28]
 8003fd2:	1c5a      	adds	r2, r3, #1
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	699b      	ldr	r3, [r3, #24]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d10b      	bne.n	8003ff8 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	095b      	lsrs	r3, r3, #5
 8003fe4:	68fa      	ldr	r2, [r7, #12]
 8003fe6:	8912      	ldrh	r2, [r2, #8]
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	f0c0 8088 	bcc.w	80040fe <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	61da      	str	r2, [r3, #28]
 8003ff4:	2304      	movs	r3, #4
 8003ff6:	e08f      	b.n	8004118 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	0a5b      	lsrs	r3, r3, #9
 8003ffc:	68fa      	ldr	r2, [r7, #12]
 8003ffe:	8952      	ldrh	r2, [r2, #10]
 8004000:	3a01      	subs	r2, #1
 8004002:	4013      	ands	r3, r2
 8004004:	2b00      	cmp	r3, #0
 8004006:	d17a      	bne.n	80040fe <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	699b      	ldr	r3, [r3, #24]
 800400e:	4619      	mov	r1, r3
 8004010:	4610      	mov	r0, r2
 8004012:	f7ff fc88 	bl	8003926 <get_fat>
 8004016:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	2b01      	cmp	r3, #1
 800401c:	d801      	bhi.n	8004022 <dir_next+0x8c>
 800401e:	2302      	movs	r3, #2
 8004020:	e07a      	b.n	8004118 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004028:	d101      	bne.n	800402e <dir_next+0x98>
 800402a:	2301      	movs	r3, #1
 800402c:	e074      	b.n	8004118 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	695b      	ldr	r3, [r3, #20]
 8004032:	697a      	ldr	r2, [r7, #20]
 8004034:	429a      	cmp	r2, r3
 8004036:	d358      	bcc.n	80040ea <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d104      	bne.n	8004048 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	61da      	str	r2, [r3, #28]
 8004044:	2304      	movs	r3, #4
 8004046:	e067      	b.n	8004118 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	699b      	ldr	r3, [r3, #24]
 800404e:	4619      	mov	r1, r3
 8004050:	4610      	mov	r0, r2
 8004052:	f7ff fe59 	bl	8003d08 <create_chain>
 8004056:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d101      	bne.n	8004062 <dir_next+0xcc>
 800405e:	2307      	movs	r3, #7
 8004060:	e05a      	b.n	8004118 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	2b01      	cmp	r3, #1
 8004066:	d101      	bne.n	800406c <dir_next+0xd6>
 8004068:	2302      	movs	r3, #2
 800406a:	e055      	b.n	8004118 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004072:	d101      	bne.n	8004078 <dir_next+0xe2>
 8004074:	2301      	movs	r3, #1
 8004076:	e04f      	b.n	8004118 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8004078:	68f8      	ldr	r0, [r7, #12]
 800407a:	f7ff fb55 	bl	8003728 <sync_window>
 800407e:	4603      	mov	r3, r0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d001      	beq.n	8004088 <dir_next+0xf2>
 8004084:	2301      	movs	r3, #1
 8004086:	e047      	b.n	8004118 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	3330      	adds	r3, #48	; 0x30
 800408c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004090:	2100      	movs	r1, #0
 8004092:	4618      	mov	r0, r3
 8004094:	f7ff f97f 	bl	8003396 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004098:	2300      	movs	r3, #0
 800409a:	613b      	str	r3, [r7, #16]
 800409c:	6979      	ldr	r1, [r7, #20]
 800409e:	68f8      	ldr	r0, [r7, #12]
 80040a0:	f7ff fc22 	bl	80038e8 <clust2sect>
 80040a4:	4602      	mov	r2, r0
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	62da      	str	r2, [r3, #44]	; 0x2c
 80040aa:	e012      	b.n	80040d2 <dir_next+0x13c>
						fs->wflag = 1;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2201      	movs	r2, #1
 80040b0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80040b2:	68f8      	ldr	r0, [r7, #12]
 80040b4:	f7ff fb38 	bl	8003728 <sync_window>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d001      	beq.n	80040c2 <dir_next+0x12c>
 80040be:	2301      	movs	r3, #1
 80040c0:	e02a      	b.n	8004118 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	3301      	adds	r3, #1
 80040c6:	613b      	str	r3, [r7, #16]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040cc:	1c5a      	adds	r2, r3, #1
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	62da      	str	r2, [r3, #44]	; 0x2c
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	895b      	ldrh	r3, [r3, #10]
 80040d6:	461a      	mov	r2, r3
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	4293      	cmp	r3, r2
 80040dc:	d3e6      	bcc.n	80040ac <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	1ad2      	subs	r2, r2, r3
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	697a      	ldr	r2, [r7, #20]
 80040ee:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80040f0:	6979      	ldr	r1, [r7, #20]
 80040f2:	68f8      	ldr	r0, [r7, #12]
 80040f4:	f7ff fbf8 	bl	80038e8 <clust2sect>
 80040f8:	4602      	mov	r2, r0
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	68ba      	ldr	r2, [r7, #8]
 8004102:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004110:	441a      	add	r2, r3
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004116:	2300      	movs	r3, #0
}
 8004118:	4618      	mov	r0, r3
 800411a:	3718      	adds	r7, #24
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b086      	sub	sp, #24
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8004130:	2100      	movs	r1, #0
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f7ff feb4 	bl	8003ea0 <dir_sdi>
 8004138:	4603      	mov	r3, r0
 800413a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800413c:	7dfb      	ldrb	r3, [r7, #23]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d12b      	bne.n	800419a <dir_alloc+0x7a>
		n = 0;
 8004142:	2300      	movs	r3, #0
 8004144:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	69db      	ldr	r3, [r3, #28]
 800414a:	4619      	mov	r1, r3
 800414c:	68f8      	ldr	r0, [r7, #12]
 800414e:	f7ff fb2f 	bl	80037b0 <move_window>
 8004152:	4603      	mov	r3, r0
 8004154:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004156:	7dfb      	ldrb	r3, [r7, #23]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d11d      	bne.n	8004198 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6a1b      	ldr	r3, [r3, #32]
 8004160:	781b      	ldrb	r3, [r3, #0]
 8004162:	2be5      	cmp	r3, #229	; 0xe5
 8004164:	d004      	beq.n	8004170 <dir_alloc+0x50>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a1b      	ldr	r3, [r3, #32]
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d107      	bne.n	8004180 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	3301      	adds	r3, #1
 8004174:	613b      	str	r3, [r7, #16]
 8004176:	693a      	ldr	r2, [r7, #16]
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	429a      	cmp	r2, r3
 800417c:	d102      	bne.n	8004184 <dir_alloc+0x64>
 800417e:	e00c      	b.n	800419a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8004180:	2300      	movs	r3, #0
 8004182:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8004184:	2101      	movs	r1, #1
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f7ff ff05 	bl	8003f96 <dir_next>
 800418c:	4603      	mov	r3, r0
 800418e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8004190:	7dfb      	ldrb	r3, [r7, #23]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d0d7      	beq.n	8004146 <dir_alloc+0x26>
 8004196:	e000      	b.n	800419a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8004198:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800419a:	7dfb      	ldrb	r3, [r7, #23]
 800419c:	2b04      	cmp	r3, #4
 800419e:	d101      	bne.n	80041a4 <dir_alloc+0x84>
 80041a0:	2307      	movs	r3, #7
 80041a2:	75fb      	strb	r3, [r7, #23]
	return res;
 80041a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3718      	adds	r7, #24
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}

080041ae <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80041ae:	b580      	push	{r7, lr}
 80041b0:	b084      	sub	sp, #16
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
 80041b6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	331a      	adds	r3, #26
 80041bc:	4618      	mov	r0, r3
 80041be:	f7ff f847 	bl	8003250 <ld_word>
 80041c2:	4603      	mov	r3, r0
 80041c4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	2b03      	cmp	r3, #3
 80041cc:	d109      	bne.n	80041e2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	3314      	adds	r3, #20
 80041d2:	4618      	mov	r0, r3
 80041d4:	f7ff f83c 	bl	8003250 <ld_word>
 80041d8:	4603      	mov	r3, r0
 80041da:	041b      	lsls	r3, r3, #16
 80041dc:	68fa      	ldr	r2, [r7, #12]
 80041de:	4313      	orrs	r3, r2
 80041e0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80041e2:	68fb      	ldr	r3, [r7, #12]
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3710      	adds	r7, #16
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}

080041ec <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	60b9      	str	r1, [r7, #8]
 80041f6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	331a      	adds	r3, #26
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	b292      	uxth	r2, r2
 8004200:	4611      	mov	r1, r2
 8004202:	4618      	mov	r0, r3
 8004204:	f7ff f85f 	bl	80032c6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	781b      	ldrb	r3, [r3, #0]
 800420c:	2b03      	cmp	r3, #3
 800420e:	d109      	bne.n	8004224 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	f103 0214 	add.w	r2, r3, #20
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	0c1b      	lsrs	r3, r3, #16
 800421a:	b29b      	uxth	r3, r3
 800421c:	4619      	mov	r1, r3
 800421e:	4610      	mov	r0, r2
 8004220:	f7ff f851 	bl	80032c6 <st_word>
	}
}
 8004224:	bf00      	nop
 8004226:	3710      	adds	r7, #16
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}

0800422c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b086      	sub	sp, #24
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800423a:	2100      	movs	r1, #0
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f7ff fe2f 	bl	8003ea0 <dir_sdi>
 8004242:	4603      	mov	r3, r0
 8004244:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8004246:	7dfb      	ldrb	r3, [r7, #23]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d001      	beq.n	8004250 <dir_find+0x24>
 800424c:	7dfb      	ldrb	r3, [r7, #23]
 800424e:	e03e      	b.n	80042ce <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	69db      	ldr	r3, [r3, #28]
 8004254:	4619      	mov	r1, r3
 8004256:	6938      	ldr	r0, [r7, #16]
 8004258:	f7ff faaa 	bl	80037b0 <move_window>
 800425c:	4603      	mov	r3, r0
 800425e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8004260:	7dfb      	ldrb	r3, [r7, #23]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d12f      	bne.n	80042c6 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a1b      	ldr	r3, [r3, #32]
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800426e:	7bfb      	ldrb	r3, [r7, #15]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d102      	bne.n	800427a <dir_find+0x4e>
 8004274:	2304      	movs	r3, #4
 8004276:	75fb      	strb	r3, [r7, #23]
 8004278:	e028      	b.n	80042cc <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a1b      	ldr	r3, [r3, #32]
 800427e:	330b      	adds	r3, #11
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004286:	b2da      	uxtb	r2, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6a1b      	ldr	r3, [r3, #32]
 8004290:	330b      	adds	r3, #11
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	f003 0308 	and.w	r3, r3, #8
 8004298:	2b00      	cmp	r3, #0
 800429a:	d10a      	bne.n	80042b2 <dir_find+0x86>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6a18      	ldr	r0, [r3, #32]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	3324      	adds	r3, #36	; 0x24
 80042a4:	220b      	movs	r2, #11
 80042a6:	4619      	mov	r1, r3
 80042a8:	f7ff f88f 	bl	80033ca <mem_cmp>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d00b      	beq.n	80042ca <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80042b2:	2100      	movs	r1, #0
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f7ff fe6e 	bl	8003f96 <dir_next>
 80042ba:	4603      	mov	r3, r0
 80042bc:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80042be:	7dfb      	ldrb	r3, [r7, #23]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d0c5      	beq.n	8004250 <dir_find+0x24>
 80042c4:	e002      	b.n	80042cc <dir_find+0xa0>
		if (res != FR_OK) break;
 80042c6:	bf00      	nop
 80042c8:	e000      	b.n	80042cc <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80042ca:	bf00      	nop

	return res;
 80042cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3718      	adds	r7, #24
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}

080042d6 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80042d6:	b580      	push	{r7, lr}
 80042d8:	b084      	sub	sp, #16
 80042da:	af00      	add	r7, sp, #0
 80042dc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80042e4:	2101      	movs	r1, #1
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f7ff ff1a 	bl	8004120 <dir_alloc>
 80042ec:	4603      	mov	r3, r0
 80042ee:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80042f0:	7bfb      	ldrb	r3, [r7, #15]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d11c      	bne.n	8004330 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	69db      	ldr	r3, [r3, #28]
 80042fa:	4619      	mov	r1, r3
 80042fc:	68b8      	ldr	r0, [r7, #8]
 80042fe:	f7ff fa57 	bl	80037b0 <move_window>
 8004302:	4603      	mov	r3, r0
 8004304:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8004306:	7bfb      	ldrb	r3, [r7, #15]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d111      	bne.n	8004330 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6a1b      	ldr	r3, [r3, #32]
 8004310:	2220      	movs	r2, #32
 8004312:	2100      	movs	r1, #0
 8004314:	4618      	mov	r0, r3
 8004316:	f7ff f83e 	bl	8003396 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6a18      	ldr	r0, [r3, #32]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	3324      	adds	r3, #36	; 0x24
 8004322:	220b      	movs	r2, #11
 8004324:	4619      	mov	r1, r3
 8004326:	f7ff f815 	bl	8003354 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	2201      	movs	r2, #1
 800432e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8004330:	7bfb      	ldrb	r3, [r7, #15]
}
 8004332:	4618      	mov	r0, r3
 8004334:	3710      	adds	r7, #16
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
	...

0800433c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b088      	sub	sp, #32
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	60fb      	str	r3, [r7, #12]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	3324      	adds	r3, #36	; 0x24
 8004350:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8004352:	220b      	movs	r2, #11
 8004354:	2120      	movs	r1, #32
 8004356:	68b8      	ldr	r0, [r7, #8]
 8004358:	f7ff f81d 	bl	8003396 <mem_set>
	si = i = 0; ni = 8;
 800435c:	2300      	movs	r3, #0
 800435e:	613b      	str	r3, [r7, #16]
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	617b      	str	r3, [r7, #20]
 8004364:	2308      	movs	r3, #8
 8004366:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	1c5a      	adds	r2, r3, #1
 800436c:	617a      	str	r2, [r7, #20]
 800436e:	68fa      	ldr	r2, [r7, #12]
 8004370:	4413      	add	r3, r2
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8004376:	7ffb      	ldrb	r3, [r7, #31]
 8004378:	2b20      	cmp	r3, #32
 800437a:	d94e      	bls.n	800441a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800437c:	7ffb      	ldrb	r3, [r7, #31]
 800437e:	2b2f      	cmp	r3, #47	; 0x2f
 8004380:	d006      	beq.n	8004390 <create_name+0x54>
 8004382:	7ffb      	ldrb	r3, [r7, #31]
 8004384:	2b5c      	cmp	r3, #92	; 0x5c
 8004386:	d110      	bne.n	80043aa <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8004388:	e002      	b.n	8004390 <create_name+0x54>
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	3301      	adds	r3, #1
 800438e:	617b      	str	r3, [r7, #20]
 8004390:	68fa      	ldr	r2, [r7, #12]
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	4413      	add	r3, r2
 8004396:	781b      	ldrb	r3, [r3, #0]
 8004398:	2b2f      	cmp	r3, #47	; 0x2f
 800439a:	d0f6      	beq.n	800438a <create_name+0x4e>
 800439c:	68fa      	ldr	r2, [r7, #12]
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	4413      	add	r3, r2
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	2b5c      	cmp	r3, #92	; 0x5c
 80043a6:	d0f0      	beq.n	800438a <create_name+0x4e>
			break;
 80043a8:	e038      	b.n	800441c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80043aa:	7ffb      	ldrb	r3, [r7, #31]
 80043ac:	2b2e      	cmp	r3, #46	; 0x2e
 80043ae:	d003      	beq.n	80043b8 <create_name+0x7c>
 80043b0:	693a      	ldr	r2, [r7, #16]
 80043b2:	69bb      	ldr	r3, [r7, #24]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d30c      	bcc.n	80043d2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80043b8:	69bb      	ldr	r3, [r7, #24]
 80043ba:	2b0b      	cmp	r3, #11
 80043bc:	d002      	beq.n	80043c4 <create_name+0x88>
 80043be:	7ffb      	ldrb	r3, [r7, #31]
 80043c0:	2b2e      	cmp	r3, #46	; 0x2e
 80043c2:	d001      	beq.n	80043c8 <create_name+0x8c>
 80043c4:	2306      	movs	r3, #6
 80043c6:	e044      	b.n	8004452 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80043c8:	2308      	movs	r3, #8
 80043ca:	613b      	str	r3, [r7, #16]
 80043cc:	230b      	movs	r3, #11
 80043ce:	61bb      	str	r3, [r7, #24]
			continue;
 80043d0:	e022      	b.n	8004418 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80043d2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	da04      	bge.n	80043e4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80043da:	7ffb      	ldrb	r3, [r7, #31]
 80043dc:	3b80      	subs	r3, #128	; 0x80
 80043de:	4a1f      	ldr	r2, [pc, #124]	; (800445c <create_name+0x120>)
 80043e0:	5cd3      	ldrb	r3, [r2, r3]
 80043e2:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80043e4:	7ffb      	ldrb	r3, [r7, #31]
 80043e6:	4619      	mov	r1, r3
 80043e8:	481d      	ldr	r0, [pc, #116]	; (8004460 <create_name+0x124>)
 80043ea:	f7ff f815 	bl	8003418 <chk_chr>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d001      	beq.n	80043f8 <create_name+0xbc>
 80043f4:	2306      	movs	r3, #6
 80043f6:	e02c      	b.n	8004452 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80043f8:	7ffb      	ldrb	r3, [r7, #31]
 80043fa:	2b60      	cmp	r3, #96	; 0x60
 80043fc:	d905      	bls.n	800440a <create_name+0xce>
 80043fe:	7ffb      	ldrb	r3, [r7, #31]
 8004400:	2b7a      	cmp	r3, #122	; 0x7a
 8004402:	d802      	bhi.n	800440a <create_name+0xce>
 8004404:	7ffb      	ldrb	r3, [r7, #31]
 8004406:	3b20      	subs	r3, #32
 8004408:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	1c5a      	adds	r2, r3, #1
 800440e:	613a      	str	r2, [r7, #16]
 8004410:	68ba      	ldr	r2, [r7, #8]
 8004412:	4413      	add	r3, r2
 8004414:	7ffa      	ldrb	r2, [r7, #31]
 8004416:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8004418:	e7a6      	b.n	8004368 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800441a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800441c:	68fa      	ldr	r2, [r7, #12]
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	441a      	add	r2, r3
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d101      	bne.n	8004430 <create_name+0xf4>
 800442c:	2306      	movs	r3, #6
 800442e:	e010      	b.n	8004452 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	781b      	ldrb	r3, [r3, #0]
 8004434:	2be5      	cmp	r3, #229	; 0xe5
 8004436:	d102      	bne.n	800443e <create_name+0x102>
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	2205      	movs	r2, #5
 800443c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800443e:	7ffb      	ldrb	r3, [r7, #31]
 8004440:	2b20      	cmp	r3, #32
 8004442:	d801      	bhi.n	8004448 <create_name+0x10c>
 8004444:	2204      	movs	r2, #4
 8004446:	e000      	b.n	800444a <create_name+0x10e>
 8004448:	2200      	movs	r2, #0
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	330b      	adds	r3, #11
 800444e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8004450:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8004452:	4618      	mov	r0, r3
 8004454:	3720      	adds	r7, #32
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	080055a0 	.word	0x080055a0
 8004460:	08005544 	.word	0x08005544

08004464 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b086      	sub	sp, #24
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8004478:	e002      	b.n	8004480 <follow_path+0x1c>
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	3301      	adds	r3, #1
 800447e:	603b      	str	r3, [r7, #0]
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	2b2f      	cmp	r3, #47	; 0x2f
 8004486:	d0f8      	beq.n	800447a <follow_path+0x16>
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	2b5c      	cmp	r3, #92	; 0x5c
 800448e:	d0f4      	beq.n	800447a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	2200      	movs	r2, #0
 8004494:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	2b1f      	cmp	r3, #31
 800449c:	d80a      	bhi.n	80044b4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2280      	movs	r2, #128	; 0x80
 80044a2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80044a6:	2100      	movs	r1, #0
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f7ff fcf9 	bl	8003ea0 <dir_sdi>
 80044ae:	4603      	mov	r3, r0
 80044b0:	75fb      	strb	r3, [r7, #23]
 80044b2:	e043      	b.n	800453c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80044b4:	463b      	mov	r3, r7
 80044b6:	4619      	mov	r1, r3
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f7ff ff3f 	bl	800433c <create_name>
 80044be:	4603      	mov	r3, r0
 80044c0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80044c2:	7dfb      	ldrb	r3, [r7, #23]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d134      	bne.n	8004532 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f7ff feaf 	bl	800422c <dir_find>
 80044ce:	4603      	mov	r3, r0
 80044d0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80044d8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80044da:	7dfb      	ldrb	r3, [r7, #23]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d00a      	beq.n	80044f6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80044e0:	7dfb      	ldrb	r3, [r7, #23]
 80044e2:	2b04      	cmp	r3, #4
 80044e4:	d127      	bne.n	8004536 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80044e6:	7afb      	ldrb	r3, [r7, #11]
 80044e8:	f003 0304 	and.w	r3, r3, #4
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d122      	bne.n	8004536 <follow_path+0xd2>
 80044f0:	2305      	movs	r3, #5
 80044f2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80044f4:	e01f      	b.n	8004536 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80044f6:	7afb      	ldrb	r3, [r7, #11]
 80044f8:	f003 0304 	and.w	r3, r3, #4
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d11c      	bne.n	800453a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	799b      	ldrb	r3, [r3, #6]
 8004504:	f003 0310 	and.w	r3, r3, #16
 8004508:	2b00      	cmp	r3, #0
 800450a:	d102      	bne.n	8004512 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800450c:	2305      	movs	r3, #5
 800450e:	75fb      	strb	r3, [r7, #23]
 8004510:	e014      	b.n	800453c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	695b      	ldr	r3, [r3, #20]
 800451c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004520:	4413      	add	r3, r2
 8004522:	4619      	mov	r1, r3
 8004524:	68f8      	ldr	r0, [r7, #12]
 8004526:	f7ff fe42 	bl	80041ae <ld_clust>
 800452a:	4602      	mov	r2, r0
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004530:	e7c0      	b.n	80044b4 <follow_path+0x50>
			if (res != FR_OK) break;
 8004532:	bf00      	nop
 8004534:	e002      	b.n	800453c <follow_path+0xd8>
				break;
 8004536:	bf00      	nop
 8004538:	e000      	b.n	800453c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800453a:	bf00      	nop
			}
		}
	}

	return res;
 800453c:	7dfb      	ldrb	r3, [r7, #23]
}
 800453e:	4618      	mov	r0, r3
 8004540:	3718      	adds	r7, #24
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}

08004546 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8004546:	b480      	push	{r7}
 8004548:	b087      	sub	sp, #28
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800454e:	f04f 33ff 	mov.w	r3, #4294967295
 8004552:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d031      	beq.n	80045c0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	617b      	str	r3, [r7, #20]
 8004562:	e002      	b.n	800456a <get_ldnumber+0x24>
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	3301      	adds	r3, #1
 8004568:	617b      	str	r3, [r7, #20]
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	2b20      	cmp	r3, #32
 8004570:	d903      	bls.n	800457a <get_ldnumber+0x34>
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	781b      	ldrb	r3, [r3, #0]
 8004576:	2b3a      	cmp	r3, #58	; 0x3a
 8004578:	d1f4      	bne.n	8004564 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	781b      	ldrb	r3, [r3, #0]
 800457e:	2b3a      	cmp	r3, #58	; 0x3a
 8004580:	d11c      	bne.n	80045bc <get_ldnumber+0x76>
			tp = *path;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	1c5a      	adds	r2, r3, #1
 800458c:	60fa      	str	r2, [r7, #12]
 800458e:	781b      	ldrb	r3, [r3, #0]
 8004590:	3b30      	subs	r3, #48	; 0x30
 8004592:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	2b09      	cmp	r3, #9
 8004598:	d80e      	bhi.n	80045b8 <get_ldnumber+0x72>
 800459a:	68fa      	ldr	r2, [r7, #12]
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	429a      	cmp	r2, r3
 80045a0:	d10a      	bne.n	80045b8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d107      	bne.n	80045b8 <get_ldnumber+0x72>
					vol = (int)i;
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	3301      	adds	r3, #1
 80045b0:	617b      	str	r3, [r7, #20]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	697a      	ldr	r2, [r7, #20]
 80045b6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	e002      	b.n	80045c2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80045bc:	2300      	movs	r3, #0
 80045be:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80045c0:	693b      	ldr	r3, [r7, #16]
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	371c      	adds	r7, #28
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr
	...

080045d0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b082      	sub	sp, #8
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	70da      	strb	r2, [r3, #3]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f04f 32ff 	mov.w	r2, #4294967295
 80045e6:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80045e8:	6839      	ldr	r1, [r7, #0]
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f7ff f8e0 	bl	80037b0 <move_window>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d001      	beq.n	80045fa <check_fs+0x2a>
 80045f6:	2304      	movs	r3, #4
 80045f8:	e038      	b.n	800466c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	3330      	adds	r3, #48	; 0x30
 80045fe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004602:	4618      	mov	r0, r3
 8004604:	f7fe fe24 	bl	8003250 <ld_word>
 8004608:	4603      	mov	r3, r0
 800460a:	461a      	mov	r2, r3
 800460c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8004610:	429a      	cmp	r2, r3
 8004612:	d001      	beq.n	8004618 <check_fs+0x48>
 8004614:	2303      	movs	r3, #3
 8004616:	e029      	b.n	800466c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800461e:	2be9      	cmp	r3, #233	; 0xe9
 8004620:	d009      	beq.n	8004636 <check_fs+0x66>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004628:	2beb      	cmp	r3, #235	; 0xeb
 800462a:	d11e      	bne.n	800466a <check_fs+0x9a>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004632:	2b90      	cmp	r3, #144	; 0x90
 8004634:	d119      	bne.n	800466a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	3330      	adds	r3, #48	; 0x30
 800463a:	3336      	adds	r3, #54	; 0x36
 800463c:	4618      	mov	r0, r3
 800463e:	f7fe fe1f 	bl	8003280 <ld_dword>
 8004642:	4603      	mov	r3, r0
 8004644:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004648:	4a0a      	ldr	r2, [pc, #40]	; (8004674 <check_fs+0xa4>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d101      	bne.n	8004652 <check_fs+0x82>
 800464e:	2300      	movs	r3, #0
 8004650:	e00c      	b.n	800466c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	3330      	adds	r3, #48	; 0x30
 8004656:	3352      	adds	r3, #82	; 0x52
 8004658:	4618      	mov	r0, r3
 800465a:	f7fe fe11 	bl	8003280 <ld_dword>
 800465e:	4602      	mov	r2, r0
 8004660:	4b05      	ldr	r3, [pc, #20]	; (8004678 <check_fs+0xa8>)
 8004662:	429a      	cmp	r2, r3
 8004664:	d101      	bne.n	800466a <check_fs+0x9a>
 8004666:	2300      	movs	r3, #0
 8004668:	e000      	b.n	800466c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800466a:	2302      	movs	r3, #2
}
 800466c:	4618      	mov	r0, r3
 800466e:	3708      	adds	r7, #8
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}
 8004674:	00544146 	.word	0x00544146
 8004678:	33544146 	.word	0x33544146

0800467c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b096      	sub	sp, #88	; 0x58
 8004680:	af00      	add	r7, sp, #0
 8004682:	60f8      	str	r0, [r7, #12]
 8004684:	60b9      	str	r1, [r7, #8]
 8004686:	4613      	mov	r3, r2
 8004688:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	2200      	movs	r2, #0
 800468e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8004690:	68f8      	ldr	r0, [r7, #12]
 8004692:	f7ff ff58 	bl	8004546 <get_ldnumber>
 8004696:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8004698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800469a:	2b00      	cmp	r3, #0
 800469c:	da01      	bge.n	80046a2 <find_volume+0x26>
 800469e:	230b      	movs	r3, #11
 80046a0:	e22e      	b.n	8004b00 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80046a2:	4aa8      	ldr	r2, [pc, #672]	; (8004944 <find_volume+0x2c8>)
 80046a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046aa:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80046ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d101      	bne.n	80046b6 <find_volume+0x3a>
 80046b2:	230c      	movs	r3, #12
 80046b4:	e224      	b.n	8004b00 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80046ba:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80046bc:	79fb      	ldrb	r3, [r7, #7]
 80046be:	f023 0301 	bic.w	r3, r3, #1
 80046c2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80046c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d01a      	beq.n	8004702 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80046cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ce:	785b      	ldrb	r3, [r3, #1]
 80046d0:	4618      	mov	r0, r3
 80046d2:	f7fe fd1f 	bl	8003114 <disk_status>
 80046d6:	4603      	mov	r3, r0
 80046d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80046dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80046e0:	f003 0301 	and.w	r3, r3, #1
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d10c      	bne.n	8004702 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80046e8:	79fb      	ldrb	r3, [r7, #7]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d007      	beq.n	80046fe <find_volume+0x82>
 80046ee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80046f2:	f003 0304 	and.w	r3, r3, #4
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d001      	beq.n	80046fe <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80046fa:	230a      	movs	r3, #10
 80046fc:	e200      	b.n	8004b00 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 80046fe:	2300      	movs	r3, #0
 8004700:	e1fe      	b.n	8004b00 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8004702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004704:	2200      	movs	r2, #0
 8004706:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8004708:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800470a:	b2da      	uxtb	r2, r3
 800470c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800470e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8004710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004712:	785b      	ldrb	r3, [r3, #1]
 8004714:	4618      	mov	r0, r3
 8004716:	f7fe fd17 	bl	8003148 <disk_initialize>
 800471a:	4603      	mov	r3, r0
 800471c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8004720:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004724:	f003 0301 	and.w	r3, r3, #1
 8004728:	2b00      	cmp	r3, #0
 800472a:	d001      	beq.n	8004730 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800472c:	2303      	movs	r3, #3
 800472e:	e1e7      	b.n	8004b00 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8004730:	79fb      	ldrb	r3, [r7, #7]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d007      	beq.n	8004746 <find_volume+0xca>
 8004736:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800473a:	f003 0304 	and.w	r3, r3, #4
 800473e:	2b00      	cmp	r3, #0
 8004740:	d001      	beq.n	8004746 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8004742:	230a      	movs	r3, #10
 8004744:	e1dc      	b.n	8004b00 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8004746:	2300      	movs	r3, #0
 8004748:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800474a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800474c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800474e:	f7ff ff3f 	bl	80045d0 <check_fs>
 8004752:	4603      	mov	r3, r0
 8004754:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8004758:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800475c:	2b02      	cmp	r3, #2
 800475e:	d14b      	bne.n	80047f8 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8004760:	2300      	movs	r3, #0
 8004762:	643b      	str	r3, [r7, #64]	; 0x40
 8004764:	e01f      	b.n	80047a6 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8004766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004768:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800476c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800476e:	011b      	lsls	r3, r3, #4
 8004770:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8004774:	4413      	add	r3, r2
 8004776:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8004778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800477a:	3304      	adds	r3, #4
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d006      	beq.n	8004790 <find_volume+0x114>
 8004782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004784:	3308      	adds	r3, #8
 8004786:	4618      	mov	r0, r3
 8004788:	f7fe fd7a 	bl	8003280 <ld_dword>
 800478c:	4602      	mov	r2, r0
 800478e:	e000      	b.n	8004792 <find_volume+0x116>
 8004790:	2200      	movs	r2, #0
 8004792:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800479a:	440b      	add	r3, r1
 800479c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80047a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047a2:	3301      	adds	r3, #1
 80047a4:	643b      	str	r3, [r7, #64]	; 0x40
 80047a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047a8:	2b03      	cmp	r3, #3
 80047aa:	d9dc      	bls.n	8004766 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80047ac:	2300      	movs	r3, #0
 80047ae:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80047b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d002      	beq.n	80047bc <find_volume+0x140>
 80047b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047b8:	3b01      	subs	r3, #1
 80047ba:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80047bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80047c4:	4413      	add	r3, r2
 80047c6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80047ca:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80047cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d005      	beq.n	80047de <find_volume+0x162>
 80047d2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80047d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80047d6:	f7ff fefb 	bl	80045d0 <check_fs>
 80047da:	4603      	mov	r3, r0
 80047dc:	e000      	b.n	80047e0 <find_volume+0x164>
 80047de:	2303      	movs	r3, #3
 80047e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80047e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d905      	bls.n	80047f8 <find_volume+0x17c>
 80047ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047ee:	3301      	adds	r3, #1
 80047f0:	643b      	str	r3, [r7, #64]	; 0x40
 80047f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047f4:	2b03      	cmp	r3, #3
 80047f6:	d9e1      	bls.n	80047bc <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80047f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80047fc:	2b04      	cmp	r3, #4
 80047fe:	d101      	bne.n	8004804 <find_volume+0x188>
 8004800:	2301      	movs	r3, #1
 8004802:	e17d      	b.n	8004b00 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8004804:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004808:	2b01      	cmp	r3, #1
 800480a:	d901      	bls.n	8004810 <find_volume+0x194>
 800480c:	230d      	movs	r3, #13
 800480e:	e177      	b.n	8004b00 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8004810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004812:	3330      	adds	r3, #48	; 0x30
 8004814:	330b      	adds	r3, #11
 8004816:	4618      	mov	r0, r3
 8004818:	f7fe fd1a 	bl	8003250 <ld_word>
 800481c:	4603      	mov	r3, r0
 800481e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004822:	d001      	beq.n	8004828 <find_volume+0x1ac>
 8004824:	230d      	movs	r3, #13
 8004826:	e16b      	b.n	8004b00 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8004828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800482a:	3330      	adds	r3, #48	; 0x30
 800482c:	3316      	adds	r3, #22
 800482e:	4618      	mov	r0, r3
 8004830:	f7fe fd0e 	bl	8003250 <ld_word>
 8004834:	4603      	mov	r3, r0
 8004836:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8004838:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800483a:	2b00      	cmp	r3, #0
 800483c:	d106      	bne.n	800484c <find_volume+0x1d0>
 800483e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004840:	3330      	adds	r3, #48	; 0x30
 8004842:	3324      	adds	r3, #36	; 0x24
 8004844:	4618      	mov	r0, r3
 8004846:	f7fe fd1b 	bl	8003280 <ld_dword>
 800484a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800484c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800484e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004850:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8004852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004854:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8004858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800485a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800485c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800485e:	789b      	ldrb	r3, [r3, #2]
 8004860:	2b01      	cmp	r3, #1
 8004862:	d005      	beq.n	8004870 <find_volume+0x1f4>
 8004864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004866:	789b      	ldrb	r3, [r3, #2]
 8004868:	2b02      	cmp	r3, #2
 800486a:	d001      	beq.n	8004870 <find_volume+0x1f4>
 800486c:	230d      	movs	r3, #13
 800486e:	e147      	b.n	8004b00 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8004870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004872:	789b      	ldrb	r3, [r3, #2]
 8004874:	461a      	mov	r2, r3
 8004876:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004878:	fb02 f303 	mul.w	r3, r2, r3
 800487c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800487e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004880:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004884:	b29a      	uxth	r2, r3
 8004886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004888:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800488a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800488c:	895b      	ldrh	r3, [r3, #10]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d008      	beq.n	80048a4 <find_volume+0x228>
 8004892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004894:	895b      	ldrh	r3, [r3, #10]
 8004896:	461a      	mov	r2, r3
 8004898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800489a:	895b      	ldrh	r3, [r3, #10]
 800489c:	3b01      	subs	r3, #1
 800489e:	4013      	ands	r3, r2
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d001      	beq.n	80048a8 <find_volume+0x22c>
 80048a4:	230d      	movs	r3, #13
 80048a6:	e12b      	b.n	8004b00 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80048a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048aa:	3330      	adds	r3, #48	; 0x30
 80048ac:	3311      	adds	r3, #17
 80048ae:	4618      	mov	r0, r3
 80048b0:	f7fe fcce 	bl	8003250 <ld_word>
 80048b4:	4603      	mov	r3, r0
 80048b6:	461a      	mov	r2, r3
 80048b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ba:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80048bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048be:	891b      	ldrh	r3, [r3, #8]
 80048c0:	f003 030f 	and.w	r3, r3, #15
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d001      	beq.n	80048ce <find_volume+0x252>
 80048ca:	230d      	movs	r3, #13
 80048cc:	e118      	b.n	8004b00 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80048ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048d0:	3330      	adds	r3, #48	; 0x30
 80048d2:	3313      	adds	r3, #19
 80048d4:	4618      	mov	r0, r3
 80048d6:	f7fe fcbb 	bl	8003250 <ld_word>
 80048da:	4603      	mov	r3, r0
 80048dc:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80048de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d106      	bne.n	80048f2 <find_volume+0x276>
 80048e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048e6:	3330      	adds	r3, #48	; 0x30
 80048e8:	3320      	adds	r3, #32
 80048ea:	4618      	mov	r0, r3
 80048ec:	f7fe fcc8 	bl	8003280 <ld_dword>
 80048f0:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80048f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048f4:	3330      	adds	r3, #48	; 0x30
 80048f6:	330e      	adds	r3, #14
 80048f8:	4618      	mov	r0, r3
 80048fa:	f7fe fca9 	bl	8003250 <ld_word>
 80048fe:	4603      	mov	r3, r0
 8004900:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8004902:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004904:	2b00      	cmp	r3, #0
 8004906:	d101      	bne.n	800490c <find_volume+0x290>
 8004908:	230d      	movs	r3, #13
 800490a:	e0f9      	b.n	8004b00 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800490c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800490e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004910:	4413      	add	r3, r2
 8004912:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004914:	8912      	ldrh	r2, [r2, #8]
 8004916:	0912      	lsrs	r2, r2, #4
 8004918:	b292      	uxth	r2, r2
 800491a:	4413      	add	r3, r2
 800491c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800491e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004922:	429a      	cmp	r2, r3
 8004924:	d201      	bcs.n	800492a <find_volume+0x2ae>
 8004926:	230d      	movs	r3, #13
 8004928:	e0ea      	b.n	8004b00 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800492a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800492c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800492e:	1ad3      	subs	r3, r2, r3
 8004930:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004932:	8952      	ldrh	r2, [r2, #10]
 8004934:	fbb3 f3f2 	udiv	r3, r3, r2
 8004938:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800493a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493c:	2b00      	cmp	r3, #0
 800493e:	d103      	bne.n	8004948 <find_volume+0x2cc>
 8004940:	230d      	movs	r3, #13
 8004942:	e0dd      	b.n	8004b00 <find_volume+0x484>
 8004944:	2000003c 	.word	0x2000003c
		fmt = FS_FAT32;
 8004948:	2303      	movs	r3, #3
 800494a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800494e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004950:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8004954:	4293      	cmp	r3, r2
 8004956:	d802      	bhi.n	800495e <find_volume+0x2e2>
 8004958:	2302      	movs	r3, #2
 800495a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800495e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004960:	f640 72f5 	movw	r2, #4085	; 0xff5
 8004964:	4293      	cmp	r3, r2
 8004966:	d802      	bhi.n	800496e <find_volume+0x2f2>
 8004968:	2301      	movs	r3, #1
 800496a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800496e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004970:	1c9a      	adds	r2, r3, #2
 8004972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004974:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8004976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004978:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800497a:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800497c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800497e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004980:	441a      	add	r2, r3
 8004982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004984:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8004986:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800498a:	441a      	add	r2, r3
 800498c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800498e:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8004990:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004994:	2b03      	cmp	r3, #3
 8004996:	d11e      	bne.n	80049d6 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8004998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800499a:	3330      	adds	r3, #48	; 0x30
 800499c:	332a      	adds	r3, #42	; 0x2a
 800499e:	4618      	mov	r0, r3
 80049a0:	f7fe fc56 	bl	8003250 <ld_word>
 80049a4:	4603      	mov	r3, r0
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d001      	beq.n	80049ae <find_volume+0x332>
 80049aa:	230d      	movs	r3, #13
 80049ac:	e0a8      	b.n	8004b00 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80049ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049b0:	891b      	ldrh	r3, [r3, #8]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d001      	beq.n	80049ba <find_volume+0x33e>
 80049b6:	230d      	movs	r3, #13
 80049b8:	e0a2      	b.n	8004b00 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80049ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049bc:	3330      	adds	r3, #48	; 0x30
 80049be:	332c      	adds	r3, #44	; 0x2c
 80049c0:	4618      	mov	r0, r3
 80049c2:	f7fe fc5d 	bl	8003280 <ld_dword>
 80049c6:	4602      	mov	r2, r0
 80049c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ca:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80049cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ce:	695b      	ldr	r3, [r3, #20]
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	647b      	str	r3, [r7, #68]	; 0x44
 80049d4:	e01f      	b.n	8004a16 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80049d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049d8:	891b      	ldrh	r3, [r3, #8]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d101      	bne.n	80049e2 <find_volume+0x366>
 80049de:	230d      	movs	r3, #13
 80049e0:	e08e      	b.n	8004b00 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80049e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049e4:	6a1a      	ldr	r2, [r3, #32]
 80049e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049e8:	441a      	add	r2, r3
 80049ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ec:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80049ee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80049f2:	2b02      	cmp	r3, #2
 80049f4:	d103      	bne.n	80049fe <find_volume+0x382>
 80049f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049f8:	695b      	ldr	r3, [r3, #20]
 80049fa:	005b      	lsls	r3, r3, #1
 80049fc:	e00a      	b.n	8004a14 <find_volume+0x398>
 80049fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a00:	695a      	ldr	r2, [r3, #20]
 8004a02:	4613      	mov	r3, r2
 8004a04:	005b      	lsls	r3, r3, #1
 8004a06:	4413      	add	r3, r2
 8004a08:	085a      	lsrs	r2, r3, #1
 8004a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a0c:	695b      	ldr	r3, [r3, #20]
 8004a0e:	f003 0301 	and.w	r3, r3, #1
 8004a12:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8004a14:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8004a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a18:	699a      	ldr	r2, [r3, #24]
 8004a1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a1c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004a20:	0a5b      	lsrs	r3, r3, #9
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d201      	bcs.n	8004a2a <find_volume+0x3ae>
 8004a26:	230d      	movs	r3, #13
 8004a28:	e06a      	b.n	8004b00 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8004a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8004a30:	611a      	str	r2, [r3, #16]
 8004a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a34:	691a      	ldr	r2, [r3, #16]
 8004a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a38:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8004a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a3c:	2280      	movs	r2, #128	; 0x80
 8004a3e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8004a40:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004a44:	2b03      	cmp	r3, #3
 8004a46:	d149      	bne.n	8004adc <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8004a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a4a:	3330      	adds	r3, #48	; 0x30
 8004a4c:	3330      	adds	r3, #48	; 0x30
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f7fe fbfe 	bl	8003250 <ld_word>
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d140      	bne.n	8004adc <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8004a5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a5c:	3301      	adds	r3, #1
 8004a5e:	4619      	mov	r1, r3
 8004a60:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004a62:	f7fe fea5 	bl	80037b0 <move_window>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d137      	bne.n	8004adc <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8004a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a6e:	2200      	movs	r2, #0
 8004a70:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8004a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a74:	3330      	adds	r3, #48	; 0x30
 8004a76:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f7fe fbe8 	bl	8003250 <ld_word>
 8004a80:	4603      	mov	r3, r0
 8004a82:	461a      	mov	r2, r3
 8004a84:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d127      	bne.n	8004adc <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8004a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a8e:	3330      	adds	r3, #48	; 0x30
 8004a90:	4618      	mov	r0, r3
 8004a92:	f7fe fbf5 	bl	8003280 <ld_dword>
 8004a96:	4602      	mov	r2, r0
 8004a98:	4b1b      	ldr	r3, [pc, #108]	; (8004b08 <find_volume+0x48c>)
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d11e      	bne.n	8004adc <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8004a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aa0:	3330      	adds	r3, #48	; 0x30
 8004aa2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f7fe fbea 	bl	8003280 <ld_dword>
 8004aac:	4602      	mov	r2, r0
 8004aae:	4b17      	ldr	r3, [pc, #92]	; (8004b0c <find_volume+0x490>)
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d113      	bne.n	8004adc <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8004ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ab6:	3330      	adds	r3, #48	; 0x30
 8004ab8:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8004abc:	4618      	mov	r0, r3
 8004abe:	f7fe fbdf 	bl	8003280 <ld_dword>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ac6:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8004ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aca:	3330      	adds	r3, #48	; 0x30
 8004acc:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f7fe fbd5 	bl	8003280 <ld_dword>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ada:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8004adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ade:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8004ae2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8004ae4:	4b0a      	ldr	r3, [pc, #40]	; (8004b10 <find_volume+0x494>)
 8004ae6:	881b      	ldrh	r3, [r3, #0]
 8004ae8:	3301      	adds	r3, #1
 8004aea:	b29a      	uxth	r2, r3
 8004aec:	4b08      	ldr	r3, [pc, #32]	; (8004b10 <find_volume+0x494>)
 8004aee:	801a      	strh	r2, [r3, #0]
 8004af0:	4b07      	ldr	r3, [pc, #28]	; (8004b10 <find_volume+0x494>)
 8004af2:	881a      	ldrh	r2, [r3, #0]
 8004af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004af6:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8004af8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004afa:	f7fe fdf1 	bl	80036e0 <clear_lock>
#endif
	return FR_OK;
 8004afe:	2300      	movs	r3, #0
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3758      	adds	r7, #88	; 0x58
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}
 8004b08:	41615252 	.word	0x41615252
 8004b0c:	61417272 	.word	0x61417272
 8004b10:	20000040 	.word	0x20000040

08004b14 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b084      	sub	sp, #16
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8004b1e:	2309      	movs	r3, #9
 8004b20:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d01c      	beq.n	8004b62 <validate+0x4e>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d018      	beq.n	8004b62 <validate+0x4e>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	781b      	ldrb	r3, [r3, #0]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d013      	beq.n	8004b62 <validate+0x4e>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	889a      	ldrh	r2, [r3, #4]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	88db      	ldrh	r3, [r3, #6]
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d10c      	bne.n	8004b62 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	785b      	ldrb	r3, [r3, #1]
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f7fe fae0 	bl	8003114 <disk_status>
 8004b54:	4603      	mov	r3, r0
 8004b56:	f003 0301 	and.w	r3, r3, #1
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d101      	bne.n	8004b62 <validate+0x4e>
			res = FR_OK;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8004b62:	7bfb      	ldrb	r3, [r7, #15]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d102      	bne.n	8004b6e <validate+0x5a>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	e000      	b.n	8004b70 <validate+0x5c>
 8004b6e:	2300      	movs	r3, #0
 8004b70:	683a      	ldr	r2, [r7, #0]
 8004b72:	6013      	str	r3, [r2, #0]
	return res;
 8004b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3710      	adds	r7, #16
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
	...

08004b80 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b088      	sub	sp, #32
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	60f8      	str	r0, [r7, #12]
 8004b88:	60b9      	str	r1, [r7, #8]
 8004b8a:	4613      	mov	r3, r2
 8004b8c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8004b92:	f107 0310 	add.w	r3, r7, #16
 8004b96:	4618      	mov	r0, r3
 8004b98:	f7ff fcd5 	bl	8004546 <get_ldnumber>
 8004b9c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8004b9e:	69fb      	ldr	r3, [r7, #28]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	da01      	bge.n	8004ba8 <f_mount+0x28>
 8004ba4:	230b      	movs	r3, #11
 8004ba6:	e02b      	b.n	8004c00 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8004ba8:	4a17      	ldr	r2, [pc, #92]	; (8004c08 <f_mount+0x88>)
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bb0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d005      	beq.n	8004bc4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8004bb8:	69b8      	ldr	r0, [r7, #24]
 8004bba:	f7fe fd91 	bl	80036e0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8004bbe:	69bb      	ldr	r3, [r7, #24]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d002      	beq.n	8004bd0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8004bd0:	68fa      	ldr	r2, [r7, #12]
 8004bd2:	490d      	ldr	r1, [pc, #52]	; (8004c08 <f_mount+0x88>)
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d002      	beq.n	8004be6 <f_mount+0x66>
 8004be0:	79fb      	ldrb	r3, [r7, #7]
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d001      	beq.n	8004bea <f_mount+0x6a>
 8004be6:	2300      	movs	r3, #0
 8004be8:	e00a      	b.n	8004c00 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8004bea:	f107 010c 	add.w	r1, r7, #12
 8004bee:	f107 0308 	add.w	r3, r7, #8
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f7ff fd41 	bl	800467c <find_volume>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8004bfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3720      	adds	r7, #32
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}
 8004c08:	2000003c 	.word	0x2000003c

08004c0c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b098      	sub	sp, #96	; 0x60
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	60f8      	str	r0, [r7, #12]
 8004c14:	60b9      	str	r1, [r7, #8]
 8004c16:	4613      	mov	r3, r2
 8004c18:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d101      	bne.n	8004c24 <f_open+0x18>
 8004c20:	2309      	movs	r3, #9
 8004c22:	e1ad      	b.n	8004f80 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8004c24:	79fb      	ldrb	r3, [r7, #7]
 8004c26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c2a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8004c2c:	79fa      	ldrb	r2, [r7, #7]
 8004c2e:	f107 0110 	add.w	r1, r7, #16
 8004c32:	f107 0308 	add.w	r3, r7, #8
 8004c36:	4618      	mov	r0, r3
 8004c38:	f7ff fd20 	bl	800467c <find_volume>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8004c42:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	f040 8191 	bne.w	8004f6e <f_open+0x362>
		dj.obj.fs = fs;
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8004c50:	68ba      	ldr	r2, [r7, #8]
 8004c52:	f107 0314 	add.w	r3, r7, #20
 8004c56:	4611      	mov	r1, r2
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f7ff fc03 	bl	8004464 <follow_path>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8004c64:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d11a      	bne.n	8004ca2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8004c6c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004c70:	b25b      	sxtb	r3, r3
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	da03      	bge.n	8004c7e <f_open+0x72>
				res = FR_INVALID_NAME;
 8004c76:	2306      	movs	r3, #6
 8004c78:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8004c7c:	e011      	b.n	8004ca2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8004c7e:	79fb      	ldrb	r3, [r7, #7]
 8004c80:	f023 0301 	bic.w	r3, r3, #1
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	bf14      	ite	ne
 8004c88:	2301      	movne	r3, #1
 8004c8a:	2300      	moveq	r3, #0
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	461a      	mov	r2, r3
 8004c90:	f107 0314 	add.w	r3, r7, #20
 8004c94:	4611      	mov	r1, r2
 8004c96:	4618      	mov	r0, r3
 8004c98:	f7fe fbda 	bl	8003450 <chk_lock>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8004ca2:	79fb      	ldrb	r3, [r7, #7]
 8004ca4:	f003 031c 	and.w	r3, r3, #28
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d07f      	beq.n	8004dac <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8004cac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d017      	beq.n	8004ce4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8004cb4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004cb8:	2b04      	cmp	r3, #4
 8004cba:	d10e      	bne.n	8004cda <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8004cbc:	f7fe fc24 	bl	8003508 <enq_lock>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d006      	beq.n	8004cd4 <f_open+0xc8>
 8004cc6:	f107 0314 	add.w	r3, r7, #20
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f7ff fb03 	bl	80042d6 <dir_register>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	e000      	b.n	8004cd6 <f_open+0xca>
 8004cd4:	2312      	movs	r3, #18
 8004cd6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8004cda:	79fb      	ldrb	r3, [r7, #7]
 8004cdc:	f043 0308 	orr.w	r3, r3, #8
 8004ce0:	71fb      	strb	r3, [r7, #7]
 8004ce2:	e010      	b.n	8004d06 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8004ce4:	7ebb      	ldrb	r3, [r7, #26]
 8004ce6:	f003 0311 	and.w	r3, r3, #17
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d003      	beq.n	8004cf6 <f_open+0xea>
					res = FR_DENIED;
 8004cee:	2307      	movs	r3, #7
 8004cf0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8004cf4:	e007      	b.n	8004d06 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8004cf6:	79fb      	ldrb	r3, [r7, #7]
 8004cf8:	f003 0304 	and.w	r3, r3, #4
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d002      	beq.n	8004d06 <f_open+0xfa>
 8004d00:	2308      	movs	r3, #8
 8004d02:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8004d06:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d168      	bne.n	8004de0 <f_open+0x1d4>
 8004d0e:	79fb      	ldrb	r3, [r7, #7]
 8004d10:	f003 0308 	and.w	r3, r3, #8
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d063      	beq.n	8004de0 <f_open+0x1d4>
				dw = GET_FATTIME();
 8004d18:	f7fe f8b4 	bl	8002e84 <get_fattime>
 8004d1c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8004d1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d20:	330e      	adds	r3, #14
 8004d22:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004d24:	4618      	mov	r0, r3
 8004d26:	f7fe fae9 	bl	80032fc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8004d2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d2c:	3316      	adds	r3, #22
 8004d2e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004d30:	4618      	mov	r0, r3
 8004d32:	f7fe fae3 	bl	80032fc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8004d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d38:	330b      	adds	r3, #11
 8004d3a:	2220      	movs	r2, #32
 8004d3c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d42:	4611      	mov	r1, r2
 8004d44:	4618      	mov	r0, r3
 8004d46:	f7ff fa32 	bl	80041ae <ld_clust>
 8004d4a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004d50:	2200      	movs	r2, #0
 8004d52:	4618      	mov	r0, r3
 8004d54:	f7ff fa4a 	bl	80041ec <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8004d58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d5a:	331c      	adds	r3, #28
 8004d5c:	2100      	movs	r1, #0
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f7fe facc 	bl	80032fc <st_dword>
					fs->wflag = 1;
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	2201      	movs	r2, #1
 8004d68:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8004d6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d037      	beq.n	8004de0 <f_open+0x1d4>
						dw = fs->winsect;
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d74:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8004d76:	f107 0314 	add.w	r3, r7, #20
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f7fe ff5d 	bl	8003c3e <remove_chain>
 8004d84:	4603      	mov	r3, r0
 8004d86:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8004d8a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d126      	bne.n	8004de0 <f_open+0x1d4>
							res = move_window(fs, dw);
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004d96:	4618      	mov	r0, r3
 8004d98:	f7fe fd0a 	bl	80037b0 <move_window>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004da6:	3a01      	subs	r2, #1
 8004da8:	60da      	str	r2, [r3, #12]
 8004daa:	e019      	b.n	8004de0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8004dac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d115      	bne.n	8004de0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8004db4:	7ebb      	ldrb	r3, [r7, #26]
 8004db6:	f003 0310 	and.w	r3, r3, #16
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d003      	beq.n	8004dc6 <f_open+0x1ba>
					res = FR_NO_FILE;
 8004dbe:	2304      	movs	r3, #4
 8004dc0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8004dc4:	e00c      	b.n	8004de0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8004dc6:	79fb      	ldrb	r3, [r7, #7]
 8004dc8:	f003 0302 	and.w	r3, r3, #2
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d007      	beq.n	8004de0 <f_open+0x1d4>
 8004dd0:	7ebb      	ldrb	r3, [r7, #26]
 8004dd2:	f003 0301 	and.w	r3, r3, #1
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d002      	beq.n	8004de0 <f_open+0x1d4>
						res = FR_DENIED;
 8004dda:	2307      	movs	r3, #7
 8004ddc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8004de0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d128      	bne.n	8004e3a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8004de8:	79fb      	ldrb	r3, [r7, #7]
 8004dea:	f003 0308 	and.w	r3, r3, #8
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d003      	beq.n	8004dfa <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8004df2:	79fb      	ldrb	r3, [r7, #7]
 8004df4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004df8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8004e02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8004e08:	79fb      	ldrb	r3, [r7, #7]
 8004e0a:	f023 0301 	bic.w	r3, r3, #1
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	bf14      	ite	ne
 8004e12:	2301      	movne	r3, #1
 8004e14:	2300      	moveq	r3, #0
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	461a      	mov	r2, r3
 8004e1a:	f107 0314 	add.w	r3, r7, #20
 8004e1e:	4611      	mov	r1, r2
 8004e20:	4618      	mov	r0, r3
 8004e22:	f7fe fb93 	bl	800354c <inc_lock>
 8004e26:	4602      	mov	r2, r0
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	691b      	ldr	r3, [r3, #16]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d102      	bne.n	8004e3a <f_open+0x22e>
 8004e34:	2302      	movs	r3, #2
 8004e36:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8004e3a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	f040 8095 	bne.w	8004f6e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e48:	4611      	mov	r1, r2
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f7ff f9af 	bl	80041ae <ld_clust>
 8004e50:	4602      	mov	r2, r0
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8004e56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e58:	331c      	adds	r3, #28
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f7fe fa10 	bl	8003280 <ld_dword>
 8004e60:	4602      	mov	r2, r0
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8004e6c:	693a      	ldr	r2, [r7, #16]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	88da      	ldrh	r2, [r3, #6]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	79fa      	ldrb	r2, [r7, #7]
 8004e7e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2200      	movs	r2, #0
 8004e84:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	3330      	adds	r3, #48	; 0x30
 8004e96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e9a:	2100      	movs	r1, #0
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f7fe fa7a 	bl	8003396 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8004ea2:	79fb      	ldrb	r3, [r7, #7]
 8004ea4:	f003 0320 	and.w	r3, r3, #32
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d060      	beq.n	8004f6e <f_open+0x362>
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d05c      	beq.n	8004f6e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	68da      	ldr	r2, [r3, #12]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	895b      	ldrh	r3, [r3, #10]
 8004ec0:	025b      	lsls	r3, r3, #9
 8004ec2:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	68db      	ldr	r3, [r3, #12]
 8004ece:	657b      	str	r3, [r7, #84]	; 0x54
 8004ed0:	e016      	b.n	8004f00 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f7fe fd25 	bl	8003926 <get_fat>
 8004edc:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8004ede:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d802      	bhi.n	8004eea <f_open+0x2de>
 8004ee4:	2302      	movs	r3, #2
 8004ee6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8004eea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ef0:	d102      	bne.n	8004ef8 <f_open+0x2ec>
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8004ef8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004efa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	657b      	str	r3, [r7, #84]	; 0x54
 8004f00:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d103      	bne.n	8004f10 <f_open+0x304>
 8004f08:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004f0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d8e0      	bhi.n	8004ed2 <f_open+0x2c6>
				}
				fp->clust = clst;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004f14:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8004f16:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d127      	bne.n	8004f6e <f_open+0x362>
 8004f1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d022      	beq.n	8004f6e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f7fe fcdb 	bl	80038e8 <clust2sect>
 8004f32:	6478      	str	r0, [r7, #68]	; 0x44
 8004f34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d103      	bne.n	8004f42 <f_open+0x336>
						res = FR_INT_ERR;
 8004f3a:	2302      	movs	r3, #2
 8004f3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8004f40:	e015      	b.n	8004f6e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8004f42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f44:	0a5a      	lsrs	r2, r3, #9
 8004f46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f48:	441a      	add	r2, r3
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	7858      	ldrb	r0, [r3, #1]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6a1a      	ldr	r2, [r3, #32]
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	f7fe f919 	bl	8003194 <disk_read>
 8004f62:	4603      	mov	r3, r0
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d002      	beq.n	8004f6e <f_open+0x362>
 8004f68:	2301      	movs	r3, #1
 8004f6a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8004f6e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d002      	beq.n	8004f7c <f_open+0x370>
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8004f7c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3760      	adds	r7, #96	; 0x60
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b08c      	sub	sp, #48	; 0x30
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	60f8      	str	r0, [r7, #12]
 8004f90:	60b9      	str	r1, [r7, #8]
 8004f92:	607a      	str	r2, [r7, #4]
 8004f94:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f107 0210 	add.w	r2, r7, #16
 8004fa6:	4611      	mov	r1, r2
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f7ff fdb3 	bl	8004b14 <validate>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8004fb4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d107      	bne.n	8004fcc <f_write+0x44>
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	7d5b      	ldrb	r3, [r3, #21]
 8004fc0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004fc4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d002      	beq.n	8004fd2 <f_write+0x4a>
 8004fcc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004fd0:	e14b      	b.n	800526a <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	7d1b      	ldrb	r3, [r3, #20]
 8004fd6:	f003 0302 	and.w	r3, r3, #2
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d101      	bne.n	8004fe2 <f_write+0x5a>
 8004fde:	2307      	movs	r3, #7
 8004fe0:	e143      	b.n	800526a <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	699a      	ldr	r2, [r3, #24]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	441a      	add	r2, r3
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	699b      	ldr	r3, [r3, #24]
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	f080 812d 	bcs.w	800524e <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	699b      	ldr	r3, [r3, #24]
 8004ff8:	43db      	mvns	r3, r3
 8004ffa:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8004ffc:	e127      	b.n	800524e <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	699b      	ldr	r3, [r3, #24]
 8005002:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005006:	2b00      	cmp	r3, #0
 8005008:	f040 80e3 	bne.w	80051d2 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	699b      	ldr	r3, [r3, #24]
 8005010:	0a5b      	lsrs	r3, r3, #9
 8005012:	693a      	ldr	r2, [r7, #16]
 8005014:	8952      	ldrh	r2, [r2, #10]
 8005016:	3a01      	subs	r2, #1
 8005018:	4013      	ands	r3, r2
 800501a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800501c:	69bb      	ldr	r3, [r7, #24]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d143      	bne.n	80050aa <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	699b      	ldr	r3, [r3, #24]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d10c      	bne.n	8005044 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8005030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005032:	2b00      	cmp	r3, #0
 8005034:	d11a      	bne.n	800506c <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2100      	movs	r1, #0
 800503a:	4618      	mov	r0, r3
 800503c:	f7fe fe64 	bl	8003d08 <create_chain>
 8005040:	62b8      	str	r0, [r7, #40]	; 0x28
 8005042:	e013      	b.n	800506c <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005048:	2b00      	cmp	r3, #0
 800504a:	d007      	beq.n	800505c <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	699b      	ldr	r3, [r3, #24]
 8005050:	4619      	mov	r1, r3
 8005052:	68f8      	ldr	r0, [r7, #12]
 8005054:	f7fe fef0 	bl	8003e38 <clmt_clust>
 8005058:	62b8      	str	r0, [r7, #40]	; 0x28
 800505a:	e007      	b.n	800506c <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800505c:	68fa      	ldr	r2, [r7, #12]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	69db      	ldr	r3, [r3, #28]
 8005062:	4619      	mov	r1, r3
 8005064:	4610      	mov	r0, r2
 8005066:	f7fe fe4f 	bl	8003d08 <create_chain>
 800506a:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800506c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800506e:	2b00      	cmp	r3, #0
 8005070:	f000 80f2 	beq.w	8005258 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8005074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005076:	2b01      	cmp	r3, #1
 8005078:	d104      	bne.n	8005084 <f_write+0xfc>
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2202      	movs	r2, #2
 800507e:	755a      	strb	r2, [r3, #21]
 8005080:	2302      	movs	r3, #2
 8005082:	e0f2      	b.n	800526a <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800508a:	d104      	bne.n	8005096 <f_write+0x10e>
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2201      	movs	r2, #1
 8005090:	755a      	strb	r2, [r3, #21]
 8005092:	2301      	movs	r3, #1
 8005094:	e0e9      	b.n	800526a <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800509a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d102      	bne.n	80050aa <f_write+0x122>
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050a8:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	7d1b      	ldrb	r3, [r3, #20]
 80050ae:	b25b      	sxtb	r3, r3
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	da18      	bge.n	80050e6 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	7858      	ldrb	r0, [r3, #1]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	6a1a      	ldr	r2, [r3, #32]
 80050c2:	2301      	movs	r3, #1
 80050c4:	f7fe f886 	bl	80031d4 <disk_write>
 80050c8:	4603      	mov	r3, r0
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d004      	beq.n	80050d8 <f_write+0x150>
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2201      	movs	r2, #1
 80050d2:	755a      	strb	r2, [r3, #21]
 80050d4:	2301      	movs	r3, #1
 80050d6:	e0c8      	b.n	800526a <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	7d1b      	ldrb	r3, [r3, #20]
 80050dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050e0:	b2da      	uxtb	r2, r3
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80050e6:	693a      	ldr	r2, [r7, #16]
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	69db      	ldr	r3, [r3, #28]
 80050ec:	4619      	mov	r1, r3
 80050ee:	4610      	mov	r0, r2
 80050f0:	f7fe fbfa 	bl	80038e8 <clust2sect>
 80050f4:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d104      	bne.n	8005106 <f_write+0x17e>
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2202      	movs	r2, #2
 8005100:	755a      	strb	r2, [r3, #21]
 8005102:	2302      	movs	r3, #2
 8005104:	e0b1      	b.n	800526a <f_write+0x2e2>
			sect += csect;
 8005106:	697a      	ldr	r2, [r7, #20]
 8005108:	69bb      	ldr	r3, [r7, #24]
 800510a:	4413      	add	r3, r2
 800510c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	0a5b      	lsrs	r3, r3, #9
 8005112:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8005114:	6a3b      	ldr	r3, [r7, #32]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d03c      	beq.n	8005194 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800511a:	69ba      	ldr	r2, [r7, #24]
 800511c:	6a3b      	ldr	r3, [r7, #32]
 800511e:	4413      	add	r3, r2
 8005120:	693a      	ldr	r2, [r7, #16]
 8005122:	8952      	ldrh	r2, [r2, #10]
 8005124:	4293      	cmp	r3, r2
 8005126:	d905      	bls.n	8005134 <f_write+0x1ac>
					cc = fs->csize - csect;
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	895b      	ldrh	r3, [r3, #10]
 800512c:	461a      	mov	r2, r3
 800512e:	69bb      	ldr	r3, [r7, #24]
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	7858      	ldrb	r0, [r3, #1]
 8005138:	6a3b      	ldr	r3, [r7, #32]
 800513a:	697a      	ldr	r2, [r7, #20]
 800513c:	69f9      	ldr	r1, [r7, #28]
 800513e:	f7fe f849 	bl	80031d4 <disk_write>
 8005142:	4603      	mov	r3, r0
 8005144:	2b00      	cmp	r3, #0
 8005146:	d004      	beq.n	8005152 <f_write+0x1ca>
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2201      	movs	r2, #1
 800514c:	755a      	strb	r2, [r3, #21]
 800514e:	2301      	movs	r3, #1
 8005150:	e08b      	b.n	800526a <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	6a1a      	ldr	r2, [r3, #32]
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	1ad3      	subs	r3, r2, r3
 800515a:	6a3a      	ldr	r2, [r7, #32]
 800515c:	429a      	cmp	r2, r3
 800515e:	d915      	bls.n	800518c <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	6a1a      	ldr	r2, [r3, #32]
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	1ad3      	subs	r3, r2, r3
 800516e:	025b      	lsls	r3, r3, #9
 8005170:	69fa      	ldr	r2, [r7, #28]
 8005172:	4413      	add	r3, r2
 8005174:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005178:	4619      	mov	r1, r3
 800517a:	f7fe f8eb 	bl	8003354 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	7d1b      	ldrb	r3, [r3, #20]
 8005182:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005186:	b2da      	uxtb	r2, r3
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800518c:	6a3b      	ldr	r3, [r7, #32]
 800518e:	025b      	lsls	r3, r3, #9
 8005190:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8005192:	e03f      	b.n	8005214 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6a1b      	ldr	r3, [r3, #32]
 8005198:	697a      	ldr	r2, [r7, #20]
 800519a:	429a      	cmp	r2, r3
 800519c:	d016      	beq.n	80051cc <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	699a      	ldr	r2, [r3, #24]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d210      	bcs.n	80051cc <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	7858      	ldrb	r0, [r3, #1]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80051b4:	2301      	movs	r3, #1
 80051b6:	697a      	ldr	r2, [r7, #20]
 80051b8:	f7fd ffec 	bl	8003194 <disk_read>
 80051bc:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d004      	beq.n	80051cc <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2201      	movs	r2, #1
 80051c6:	755a      	strb	r2, [r3, #21]
 80051c8:	2301      	movs	r3, #1
 80051ca:	e04e      	b.n	800526a <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	697a      	ldr	r2, [r7, #20]
 80051d0:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	699b      	ldr	r3, [r3, #24]
 80051d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051da:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80051de:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80051e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d901      	bls.n	80051ec <f_write+0x264>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	699b      	ldr	r3, [r3, #24]
 80051f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051fa:	4413      	add	r3, r2
 80051fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051fe:	69f9      	ldr	r1, [r7, #28]
 8005200:	4618      	mov	r0, r3
 8005202:	f7fe f8a7 	bl	8003354 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	7d1b      	ldrb	r3, [r3, #20]
 800520a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800520e:	b2da      	uxtb	r2, r3
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8005214:	69fa      	ldr	r2, [r7, #28]
 8005216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005218:	4413      	add	r3, r2
 800521a:	61fb      	str	r3, [r7, #28]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	699a      	ldr	r2, [r3, #24]
 8005220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005222:	441a      	add	r2, r3
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	619a      	str	r2, [r3, #24]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	68da      	ldr	r2, [r3, #12]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	699b      	ldr	r3, [r3, #24]
 8005230:	429a      	cmp	r2, r3
 8005232:	bf38      	it	cc
 8005234:	461a      	movcc	r2, r3
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	60da      	str	r2, [r3, #12]
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005240:	441a      	add	r2, r3
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	601a      	str	r2, [r3, #0]
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524a:	1ad3      	subs	r3, r2, r3
 800524c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2b00      	cmp	r3, #0
 8005252:	f47f aed4 	bne.w	8004ffe <f_write+0x76>
 8005256:	e000      	b.n	800525a <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005258:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	7d1b      	ldrb	r3, [r3, #20]
 800525e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005262:	b2da      	uxtb	r2, r3
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8005268:	2300      	movs	r3, #0
}
 800526a:	4618      	mov	r0, r3
 800526c:	3730      	adds	r7, #48	; 0x30
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}

08005272 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8005272:	b580      	push	{r7, lr}
 8005274:	b086      	sub	sp, #24
 8005276:	af00      	add	r7, sp, #0
 8005278:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f107 0208 	add.w	r2, r7, #8
 8005280:	4611      	mov	r1, r2
 8005282:	4618      	mov	r0, r3
 8005284:	f7ff fc46 	bl	8004b14 <validate>
 8005288:	4603      	mov	r3, r0
 800528a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800528c:	7dfb      	ldrb	r3, [r7, #23]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d168      	bne.n	8005364 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	7d1b      	ldrb	r3, [r3, #20]
 8005296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800529a:	2b00      	cmp	r3, #0
 800529c:	d062      	beq.n	8005364 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	7d1b      	ldrb	r3, [r3, #20]
 80052a2:	b25b      	sxtb	r3, r3
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	da15      	bge.n	80052d4 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	7858      	ldrb	r0, [r3, #1]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a1a      	ldr	r2, [r3, #32]
 80052b6:	2301      	movs	r3, #1
 80052b8:	f7fd ff8c 	bl	80031d4 <disk_write>
 80052bc:	4603      	mov	r3, r0
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d001      	beq.n	80052c6 <f_sync+0x54>
 80052c2:	2301      	movs	r3, #1
 80052c4:	e04f      	b.n	8005366 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	7d1b      	ldrb	r3, [r3, #20]
 80052ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052ce:	b2da      	uxtb	r2, r3
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80052d4:	f7fd fdd6 	bl	8002e84 <get_fattime>
 80052d8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80052da:	68ba      	ldr	r2, [r7, #8]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e0:	4619      	mov	r1, r3
 80052e2:	4610      	mov	r0, r2
 80052e4:	f7fe fa64 	bl	80037b0 <move_window>
 80052e8:	4603      	mov	r3, r0
 80052ea:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80052ec:	7dfb      	ldrb	r3, [r7, #23]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d138      	bne.n	8005364 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052f6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	330b      	adds	r3, #11
 80052fc:	781a      	ldrb	r2, [r3, #0]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	330b      	adds	r3, #11
 8005302:	f042 0220 	orr.w	r2, r2, #32
 8005306:	b2d2      	uxtb	r2, r2
 8005308:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6818      	ldr	r0, [r3, #0]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	461a      	mov	r2, r3
 8005314:	68f9      	ldr	r1, [r7, #12]
 8005316:	f7fe ff69 	bl	80041ec <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f103 021c 	add.w	r2, r3, #28
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	4619      	mov	r1, r3
 8005326:	4610      	mov	r0, r2
 8005328:	f7fd ffe8 	bl	80032fc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	3316      	adds	r3, #22
 8005330:	6939      	ldr	r1, [r7, #16]
 8005332:	4618      	mov	r0, r3
 8005334:	f7fd ffe2 	bl	80032fc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	3312      	adds	r3, #18
 800533c:	2100      	movs	r1, #0
 800533e:	4618      	mov	r0, r3
 8005340:	f7fd ffc1 	bl	80032c6 <st_word>
					fs->wflag = 1;
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	2201      	movs	r2, #1
 8005348:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	4618      	mov	r0, r3
 800534e:	f7fe fa5d 	bl	800380c <sync_fs>
 8005352:	4603      	mov	r3, r0
 8005354:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	7d1b      	ldrb	r3, [r3, #20]
 800535a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800535e:	b2da      	uxtb	r2, r3
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8005364:	7dfb      	ldrb	r3, [r7, #23]
}
 8005366:	4618      	mov	r0, r3
 8005368:	3718      	adds	r7, #24
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}

0800536e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800536e:	b580      	push	{r7, lr}
 8005370:	b084      	sub	sp, #16
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f7ff ff7b 	bl	8005272 <f_sync>
 800537c:	4603      	mov	r3, r0
 800537e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8005380:	7bfb      	ldrb	r3, [r7, #15]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d118      	bne.n	80053b8 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f107 0208 	add.w	r2, r7, #8
 800538c:	4611      	mov	r1, r2
 800538e:	4618      	mov	r0, r3
 8005390:	f7ff fbc0 	bl	8004b14 <validate>
 8005394:	4603      	mov	r3, r0
 8005396:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005398:	7bfb      	ldrb	r3, [r7, #15]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d10c      	bne.n	80053b8 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	691b      	ldr	r3, [r3, #16]
 80053a2:	4618      	mov	r0, r3
 80053a4:	f7fe f960 	bl	8003668 <dec_lock>
 80053a8:	4603      	mov	r3, r0
 80053aa:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80053ac:	7bfb      	ldrb	r3, [r7, #15]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d102      	bne.n	80053b8 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80053b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3710      	adds	r7, #16
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}
	...

080053c4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b087      	sub	sp, #28
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	60f8      	str	r0, [r7, #12]
 80053cc:	60b9      	str	r1, [r7, #8]
 80053ce:	4613      	mov	r3, r2
 80053d0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80053d2:	2301      	movs	r3, #1
 80053d4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80053d6:	2300      	movs	r3, #0
 80053d8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80053da:	4b1f      	ldr	r3, [pc, #124]	; (8005458 <FATFS_LinkDriverEx+0x94>)
 80053dc:	7a5b      	ldrb	r3, [r3, #9]
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d131      	bne.n	8005448 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80053e4:	4b1c      	ldr	r3, [pc, #112]	; (8005458 <FATFS_LinkDriverEx+0x94>)
 80053e6:	7a5b      	ldrb	r3, [r3, #9]
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	461a      	mov	r2, r3
 80053ec:	4b1a      	ldr	r3, [pc, #104]	; (8005458 <FATFS_LinkDriverEx+0x94>)
 80053ee:	2100      	movs	r1, #0
 80053f0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80053f2:	4b19      	ldr	r3, [pc, #100]	; (8005458 <FATFS_LinkDriverEx+0x94>)
 80053f4:	7a5b      	ldrb	r3, [r3, #9]
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	4a17      	ldr	r2, [pc, #92]	; (8005458 <FATFS_LinkDriverEx+0x94>)
 80053fa:	009b      	lsls	r3, r3, #2
 80053fc:	4413      	add	r3, r2
 80053fe:	68fa      	ldr	r2, [r7, #12]
 8005400:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8005402:	4b15      	ldr	r3, [pc, #84]	; (8005458 <FATFS_LinkDriverEx+0x94>)
 8005404:	7a5b      	ldrb	r3, [r3, #9]
 8005406:	b2db      	uxtb	r3, r3
 8005408:	461a      	mov	r2, r3
 800540a:	4b13      	ldr	r3, [pc, #76]	; (8005458 <FATFS_LinkDriverEx+0x94>)
 800540c:	4413      	add	r3, r2
 800540e:	79fa      	ldrb	r2, [r7, #7]
 8005410:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8005412:	4b11      	ldr	r3, [pc, #68]	; (8005458 <FATFS_LinkDriverEx+0x94>)
 8005414:	7a5b      	ldrb	r3, [r3, #9]
 8005416:	b2db      	uxtb	r3, r3
 8005418:	1c5a      	adds	r2, r3, #1
 800541a:	b2d1      	uxtb	r1, r2
 800541c:	4a0e      	ldr	r2, [pc, #56]	; (8005458 <FATFS_LinkDriverEx+0x94>)
 800541e:	7251      	strb	r1, [r2, #9]
 8005420:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8005422:	7dbb      	ldrb	r3, [r7, #22]
 8005424:	3330      	adds	r3, #48	; 0x30
 8005426:	b2da      	uxtb	r2, r3
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	3301      	adds	r3, #1
 8005430:	223a      	movs	r2, #58	; 0x3a
 8005432:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	3302      	adds	r3, #2
 8005438:	222f      	movs	r2, #47	; 0x2f
 800543a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	3303      	adds	r3, #3
 8005440:	2200      	movs	r2, #0
 8005442:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8005444:	2300      	movs	r3, #0
 8005446:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8005448:	7dfb      	ldrb	r3, [r7, #23]
}
 800544a:	4618      	mov	r0, r3
 800544c:	371c      	adds	r7, #28
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr
 8005456:	bf00      	nop
 8005458:	20000064 	.word	0x20000064

0800545c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b082      	sub	sp, #8
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8005466:	2200      	movs	r2, #0
 8005468:	6839      	ldr	r1, [r7, #0]
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f7ff ffaa 	bl	80053c4 <FATFS_LinkDriverEx>
 8005470:	4603      	mov	r3, r0
}
 8005472:	4618      	mov	r0, r3
 8005474:	3708      	adds	r7, #8
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
	...

0800547c <__libc_init_array>:
 800547c:	b570      	push	{r4, r5, r6, lr}
 800547e:	4e0d      	ldr	r6, [pc, #52]	; (80054b4 <__libc_init_array+0x38>)
 8005480:	4c0d      	ldr	r4, [pc, #52]	; (80054b8 <__libc_init_array+0x3c>)
 8005482:	1ba4      	subs	r4, r4, r6
 8005484:	10a4      	asrs	r4, r4, #2
 8005486:	2500      	movs	r5, #0
 8005488:	42a5      	cmp	r5, r4
 800548a:	d109      	bne.n	80054a0 <__libc_init_array+0x24>
 800548c:	4e0b      	ldr	r6, [pc, #44]	; (80054bc <__libc_init_array+0x40>)
 800548e:	4c0c      	ldr	r4, [pc, #48]	; (80054c0 <__libc_init_array+0x44>)
 8005490:	f000 f820 	bl	80054d4 <_init>
 8005494:	1ba4      	subs	r4, r4, r6
 8005496:	10a4      	asrs	r4, r4, #2
 8005498:	2500      	movs	r5, #0
 800549a:	42a5      	cmp	r5, r4
 800549c:	d105      	bne.n	80054aa <__libc_init_array+0x2e>
 800549e:	bd70      	pop	{r4, r5, r6, pc}
 80054a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80054a4:	4798      	blx	r3
 80054a6:	3501      	adds	r5, #1
 80054a8:	e7ee      	b.n	8005488 <__libc_init_array+0xc>
 80054aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80054ae:	4798      	blx	r3
 80054b0:	3501      	adds	r5, #1
 80054b2:	e7f2      	b.n	800549a <__libc_init_array+0x1e>
 80054b4:	08005628 	.word	0x08005628
 80054b8:	08005628 	.word	0x08005628
 80054bc:	08005628 	.word	0x08005628
 80054c0:	0800562c 	.word	0x0800562c

080054c4 <memset>:
 80054c4:	4402      	add	r2, r0
 80054c6:	4603      	mov	r3, r0
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d100      	bne.n	80054ce <memset+0xa>
 80054cc:	4770      	bx	lr
 80054ce:	f803 1b01 	strb.w	r1, [r3], #1
 80054d2:	e7f9      	b.n	80054c8 <memset+0x4>

080054d4 <_init>:
 80054d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054d6:	bf00      	nop
 80054d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054da:	bc08      	pop	{r3}
 80054dc:	469e      	mov	lr, r3
 80054de:	4770      	bx	lr

080054e0 <_fini>:
 80054e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054e2:	bf00      	nop
 80054e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054e6:	bc08      	pop	{r3}
 80054e8:	469e      	mov	lr, r3
 80054ea:	4770      	bx	lr
