
Space Invaders.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004498  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0003e6dc  08004630  08004630  00014630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08042d0c  08042d0c  000601a0  2**0
                  CONTENTS
  4 .ARM          00000008  08042d0c  08042d0c  00052d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08042d14  08042d14  000601a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08042d14  08042d14  00052d14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08042d18  08042d18  00052d18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a0  20000000  08042d1c  00060000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d4  200001a0  08042ebc  000601a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000574  08042ebc  00060574  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000601a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008485  00000000  00000000  000601d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000017a7  00000000  00000000  00068655  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006e0  00000000  00000000  00069e00  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000618  00000000  00000000  0006a4e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014bc6  00000000  00000000  0006aaf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000075df  00000000  00000000  0007f6be  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00080c4e  00000000  00000000  00086c9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001078eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a5c  00000000  00000000  00107968  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200001a0 	.word	0x200001a0
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004618 	.word	0x08004618

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200001a4 	.word	0x200001a4
 80001d4:	08004618 	.word	0x08004618

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <displayIntroScreen>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void displayIntroScreen()
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b088      	sub	sp, #32
 80004dc:	af00      	add	r7, sp, #0
		screenptr += 75;
	}
	*/

	// Intro Screen
	uint8_t* title_screen = (uint8_t*) Title_Screen;
 80004de:	4b2a      	ldr	r3, [pc, #168]	; (8000588 <displayIntroScreen+0xb0>)
 80004e0:	61fb      	str	r3, [r7, #28]
	uint8_t* screenptr = (uint8_t*) (0x20020000 + 40*320 + 37);
 80004e2:	4b2a      	ldr	r3, [pc, #168]	; (800058c <displayIntroScreen+0xb4>)
 80004e4:	61bb      	str	r3, [r7, #24]
	for (int i = 0; i < 31; ++i) {
 80004e6:	2300      	movs	r3, #0
 80004e8:	617b      	str	r3, [r7, #20]
 80004ea:	e016      	b.n	800051a <displayIntroScreen+0x42>
		for (int j = 0; j < 245; ++j) {
 80004ec:	2300      	movs	r3, #0
 80004ee:	613b      	str	r3, [r7, #16]
 80004f0:	e00a      	b.n	8000508 <displayIntroScreen+0x30>
			*screenptr++ = *title_screen++;
 80004f2:	69fa      	ldr	r2, [r7, #28]
 80004f4:	1c53      	adds	r3, r2, #1
 80004f6:	61fb      	str	r3, [r7, #28]
 80004f8:	69bb      	ldr	r3, [r7, #24]
 80004fa:	1c59      	adds	r1, r3, #1
 80004fc:	61b9      	str	r1, [r7, #24]
 80004fe:	7812      	ldrb	r2, [r2, #0]
 8000500:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 245; ++j) {
 8000502:	693b      	ldr	r3, [r7, #16]
 8000504:	3301      	adds	r3, #1
 8000506:	613b      	str	r3, [r7, #16]
 8000508:	693b      	ldr	r3, [r7, #16]
 800050a:	2bf4      	cmp	r3, #244	; 0xf4
 800050c:	ddf1      	ble.n	80004f2 <displayIntroScreen+0x1a>
		}
		screenptr += 75;
 800050e:	69bb      	ldr	r3, [r7, #24]
 8000510:	334b      	adds	r3, #75	; 0x4b
 8000512:	61bb      	str	r3, [r7, #24]
	for (int i = 0; i < 31; ++i) {
 8000514:	697b      	ldr	r3, [r7, #20]
 8000516:	3301      	adds	r3, #1
 8000518:	617b      	str	r3, [r7, #20]
 800051a:	697b      	ldr	r3, [r7, #20]
 800051c:	2b1e      	cmp	r3, #30
 800051e:	dde5      	ble.n	80004ec <displayIntroScreen+0x14>
	}

	uint8_t* title_instuction = (uint8_t*) Title_Instruction;
 8000520:	4b1b      	ldr	r3, [pc, #108]	; (8000590 <displayIntroScreen+0xb8>)
 8000522:	60fb      	str	r3, [r7, #12]
	screenptr = (uint8_t*) (0x20020000 + 100*320 + 64);
 8000524:	4b1b      	ldr	r3, [pc, #108]	; (8000594 <displayIntroScreen+0xbc>)
 8000526:	61bb      	str	r3, [r7, #24]
	for (int i = 0; i < 16; ++i) {
 8000528:	2300      	movs	r3, #0
 800052a:	60bb      	str	r3, [r7, #8]
 800052c:	e016      	b.n	800055c <displayIntroScreen+0x84>
		for (int j = 0; j < 191; ++j) {
 800052e:	2300      	movs	r3, #0
 8000530:	607b      	str	r3, [r7, #4]
 8000532:	e00a      	b.n	800054a <displayIntroScreen+0x72>
			*screenptr++ = *title_instuction++;
 8000534:	68fa      	ldr	r2, [r7, #12]
 8000536:	1c53      	adds	r3, r2, #1
 8000538:	60fb      	str	r3, [r7, #12]
 800053a:	69bb      	ldr	r3, [r7, #24]
 800053c:	1c59      	adds	r1, r3, #1
 800053e:	61b9      	str	r1, [r7, #24]
 8000540:	7812      	ldrb	r2, [r2, #0]
 8000542:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 191; ++j) {
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	3301      	adds	r3, #1
 8000548:	607b      	str	r3, [r7, #4]
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	2bbe      	cmp	r3, #190	; 0xbe
 800054e:	ddf1      	ble.n	8000534 <displayIntroScreen+0x5c>
		}
		screenptr += 129;
 8000550:	69bb      	ldr	r3, [r7, #24]
 8000552:	3381      	adds	r3, #129	; 0x81
 8000554:	61bb      	str	r3, [r7, #24]
	for (int i = 0; i < 16; ++i) {
 8000556:	68bb      	ldr	r3, [r7, #8]
 8000558:	3301      	adds	r3, #1
 800055a:	60bb      	str	r3, [r7, #8]
 800055c:	68bb      	ldr	r3, [r7, #8]
 800055e:	2b0f      	cmp	r3, #15
 8000560:	dde5      	ble.n	800052e <displayIntroScreen+0x56>
	}

	while (continue_input != 1);
 8000562:	bf00      	nop
 8000564:	4b0c      	ldr	r3, [pc, #48]	; (8000598 <displayIntroScreen+0xc0>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	b2db      	uxtb	r3, r3
 800056a:	2b01      	cmp	r3, #1
 800056c:	d1fa      	bne.n	8000564 <displayIntroScreen+0x8c>
	continue_input = 0;
 800056e:	4b0a      	ldr	r3, [pc, #40]	; (8000598 <displayIntroScreen+0xc0>)
 8000570:	2200      	movs	r2, #0
 8000572:	701a      	strb	r2, [r3, #0]

	gameStatus = RESET_LEVEL1;
 8000574:	4b09      	ldr	r3, [pc, #36]	; (800059c <displayIntroScreen+0xc4>)
 8000576:	2201      	movs	r2, #1
 8000578:	701a      	strb	r2, [r3, #0]
	clearscreen();
 800057a:	f000 f877 	bl	800066c <clearscreen>

	return;
 800057e:	bf00      	nop
}
 8000580:	3720      	adds	r7, #32
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	08007f38 	.word	0x08007f38
 800058c:	20023225 	.word	0x20023225
 8000590:	08009ce4 	.word	0x08009ce4
 8000594:	20027d40 	.word	0x20027d40
 8000598:	200001c6 	.word	0x200001c6
 800059c:	20000500 	.word	0x20000500

080005a0 <displayGameOver>:

void displayGameOver()
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b088      	sub	sp, #32
 80005a4:	af00      	add	r7, sp, #0
	clearscreen();
 80005a6:	f000 f861 	bl	800066c <clearscreen>

	uint8_t* screenptr = (uint8_t*) (0x20020000 + 40*320 + 38);
 80005aa:	4b2a      	ldr	r3, [pc, #168]	; (8000654 <displayGameOver+0xb4>)
 80005ac:	61fb      	str	r3, [r7, #28]
	uint8_t* game_over = (uint8_t*) Game_Over;
 80005ae:	4b2a      	ldr	r3, [pc, #168]	; (8000658 <displayGameOver+0xb8>)
 80005b0:	61bb      	str	r3, [r7, #24]


	for (int i = 0; i < 46; ++i) {
 80005b2:	2300      	movs	r3, #0
 80005b4:	617b      	str	r3, [r7, #20]
 80005b6:	e016      	b.n	80005e6 <displayGameOver+0x46>
		for (int j = 0; j < 244; ++j) {
 80005b8:	2300      	movs	r3, #0
 80005ba:	613b      	str	r3, [r7, #16]
 80005bc:	e00a      	b.n	80005d4 <displayGameOver+0x34>
			*screenptr++ = *game_over++;
 80005be:	69ba      	ldr	r2, [r7, #24]
 80005c0:	1c53      	adds	r3, r2, #1
 80005c2:	61bb      	str	r3, [r7, #24]
 80005c4:	69fb      	ldr	r3, [r7, #28]
 80005c6:	1c59      	adds	r1, r3, #1
 80005c8:	61f9      	str	r1, [r7, #28]
 80005ca:	7812      	ldrb	r2, [r2, #0]
 80005cc:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 244; ++j) {
 80005ce:	693b      	ldr	r3, [r7, #16]
 80005d0:	3301      	adds	r3, #1
 80005d2:	613b      	str	r3, [r7, #16]
 80005d4:	693b      	ldr	r3, [r7, #16]
 80005d6:	2bf3      	cmp	r3, #243	; 0xf3
 80005d8:	ddf1      	ble.n	80005be <displayGameOver+0x1e>
		}
		screenptr += 76;
 80005da:	69fb      	ldr	r3, [r7, #28]
 80005dc:	334c      	adds	r3, #76	; 0x4c
 80005de:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < 46; ++i) {
 80005e0:	697b      	ldr	r3, [r7, #20]
 80005e2:	3301      	adds	r3, #1
 80005e4:	617b      	str	r3, [r7, #20]
 80005e6:	697b      	ldr	r3, [r7, #20]
 80005e8:	2b2d      	cmp	r3, #45	; 0x2d
 80005ea:	dde5      	ble.n	80005b8 <displayGameOver+0x18>
	}

	uint8_t* title_instuction = (uint8_t*) Title_Instruction;
 80005ec:	4b1b      	ldr	r3, [pc, #108]	; (800065c <displayGameOver+0xbc>)
 80005ee:	60fb      	str	r3, [r7, #12]
	screenptr = (uint8_t*) (0x20020000 + 150*320 + 64);
 80005f0:	4b1b      	ldr	r3, [pc, #108]	; (8000660 <displayGameOver+0xc0>)
 80005f2:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < 16; ++i) {
 80005f4:	2300      	movs	r3, #0
 80005f6:	60bb      	str	r3, [r7, #8]
 80005f8:	e016      	b.n	8000628 <displayGameOver+0x88>
		for (int j = 0; j < 191; ++j) {
 80005fa:	2300      	movs	r3, #0
 80005fc:	607b      	str	r3, [r7, #4]
 80005fe:	e00a      	b.n	8000616 <displayGameOver+0x76>
			*screenptr++ = *title_instuction++;
 8000600:	68fa      	ldr	r2, [r7, #12]
 8000602:	1c53      	adds	r3, r2, #1
 8000604:	60fb      	str	r3, [r7, #12]
 8000606:	69fb      	ldr	r3, [r7, #28]
 8000608:	1c59      	adds	r1, r3, #1
 800060a:	61f9      	str	r1, [r7, #28]
 800060c:	7812      	ldrb	r2, [r2, #0]
 800060e:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 191; ++j) {
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	3301      	adds	r3, #1
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	2bbe      	cmp	r3, #190	; 0xbe
 800061a:	ddf1      	ble.n	8000600 <displayGameOver+0x60>
		}
		screenptr += 129;
 800061c:	69fb      	ldr	r3, [r7, #28]
 800061e:	3381      	adds	r3, #129	; 0x81
 8000620:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < 16; ++i) {
 8000622:	68bb      	ldr	r3, [r7, #8]
 8000624:	3301      	adds	r3, #1
 8000626:	60bb      	str	r3, [r7, #8]
 8000628:	68bb      	ldr	r3, [r7, #8]
 800062a:	2b0f      	cmp	r3, #15
 800062c:	dde5      	ble.n	80005fa <displayGameOver+0x5a>
	}

	while (continue_input != 1);
 800062e:	bf00      	nop
 8000630:	4b0c      	ldr	r3, [pc, #48]	; (8000664 <displayGameOver+0xc4>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	b2db      	uxtb	r3, r3
 8000636:	2b01      	cmp	r3, #1
 8000638:	d1fa      	bne.n	8000630 <displayGameOver+0x90>
	continue_input = 0;
 800063a:	4b0a      	ldr	r3, [pc, #40]	; (8000664 <displayGameOver+0xc4>)
 800063c:	2200      	movs	r2, #0
 800063e:	701a      	strb	r2, [r3, #0]

	gameStatus = RESET_LEVEL1;
 8000640:	4b09      	ldr	r3, [pc, #36]	; (8000668 <displayGameOver+0xc8>)
 8000642:	2201      	movs	r2, #1
 8000644:	701a      	strb	r2, [r3, #0]
	clearscreen();
 8000646:	f000 f811 	bl	800066c <clearscreen>

	return;
 800064a:	bf00      	nop
}
 800064c:	3720      	adds	r7, #32
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	20023226 	.word	0x20023226
 8000658:	0800a8d4 	.word	0x0800a8d4
 800065c:	08009ce4 	.word	0x08009ce4
 8000660:	2002bbc0 	.word	0x2002bbc0
 8000664:	200001c6 	.word	0x200001c6
 8000668:	20000500 	.word	0x20000500

0800066c <clearscreen>:

void clearscreen()
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b084      	sub	sp, #16
 8000670:	af00      	add	r7, sp, #0
	uint32_t* ptrscreen = (uint32_t*)0x20020000;
 8000672:	4b1c      	ldr	r3, [pc, #112]	; (80006e4 <clearscreen+0x78>)
 8000674:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 16000; ++i) {
 8000676:	2300      	movs	r3, #0
 8000678:	60bb      	str	r3, [r7, #8]
 800067a:	e007      	b.n	800068c <clearscreen+0x20>
		*ptrscreen++ = 0;
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	1d1a      	adds	r2, r3, #4
 8000680:	60fa      	str	r2, [r7, #12]
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 16000; ++i) {
 8000686:	68bb      	ldr	r3, [r7, #8]
 8000688:	3301      	adds	r3, #1
 800068a:	60bb      	str	r3, [r7, #8]
 800068c:	68bb      	ldr	r3, [r7, #8]
 800068e:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8000692:	dbf3      	blt.n	800067c <clearscreen+0x10>
	}


	// copy title sprite
	uint32_t* titleptr = (uint32_t*)title;
 8000694:	4b14      	ldr	r3, [pc, #80]	; (80006e8 <clearscreen+0x7c>)
 8000696:	607b      	str	r3, [r7, #4]
	ptrscreen = (uint32_t*)0x20020000;
 8000698:	4b12      	ldr	r3, [pc, #72]	; (80006e4 <clearscreen+0x78>)
 800069a:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 1600; i++)
 800069c:	2300      	movs	r3, #0
 800069e:	603b      	str	r3, [r7, #0]
 80006a0:	e00a      	b.n	80006b8 <clearscreen+0x4c>
	{
		*ptrscreen++ = *titleptr++;
 80006a2:	687a      	ldr	r2, [r7, #4]
 80006a4:	1d13      	adds	r3, r2, #4
 80006a6:	607b      	str	r3, [r7, #4]
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	1d19      	adds	r1, r3, #4
 80006ac:	60f9      	str	r1, [r7, #12]
 80006ae:	6812      	ldr	r2, [r2, #0]
 80006b0:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 1600; i++)
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	3301      	adds	r3, #1
 80006b6:	603b      	str	r3, [r7, #0]
 80006b8:	683b      	ldr	r3, [r7, #0]
 80006ba:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80006be:	dbf0      	blt.n	80006a2 <clearscreen+0x36>
	}

	displayint(highScore, (uint32_t*)(0x200204E0));
 80006c0:	4b0a      	ldr	r3, [pc, #40]	; (80006ec <clearscreen+0x80>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	b29b      	uxth	r3, r3
 80006c6:	490a      	ldr	r1, [pc, #40]	; (80006f0 <clearscreen+0x84>)
 80006c8:	4618      	mov	r0, r3
 80006ca:	f000 f817 	bl	80006fc <displayint>
	displayint(playerScore, (uint32_t*)(0x20020418));
 80006ce:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <clearscreen+0x88>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	b29b      	uxth	r3, r3
 80006d4:	4908      	ldr	r1, [pc, #32]	; (80006f8 <clearscreen+0x8c>)
 80006d6:	4618      	mov	r0, r3
 80006d8:	f000 f810 	bl	80006fc <displayint>

	return;
 80006dc:	bf00      	nop
}
 80006de:	3710      	adds	r7, #16
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	20020000 	.word	0x20020000
 80006e8:	08004768 	.word	0x08004768
 80006ec:	200001bc 	.word	0x200001bc
 80006f0:	200204e0 	.word	0x200204e0
 80006f4:	200001c0 	.word	0x200001c0
 80006f8:	20020418 	.word	0x20020418

080006fc <displayint>:

void displayint(uint16_t val, uint32_t* screenptr)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b089      	sub	sp, #36	; 0x24
 8000700:	af00      	add	r7, sp, #0
 8000702:	4603      	mov	r3, r0
 8000704:	6039      	str	r1, [r7, #0]
 8000706:	80fb      	strh	r3, [r7, #6]
	uint8_t digit = 0;
 8000708:	2300      	movs	r3, #0
 800070a:	72fb      	strb	r3, [r7, #11]
	uint32_t* digitptr;
	uint32_t* scrcopyptr;
	for (int i = 0; i < 5; i++)
 800070c:	2300      	movs	r3, #0
 800070e:	617b      	str	r3, [r7, #20]
 8000710:	e040      	b.n	8000794 <displayint+0x98>
	{
		digit = val % 10;
 8000712:	88fa      	ldrh	r2, [r7, #6]
 8000714:	4b24      	ldr	r3, [pc, #144]	; (80007a8 <displayint+0xac>)
 8000716:	fba3 1302 	umull	r1, r3, r3, r2
 800071a:	08d9      	lsrs	r1, r3, #3
 800071c:	460b      	mov	r3, r1
 800071e:	009b      	lsls	r3, r3, #2
 8000720:	440b      	add	r3, r1
 8000722:	005b      	lsls	r3, r3, #1
 8000724:	1ad3      	subs	r3, r2, r3
 8000726:	b29b      	uxth	r3, r3
 8000728:	72fb      	strb	r3, [r7, #11]
		val /= 10;
 800072a:	88fb      	ldrh	r3, [r7, #6]
 800072c:	4a1e      	ldr	r2, [pc, #120]	; (80007a8 <displayint+0xac>)
 800072e:	fba2 2303 	umull	r2, r3, r2, r3
 8000732:	08db      	lsrs	r3, r3, #3
 8000734:	80fb      	strh	r3, [r7, #6]

		scrcopyptr = screenptr;
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	61bb      	str	r3, [r7, #24]
		digitptr = (uint32_t*)(digits + (digit << 3));
 800073a:	7afb      	ldrb	r3, [r7, #11]
 800073c:	00db      	lsls	r3, r3, #3
 800073e:	461a      	mov	r2, r3
 8000740:	4b1a      	ldr	r3, [pc, #104]	; (80007ac <displayint+0xb0>)
 8000742:	4413      	add	r3, r2
 8000744:	61fb      	str	r3, [r7, #28]
		for (int i = 0; i < 9; i++)
 8000746:	2300      	movs	r3, #0
 8000748:	613b      	str	r3, [r7, #16]
 800074a:	e01a      	b.n	8000782 <displayint+0x86>
		{
			for (int j = 0; j < 2; j++)
 800074c:	2300      	movs	r3, #0
 800074e:	60fb      	str	r3, [r7, #12]
 8000750:	e00a      	b.n	8000768 <displayint+0x6c>
			{
				*scrcopyptr++ = *digitptr++;
 8000752:	69fa      	ldr	r2, [r7, #28]
 8000754:	1d13      	adds	r3, r2, #4
 8000756:	61fb      	str	r3, [r7, #28]
 8000758:	69bb      	ldr	r3, [r7, #24]
 800075a:	1d19      	adds	r1, r3, #4
 800075c:	61b9      	str	r1, [r7, #24]
 800075e:	6812      	ldr	r2, [r2, #0]
 8000760:	601a      	str	r2, [r3, #0]
			for (int j = 0; j < 2; j++)
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	3301      	adds	r3, #1
 8000766:	60fb      	str	r3, [r7, #12]
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	2b01      	cmp	r3, #1
 800076c:	ddf1      	ble.n	8000752 <displayint+0x56>
			}
			digitptr += 18;
 800076e:	69fb      	ldr	r3, [r7, #28]
 8000770:	3348      	adds	r3, #72	; 0x48
 8000772:	61fb      	str	r3, [r7, #28]
			scrcopyptr += 78;
 8000774:	69bb      	ldr	r3, [r7, #24]
 8000776:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800077a:	61bb      	str	r3, [r7, #24]
		for (int i = 0; i < 9; i++)
 800077c:	693b      	ldr	r3, [r7, #16]
 800077e:	3301      	adds	r3, #1
 8000780:	613b      	str	r3, [r7, #16]
 8000782:	693b      	ldr	r3, [r7, #16]
 8000784:	2b08      	cmp	r3, #8
 8000786:	dde1      	ble.n	800074c <displayint+0x50>

		}
		screenptr -= 2;
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	3b08      	subs	r3, #8
 800078c:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < 5; i++)
 800078e:	697b      	ldr	r3, [r7, #20]
 8000790:	3301      	adds	r3, #1
 8000792:	617b      	str	r3, [r7, #20]
 8000794:	697b      	ldr	r3, [r7, #20]
 8000796:	2b04      	cmp	r3, #4
 8000798:	ddbb      	ble.n	8000712 <displayint+0x16>
	}
}
 800079a:	bf00      	nop
 800079c:	3724      	adds	r7, #36	; 0x24
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	cccccccd 	.word	0xcccccccd
 80007ac:	08006068 	.word	0x08006068

080007b0 <updatescreen>:

void updatescreen()
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b0a0      	sub	sp, #128	; 0x80
 80007b4:	af00      	add	r7, sp, #0
	uint8_t* ptrscreen;

	// Erase Previous Ship
	ptrscreen = (uint8_t*)(0x20020000 + ship_py*320 + ship_px);
 80007b6:	4baa      	ldr	r3, [pc, #680]	; (8000a60 <updatescreen+0x2b0>)
 80007b8:	681a      	ldr	r2, [r3, #0]
 80007ba:	4613      	mov	r3, r2
 80007bc:	009b      	lsls	r3, r3, #2
 80007be:	4413      	add	r3, r2
 80007c0:	019b      	lsls	r3, r3, #6
 80007c2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80007c6:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80007ca:	4aa6      	ldr	r2, [pc, #664]	; (8000a64 <updatescreen+0x2b4>)
 80007cc:	6812      	ldr	r2, [r2, #0]
 80007ce:	4413      	add	r3, r2
 80007d0:	67fb      	str	r3, [r7, #124]	; 0x7c
	for (int i = 0; i < 8; i++) {
 80007d2:	2300      	movs	r3, #0
 80007d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80007d6:	e014      	b.n	8000802 <updatescreen+0x52>
		for (int j = 0; j < 12; j++) {
 80007d8:	2300      	movs	r3, #0
 80007da:	677b      	str	r3, [r7, #116]	; 0x74
 80007dc:	e007      	b.n	80007ee <updatescreen+0x3e>
			*ptrscreen++ = 0;
 80007de:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80007e0:	1c5a      	adds	r2, r3, #1
 80007e2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80007e4:	2200      	movs	r2, #0
 80007e6:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 12; j++) {
 80007e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80007ea:	3301      	adds	r3, #1
 80007ec:	677b      	str	r3, [r7, #116]	; 0x74
 80007ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80007f0:	2b0b      	cmp	r3, #11
 80007f2:	ddf4      	ble.n	80007de <updatescreen+0x2e>
		}
		ptrscreen += 308;
 80007f4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80007f6:	f503 739a 	add.w	r3, r3, #308	; 0x134
 80007fa:	67fb      	str	r3, [r7, #124]	; 0x7c
	for (int i = 0; i < 8; i++) {
 80007fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80007fe:	3301      	adds	r3, #1
 8000800:	67bb      	str	r3, [r7, #120]	; 0x78
 8000802:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000804:	2b07      	cmp	r3, #7
 8000806:	dde7      	ble.n	80007d8 <updatescreen+0x28>
	}

	// Draw New Ship
	ptrscreen = (uint8_t*)(0x20020000 + ship_y*320 + ship_x);
 8000808:	4b97      	ldr	r3, [pc, #604]	; (8000a68 <updatescreen+0x2b8>)
 800080a:	681a      	ldr	r2, [r3, #0]
 800080c:	4613      	mov	r3, r2
 800080e:	009b      	lsls	r3, r3, #2
 8000810:	4413      	add	r3, r2
 8000812:	019b      	lsls	r3, r3, #6
 8000814:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8000818:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800081c:	4a93      	ldr	r2, [pc, #588]	; (8000a6c <updatescreen+0x2bc>)
 800081e:	6812      	ldr	r2, [r2, #0]
 8000820:	4413      	add	r3, r2
 8000822:	67fb      	str	r3, [r7, #124]	; 0x7c
	uint8_t* ptrsrc = (uint8_t*) Ship;
 8000824:	4b92      	ldr	r3, [pc, #584]	; (8000a70 <updatescreen+0x2c0>)
 8000826:	673b      	str	r3, [r7, #112]	; 0x70
	for (int i = 0; i < 8; i++) {
 8000828:	2300      	movs	r3, #0
 800082a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800082c:	e017      	b.n	800085e <updatescreen+0xae>
		for (int j = 0; j < 12; j++) {
 800082e:	2300      	movs	r3, #0
 8000830:	66bb      	str	r3, [r7, #104]	; 0x68
 8000832:	e00a      	b.n	800084a <updatescreen+0x9a>
			*ptrscreen++ = *ptrsrc++;
 8000834:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000836:	1c53      	adds	r3, r2, #1
 8000838:	673b      	str	r3, [r7, #112]	; 0x70
 800083a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800083c:	1c59      	adds	r1, r3, #1
 800083e:	67f9      	str	r1, [r7, #124]	; 0x7c
 8000840:	7812      	ldrb	r2, [r2, #0]
 8000842:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 12; j++) {
 8000844:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000846:	3301      	adds	r3, #1
 8000848:	66bb      	str	r3, [r7, #104]	; 0x68
 800084a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800084c:	2b0b      	cmp	r3, #11
 800084e:	ddf1      	ble.n	8000834 <updatescreen+0x84>
		}
		ptrscreen += 308;
 8000850:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000852:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8000856:	67fb      	str	r3, [r7, #124]	; 0x7c
	for (int i = 0; i < 8; i++) {
 8000858:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800085a:	3301      	adds	r3, #1
 800085c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800085e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000860:	2b07      	cmp	r3, #7
 8000862:	dde4      	ble.n	800082e <updatescreen+0x7e>
	}

	// Erase broken barriers
	for (int barrier_index = 0; barrier_index < 3; ++barrier_index) {
 8000864:	2300      	movs	r3, #0
 8000866:	667b      	str	r3, [r7, #100]	; 0x64
 8000868:	e035      	b.n	80008d6 <updatescreen+0x126>
		if (barrier_health[barrier_index] == 0) {
 800086a:	4a82      	ldr	r2, [pc, #520]	; (8000a74 <updatescreen+0x2c4>)
 800086c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800086e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d12c      	bne.n	80008d0 <updatescreen+0x120>
			ptrscreen = (uint8_t*) (0x20020000 + barrier_y_pos[barrier_index]*320 + barrier_x_pos[barrier_index]);
 8000876:	4a80      	ldr	r2, [pc, #512]	; (8000a78 <updatescreen+0x2c8>)
 8000878:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800087a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800087e:	4613      	mov	r3, r2
 8000880:	009b      	lsls	r3, r3, #2
 8000882:	4413      	add	r3, r2
 8000884:	019b      	lsls	r3, r3, #6
 8000886:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800088a:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800088e:	497b      	ldr	r1, [pc, #492]	; (8000a7c <updatescreen+0x2cc>)
 8000890:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000892:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000896:	4413      	add	r3, r2
 8000898:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (int i = 0; i < 5; ++i) {
 800089a:	2300      	movs	r3, #0
 800089c:	663b      	str	r3, [r7, #96]	; 0x60
 800089e:	e014      	b.n	80008ca <updatescreen+0x11a>
				for (int j = 0; j < 22; ++j) {
 80008a0:	2300      	movs	r3, #0
 80008a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80008a4:	e007      	b.n	80008b6 <updatescreen+0x106>
					*ptrscreen++ = 0;
 80008a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80008a8:	1c5a      	adds	r2, r3, #1
 80008aa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80008ac:	2200      	movs	r2, #0
 80008ae:	701a      	strb	r2, [r3, #0]
				for (int j = 0; j < 22; ++j) {
 80008b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80008b2:	3301      	adds	r3, #1
 80008b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80008b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80008b8:	2b15      	cmp	r3, #21
 80008ba:	ddf4      	ble.n	80008a6 <updatescreen+0xf6>
				}
				ptrscreen += 298;
 80008bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80008be:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 80008c2:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (int i = 0; i < 5; ++i) {
 80008c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80008c6:	3301      	adds	r3, #1
 80008c8:	663b      	str	r3, [r7, #96]	; 0x60
 80008ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80008cc:	2b04      	cmp	r3, #4
 80008ce:	dde7      	ble.n	80008a0 <updatescreen+0xf0>
	for (int barrier_index = 0; barrier_index < 3; ++barrier_index) {
 80008d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80008d2:	3301      	adds	r3, #1
 80008d4:	667b      	str	r3, [r7, #100]	; 0x64
 80008d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80008d8:	2b02      	cmp	r3, #2
 80008da:	ddc6      	ble.n	800086a <updatescreen+0xba>
		}

	}

	// Draw Barriers
	for (int barrier_index = 0; barrier_index < 3; ++barrier_index) {
 80008dc:	2300      	movs	r3, #0
 80008de:	65bb      	str	r3, [r7, #88]	; 0x58
 80008e0:	e03a      	b.n	8000958 <updatescreen+0x1a8>
		if (barrier_health[barrier_index] > 0) {
 80008e2:	4a64      	ldr	r2, [pc, #400]	; (8000a74 <updatescreen+0x2c4>)
 80008e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80008e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	dd31      	ble.n	8000952 <updatescreen+0x1a2>
			ptrscreen = (uint8_t*) (0x20020000 + barrier_y_pos[barrier_index]*320 + barrier_x_pos[barrier_index]);
 80008ee:	4a62      	ldr	r2, [pc, #392]	; (8000a78 <updatescreen+0x2c8>)
 80008f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80008f2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80008f6:	4613      	mov	r3, r2
 80008f8:	009b      	lsls	r3, r3, #2
 80008fa:	4413      	add	r3, r2
 80008fc:	019b      	lsls	r3, r3, #6
 80008fe:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8000902:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000906:	495d      	ldr	r1, [pc, #372]	; (8000a7c <updatescreen+0x2cc>)
 8000908:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800090a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800090e:	4413      	add	r3, r2
 8000910:	67fb      	str	r3, [r7, #124]	; 0x7c
			ptrsrc = (uint8_t*) Barrier;
 8000912:	4b5b      	ldr	r3, [pc, #364]	; (8000a80 <updatescreen+0x2d0>)
 8000914:	673b      	str	r3, [r7, #112]	; 0x70
			for (int i = 0; i < 5; ++i) {
 8000916:	2300      	movs	r3, #0
 8000918:	657b      	str	r3, [r7, #84]	; 0x54
 800091a:	e017      	b.n	800094c <updatescreen+0x19c>
				for (int j = 0; j < 22; ++j) {
 800091c:	2300      	movs	r3, #0
 800091e:	653b      	str	r3, [r7, #80]	; 0x50
 8000920:	e00a      	b.n	8000938 <updatescreen+0x188>
					*ptrscreen++ = *ptrsrc++;
 8000922:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000924:	1c53      	adds	r3, r2, #1
 8000926:	673b      	str	r3, [r7, #112]	; 0x70
 8000928:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800092a:	1c59      	adds	r1, r3, #1
 800092c:	67f9      	str	r1, [r7, #124]	; 0x7c
 800092e:	7812      	ldrb	r2, [r2, #0]
 8000930:	701a      	strb	r2, [r3, #0]
				for (int j = 0; j < 22; ++j) {
 8000932:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000934:	3301      	adds	r3, #1
 8000936:	653b      	str	r3, [r7, #80]	; 0x50
 8000938:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800093a:	2b15      	cmp	r3, #21
 800093c:	ddf1      	ble.n	8000922 <updatescreen+0x172>
				}
				ptrscreen += 298;
 800093e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000940:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8000944:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (int i = 0; i < 5; ++i) {
 8000946:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000948:	3301      	adds	r3, #1
 800094a:	657b      	str	r3, [r7, #84]	; 0x54
 800094c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800094e:	2b04      	cmp	r3, #4
 8000950:	dde4      	ble.n	800091c <updatescreen+0x16c>
	for (int barrier_index = 0; barrier_index < 3; ++barrier_index) {
 8000952:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000954:	3301      	adds	r3, #1
 8000956:	65bb      	str	r3, [r7, #88]	; 0x58
 8000958:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800095a:	2b02      	cmp	r3, #2
 800095c:	ddc1      	ble.n	80008e2 <updatescreen+0x132>

	}


	// Erase Previous Invader 1 Positions
	for (int row = 0; row < 4; row++) {
 800095e:	2300      	movs	r3, #0
 8000960:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000962:	e044      	b.n	80009ee <updatescreen+0x23e>
		for (int col = 0; col < 6; col++) {
 8000964:	2300      	movs	r3, #0
 8000966:	64bb      	str	r3, [r7, #72]	; 0x48
 8000968:	e03b      	b.n	80009e2 <updatescreen+0x232>
				ptrscreen = (uint8_t*)(0x20020000 +invader1_prev_ypos[row][col]*320 + invader1_prev_xpos[row][col]);
 800096a:	4946      	ldr	r1, [pc, #280]	; (8000a84 <updatescreen+0x2d4>)
 800096c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800096e:	4613      	mov	r3, r2
 8000970:	005b      	lsls	r3, r3, #1
 8000972:	4413      	add	r3, r2
 8000974:	005b      	lsls	r3, r3, #1
 8000976:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000978:	4413      	add	r3, r2
 800097a:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 800097e:	4613      	mov	r3, r2
 8000980:	009b      	lsls	r3, r3, #2
 8000982:	4413      	add	r3, r2
 8000984:	019b      	lsls	r3, r3, #6
 8000986:	f103 5200 	add.w	r2, r3, #536870912	; 0x20000000
 800098a:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
 800098e:	483e      	ldr	r0, [pc, #248]	; (8000a88 <updatescreen+0x2d8>)
 8000990:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8000992:	460b      	mov	r3, r1
 8000994:	005b      	lsls	r3, r3, #1
 8000996:	440b      	add	r3, r1
 8000998:	005b      	lsls	r3, r3, #1
 800099a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800099c:	440b      	add	r3, r1
 800099e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80009a2:	4413      	add	r3, r2
 80009a4:	67fb      	str	r3, [r7, #124]	; 0x7c
				for (int i = 0; i < 8; i++) {
 80009a6:	2300      	movs	r3, #0
 80009a8:	647b      	str	r3, [r7, #68]	; 0x44
 80009aa:	e014      	b.n	80009d6 <updatescreen+0x226>
					for (int j = 0; j < 22; j++) {
 80009ac:	2300      	movs	r3, #0
 80009ae:	643b      	str	r3, [r7, #64]	; 0x40
 80009b0:	e007      	b.n	80009c2 <updatescreen+0x212>
						*ptrscreen++ = 0;
 80009b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80009b4:	1c5a      	adds	r2, r3, #1
 80009b6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80009b8:	2200      	movs	r2, #0
 80009ba:	701a      	strb	r2, [r3, #0]
					for (int j = 0; j < 22; j++) {
 80009bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80009be:	3301      	adds	r3, #1
 80009c0:	643b      	str	r3, [r7, #64]	; 0x40
 80009c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80009c4:	2b15      	cmp	r3, #21
 80009c6:	ddf4      	ble.n	80009b2 <updatescreen+0x202>
					}
					ptrscreen += 298;
 80009c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80009ca:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 80009ce:	67fb      	str	r3, [r7, #124]	; 0x7c
				for (int i = 0; i < 8; i++) {
 80009d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80009d2:	3301      	adds	r3, #1
 80009d4:	647b      	str	r3, [r7, #68]	; 0x44
 80009d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80009d8:	2b07      	cmp	r3, #7
 80009da:	dde7      	ble.n	80009ac <updatescreen+0x1fc>
		for (int col = 0; col < 6; col++) {
 80009dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80009de:	3301      	adds	r3, #1
 80009e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80009e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80009e4:	2b05      	cmp	r3, #5
 80009e6:	ddc0      	ble.n	800096a <updatescreen+0x1ba>
	for (int row = 0; row < 4; row++) {
 80009e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80009ea:	3301      	adds	r3, #1
 80009ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80009ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80009f0:	2b03      	cmp	r3, #3
 80009f2:	ddb7      	ble.n	8000964 <updatescreen+0x1b4>
		}
	}


	// Draw New Invader 1 Positions
	for (int row = 0; row < 4; row++) {
 80009f4:	2300      	movs	r3, #0
 80009f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80009f8:	e074      	b.n	8000ae4 <updatescreen+0x334>
		for (int col = 0; col < 6; col++) {
 80009fa:	2300      	movs	r3, #0
 80009fc:	63bb      	str	r3, [r7, #56]	; 0x38
 80009fe:	e06b      	b.n	8000ad8 <updatescreen+0x328>
			if (invader1_status[row][col] == 1) {
 8000a00:	4922      	ldr	r1, [pc, #136]	; (8000a8c <updatescreen+0x2dc>)
 8000a02:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000a04:	4613      	mov	r3, r2
 8000a06:	005b      	lsls	r3, r3, #1
 8000a08:	4413      	add	r3, r2
 8000a0a:	005b      	lsls	r3, r3, #1
 8000a0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000a0e:	4413      	add	r3, r2
 8000a10:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a14:	2b01      	cmp	r3, #1
 8000a16:	d15c      	bne.n	8000ad2 <updatescreen+0x322>
				ptrscreen = (uint8_t*)(0x20020000 +invader1_ypos[row][col]*320 + invader1_xpos[row][col]);
 8000a18:	491d      	ldr	r1, [pc, #116]	; (8000a90 <updatescreen+0x2e0>)
 8000a1a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000a1c:	4613      	mov	r3, r2
 8000a1e:	005b      	lsls	r3, r3, #1
 8000a20:	4413      	add	r3, r2
 8000a22:	005b      	lsls	r3, r3, #1
 8000a24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000a26:	4413      	add	r3, r2
 8000a28:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8000a2c:	4613      	mov	r3, r2
 8000a2e:	009b      	lsls	r3, r3, #2
 8000a30:	4413      	add	r3, r2
 8000a32:	019b      	lsls	r3, r3, #6
 8000a34:	f103 5200 	add.w	r2, r3, #536870912	; 0x20000000
 8000a38:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
 8000a3c:	4815      	ldr	r0, [pc, #84]	; (8000a94 <updatescreen+0x2e4>)
 8000a3e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000a40:	460b      	mov	r3, r1
 8000a42:	005b      	lsls	r3, r3, #1
 8000a44:	440b      	add	r3, r1
 8000a46:	005b      	lsls	r3, r3, #1
 8000a48:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000a4a:	440b      	add	r3, r1
 8000a4c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000a50:	4413      	add	r3, r2
 8000a52:	67fb      	str	r3, [r7, #124]	; 0x7c
				ptrsrc = (uint8_t*) Invader1;
 8000a54:	4b10      	ldr	r3, [pc, #64]	; (8000a98 <updatescreen+0x2e8>)
 8000a56:	673b      	str	r3, [r7, #112]	; 0x70
				for (int i = 0; i < 8; i++) {
 8000a58:	2300      	movs	r3, #0
 8000a5a:	637b      	str	r3, [r7, #52]	; 0x34
 8000a5c:	e036      	b.n	8000acc <updatescreen+0x31c>
 8000a5e:	bf00      	nop
 8000a60:	200001cc 	.word	0x200001cc
 8000a64:	20000478 	.word	0x20000478
 8000a68:	200001c8 	.word	0x200001c8
 8000a6c:	20000474 	.word	0x20000474
 8000a70:	08004690 	.word	0x08004690
 8000a74:	200001f4 	.word	0x200001f4
 8000a78:	200001e8 	.word	0x200001e8
 8000a7c:	200001dc 	.word	0x200001dc
 8000a80:	080046f8 	.word	0x080046f8
 8000a84:	20000320 	.word	0x20000320
 8000a88:	200002c0 	.word	0x200002c0
 8000a8c:	20000380 	.word	0x20000380
 8000a90:	20000260 	.word	0x20000260
 8000a94:	20000200 	.word	0x20000200
 8000a98:	08004630 	.word	0x08004630
					for (int j = 0; j < 12; j++) {
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	633b      	str	r3, [r7, #48]	; 0x30
 8000aa0:	e00a      	b.n	8000ab8 <updatescreen+0x308>
						*ptrscreen++ = *ptrsrc++;
 8000aa2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000aa4:	1c53      	adds	r3, r2, #1
 8000aa6:	673b      	str	r3, [r7, #112]	; 0x70
 8000aa8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000aaa:	1c59      	adds	r1, r3, #1
 8000aac:	67f9      	str	r1, [r7, #124]	; 0x7c
 8000aae:	7812      	ldrb	r2, [r2, #0]
 8000ab0:	701a      	strb	r2, [r3, #0]
					for (int j = 0; j < 12; j++) {
 8000ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	633b      	str	r3, [r7, #48]	; 0x30
 8000ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000aba:	2b0b      	cmp	r3, #11
 8000abc:	ddf1      	ble.n	8000aa2 <updatescreen+0x2f2>
					}
					ptrscreen += 308;
 8000abe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000ac0:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8000ac4:	67fb      	str	r3, [r7, #124]	; 0x7c
				for (int i = 0; i < 8; i++) {
 8000ac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ac8:	3301      	adds	r3, #1
 8000aca:	637b      	str	r3, [r7, #52]	; 0x34
 8000acc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ace:	2b07      	cmp	r3, #7
 8000ad0:	dde4      	ble.n	8000a9c <updatescreen+0x2ec>
		for (int col = 0; col < 6; col++) {
 8000ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	63bb      	str	r3, [r7, #56]	; 0x38
 8000ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ada:	2b05      	cmp	r3, #5
 8000adc:	dd90      	ble.n	8000a00 <updatescreen+0x250>
	for (int row = 0; row < 4; row++) {
 8000ade:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000ae4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ae6:	2b03      	cmp	r3, #3
 8000ae8:	dd87      	ble.n	80009fa <updatescreen+0x24a>
			}
		}
	}

	// Erase Previous Player Missile Positions
	for (int missile_index = 0; missile_index < 3; ++missile_index) {
 8000aea:	2300      	movs	r3, #0
 8000aec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000aee:	e02f      	b.n	8000b50 <updatescreen+0x3a0>
		ptrscreen = (uint8_t*)(0x20020000 + player_missile_prev_ypos[missile_index]*320 + player_missile_prev_xpos[missile_index]);
 8000af0:	4a7e      	ldr	r2, [pc, #504]	; (8000cec <updatescreen+0x53c>)
 8000af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000af4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000af8:	4613      	mov	r3, r2
 8000afa:	009b      	lsls	r3, r3, #2
 8000afc:	4413      	add	r3, r2
 8000afe:	019b      	lsls	r3, r3, #6
 8000b00:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8000b04:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000b08:	4979      	ldr	r1, [pc, #484]	; (8000cf0 <updatescreen+0x540>)
 8000b0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000b0c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000b10:	4413      	add	r3, r2
 8000b12:	67fb      	str	r3, [r7, #124]	; 0x7c
		for (int i = 0; i < 4; i++) {
 8000b14:	2300      	movs	r3, #0
 8000b16:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b18:	e014      	b.n	8000b44 <updatescreen+0x394>
			for (int j = 0; j < 1; j++) {
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	627b      	str	r3, [r7, #36]	; 0x24
 8000b1e:	e007      	b.n	8000b30 <updatescreen+0x380>
				*ptrscreen++ = 0;
 8000b20:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000b22:	1c5a      	adds	r2, r3, #1
 8000b24:	67fa      	str	r2, [r7, #124]	; 0x7c
 8000b26:	2200      	movs	r2, #0
 8000b28:	701a      	strb	r2, [r3, #0]
			for (int j = 0; j < 1; j++) {
 8000b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	627b      	str	r3, [r7, #36]	; 0x24
 8000b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	ddf4      	ble.n	8000b20 <updatescreen+0x370>
			}
			ptrscreen += 319;
 8000b36:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000b38:	f203 133f 	addw	r3, r3, #319	; 0x13f
 8000b3c:	67fb      	str	r3, [r7, #124]	; 0x7c
		for (int i = 0; i < 4; i++) {
 8000b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b40:	3301      	adds	r3, #1
 8000b42:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b46:	2b03      	cmp	r3, #3
 8000b48:	dde7      	ble.n	8000b1a <updatescreen+0x36a>
	for (int missile_index = 0; missile_index < 3; ++missile_index) {
 8000b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b52:	2b02      	cmp	r3, #2
 8000b54:	ddcc      	ble.n	8000af0 <updatescreen+0x340>
		}
	}

	// Display Player Missile
	for (int m = 0; m < 3; ++m) {
 8000b56:	2300      	movs	r3, #0
 8000b58:	623b      	str	r3, [r7, #32]
 8000b5a:	e03a      	b.n	8000bd2 <updatescreen+0x422>
		if (player_missile_status[m] == 1) {
 8000b5c:	4a65      	ldr	r2, [pc, #404]	; (8000cf4 <updatescreen+0x544>)
 8000b5e:	6a3b      	ldr	r3, [r7, #32]
 8000b60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b64:	2b01      	cmp	r3, #1
 8000b66:	d131      	bne.n	8000bcc <updatescreen+0x41c>
			ptrscreen = (uint8_t*)(0x20020000 + player_missile_ypos[m]*320 + player_missile_xpos[m]);
 8000b68:	4a63      	ldr	r2, [pc, #396]	; (8000cf8 <updatescreen+0x548>)
 8000b6a:	6a3b      	ldr	r3, [r7, #32]
 8000b6c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b70:	4613      	mov	r3, r2
 8000b72:	009b      	lsls	r3, r3, #2
 8000b74:	4413      	add	r3, r2
 8000b76:	019b      	lsls	r3, r3, #6
 8000b78:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8000b7c:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000b80:	495e      	ldr	r1, [pc, #376]	; (8000cfc <updatescreen+0x54c>)
 8000b82:	6a3a      	ldr	r2, [r7, #32]
 8000b84:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000b88:	4413      	add	r3, r2
 8000b8a:	67fb      	str	r3, [r7, #124]	; 0x7c
			ptrsrc = (uint8_t*)  Missile_Green;
 8000b8c:	4b5c      	ldr	r3, [pc, #368]	; (8000d00 <updatescreen+0x550>)
 8000b8e:	673b      	str	r3, [r7, #112]	; 0x70
			for (int i = 0; i < 4; ++i) {
 8000b90:	2300      	movs	r3, #0
 8000b92:	61fb      	str	r3, [r7, #28]
 8000b94:	e017      	b.n	8000bc6 <updatescreen+0x416>
				for (int j = 0; j < 1; ++j) {
 8000b96:	2300      	movs	r3, #0
 8000b98:	61bb      	str	r3, [r7, #24]
 8000b9a:	e00a      	b.n	8000bb2 <updatescreen+0x402>
					*ptrscreen++ = *ptrsrc++;
 8000b9c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000b9e:	1c53      	adds	r3, r2, #1
 8000ba0:	673b      	str	r3, [r7, #112]	; 0x70
 8000ba2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000ba4:	1c59      	adds	r1, r3, #1
 8000ba6:	67f9      	str	r1, [r7, #124]	; 0x7c
 8000ba8:	7812      	ldrb	r2, [r2, #0]
 8000baa:	701a      	strb	r2, [r3, #0]
				for (int j = 0; j < 1; ++j) {
 8000bac:	69bb      	ldr	r3, [r7, #24]
 8000bae:	3301      	adds	r3, #1
 8000bb0:	61bb      	str	r3, [r7, #24]
 8000bb2:	69bb      	ldr	r3, [r7, #24]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	ddf1      	ble.n	8000b9c <updatescreen+0x3ec>
				}
				ptrscreen += 319;
 8000bb8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000bba:	f203 133f 	addw	r3, r3, #319	; 0x13f
 8000bbe:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (int i = 0; i < 4; ++i) {
 8000bc0:	69fb      	ldr	r3, [r7, #28]
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	61fb      	str	r3, [r7, #28]
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	2b03      	cmp	r3, #3
 8000bca:	dde4      	ble.n	8000b96 <updatescreen+0x3e6>
	for (int m = 0; m < 3; ++m) {
 8000bcc:	6a3b      	ldr	r3, [r7, #32]
 8000bce:	3301      	adds	r3, #1
 8000bd0:	623b      	str	r3, [r7, #32]
 8000bd2:	6a3b      	ldr	r3, [r7, #32]
 8000bd4:	2b02      	cmp	r3, #2
 8000bd6:	ddc1      	ble.n	8000b5c <updatescreen+0x3ac>
			}
		}
	}

	// Erase Previous Invader 1 Missile Positions
	for (int missile_index = 0; missile_index < 6; ++missile_index) {
 8000bd8:	2300      	movs	r3, #0
 8000bda:	617b      	str	r3, [r7, #20]
 8000bdc:	e035      	b.n	8000c4a <updatescreen+0x49a>
		if (invader1_missile_status[missile_index] == 1) {
 8000bde:	4a49      	ldr	r2, [pc, #292]	; (8000d04 <updatescreen+0x554>)
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	d12c      	bne.n	8000c44 <updatescreen+0x494>
			ptrscreen = (uint8_t*)(0x20020000 + invader1_missile_prev_ypos[missile_index]*320 + invader1_missile_prev_xpos[missile_index]);
 8000bea:	4a47      	ldr	r2, [pc, #284]	; (8000d08 <updatescreen+0x558>)
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000bf2:	4613      	mov	r3, r2
 8000bf4:	009b      	lsls	r3, r3, #2
 8000bf6:	4413      	add	r3, r2
 8000bf8:	019b      	lsls	r3, r3, #6
 8000bfa:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8000bfe:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000c02:	4942      	ldr	r1, [pc, #264]	; (8000d0c <updatescreen+0x55c>)
 8000c04:	697a      	ldr	r2, [r7, #20]
 8000c06:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000c0a:	4413      	add	r3, r2
 8000c0c:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (int i = 0; i < 4; ++i) {
 8000c0e:	2300      	movs	r3, #0
 8000c10:	613b      	str	r3, [r7, #16]
 8000c12:	e014      	b.n	8000c3e <updatescreen+0x48e>
				for (int j = 0; j < 1; ++j) {
 8000c14:	2300      	movs	r3, #0
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	e007      	b.n	8000c2a <updatescreen+0x47a>
					*ptrscreen++ = 0;
 8000c1a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000c1c:	1c5a      	adds	r2, r3, #1
 8000c1e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8000c20:	2200      	movs	r2, #0
 8000c22:	701a      	strb	r2, [r3, #0]
				for (int j = 0; j < 1; ++j) {
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	3301      	adds	r3, #1
 8000c28:	60fb      	str	r3, [r7, #12]
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	ddf4      	ble.n	8000c1a <updatescreen+0x46a>
				}
				ptrscreen += 319;
 8000c30:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000c32:	f203 133f 	addw	r3, r3, #319	; 0x13f
 8000c36:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (int i = 0; i < 4; ++i) {
 8000c38:	693b      	ldr	r3, [r7, #16]
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	613b      	str	r3, [r7, #16]
 8000c3e:	693b      	ldr	r3, [r7, #16]
 8000c40:	2b03      	cmp	r3, #3
 8000c42:	dde7      	ble.n	8000c14 <updatescreen+0x464>
	for (int missile_index = 0; missile_index < 6; ++missile_index) {
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	3301      	adds	r3, #1
 8000c48:	617b      	str	r3, [r7, #20]
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	2b05      	cmp	r3, #5
 8000c4e:	ddc6      	ble.n	8000bde <updatescreen+0x42e>
			}
		}
	}

	// Display Invader 1 Missile
	for (int missile_index = 0; missile_index < 6; ++missile_index) {
 8000c50:	2300      	movs	r3, #0
 8000c52:	60bb      	str	r3, [r7, #8]
 8000c54:	e03a      	b.n	8000ccc <updatescreen+0x51c>
		if (invader1_missile_status[missile_index] == 1) {
 8000c56:	4a2b      	ldr	r2, [pc, #172]	; (8000d04 <updatescreen+0x554>)
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c5e:	2b01      	cmp	r3, #1
 8000c60:	d131      	bne.n	8000cc6 <updatescreen+0x516>
			ptrscreen = (uint8_t*)(0x20020000 + invader1_missile_ypos[missile_index]*320 + invader1_missile_xpos[missile_index]);
 8000c62:	4a2b      	ldr	r2, [pc, #172]	; (8000d10 <updatescreen+0x560>)
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000c6a:	4613      	mov	r3, r2
 8000c6c:	009b      	lsls	r3, r3, #2
 8000c6e:	4413      	add	r3, r2
 8000c70:	019b      	lsls	r3, r3, #6
 8000c72:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8000c76:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000c7a:	4926      	ldr	r1, [pc, #152]	; (8000d14 <updatescreen+0x564>)
 8000c7c:	68ba      	ldr	r2, [r7, #8]
 8000c7e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000c82:	4413      	add	r3, r2
 8000c84:	67fb      	str	r3, [r7, #124]	; 0x7c
			ptrsrc = (uint8_t*) Missile_Red;
 8000c86:	4b24      	ldr	r3, [pc, #144]	; (8000d18 <updatescreen+0x568>)
 8000c88:	673b      	str	r3, [r7, #112]	; 0x70
			for (int i = 0; i < 4; ++i) {
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	607b      	str	r3, [r7, #4]
 8000c8e:	e017      	b.n	8000cc0 <updatescreen+0x510>
				for (int j = 0; j < 1; ++j) {
 8000c90:	2300      	movs	r3, #0
 8000c92:	603b      	str	r3, [r7, #0]
 8000c94:	e00a      	b.n	8000cac <updatescreen+0x4fc>
					*ptrscreen++ = *ptrsrc++;
 8000c96:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000c98:	1c53      	adds	r3, r2, #1
 8000c9a:	673b      	str	r3, [r7, #112]	; 0x70
 8000c9c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000c9e:	1c59      	adds	r1, r3, #1
 8000ca0:	67f9      	str	r1, [r7, #124]	; 0x7c
 8000ca2:	7812      	ldrb	r2, [r2, #0]
 8000ca4:	701a      	strb	r2, [r3, #0]
				for (int j = 0; j < 1; ++j) {
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	3301      	adds	r3, #1
 8000caa:	603b      	str	r3, [r7, #0]
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	ddf1      	ble.n	8000c96 <updatescreen+0x4e6>
				}
				ptrscreen += 319;
 8000cb2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000cb4:	f203 133f 	addw	r3, r3, #319	; 0x13f
 8000cb8:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (int i = 0; i < 4; ++i) {
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	607b      	str	r3, [r7, #4]
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2b03      	cmp	r3, #3
 8000cc4:	dde4      	ble.n	8000c90 <updatescreen+0x4e0>
	for (int missile_index = 0; missile_index < 6; ++missile_index) {
 8000cc6:	68bb      	ldr	r3, [r7, #8]
 8000cc8:	3301      	adds	r3, #1
 8000cca:	60bb      	str	r3, [r7, #8]
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	2b05      	cmp	r3, #5
 8000cd0:	ddc1      	ble.n	8000c56 <updatescreen+0x4a6>
			}
		}
	}

	// Display explosions
	explodeInvader1();
 8000cd2:	f000 fab9 	bl	8001248 <explodeInvader1>


	displayint(playerScore, (uint32_t*)(0x20020418));
 8000cd6:	4b11      	ldr	r3, [pc, #68]	; (8000d1c <updatescreen+0x56c>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	b29b      	uxth	r3, r3
 8000cdc:	4910      	ldr	r1, [pc, #64]	; (8000d20 <updatescreen+0x570>)
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f7ff fd0c 	bl	80006fc <displayint>
}
 8000ce4:	bf00      	nop
 8000ce6:	3780      	adds	r7, #128	; 0x80
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	20000494 	.word	0x20000494
 8000cf0:	20000468 	.word	0x20000468
 8000cf4:	200001d0 	.word	0x200001d0
 8000cf8:	2000045c 	.word	0x2000045c
 8000cfc:	20000504 	.word	0x20000504
 8000d00:	080046f0 	.word	0x080046f0
 8000d04:	200003e4 	.word	0x200003e4
 8000d08:	20000444 	.word	0x20000444
 8000d0c:	2000042c 	.word	0x2000042c
 8000d10:	2000047c 	.word	0x2000047c
 8000d14:	20000510 	.word	0x20000510
 8000d18:	080046f4 	.word	0x080046f4
 8000d1c:	200001c0 	.word	0x200001c0
 8000d20:	20020418 	.word	0x20020418

08000d24 <updatePlayerMissileStatus>:

void updatePlayerMissileStatus(int missile_index)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b09a      	sub	sp, #104	; 0x68
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
	int pos_x = player_missile_prev_xpos[missile_index];
 8000d2c:	4aa3      	ldr	r2, [pc, #652]	; (8000fbc <updatePlayerMissileStatus+0x298>)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d34:	623b      	str	r3, [r7, #32]
	int pos_y = player_missile_prev_ypos[missile_index];
 8000d36:	4aa2      	ldr	r2, [pc, #648]	; (8000fc0 <updatePlayerMissileStatus+0x29c>)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d3e:	61fb      	str	r3, [r7, #28]

	// Check if missile is out of bounds
	if (player_missile_ypos[missile_index] <= 15) {
 8000d40:	4aa0      	ldr	r2, [pc, #640]	; (8000fc4 <updatePlayerMissileStatus+0x2a0>)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d48:	2b0f      	cmp	r3, #15
 8000d4a:	dc2c      	bgt.n	8000da6 <updatePlayerMissileStatus+0x82>
		player_missile_status[missile_index] = 0;
 8000d4c:	4a9e      	ldr	r2, [pc, #632]	; (8000fc8 <updatePlayerMissileStatus+0x2a4>)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2100      	movs	r1, #0
 8000d52:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		uint8_t* ptrscreen = (uint8_t*)(0x20020000 + pos_y*320 + pos_x);
 8000d56:	69fa      	ldr	r2, [r7, #28]
 8000d58:	4613      	mov	r3, r2
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	4413      	add	r3, r2
 8000d5e:	019b      	lsls	r3, r3, #6
 8000d60:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8000d64:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000d68:	6a3a      	ldr	r2, [r7, #32]
 8000d6a:	4413      	add	r3, r2
 8000d6c:	667b      	str	r3, [r7, #100]	; 0x64
		for (int i = 0; i < 4; i++) {
 8000d6e:	2300      	movs	r3, #0
 8000d70:	663b      	str	r3, [r7, #96]	; 0x60
 8000d72:	e014      	b.n	8000d9e <updatePlayerMissileStatus+0x7a>
			for (int j = 0; j < 1; j++) {
 8000d74:	2300      	movs	r3, #0
 8000d76:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000d78:	e007      	b.n	8000d8a <updatePlayerMissileStatus+0x66>
				*ptrscreen++ = 0;
 8000d7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000d7c:	1c5a      	adds	r2, r3, #1
 8000d7e:	667a      	str	r2, [r7, #100]	; 0x64
 8000d80:	2200      	movs	r2, #0
 8000d82:	701a      	strb	r2, [r3, #0]
			for (int j = 0; j < 1; j++) {
 8000d84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d86:	3301      	adds	r3, #1
 8000d88:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000d8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	ddf4      	ble.n	8000d7a <updatePlayerMissileStatus+0x56>
			}
			ptrscreen += 319;
 8000d90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000d92:	f203 133f 	addw	r3, r3, #319	; 0x13f
 8000d96:	667b      	str	r3, [r7, #100]	; 0x64
		for (int i = 0; i < 4; i++) {
 8000d98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	663b      	str	r3, [r7, #96]	; 0x60
 8000d9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000da0:	2b03      	cmp	r3, #3
 8000da2:	dde7      	ble.n	8000d74 <updatePlayerMissileStatus+0x50>
		}
		return;
 8000da4:	e178      	b.n	8001098 <updatePlayerMissileStatus+0x374>
	}

	/// Player Missile and Barrier Collision
	for (int barrier_index = 0; barrier_index < 3; ++barrier_index) {
 8000da6:	2300      	movs	r3, #0
 8000da8:	65bb      	str	r3, [r7, #88]	; 0x58
 8000daa:	e036      	b.n	8000e1a <updatePlayerMissileStatus+0xf6>
		if (barrier_health[barrier_index] > 0) {
 8000dac:	4a87      	ldr	r2, [pc, #540]	; (8000fcc <updatePlayerMissileStatus+0x2a8>)
 8000dae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000db0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	dd2d      	ble.n	8000e14 <updatePlayerMissileStatus+0xf0>
			if ( (barrier_x_pos[barrier_index] + 22 >= pos_x) && (barrier_x_pos[barrier_index] <= pos_x + 2) && (barrier_y_pos[barrier_index] + 3 >= pos_y) && (barrier_y_pos[barrier_index] <= pos_y) ) {
 8000db8:	4a85      	ldr	r2, [pc, #532]	; (8000fd0 <updatePlayerMissileStatus+0x2ac>)
 8000dba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000dbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dc0:	3316      	adds	r3, #22
 8000dc2:	6a3a      	ldr	r2, [r7, #32]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	dc25      	bgt.n	8000e14 <updatePlayerMissileStatus+0xf0>
 8000dc8:	4a81      	ldr	r2, [pc, #516]	; (8000fd0 <updatePlayerMissileStatus+0x2ac>)
 8000dca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000dcc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000dd0:	6a3b      	ldr	r3, [r7, #32]
 8000dd2:	3302      	adds	r3, #2
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	dc1d      	bgt.n	8000e14 <updatePlayerMissileStatus+0xf0>
 8000dd8:	4a7e      	ldr	r2, [pc, #504]	; (8000fd4 <updatePlayerMissileStatus+0x2b0>)
 8000dda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000ddc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000de0:	3303      	adds	r3, #3
 8000de2:	69fa      	ldr	r2, [r7, #28]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	dc15      	bgt.n	8000e14 <updatePlayerMissileStatus+0xf0>
 8000de8:	4a7a      	ldr	r2, [pc, #488]	; (8000fd4 <updatePlayerMissileStatus+0x2b0>)
 8000dea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000dec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000df0:	69fa      	ldr	r2, [r7, #28]
 8000df2:	429a      	cmp	r2, r3
 8000df4:	db0e      	blt.n	8000e14 <updatePlayerMissileStatus+0xf0>
				--barrier_health[barrier_index];
 8000df6:	4a75      	ldr	r2, [pc, #468]	; (8000fcc <updatePlayerMissileStatus+0x2a8>)
 8000df8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000dfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dfe:	1e5a      	subs	r2, r3, #1
 8000e00:	4972      	ldr	r1, [pc, #456]	; (8000fcc <updatePlayerMissileStatus+0x2a8>)
 8000e02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000e04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				player_missile_status[missile_index] = 0;
 8000e08:	4a6f      	ldr	r2, [pc, #444]	; (8000fc8 <updatePlayerMissileStatus+0x2a4>)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				return;
 8000e12:	e141      	b.n	8001098 <updatePlayerMissileStatus+0x374>
	for (int barrier_index = 0; barrier_index < 3; ++barrier_index) {
 8000e14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000e16:	3301      	adds	r3, #1
 8000e18:	65bb      	str	r3, [r7, #88]	; 0x58
 8000e1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000e1c:	2b02      	cmp	r3, #2
 8000e1e:	ddc5      	ble.n	8000dac <updatePlayerMissileStatus+0x88>

	/// Check for player missile and enemy collision
	// Loop through enemy positions to check if one is hit
	int inv_pos_x;
	int inv_pos_y;
	int inv_w = 12;
 8000e20:	230c      	movs	r3, #12
 8000e22:	61bb      	str	r3, [r7, #24]
	int inv_h = 8;
 8000e24:	2308      	movs	r3, #8
 8000e26:	617b      	str	r3, [r7, #20]
	int inv_r, inv_c, inv_hit = 0;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	64fb      	str	r3, [r7, #76]	; 0x4c
	for (int row = 0; row < 4; ++row) {
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8000e30:	e04a      	b.n	8000ec8 <updatePlayerMissileStatus+0x1a4>
		for (int col = 0; col < 6; ++col) {
 8000e32:	2300      	movs	r3, #0
 8000e34:	647b      	str	r3, [r7, #68]	; 0x44
 8000e36:	e041      	b.n	8000ebc <updatePlayerMissileStatus+0x198>
			if (invader1_status[row][col] == 0) {
 8000e38:	4967      	ldr	r1, [pc, #412]	; (8000fd8 <updatePlayerMissileStatus+0x2b4>)
 8000e3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000e3c:	4613      	mov	r3, r2
 8000e3e:	005b      	lsls	r3, r3, #1
 8000e40:	4413      	add	r3, r2
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000e46:	4413      	add	r3, r2
 8000e48:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d031      	beq.n	8000eb4 <updatePlayerMissileStatus+0x190>
				continue;
			}
			inv_pos_x = invader1_prev_xpos[row][col];
 8000e50:	4962      	ldr	r1, [pc, #392]	; (8000fdc <updatePlayerMissileStatus+0x2b8>)
 8000e52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000e54:	4613      	mov	r3, r2
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	4413      	add	r3, r2
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000e5e:	4413      	add	r3, r2
 8000e60:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e64:	613b      	str	r3, [r7, #16]
			inv_pos_y = invader1_prev_ypos[row][col];
 8000e66:	495e      	ldr	r1, [pc, #376]	; (8000fe0 <updatePlayerMissileStatus+0x2bc>)
 8000e68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	4413      	add	r3, r2
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000e74:	4413      	add	r3, r2
 8000e76:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e7a:	60fb      	str	r3, [r7, #12]

			if ( ((inv_pos_x + inv_w) >= pos_x) && (inv_pos_x <= pos_x + 2) && ((inv_pos_y + inv_h) >= pos_y) && (inv_pos_y <= pos_y) ) {
 8000e7c:	693a      	ldr	r2, [r7, #16]
 8000e7e:	69bb      	ldr	r3, [r7, #24]
 8000e80:	4413      	add	r3, r2
 8000e82:	6a3a      	ldr	r2, [r7, #32]
 8000e84:	429a      	cmp	r2, r3
 8000e86:	dc16      	bgt.n	8000eb6 <updatePlayerMissileStatus+0x192>
 8000e88:	6a3b      	ldr	r3, [r7, #32]
 8000e8a:	3302      	adds	r3, #2
 8000e8c:	693a      	ldr	r2, [r7, #16]
 8000e8e:	429a      	cmp	r2, r3
 8000e90:	dc11      	bgt.n	8000eb6 <updatePlayerMissileStatus+0x192>
 8000e92:	68fa      	ldr	r2, [r7, #12]
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	4413      	add	r3, r2
 8000e98:	69fa      	ldr	r2, [r7, #28]
 8000e9a:	429a      	cmp	r2, r3
 8000e9c:	dc0b      	bgt.n	8000eb6 <updatePlayerMissileStatus+0x192>
 8000e9e:	68fa      	ldr	r2, [r7, #12]
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	429a      	cmp	r2, r3
 8000ea4:	dc07      	bgt.n	8000eb6 <updatePlayerMissileStatus+0x192>
				inv_hit = 1;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	64fb      	str	r3, [r7, #76]	; 0x4c
				inv_r = row;
 8000eaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000eac:	657b      	str	r3, [r7, #84]	; 0x54
				inv_c = col;
 8000eae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000eb0:	653b      	str	r3, [r7, #80]	; 0x50
				break;
 8000eb2:	e006      	b.n	8000ec2 <updatePlayerMissileStatus+0x19e>
				continue;
 8000eb4:	bf00      	nop
		for (int col = 0; col < 6; ++col) {
 8000eb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000eb8:	3301      	adds	r3, #1
 8000eba:	647b      	str	r3, [r7, #68]	; 0x44
 8000ebc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ebe:	2b05      	cmp	r3, #5
 8000ec0:	ddba      	ble.n	8000e38 <updatePlayerMissileStatus+0x114>
	for (int row = 0; row < 4; ++row) {
 8000ec2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	64bb      	str	r3, [r7, #72]	; 0x48
 8000ec8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000eca:	2b03      	cmp	r3, #3
 8000ecc:	ddb1      	ble.n	8000e32 <updatePlayerMissileStatus+0x10e>


		}
	}

	if (inv_hit == 1) {
 8000ece:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	f040 80e0 	bne.w	8001096 <updatePlayerMissileStatus+0x372>
		--total_inv1_left;
 8000ed6:	4b43      	ldr	r3, [pc, #268]	; (8000fe4 <updatePlayerMissileStatus+0x2c0>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	3b01      	subs	r3, #1
 8000edc:	4a41      	ldr	r2, [pc, #260]	; (8000fe4 <updatePlayerMissileStatus+0x2c0>)
 8000ede:	6013      	str	r3, [r2, #0]
		if (total_inv1_left > 0) {
 8000ee0:	4b40      	ldr	r3, [pc, #256]	; (8000fe4 <updatePlayerMissileStatus+0x2c0>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	dd05      	ble.n	8000ef4 <updatePlayerMissileStatus+0x1d0>
			HAL_I2S_Transmit_DMA(&hi2s3, (uint16_t*) audio_explode, AUDIOLEN_EXPLODE);
 8000ee8:	f248 5298 	movw	r2, #34200	; 0x8598
 8000eec:	493e      	ldr	r1, [pc, #248]	; (8000fe8 <updatePlayerMissileStatus+0x2c4>)
 8000eee:	483f      	ldr	r0, [pc, #252]	; (8000fec <updatePlayerMissileStatus+0x2c8>)
 8000ef0:	f002 f9aa 	bl	8003248 <HAL_I2S_Transmit_DMA>
		}

		playerScore += 10;
 8000ef4:	4b3e      	ldr	r3, [pc, #248]	; (8000ff0 <updatePlayerMissileStatus+0x2cc>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	330a      	adds	r3, #10
 8000efa:	4a3d      	ldr	r2, [pc, #244]	; (8000ff0 <updatePlayerMissileStatus+0x2cc>)
 8000efc:	6013      	str	r3, [r2, #0]
		player_missile_status[missile_index] = 0;
 8000efe:	4a32      	ldr	r2, [pc, #200]	; (8000fc8 <updatePlayerMissileStatus+0x2a4>)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2100      	movs	r1, #0
 8000f04:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		invader1_status[inv_r][inv_c] = 0;
 8000f08:	4933      	ldr	r1, [pc, #204]	; (8000fd8 <updatePlayerMissileStatus+0x2b4>)
 8000f0a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000f0c:	4613      	mov	r3, r2
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	4413      	add	r3, r2
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000f16:	4413      	add	r3, r2
 8000f18:	2200      	movs	r2, #0
 8000f1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		inv_pos_x = invader1_prev_xpos[inv_r][inv_c];
 8000f1e:	492f      	ldr	r1, [pc, #188]	; (8000fdc <updatePlayerMissileStatus+0x2b8>)
 8000f20:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000f22:	4613      	mov	r3, r2
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	4413      	add	r3, r2
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000f2c:	4413      	add	r3, r2
 8000f2e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f32:	613b      	str	r3, [r7, #16]
		inv_pos_y = invader1_prev_ypos[inv_r][inv_c];
 8000f34:	492a      	ldr	r1, [pc, #168]	; (8000fe0 <updatePlayerMissileStatus+0x2bc>)
 8000f36:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000f38:	4613      	mov	r3, r2
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	4413      	add	r3, r2
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000f42:	4413      	add	r3, r2
 8000f44:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f48:	60fb      	str	r3, [r7, #12]

		// Erase missile and enemy
		uint8_t* ptrscreen = (uint8_t*)(0x20020000 + pos_y*320 + pos_x);
 8000f4a:	69fa      	ldr	r2, [r7, #28]
 8000f4c:	4613      	mov	r3, r2
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	4413      	add	r3, r2
 8000f52:	019b      	lsls	r3, r3, #6
 8000f54:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8000f58:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000f5c:	6a3a      	ldr	r2, [r7, #32]
 8000f5e:	4413      	add	r3, r2
 8000f60:	643b      	str	r3, [r7, #64]	; 0x40
		for (int i = 0; i < 4; i++) {
 8000f62:	2300      	movs	r3, #0
 8000f64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f66:	e014      	b.n	8000f92 <updatePlayerMissileStatus+0x26e>
			for (int j = 0; j < 1; j++) {
 8000f68:	2300      	movs	r3, #0
 8000f6a:	63bb      	str	r3, [r7, #56]	; 0x38
 8000f6c:	e007      	b.n	8000f7e <updatePlayerMissileStatus+0x25a>
				*ptrscreen++ = 0;
 8000f6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f70:	1c5a      	adds	r2, r3, #1
 8000f72:	643a      	str	r2, [r7, #64]	; 0x40
 8000f74:	2200      	movs	r2, #0
 8000f76:	701a      	strb	r2, [r3, #0]
			for (int j = 0; j < 1; j++) {
 8000f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	63bb      	str	r3, [r7, #56]	; 0x38
 8000f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	ddf4      	ble.n	8000f6e <updatePlayerMissileStatus+0x24a>
			}
			ptrscreen += 319;
 8000f84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f86:	f203 133f 	addw	r3, r3, #319	; 0x13f
 8000f8a:	643b      	str	r3, [r7, #64]	; 0x40
		for (int i = 0; i < 4; i++) {
 8000f8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f8e:	3301      	adds	r3, #1
 8000f90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f94:	2b03      	cmp	r3, #3
 8000f96:	dde7      	ble.n	8000f68 <updatePlayerMissileStatus+0x244>
		}

		ptrscreen = (uint8_t*)(0x20020000 + inv_pos_y*320 + inv_pos_x);
 8000f98:	68fa      	ldr	r2, [r7, #12]
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	4413      	add	r3, r2
 8000fa0:	019b      	lsls	r3, r3, #6
 8000fa2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8000fa6:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	4413      	add	r3, r2
 8000fae:	643b      	str	r3, [r7, #64]	; 0x40
		for (int i = 0; i < 8; i++) {
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	637b      	str	r3, [r7, #52]	; 0x34
 8000fb4:	e030      	b.n	8001018 <updatePlayerMissileStatus+0x2f4>
			for (int j = 0; j < 12; j++) {
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	633b      	str	r3, [r7, #48]	; 0x30
 8000fba:	e023      	b.n	8001004 <updatePlayerMissileStatus+0x2e0>
 8000fbc:	20000468 	.word	0x20000468
 8000fc0:	20000494 	.word	0x20000494
 8000fc4:	2000045c 	.word	0x2000045c
 8000fc8:	200001d0 	.word	0x200001d0
 8000fcc:	200001f4 	.word	0x200001f4
 8000fd0:	200001dc 	.word	0x200001dc
 8000fd4:	200001e8 	.word	0x200001e8
 8000fd8:	20000380 	.word	0x20000380
 8000fdc:	200002c0 	.word	0x200002c0
 8000fe0:	20000320 	.word	0x20000320
 8000fe4:	20000010 	.word	0x20000010
 8000fe8:	080321c4 	.word	0x080321c4
 8000fec:	20000528 	.word	0x20000528
 8000ff0:	200001c0 	.word	0x200001c0
				*ptrscreen++ = 0;
 8000ff4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000ff6:	1c5a      	adds	r2, r3, #1
 8000ff8:	643a      	str	r2, [r7, #64]	; 0x40
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	701a      	strb	r2, [r3, #0]
			for (int j = 0; j < 12; j++) {
 8000ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001000:	3301      	adds	r3, #1
 8001002:	633b      	str	r3, [r7, #48]	; 0x30
 8001004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001006:	2b0b      	cmp	r3, #11
 8001008:	ddf4      	ble.n	8000ff4 <updatePlayerMissileStatus+0x2d0>
			}
			ptrscreen += 308;
 800100a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800100c:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8001010:	643b      	str	r3, [r7, #64]	; 0x40
		for (int i = 0; i < 8; i++) {
 8001012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001014:	3301      	adds	r3, #1
 8001016:	637b      	str	r3, [r7, #52]	; 0x34
 8001018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800101a:	2b07      	cmp	r3, #7
 800101c:	ddcb      	ble.n	8000fb6 <updatePlayerMissileStatus+0x292>
		}

		// Find an open explosion index and assign explode coordinates
		for (int explode_index = 0; explode_index < 3; ++explode_index) {
 800101e:	2300      	movs	r3, #0
 8001020:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001022:	e034      	b.n	800108e <updatePlayerMissileStatus+0x36a>
			if (inv1_explode_phase[explode_index] == 0){
 8001024:	4a1e      	ldr	r2, [pc, #120]	; (80010a0 <updatePlayerMissileStatus+0x37c>)
 8001026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001028:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d12b      	bne.n	8001088 <updatePlayerMissileStatus+0x364>
				inv1_explode_phase[explode_index] = 1;
 8001030:	4a1b      	ldr	r2, [pc, #108]	; (80010a0 <updatePlayerMissileStatus+0x37c>)
 8001032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001034:	2101      	movs	r1, #1
 8001036:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

				int explode_x_pos = inv_pos_x - 10;
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	3b0a      	subs	r3, #10
 800103e:	62bb      	str	r3, [r7, #40]	; 0x28
				int explode_y_pos = inv_pos_y - 12;
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	3b0c      	subs	r3, #12
 8001044:	627b      	str	r3, [r7, #36]	; 0x24

				// Cap explosion coordinates to the screen
				if (explode_x_pos <= 0) explode_x_pos = 0;
 8001046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001048:	2b00      	cmp	r3, #0
 800104a:	dc01      	bgt.n	8001050 <updatePlayerMissileStatus+0x32c>
 800104c:	2300      	movs	r3, #0
 800104e:	62bb      	str	r3, [r7, #40]	; 0x28
				if (explode_x_pos >= 288) explode_x_pos = 288;
 8001050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001052:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 8001056:	db02      	blt.n	800105e <updatePlayerMissileStatus+0x33a>
 8001058:	f44f 7390 	mov.w	r3, #288	; 0x120
 800105c:	62bb      	str	r3, [r7, #40]	; 0x28
				if (explode_y_pos >= 167) explode_y_pos = 167;
 800105e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001060:	2ba6      	cmp	r3, #166	; 0xa6
 8001062:	dd01      	ble.n	8001068 <updatePlayerMissileStatus+0x344>
 8001064:	23a7      	movs	r3, #167	; 0xa7
 8001066:	627b      	str	r3, [r7, #36]	; 0x24
				if (explode_y_pos <= 0) explode_y_pos = 0;
 8001068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800106a:	2b00      	cmp	r3, #0
 800106c:	dc01      	bgt.n	8001072 <updatePlayerMissileStatus+0x34e>
 800106e:	2300      	movs	r3, #0
 8001070:	627b      	str	r3, [r7, #36]	; 0x24

				inv1_x_pos_to_explode[explode_index] = explode_x_pos;
 8001072:	490c      	ldr	r1, [pc, #48]	; (80010a4 <updatePlayerMissileStatus+0x380>)
 8001074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001076:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001078:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				inv1_y_pos_to_explode[explode_index] = explode_y_pos;
 800107c:	490a      	ldr	r1, [pc, #40]	; (80010a8 <updatePlayerMissileStatus+0x384>)
 800107e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001080:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001082:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				break;
 8001086:	e005      	b.n	8001094 <updatePlayerMissileStatus+0x370>
		for (int explode_index = 0; explode_index < 3; ++explode_index) {
 8001088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800108a:	3301      	adds	r3, #1
 800108c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800108e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001090:	2b02      	cmp	r3, #2
 8001092:	ddc7      	ble.n	8001024 <updatePlayerMissileStatus+0x300>
		}

	}


	return;
 8001094:	bf00      	nop
 8001096:	bf00      	nop
}
 8001098:	3768      	adds	r7, #104	; 0x68
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	20000420 	.word	0x20000420
 80010a4:	20000408 	.word	0x20000408
 80010a8:	20000414 	.word	0x20000414

080010ac <updateEnemyMissileStatus>:


void updateEnemyMissileStatus(int missile_index)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b088      	sub	sp, #32
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]

	int pos_x = invader1_missile_xpos[missile_index];
 80010b4:	4a56      	ldr	r2, [pc, #344]	; (8001210 <updateEnemyMissileStatus+0x164>)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010bc:	60fb      	str	r3, [r7, #12]
	int pos_y = invader1_missile_ypos[missile_index];
 80010be:	4a55      	ldr	r2, [pc, #340]	; (8001214 <updateEnemyMissileStatus+0x168>)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010c6:	60bb      	str	r3, [r7, #8]

	if (pos_y >= 200) { // out of bounds and erase
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	2bc7      	cmp	r3, #199	; 0xc7
 80010cc:	dd32      	ble.n	8001134 <updateEnemyMissileStatus+0x88>
		invader1_missile_status[missile_index] = 0;
 80010ce:	4a52      	ldr	r2, [pc, #328]	; (8001218 <updateEnemyMissileStatus+0x16c>)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2100      	movs	r1, #0
 80010d4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		uint8_t* ptrscreen = (uint8_t*)(0x20020000 + invader1_missile_prev_ypos[missile_index]*320 + invader1_missile_prev_xpos[missile_index]);
 80010d8:	4a50      	ldr	r2, [pc, #320]	; (800121c <updateEnemyMissileStatus+0x170>)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80010e0:	4613      	mov	r3, r2
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	4413      	add	r3, r2
 80010e6:	019b      	lsls	r3, r3, #6
 80010e8:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80010ec:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80010f0:	494b      	ldr	r1, [pc, #300]	; (8001220 <updateEnemyMissileStatus+0x174>)
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80010f8:	4413      	add	r3, r2
 80010fa:	61fb      	str	r3, [r7, #28]
		for (int i = 0; i < 4; ++i) {
 80010fc:	2300      	movs	r3, #0
 80010fe:	61bb      	str	r3, [r7, #24]
 8001100:	e014      	b.n	800112c <updateEnemyMissileStatus+0x80>
			for (int j = 0; j < 1; ++j) {
 8001102:	2300      	movs	r3, #0
 8001104:	617b      	str	r3, [r7, #20]
 8001106:	e007      	b.n	8001118 <updateEnemyMissileStatus+0x6c>
				*ptrscreen++ = 0;
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	1c5a      	adds	r2, r3, #1
 800110c:	61fa      	str	r2, [r7, #28]
 800110e:	2200      	movs	r2, #0
 8001110:	701a      	strb	r2, [r3, #0]
			for (int j = 0; j < 1; ++j) {
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	3301      	adds	r3, #1
 8001116:	617b      	str	r3, [r7, #20]
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	2b00      	cmp	r3, #0
 800111c:	ddf4      	ble.n	8001108 <updateEnemyMissileStatus+0x5c>
			}
			ptrscreen += 319;
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	f203 133f 	addw	r3, r3, #319	; 0x13f
 8001124:	61fb      	str	r3, [r7, #28]
		for (int i = 0; i < 4; ++i) {
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	3301      	adds	r3, #1
 800112a:	61bb      	str	r3, [r7, #24]
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	2b03      	cmp	r3, #3
 8001130:	dde7      	ble.n	8001102 <updateEnemyMissileStatus+0x56>
		}
		return;
 8001132:	e06a      	b.n	800120a <updateEnemyMissileStatus+0x15e>
	}

	/// Enemy Missile and Barrier Collision
	for (int barrier_index = 0; barrier_index < 3; ++barrier_index) {
 8001134:	2300      	movs	r3, #0
 8001136:	613b      	str	r3, [r7, #16]
 8001138:	e036      	b.n	80011a8 <updateEnemyMissileStatus+0xfc>
		if (barrier_health[barrier_index] > 0) {
 800113a:	4a3a      	ldr	r2, [pc, #232]	; (8001224 <updateEnemyMissileStatus+0x178>)
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001142:	2b00      	cmp	r3, #0
 8001144:	dd2d      	ble.n	80011a2 <updateEnemyMissileStatus+0xf6>
			if ( (barrier_x_pos[barrier_index] + 22 >= pos_x) && (barrier_x_pos[barrier_index] <= pos_x + 2) && (barrier_y_pos[barrier_index] + 3 >= pos_y) && (barrier_y_pos[barrier_index] <= pos_y) ) {
 8001146:	4a38      	ldr	r2, [pc, #224]	; (8001228 <updateEnemyMissileStatus+0x17c>)
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800114e:	3316      	adds	r3, #22
 8001150:	68fa      	ldr	r2, [r7, #12]
 8001152:	429a      	cmp	r2, r3
 8001154:	dc25      	bgt.n	80011a2 <updateEnemyMissileStatus+0xf6>
 8001156:	4a34      	ldr	r2, [pc, #208]	; (8001228 <updateEnemyMissileStatus+0x17c>)
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	3302      	adds	r3, #2
 8001162:	429a      	cmp	r2, r3
 8001164:	dc1d      	bgt.n	80011a2 <updateEnemyMissileStatus+0xf6>
 8001166:	4a31      	ldr	r2, [pc, #196]	; (800122c <updateEnemyMissileStatus+0x180>)
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800116e:	3303      	adds	r3, #3
 8001170:	68ba      	ldr	r2, [r7, #8]
 8001172:	429a      	cmp	r2, r3
 8001174:	dc15      	bgt.n	80011a2 <updateEnemyMissileStatus+0xf6>
 8001176:	4a2d      	ldr	r2, [pc, #180]	; (800122c <updateEnemyMissileStatus+0x180>)
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800117e:	68ba      	ldr	r2, [r7, #8]
 8001180:	429a      	cmp	r2, r3
 8001182:	db0e      	blt.n	80011a2 <updateEnemyMissileStatus+0xf6>
				--barrier_health[barrier_index];
 8001184:	4a27      	ldr	r2, [pc, #156]	; (8001224 <updateEnemyMissileStatus+0x178>)
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800118c:	1e5a      	subs	r2, r3, #1
 800118e:	4925      	ldr	r1, [pc, #148]	; (8001224 <updateEnemyMissileStatus+0x178>)
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				invader1_missile_status[missile_index] = 0;
 8001196:	4a20      	ldr	r2, [pc, #128]	; (8001218 <updateEnemyMissileStatus+0x16c>)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2100      	movs	r1, #0
 800119c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				return;
 80011a0:	e033      	b.n	800120a <updateEnemyMissileStatus+0x15e>
	for (int barrier_index = 0; barrier_index < 3; ++barrier_index) {
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	3301      	adds	r3, #1
 80011a6:	613b      	str	r3, [r7, #16]
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	2b02      	cmp	r3, #2
 80011ac:	ddc5      	ble.n	800113a <updateEnemyMissileStatus+0x8e>
			}
		}
	}

	/// Check if missile hit player ship
	if ((ship_x + 12 >= pos_x) && (ship_x <= pos_x + 1) && (ship_y + 8 >= pos_y) && (ship_y <= pos_y + 1)) { // Player Ship Hit
 80011ae:	4b20      	ldr	r3, [pc, #128]	; (8001230 <updateEnemyMissileStatus+0x184>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	330c      	adds	r3, #12
 80011b4:	68fa      	ldr	r2, [r7, #12]
 80011b6:	429a      	cmp	r2, r3
 80011b8:	dc24      	bgt.n	8001204 <updateEnemyMissileStatus+0x158>
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	1c5a      	adds	r2, r3, #1
 80011be:	4b1c      	ldr	r3, [pc, #112]	; (8001230 <updateEnemyMissileStatus+0x184>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	429a      	cmp	r2, r3
 80011c4:	db1e      	blt.n	8001204 <updateEnemyMissileStatus+0x158>
 80011c6:	4b1b      	ldr	r3, [pc, #108]	; (8001234 <updateEnemyMissileStatus+0x188>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	3308      	adds	r3, #8
 80011cc:	68ba      	ldr	r2, [r7, #8]
 80011ce:	429a      	cmp	r2, r3
 80011d0:	dc18      	bgt.n	8001204 <updateEnemyMissileStatus+0x158>
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	1c5a      	adds	r2, r3, #1
 80011d6:	4b17      	ldr	r3, [pc, #92]	; (8001234 <updateEnemyMissileStatus+0x188>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	429a      	cmp	r2, r3
 80011dc:	db12      	blt.n	8001204 <updateEnemyMissileStatus+0x158>
		--ship_health;
 80011de:	4b16      	ldr	r3, [pc, #88]	; (8001238 <updateEnemyMissileStatus+0x18c>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	3b01      	subs	r3, #1
 80011e4:	4a14      	ldr	r2, [pc, #80]	; (8001238 <updateEnemyMissileStatus+0x18c>)
 80011e6:	6013      	str	r3, [r2, #0]
		if (ship_health <= 0) {
 80011e8:	4b13      	ldr	r3, [pc, #76]	; (8001238 <updateEnemyMissileStatus+0x18c>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	dc0b      	bgt.n	8001208 <updateEnemyMissileStatus+0x15c>
			gameStatus = LOSE;
 80011f0:	4b12      	ldr	r3, [pc, #72]	; (800123c <updateEnemyMissileStatus+0x190>)
 80011f2:	2204      	movs	r2, #4
 80011f4:	701a      	strb	r2, [r3, #0]
			HAL_I2S_Transmit_DMA(&hi2s3, (uint16_t*) boop_2, AUDIOLEN_BOOP_2);
 80011f6:	f243 32a6 	movw	r2, #13222	; 0x33a6
 80011fa:	4911      	ldr	r1, [pc, #68]	; (8001240 <updateEnemyMissileStatus+0x194>)
 80011fc:	4811      	ldr	r0, [pc, #68]	; (8001244 <updateEnemyMissileStatus+0x198>)
 80011fe:	f002 f823 	bl	8003248 <HAL_I2S_Transmit_DMA>
		}
		return;
 8001202:	e001      	b.n	8001208 <updateEnemyMissileStatus+0x15c>
	}


	return;
 8001204:	bf00      	nop
 8001206:	e000      	b.n	800120a <updateEnemyMissileStatus+0x15e>
		return;
 8001208:	bf00      	nop
}
 800120a:	3720      	adds	r7, #32
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	20000510 	.word	0x20000510
 8001214:	2000047c 	.word	0x2000047c
 8001218:	200003e4 	.word	0x200003e4
 800121c:	20000444 	.word	0x20000444
 8001220:	2000042c 	.word	0x2000042c
 8001224:	200001f4 	.word	0x200001f4
 8001228:	200001dc 	.word	0x200001dc
 800122c:	200001e8 	.word	0x200001e8
 8001230:	20000474 	.word	0x20000474
 8001234:	200001c8 	.word	0x200001c8
 8001238:	20000000 	.word	0x20000000
 800123c:	20000500 	.word	0x20000500
 8001240:	0800d4ac 	.word	0x0800d4ac
 8001244:	20000528 	.word	0x20000528

08001248 <explodeInvader1>:

void explodeInvader1()
{
 8001248:	b480      	push	{r7}
 800124a:	b089      	sub	sp, #36	; 0x24
 800124c:	af00      	add	r7, sp, #0
	for (int explode_index = 0; explode_index < 3; ++explode_index) {
 800124e:	2300      	movs	r3, #0
 8001250:	61fb      	str	r3, [r7, #28]
 8001252:	e0a0      	b.n	8001396 <explodeInvader1+0x14e>


			uint8_t* screenptr = (uint8_t*) (0x20020000 + inv1_y_pos_to_explode[explode_index]*320 + inv1_x_pos_to_explode[explode_index]);
 8001254:	4a55      	ldr	r2, [pc, #340]	; (80013ac <explodeInvader1+0x164>)
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800125c:	4613      	mov	r3, r2
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	4413      	add	r3, r2
 8001262:	019b      	lsls	r3, r3, #6
 8001264:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8001268:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800126c:	4950      	ldr	r1, [pc, #320]	; (80013b0 <explodeInvader1+0x168>)
 800126e:	69fa      	ldr	r2, [r7, #28]
 8001270:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001274:	4413      	add	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
			uint8_t* explode_sprite = 0;
 8001278:	2300      	movs	r3, #0
 800127a:	617b      	str	r3, [r7, #20]

			// Erase explosion if sequence was complete and set explode_phase to 0
			if (inv1_explode_phase[explode_index] == 8) {
 800127c:	4a4d      	ldr	r2, [pc, #308]	; (80013b4 <explodeInvader1+0x16c>)
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001284:	2b08      	cmp	r3, #8
 8001286:	d129      	bne.n	80012dc <explodeInvader1+0x94>

				for (int i = 0; i < 32; ++i) {
 8001288:	2300      	movs	r3, #0
 800128a:	613b      	str	r3, [r7, #16]
 800128c:	e014      	b.n	80012b8 <explodeInvader1+0x70>
					for (int j = 0; j < 32; ++j) {
 800128e:	2300      	movs	r3, #0
 8001290:	60fb      	str	r3, [r7, #12]
 8001292:	e007      	b.n	80012a4 <explodeInvader1+0x5c>
						*screenptr++ = 0;
 8001294:	69bb      	ldr	r3, [r7, #24]
 8001296:	1c5a      	adds	r2, r3, #1
 8001298:	61ba      	str	r2, [r7, #24]
 800129a:	2200      	movs	r2, #0
 800129c:	701a      	strb	r2, [r3, #0]
					for (int j = 0; j < 32; ++j) {
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	3301      	adds	r3, #1
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	2b1f      	cmp	r3, #31
 80012a8:	ddf4      	ble.n	8001294 <explodeInvader1+0x4c>
					}
					screenptr += 288;
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80012b0:	61bb      	str	r3, [r7, #24]
				for (int i = 0; i < 32; ++i) {
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	3301      	adds	r3, #1
 80012b6:	613b      	str	r3, [r7, #16]
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	2b1f      	cmp	r3, #31
 80012bc:	dde7      	ble.n	800128e <explodeInvader1+0x46>
				}
				inv1_explode_phase[explode_index] = 0;
 80012be:	4a3d      	ldr	r2, [pc, #244]	; (80013b4 <explodeInvader1+0x16c>)
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	2100      	movs	r1, #0
 80012c4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				inv1_x_pos_to_explode[explode_index] = 0;
 80012c8:	4a39      	ldr	r2, [pc, #228]	; (80013b0 <explodeInvader1+0x168>)
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	2100      	movs	r1, #0
 80012ce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				inv1_y_pos_to_explode[explode_index] = 0;
 80012d2:	4a36      	ldr	r2, [pc, #216]	; (80013ac <explodeInvader1+0x164>)
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	2100      	movs	r1, #0
 80012d8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			}

			// Find the right explode sprite
			switch (inv1_explode_phase[explode_index]) {
 80012dc:	4a35      	ldr	r2, [pc, #212]	; (80013b4 <explodeInvader1+0x16c>)
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012e4:	3b01      	subs	r3, #1
 80012e6:	2b06      	cmp	r3, #6
 80012e8:	d825      	bhi.n	8001336 <explodeInvader1+0xee>
 80012ea:	a201      	add	r2, pc, #4	; (adr r2, 80012f0 <explodeInvader1+0xa8>)
 80012ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012f0:	0800130d 	.word	0x0800130d
 80012f4:	08001313 	.word	0x08001313
 80012f8:	08001319 	.word	0x08001319
 80012fc:	0800131f 	.word	0x0800131f
 8001300:	08001325 	.word	0x08001325
 8001304:	0800132b 	.word	0x0800132b
 8001308:	08001331 	.word	0x08001331
				case 1:
					explode_sprite = (uint8_t*) explode1;
 800130c:	4b2a      	ldr	r3, [pc, #168]	; (80013b8 <explodeInvader1+0x170>)
 800130e:	617b      	str	r3, [r7, #20]
					break;
 8001310:	e011      	b.n	8001336 <explodeInvader1+0xee>
				case 2:
					explode_sprite = (uint8_t*) explode2;
 8001312:	4b2a      	ldr	r3, [pc, #168]	; (80013bc <explodeInvader1+0x174>)
 8001314:	617b      	str	r3, [r7, #20]
					break;
 8001316:	e00e      	b.n	8001336 <explodeInvader1+0xee>
				case 3:
					explode_sprite = (uint8_t*) explode3;
 8001318:	4b29      	ldr	r3, [pc, #164]	; (80013c0 <explodeInvader1+0x178>)
 800131a:	617b      	str	r3, [r7, #20]
					break;
 800131c:	e00b      	b.n	8001336 <explodeInvader1+0xee>
				case 4:
					explode_sprite = (uint8_t*) explode4;
 800131e:	4b29      	ldr	r3, [pc, #164]	; (80013c4 <explodeInvader1+0x17c>)
 8001320:	617b      	str	r3, [r7, #20]
					break;
 8001322:	e008      	b.n	8001336 <explodeInvader1+0xee>
				case 5:
					explode_sprite = (uint8_t*) explode5;
 8001324:	4b28      	ldr	r3, [pc, #160]	; (80013c8 <explodeInvader1+0x180>)
 8001326:	617b      	str	r3, [r7, #20]
					break;
 8001328:	e005      	b.n	8001336 <explodeInvader1+0xee>
				case 6:
					explode_sprite = (uint8_t*) explode6;
 800132a:	4b28      	ldr	r3, [pc, #160]	; (80013cc <explodeInvader1+0x184>)
 800132c:	617b      	str	r3, [r7, #20]
					break;
 800132e:	e002      	b.n	8001336 <explodeInvader1+0xee>
				case 7:
					explode_sprite = (uint8_t*) explode7;
 8001330:	4b27      	ldr	r3, [pc, #156]	; (80013d0 <explodeInvader1+0x188>)
 8001332:	617b      	str	r3, [r7, #20]
					break;
 8001334:	bf00      	nop
			}
			if (inv1_explode_phase[explode_index] != 0) {
 8001336:	4a1f      	ldr	r2, [pc, #124]	; (80013b4 <explodeInvader1+0x16c>)
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d026      	beq.n	8001390 <explodeInvader1+0x148>
				for (int i = 0; i < 32; ++i) {
 8001342:	2300      	movs	r3, #0
 8001344:	60bb      	str	r3, [r7, #8]
 8001346:	e017      	b.n	8001378 <explodeInvader1+0x130>
					for (int j = 0; j < 32; ++j) {
 8001348:	2300      	movs	r3, #0
 800134a:	607b      	str	r3, [r7, #4]
 800134c:	e00a      	b.n	8001364 <explodeInvader1+0x11c>
						*screenptr++ = *explode_sprite++;
 800134e:	697a      	ldr	r2, [r7, #20]
 8001350:	1c53      	adds	r3, r2, #1
 8001352:	617b      	str	r3, [r7, #20]
 8001354:	69bb      	ldr	r3, [r7, #24]
 8001356:	1c59      	adds	r1, r3, #1
 8001358:	61b9      	str	r1, [r7, #24]
 800135a:	7812      	ldrb	r2, [r2, #0]
 800135c:	701a      	strb	r2, [r3, #0]
					for (int j = 0; j < 32; ++j) {
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	3301      	adds	r3, #1
 8001362:	607b      	str	r3, [r7, #4]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2b1f      	cmp	r3, #31
 8001368:	ddf1      	ble.n	800134e <explodeInvader1+0x106>
					}
					screenptr += 288;
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8001370:	61bb      	str	r3, [r7, #24]
				for (int i = 0; i < 32; ++i) {
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	3301      	adds	r3, #1
 8001376:	60bb      	str	r3, [r7, #8]
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	2b1f      	cmp	r3, #31
 800137c:	dde4      	ble.n	8001348 <explodeInvader1+0x100>
				}
				inv1_explode_phase[explode_index]++;
 800137e:	4a0d      	ldr	r2, [pc, #52]	; (80013b4 <explodeInvader1+0x16c>)
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001386:	1c5a      	adds	r2, r3, #1
 8001388:	490a      	ldr	r1, [pc, #40]	; (80013b4 <explodeInvader1+0x16c>)
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int explode_index = 0; explode_index < 3; ++explode_index) {
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	3301      	adds	r3, #1
 8001394:	61fb      	str	r3, [r7, #28]
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	2b02      	cmp	r3, #2
 800139a:	f77f af5b 	ble.w	8001254 <explodeInvader1+0xc>
			}

	}
	return;
 800139e:	bf00      	nop
}
 80013a0:	3724      	adds	r7, #36	; 0x24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	20000414 	.word	0x20000414
 80013b0:	20000408 	.word	0x20000408
 80013b4:	20000420 	.word	0x20000420
 80013b8:	08006338 	.word	0x08006338
 80013bc:	08006738 	.word	0x08006738
 80013c0:	08006b38 	.word	0x08006b38
 80013c4:	08006f38 	.word	0x08006f38
 80013c8:	08007338 	.word	0x08007338
 80013cc:	08007738 	.word	0x08007738
 80013d0:	08007b38 	.word	0x08007b38

080013d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b098      	sub	sp, #96	; 0x60
 80013d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013da:	f000 ff45 	bl	8002268 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013de:	f000 fc67 	bl	8001cb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013e2:	f000 fd3b 	bl	8001e5c <MX_GPIO_Init>
  MX_DMA_Init();
 80013e6:	f000 fd19 	bl	8001e1c <MX_DMA_Init>
  MX_I2S3_Init();
 80013ea:	f000 fce9 	bl	8001dc0 <MX_I2S3_Init>
  /* USER CODE BEGIN 2 */

  ship_x = 154;
 80013ee:	4b92      	ldr	r3, [pc, #584]	; (8001638 <main+0x264>)
 80013f0:	229a      	movs	r2, #154	; 0x9a
 80013f2:	601a      	str	r2, [r3, #0]
  ship_y = 192;
 80013f4:	4b91      	ldr	r3, [pc, #580]	; (800163c <main+0x268>)
 80013f6:	22c0      	movs	r2, #192	; 0xc0
 80013f8:	601a      	str	r2, [r3, #0]
  ship_px = ship_x;
 80013fa:	4b8f      	ldr	r3, [pc, #572]	; (8001638 <main+0x264>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a90      	ldr	r2, [pc, #576]	; (8001640 <main+0x26c>)
 8001400:	6013      	str	r3, [r2, #0]
  ship_py = ship_y;
 8001402:	4b8e      	ldr	r3, [pc, #568]	; (800163c <main+0x268>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a8f      	ldr	r2, [pc, #572]	; (8001644 <main+0x270>)
 8001408:	6013      	str	r3, [r2, #0]

  // Initialize Invader 1 position and status
  for (int r = 0; r < 4; r++) {
 800140a:	2300      	movs	r3, #0
 800140c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800140e:	e060      	b.n	80014d2 <main+0xfe>
	  for (int c = 0; c < 6; c++) {
 8001410:	2300      	movs	r3, #0
 8001412:	65bb      	str	r3, [r7, #88]	; 0x58
 8001414:	e057      	b.n	80014c6 <main+0xf2>
		  invader1_status[r][c] = 1;
 8001416:	498c      	ldr	r1, [pc, #560]	; (8001648 <main+0x274>)
 8001418:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800141a:	4613      	mov	r3, r2
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	4413      	add	r3, r2
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001424:	4413      	add	r3, r2
 8001426:	2201      	movs	r2, #1
 8001428:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		  invader1_xpos[r][c] = 80 + c*30;
 800142c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800142e:	4613      	mov	r3, r2
 8001430:	011b      	lsls	r3, r3, #4
 8001432:	1a9b      	subs	r3, r3, r2
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	f103 0150 	add.w	r1, r3, #80	; 0x50
 800143a:	4884      	ldr	r0, [pc, #528]	; (800164c <main+0x278>)
 800143c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800143e:	4613      	mov	r3, r2
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	4413      	add	r3, r2
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001448:	4413      	add	r3, r2
 800144a:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
		  invader1_ypos[r][c] = 50 + r*20;
 800144e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001450:	4613      	mov	r3, r2
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	4413      	add	r3, r2
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	f103 0132 	add.w	r1, r3, #50	; 0x32
 800145c:	487c      	ldr	r0, [pc, #496]	; (8001650 <main+0x27c>)
 800145e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001460:	4613      	mov	r3, r2
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	4413      	add	r3, r2
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800146a:	4413      	add	r3, r2
 800146c:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
		  invader1_prev_xpos[r][c] = invader1_xpos[r][c];
 8001470:	4976      	ldr	r1, [pc, #472]	; (800164c <main+0x278>)
 8001472:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001474:	4613      	mov	r3, r2
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	4413      	add	r3, r2
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800147e:	4413      	add	r3, r2
 8001480:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8001484:	4873      	ldr	r0, [pc, #460]	; (8001654 <main+0x280>)
 8001486:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001488:	4613      	mov	r3, r2
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	4413      	add	r3, r2
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001492:	4413      	add	r3, r2
 8001494:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
		  invader1_prev_ypos[r][c] = invader1_ypos[r][c];
 8001498:	496d      	ldr	r1, [pc, #436]	; (8001650 <main+0x27c>)
 800149a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800149c:	4613      	mov	r3, r2
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	4413      	add	r3, r2
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80014a6:	4413      	add	r3, r2
 80014a8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80014ac:	486a      	ldr	r0, [pc, #424]	; (8001658 <main+0x284>)
 80014ae:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80014b0:	4613      	mov	r3, r2
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	4413      	add	r3, r2
 80014b6:	005b      	lsls	r3, r3, #1
 80014b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80014ba:	4413      	add	r3, r2
 80014bc:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
	  for (int c = 0; c < 6; c++) {
 80014c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80014c2:	3301      	adds	r3, #1
 80014c4:	65bb      	str	r3, [r7, #88]	; 0x58
 80014c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80014c8:	2b05      	cmp	r3, #5
 80014ca:	dda4      	ble.n	8001416 <main+0x42>
  for (int r = 0; r < 4; r++) {
 80014cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014ce:	3301      	adds	r3, #1
 80014d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80014d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014d4:	2b03      	cmp	r3, #3
 80014d6:	dd9b      	ble.n	8001410 <main+0x3c>
	  }
  }

  gameStatus = INTRO_SCREEN;
 80014d8:	4b60      	ldr	r3, [pc, #384]	; (800165c <main+0x288>)
 80014da:	2200      	movs	r2, #0
 80014dc:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /// Display Intro Screen
	  if (gameStatus == INTRO_SCREEN) {
 80014de:	4b5f      	ldr	r3, [pc, #380]	; (800165c <main+0x288>)
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d101      	bne.n	80014ea <main+0x116>
		  displayIntroScreen();
 80014e6:	f7fe fff7 	bl	80004d8 <displayIntroScreen>
	  }

	  /// Lost Game
	  if (gameStatus == LOSE) {
 80014ea:	4b5c      	ldr	r3, [pc, #368]	; (800165c <main+0x288>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	2b04      	cmp	r3, #4
 80014f0:	d111      	bne.n	8001516 <main+0x142>
		  if (playerScore >= highScore) {
 80014f2:	4b5b      	ldr	r3, [pc, #364]	; (8001660 <main+0x28c>)
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	4b5b      	ldr	r3, [pc, #364]	; (8001664 <main+0x290>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	429a      	cmp	r2, r3
 80014fc:	db03      	blt.n	8001506 <main+0x132>
			  highScore = playerScore;
 80014fe:	4b58      	ldr	r3, [pc, #352]	; (8001660 <main+0x28c>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a58      	ldr	r2, [pc, #352]	; (8001664 <main+0x290>)
 8001504:	6013      	str	r3, [r2, #0]
		  }
		  playerScore = 0;
 8001506:	4b56      	ldr	r3, [pc, #344]	; (8001660 <main+0x28c>)
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]

		  displayGameOver();
 800150c:	f7ff f848 	bl	80005a0 <displayGameOver>
		  gameStatus = RESET_LEVEL1;
 8001510:	4b52      	ldr	r3, [pc, #328]	; (800165c <main+0x288>)
 8001512:	2201      	movs	r2, #1
 8001514:	701a      	strb	r2, [r3, #0]
	  }

	  /// Reset Game
	  if (gameStatus == RESET_LEVEL1) {
 8001516:	4b51      	ldr	r3, [pc, #324]	; (800165c <main+0x288>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	2b01      	cmp	r3, #1
 800151c:	f040 80cc 	bne.w	80016b8 <main+0x2e4>

		  total_inv1_left = 4*6;
 8001520:	4b51      	ldr	r3, [pc, #324]	; (8001668 <main+0x294>)
 8001522:	2218      	movs	r2, #24
 8001524:	601a      	str	r2, [r3, #0]

		  // Initialize Invader 1 position and status
		  all_invader1_alive = 1;
 8001526:	4b51      	ldr	r3, [pc, #324]	; (800166c <main+0x298>)
 8001528:	2201      	movs	r2, #1
 800152a:	601a      	str	r2, [r3, #0]
		  for (int r = 0; r < 4; r++) {
 800152c:	2300      	movs	r3, #0
 800152e:	657b      	str	r3, [r7, #84]	; 0x54
 8001530:	e060      	b.n	80015f4 <main+0x220>
			  for (int c = 0; c < 6; c++) {
 8001532:	2300      	movs	r3, #0
 8001534:	653b      	str	r3, [r7, #80]	; 0x50
 8001536:	e057      	b.n	80015e8 <main+0x214>
				  invader1_status[r][c] = 1;
 8001538:	4943      	ldr	r1, [pc, #268]	; (8001648 <main+0x274>)
 800153a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800153c:	4613      	mov	r3, r2
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	4413      	add	r3, r2
 8001542:	005b      	lsls	r3, r3, #1
 8001544:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001546:	4413      	add	r3, r2
 8001548:	2201      	movs	r2, #1
 800154a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				  invader1_xpos[r][c] = 80 + c*30;
 800154e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001550:	4613      	mov	r3, r2
 8001552:	011b      	lsls	r3, r3, #4
 8001554:	1a9b      	subs	r3, r3, r2
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	f103 0150 	add.w	r1, r3, #80	; 0x50
 800155c:	483b      	ldr	r0, [pc, #236]	; (800164c <main+0x278>)
 800155e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001560:	4613      	mov	r3, r2
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	4413      	add	r3, r2
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800156a:	4413      	add	r3, r2
 800156c:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
				  invader1_ypos[r][c] = 50 + r*20;
 8001570:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001572:	4613      	mov	r3, r2
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	4413      	add	r3, r2
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	f103 0132 	add.w	r1, r3, #50	; 0x32
 800157e:	4834      	ldr	r0, [pc, #208]	; (8001650 <main+0x27c>)
 8001580:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001582:	4613      	mov	r3, r2
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	4413      	add	r3, r2
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800158c:	4413      	add	r3, r2
 800158e:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
				  invader1_prev_xpos[r][c] = invader1_xpos[r][c];
 8001592:	492e      	ldr	r1, [pc, #184]	; (800164c <main+0x278>)
 8001594:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001596:	4613      	mov	r3, r2
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	4413      	add	r3, r2
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80015a0:	4413      	add	r3, r2
 80015a2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80015a6:	482b      	ldr	r0, [pc, #172]	; (8001654 <main+0x280>)
 80015a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80015aa:	4613      	mov	r3, r2
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	4413      	add	r3, r2
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80015b4:	4413      	add	r3, r2
 80015b6:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
				  invader1_prev_ypos[r][c] = invader1_ypos[r][c];
 80015ba:	4925      	ldr	r1, [pc, #148]	; (8001650 <main+0x27c>)
 80015bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80015be:	4613      	mov	r3, r2
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	4413      	add	r3, r2
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80015c8:	4413      	add	r3, r2
 80015ca:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80015ce:	4822      	ldr	r0, [pc, #136]	; (8001658 <main+0x284>)
 80015d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80015d2:	4613      	mov	r3, r2
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	4413      	add	r3, r2
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80015dc:	4413      	add	r3, r2
 80015de:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
			  for (int c = 0; c < 6; c++) {
 80015e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80015e4:	3301      	adds	r3, #1
 80015e6:	653b      	str	r3, [r7, #80]	; 0x50
 80015e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80015ea:	2b05      	cmp	r3, #5
 80015ec:	dda4      	ble.n	8001538 <main+0x164>
		  for (int r = 0; r < 4; r++) {
 80015ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015f0:	3301      	adds	r3, #1
 80015f2:	657b      	str	r3, [r7, #84]	; 0x54
 80015f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015f6:	2b03      	cmp	r3, #3
 80015f8:	dd9b      	ble.n	8001532 <main+0x15e>
			  }
		  }

		  // Reset Player Missiles
		  for (int missile_index = 0; missile_index < 3; ++missile_index) {
 80015fa:	2300      	movs	r3, #0
 80015fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80015fe:	e007      	b.n	8001610 <main+0x23c>
			player_missile_status[missile_index] = 0;
 8001600:	4a1b      	ldr	r2, [pc, #108]	; (8001670 <main+0x29c>)
 8001602:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001604:	2100      	movs	r1, #0
 8001606:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  for (int missile_index = 0; missile_index < 3; ++missile_index) {
 800160a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800160c:	3301      	adds	r3, #1
 800160e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001610:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001612:	2b02      	cmp	r3, #2
 8001614:	ddf4      	ble.n	8001600 <main+0x22c>
		  }
		  // Reset Invader 1 Missiles
		  for (int missile_index = 0; missile_index < 6; ++missile_index) {
 8001616:	2300      	movs	r3, #0
 8001618:	64bb      	str	r3, [r7, #72]	; 0x48
 800161a:	e007      	b.n	800162c <main+0x258>
			invader1_missile_status[missile_index] = 0;
 800161c:	4a15      	ldr	r2, [pc, #84]	; (8001674 <main+0x2a0>)
 800161e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001620:	2100      	movs	r1, #0
 8001622:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  for (int missile_index = 0; missile_index < 6; ++missile_index) {
 8001626:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001628:	3301      	adds	r3, #1
 800162a:	64bb      	str	r3, [r7, #72]	; 0x48
 800162c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800162e:	2b05      	cmp	r3, #5
 8001630:	ddf4      	ble.n	800161c <main+0x248>
		  }

		  // Reset and initialize barriers
		  for (int barrier_index = 0; barrier_index < 3; ++barrier_index) {
 8001632:	2300      	movs	r3, #0
 8001634:	647b      	str	r3, [r7, #68]	; 0x44
 8001636:	e037      	b.n	80016a8 <main+0x2d4>
 8001638:	20000474 	.word	0x20000474
 800163c:	200001c8 	.word	0x200001c8
 8001640:	20000478 	.word	0x20000478
 8001644:	200001cc 	.word	0x200001cc
 8001648:	20000380 	.word	0x20000380
 800164c:	20000200 	.word	0x20000200
 8001650:	20000260 	.word	0x20000260
 8001654:	200002c0 	.word	0x200002c0
 8001658:	20000320 	.word	0x20000320
 800165c:	20000500 	.word	0x20000500
 8001660:	200001c0 	.word	0x200001c0
 8001664:	200001bc 	.word	0x200001bc
 8001668:	20000010 	.word	0x20000010
 800166c:	2000000c 	.word	0x2000000c
 8001670:	200001d0 	.word	0x200001d0
 8001674:	200003e4 	.word	0x200003e4
			barrier_health[barrier_index] = 4;
 8001678:	4aa6      	ldr	r2, [pc, #664]	; (8001914 <main+0x540>)
 800167a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800167c:	2104      	movs	r1, #4
 800167e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			barrier_x_pos[barrier_index] = 60 + barrier_index*80;
 8001682:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001684:	4613      	mov	r3, r2
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	4413      	add	r3, r2
 800168a:	011b      	lsls	r3, r3, #4
 800168c:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8001690:	49a1      	ldr	r1, [pc, #644]	; (8001918 <main+0x544>)
 8001692:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001694:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			barrier_y_pos[barrier_index] = 160;
 8001698:	4aa0      	ldr	r2, [pc, #640]	; (800191c <main+0x548>)
 800169a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800169c:	21a0      	movs	r1, #160	; 0xa0
 800169e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  for (int barrier_index = 0; barrier_index < 3; ++barrier_index) {
 80016a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80016a4:	3301      	adds	r3, #1
 80016a6:	647b      	str	r3, [r7, #68]	; 0x44
 80016a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	dde4      	ble.n	8001678 <main+0x2a4>
		  }

		  gameStatus = LEVEL_1;
 80016ae:	4b9c      	ldr	r3, [pc, #624]	; (8001920 <main+0x54c>)
 80016b0:	2202      	movs	r2, #2
 80016b2:	701a      	strb	r2, [r3, #0]
		  clearscreen();
 80016b4:	f7fe ffda 	bl	800066c <clearscreen>
	  }

	  /// Level 1
	  if (gameStatus == LEVEL_1) {
 80016b8:	4b99      	ldr	r3, [pc, #612]	; (8001920 <main+0x54c>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	2b02      	cmp	r3, #2
 80016be:	f47f af0e 	bne.w	80014de <main+0x10a>
		if (continue_input != 0) continue_input = 0; // In case continue input was accidentally set.
 80016c2:	4b98      	ldr	r3, [pc, #608]	; (8001924 <main+0x550>)
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d002      	beq.n	80016d2 <main+0x2fe>
 80016cc:	4b95      	ldr	r3, [pc, #596]	; (8001924 <main+0x550>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	701a      	strb	r2, [r3, #0]

		if (refresh==1) { // refresh interrupt was triggered
 80016d2:	4b95      	ldr	r3, [pc, #596]	; (8001928 <main+0x554>)
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	2b01      	cmp	r3, #1
 80016da:	f040 8085 	bne.w	80017e8 <main+0x414>
		  updatescreen();
 80016de:	f7ff f867 	bl	80007b0 <updatescreen>

		  // Save player previous position
		  ship_px = ship_x;
 80016e2:	4b92      	ldr	r3, [pc, #584]	; (800192c <main+0x558>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a92      	ldr	r2, [pc, #584]	; (8001930 <main+0x55c>)
 80016e8:	6013      	str	r3, [r2, #0]
		  ship_py = ship_y;
 80016ea:	4b92      	ldr	r3, [pc, #584]	; (8001934 <main+0x560>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a92      	ldr	r2, [pc, #584]	; (8001938 <main+0x564>)
 80016f0:	6013      	str	r3, [r2, #0]

		  // Save enemy invader 1 previous position
		  for (int r = 0; r < 4; r++) {
 80016f2:	2300      	movs	r3, #0
 80016f4:	643b      	str	r3, [r7, #64]	; 0x40
 80016f6:	e033      	b.n	8001760 <main+0x38c>
			  for (int c = 0; c < 6; c++) {
 80016f8:	2300      	movs	r3, #0
 80016fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016fc:	e02a      	b.n	8001754 <main+0x380>
				  invader1_prev_xpos[r][c] = invader1_xpos[r][c];
 80016fe:	498f      	ldr	r1, [pc, #572]	; (800193c <main+0x568>)
 8001700:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001702:	4613      	mov	r3, r2
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	4413      	add	r3, r2
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800170c:	4413      	add	r3, r2
 800170e:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8001712:	488b      	ldr	r0, [pc, #556]	; (8001940 <main+0x56c>)
 8001714:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001716:	4613      	mov	r3, r2
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	4413      	add	r3, r2
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001720:	4413      	add	r3, r2
 8001722:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
				  invader1_prev_ypos[r][c] = invader1_ypos[r][c];
 8001726:	4987      	ldr	r1, [pc, #540]	; (8001944 <main+0x570>)
 8001728:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800172a:	4613      	mov	r3, r2
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	4413      	add	r3, r2
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001734:	4413      	add	r3, r2
 8001736:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800173a:	4883      	ldr	r0, [pc, #524]	; (8001948 <main+0x574>)
 800173c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800173e:	4613      	mov	r3, r2
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	4413      	add	r3, r2
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001748:	4413      	add	r3, r2
 800174a:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
			  for (int c = 0; c < 6; c++) {
 800174e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001750:	3301      	adds	r3, #1
 8001752:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001754:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001756:	2b05      	cmp	r3, #5
 8001758:	ddd1      	ble.n	80016fe <main+0x32a>
		  for (int r = 0; r < 4; r++) {
 800175a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800175c:	3301      	adds	r3, #1
 800175e:	643b      	str	r3, [r7, #64]	; 0x40
 8001760:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001762:	2b03      	cmp	r3, #3
 8001764:	ddc8      	ble.n	80016f8 <main+0x324>
			  }
		  }

		  // Save player missiles previous position
		  for (int missile_index = 0; missile_index < 3; ++missile_index) {
 8001766:	2300      	movs	r3, #0
 8001768:	63bb      	str	r3, [r7, #56]	; 0x38
 800176a:	e018      	b.n	800179e <main+0x3ca>
			if (player_missile_status[missile_index] == 1) {
 800176c:	4a77      	ldr	r2, [pc, #476]	; (800194c <main+0x578>)
 800176e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001770:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001774:	2b01      	cmp	r3, #1
 8001776:	d10f      	bne.n	8001798 <main+0x3c4>
				player_missile_prev_xpos[missile_index] = player_missile_xpos[missile_index];
 8001778:	4a75      	ldr	r2, [pc, #468]	; (8001950 <main+0x57c>)
 800177a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800177c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001780:	4974      	ldr	r1, [pc, #464]	; (8001954 <main+0x580>)
 8001782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001784:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				player_missile_prev_ypos[missile_index] = player_missile_ypos[missile_index];
 8001788:	4a73      	ldr	r2, [pc, #460]	; (8001958 <main+0x584>)
 800178a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800178c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001790:	4972      	ldr	r1, [pc, #456]	; (800195c <main+0x588>)
 8001792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001794:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		  for (int missile_index = 0; missile_index < 3; ++missile_index) {
 8001798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800179a:	3301      	adds	r3, #1
 800179c:	63bb      	str	r3, [r7, #56]	; 0x38
 800179e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	dde3      	ble.n	800176c <main+0x398>
			}
		  }

		  // Save enemy missiles previous position
		  for (int missile_index = 0; missile_index < 6; ++missile_index) {
 80017a4:	2300      	movs	r3, #0
 80017a6:	637b      	str	r3, [r7, #52]	; 0x34
 80017a8:	e018      	b.n	80017dc <main+0x408>
			if (invader1_missile_status[missile_index] == 1) {
 80017aa:	4a6d      	ldr	r2, [pc, #436]	; (8001960 <main+0x58c>)
 80017ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d10f      	bne.n	80017d6 <main+0x402>
				invader1_missile_prev_xpos[missile_index] = invader1_missile_xpos[missile_index];
 80017b6:	4a6b      	ldr	r2, [pc, #428]	; (8001964 <main+0x590>)
 80017b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017ba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80017be:	496a      	ldr	r1, [pc, #424]	; (8001968 <main+0x594>)
 80017c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				invader1_missile_prev_ypos[missile_index] = invader1_missile_ypos[missile_index];
 80017c6:	4a69      	ldr	r2, [pc, #420]	; (800196c <main+0x598>)
 80017c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017ca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80017ce:	4968      	ldr	r1, [pc, #416]	; (8001970 <main+0x59c>)
 80017d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		  for (int missile_index = 0; missile_index < 6; ++missile_index) {
 80017d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017d8:	3301      	adds	r3, #1
 80017da:	637b      	str	r3, [r7, #52]	; 0x34
 80017dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017de:	2b05      	cmp	r3, #5
 80017e0:	dde3      	ble.n	80017aa <main+0x3d6>
			}
		  }

		  refresh = 0;
 80017e2:	4b51      	ldr	r3, [pc, #324]	; (8001928 <main+0x554>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	701a      	strb	r2, [r3, #0]
		} // Refresh triggered


		// Move player ship, player missiles and enemy missiles
		if (HAL_GetTick() - ctr_lastcheck >= 1) {
 80017e8:	f000 fda4 	bl	8002334 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	4b61      	ldr	r3, [pc, #388]	; (8001974 <main+0x5a0>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d05e      	beq.n	80018b4 <main+0x4e0>
			if ((ship_x < 308) && HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_9)) { // Right
 80017f6:	4b4d      	ldr	r3, [pc, #308]	; (800192c <main+0x558>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 80017fe:	da0d      	bge.n	800181c <main+0x448>
 8001800:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001804:	485c      	ldr	r0, [pc, #368]	; (8001978 <main+0x5a4>)
 8001806:	f001 fba3 	bl	8002f50 <HAL_GPIO_ReadPin>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d005      	beq.n	800181c <main+0x448>
				ship_x++;
 8001810:	4b46      	ldr	r3, [pc, #280]	; (800192c <main+0x558>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	3301      	adds	r3, #1
 8001816:	4a45      	ldr	r2, [pc, #276]	; (800192c <main+0x558>)
 8001818:	6013      	str	r3, [r2, #0]
 800181a:	e010      	b.n	800183e <main+0x46a>
			}
			else if ((ship_x > 0) && HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_10)) { // Left
 800181c:	4b43      	ldr	r3, [pc, #268]	; (800192c <main+0x558>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2b00      	cmp	r3, #0
 8001822:	dd0c      	ble.n	800183e <main+0x46a>
 8001824:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001828:	4853      	ldr	r0, [pc, #332]	; (8001978 <main+0x5a4>)
 800182a:	f001 fb91 	bl	8002f50 <HAL_GPIO_ReadPin>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d004      	beq.n	800183e <main+0x46a>
				ship_x--;
 8001834:	4b3d      	ldr	r3, [pc, #244]	; (800192c <main+0x558>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	3b01      	subs	r3, #1
 800183a:	4a3c      	ldr	r2, [pc, #240]	; (800192c <main+0x558>)
 800183c:	6013      	str	r3, [r2, #0]
			}

			// Move the fired player missiles
			for (int missile_index = 0; missile_index < 3; ++missile_index) {
 800183e:	2300      	movs	r3, #0
 8001840:	633b      	str	r3, [r7, #48]	; 0x30
 8001842:	e014      	b.n	800186e <main+0x49a>
				if (player_missile_status[missile_index] == 1) {
 8001844:	4a41      	ldr	r2, [pc, #260]	; (800194c <main+0x578>)
 8001846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001848:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800184c:	2b01      	cmp	r3, #1
 800184e:	d10b      	bne.n	8001868 <main+0x494>
					player_missile_ypos[missile_index]--;
 8001850:	4a41      	ldr	r2, [pc, #260]	; (8001958 <main+0x584>)
 8001852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001854:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001858:	1e5a      	subs	r2, r3, #1
 800185a:	493f      	ldr	r1, [pc, #252]	; (8001958 <main+0x584>)
 800185c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800185e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					updatePlayerMissileStatus(missile_index);
 8001862:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001864:	f7ff fa5e 	bl	8000d24 <updatePlayerMissileStatus>
			for (int missile_index = 0; missile_index < 3; ++missile_index) {
 8001868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800186a:	3301      	adds	r3, #1
 800186c:	633b      	str	r3, [r7, #48]	; 0x30
 800186e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001870:	2b02      	cmp	r3, #2
 8001872:	dde7      	ble.n	8001844 <main+0x470>
				}
			}

			// Move fired enemy missiles
			for (int missile_index = 0; missile_index < 6; ++missile_index) {
 8001874:	2300      	movs	r3, #0
 8001876:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001878:	e014      	b.n	80018a4 <main+0x4d0>
				if (invader1_missile_status[missile_index] == 1) {
 800187a:	4a39      	ldr	r2, [pc, #228]	; (8001960 <main+0x58c>)
 800187c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800187e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001882:	2b01      	cmp	r3, #1
 8001884:	d10b      	bne.n	800189e <main+0x4ca>
					invader1_missile_ypos[missile_index]++;
 8001886:	4a39      	ldr	r2, [pc, #228]	; (800196c <main+0x598>)
 8001888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800188a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800188e:	1c5a      	adds	r2, r3, #1
 8001890:	4936      	ldr	r1, [pc, #216]	; (800196c <main+0x598>)
 8001892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001894:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					updateEnemyMissileStatus(missile_index);
 8001898:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800189a:	f7ff fc07 	bl	80010ac <updateEnemyMissileStatus>
			for (int missile_index = 0; missile_index < 6; ++missile_index) {
 800189e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018a0:	3301      	adds	r3, #1
 80018a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018a6:	2b05      	cmp	r3, #5
 80018a8:	dde7      	ble.n	800187a <main+0x4a6>
				}
			}

			ctr_lastcheck = HAL_GetTick();
 80018aa:	f000 fd43 	bl	8002334 <HAL_GetTick>
 80018ae:	4602      	mov	r2, r0
 80018b0:	4b30      	ldr	r3, [pc, #192]	; (8001974 <main+0x5a0>)
 80018b2:	601a      	str	r2, [r3, #0]
		}

		// Move Invader 1
		if (HAL_GetTick() - ctr_invader1_lastcheck >= 16) {
 80018b4:	f000 fd3e 	bl	8002334 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	4b30      	ldr	r3, [pc, #192]	; (800197c <main+0x5a8>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	2b0f      	cmp	r3, #15
 80018c2:	f240 80ea 	bls.w	8001a9a <main+0x6c6>

			if (row_to_move < 0) {
 80018c6:	4b2e      	ldr	r3, [pc, #184]	; (8001980 <main+0x5ac>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	da02      	bge.n	80018d4 <main+0x500>
				row_to_move = 3;
 80018ce:	4b2c      	ldr	r3, [pc, #176]	; (8001980 <main+0x5ac>)
 80018d0:	2203      	movs	r2, #3
 80018d2:	601a      	str	r2, [r3, #0]
			}
			for (int col = 0; col < 6; col++) {
 80018d4:	2300      	movs	r3, #0
 80018d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80018d8:	e074      	b.n	80019c4 <main+0x5f0>
				if (inv1_direction == 1) {
 80018da:	4b2a      	ldr	r3, [pc, #168]	; (8001984 <main+0x5b0>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d152      	bne.n	8001988 <main+0x5b4>
					invader1_xpos[row_to_move][col] += 4;
 80018e2:	4b27      	ldr	r3, [pc, #156]	; (8001980 <main+0x5ac>)
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	4915      	ldr	r1, [pc, #84]	; (800193c <main+0x568>)
 80018e8:	4613      	mov	r3, r2
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	4413      	add	r3, r2
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80018f2:	4413      	add	r3, r2
 80018f4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80018f8:	4a21      	ldr	r2, [pc, #132]	; (8001980 <main+0x5ac>)
 80018fa:	6812      	ldr	r2, [r2, #0]
 80018fc:	1d19      	adds	r1, r3, #4
 80018fe:	480f      	ldr	r0, [pc, #60]	; (800193c <main+0x568>)
 8001900:	4613      	mov	r3, r2
 8001902:	005b      	lsls	r3, r3, #1
 8001904:	4413      	add	r3, r2
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800190a:	4413      	add	r3, r2
 800190c:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 8001910:	e055      	b.n	80019be <main+0x5ea>
 8001912:	bf00      	nop
 8001914:	200001f4 	.word	0x200001f4
 8001918:	200001dc 	.word	0x200001dc
 800191c:	200001e8 	.word	0x200001e8
 8001920:	20000500 	.word	0x20000500
 8001924:	200001c6 	.word	0x200001c6
 8001928:	200001c4 	.word	0x200001c4
 800192c:	20000474 	.word	0x20000474
 8001930:	20000478 	.word	0x20000478
 8001934:	200001c8 	.word	0x200001c8
 8001938:	200001cc 	.word	0x200001cc
 800193c:	20000200 	.word	0x20000200
 8001940:	200002c0 	.word	0x200002c0
 8001944:	20000260 	.word	0x20000260
 8001948:	20000320 	.word	0x20000320
 800194c:	200001d0 	.word	0x200001d0
 8001950:	20000504 	.word	0x20000504
 8001954:	20000468 	.word	0x20000468
 8001958:	2000045c 	.word	0x2000045c
 800195c:	20000494 	.word	0x20000494
 8001960:	200003e4 	.word	0x200003e4
 8001964:	20000510 	.word	0x20000510
 8001968:	2000042c 	.word	0x2000042c
 800196c:	2000047c 	.word	0x2000047c
 8001970:	20000444 	.word	0x20000444
 8001974:	200003fc 	.word	0x200003fc
 8001978:	40020c00 	.word	0x40020c00
 800197c:	20000400 	.word	0x20000400
 8001980:	20000004 	.word	0x20000004
 8001984:	20000008 	.word	0x20000008
				}
				else if (inv1_direction == 0) {
 8001988:	4ba7      	ldr	r3, [pc, #668]	; (8001c28 <main+0x854>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d116      	bne.n	80019be <main+0x5ea>
					invader1_xpos[row_to_move][col] -= 4;
 8001990:	4ba6      	ldr	r3, [pc, #664]	; (8001c2c <main+0x858>)
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	49a6      	ldr	r1, [pc, #664]	; (8001c30 <main+0x85c>)
 8001996:	4613      	mov	r3, r2
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	4413      	add	r3, r2
 800199c:	005b      	lsls	r3, r3, #1
 800199e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80019a0:	4413      	add	r3, r2
 80019a2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80019a6:	4aa1      	ldr	r2, [pc, #644]	; (8001c2c <main+0x858>)
 80019a8:	6812      	ldr	r2, [r2, #0]
 80019aa:	1f19      	subs	r1, r3, #4
 80019ac:	48a0      	ldr	r0, [pc, #640]	; (8001c30 <main+0x85c>)
 80019ae:	4613      	mov	r3, r2
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	4413      	add	r3, r2
 80019b4:	005b      	lsls	r3, r3, #1
 80019b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80019b8:	4413      	add	r3, r2
 80019ba:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
			for (int col = 0; col < 6; col++) {
 80019be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019c0:	3301      	adds	r3, #1
 80019c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80019c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019c6:	2b05      	cmp	r3, #5
 80019c8:	dd87      	ble.n	80018da <main+0x506>
				}
			}
			row_to_move--;
 80019ca:	4b98      	ldr	r3, [pc, #608]	; (8001c2c <main+0x858>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	3b01      	subs	r3, #1
 80019d0:	4a96      	ldr	r2, [pc, #600]	; (8001c2c <main+0x858>)
 80019d2:	6013      	str	r3, [r2, #0]

			if (invader1_xpos[0][5] > 304) { // move down at right side
 80019d4:	4b96      	ldr	r3, [pc, #600]	; (8001c30 <main+0x85c>)
 80019d6:	695b      	ldr	r3, [r3, #20]
 80019d8:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 80019dc:	dd2a      	ble.n	8001a34 <main+0x660>
				for (int row = 0; row < 4; row++) {
 80019de:	2300      	movs	r3, #0
 80019e0:	627b      	str	r3, [r7, #36]	; 0x24
 80019e2:	e020      	b.n	8001a26 <main+0x652>
					for (int col = 0; col < 6; col++) {
 80019e4:	2300      	movs	r3, #0
 80019e6:	623b      	str	r3, [r7, #32]
 80019e8:	e017      	b.n	8001a1a <main+0x646>
						invader1_ypos[row][col] += 2;
 80019ea:	4992      	ldr	r1, [pc, #584]	; (8001c34 <main+0x860>)
 80019ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019ee:	4613      	mov	r3, r2
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	4413      	add	r3, r2
 80019f4:	005b      	lsls	r3, r3, #1
 80019f6:	6a3a      	ldr	r2, [r7, #32]
 80019f8:	4413      	add	r3, r2
 80019fa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80019fe:	1c99      	adds	r1, r3, #2
 8001a00:	488c      	ldr	r0, [pc, #560]	; (8001c34 <main+0x860>)
 8001a02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a04:	4613      	mov	r3, r2
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	4413      	add	r3, r2
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	6a3a      	ldr	r2, [r7, #32]
 8001a0e:	4413      	add	r3, r2
 8001a10:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
					for (int col = 0; col < 6; col++) {
 8001a14:	6a3b      	ldr	r3, [r7, #32]
 8001a16:	3301      	adds	r3, #1
 8001a18:	623b      	str	r3, [r7, #32]
 8001a1a:	6a3b      	ldr	r3, [r7, #32]
 8001a1c:	2b05      	cmp	r3, #5
 8001a1e:	dde4      	ble.n	80019ea <main+0x616>
				for (int row = 0; row < 4; row++) {
 8001a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a22:	3301      	adds	r3, #1
 8001a24:	627b      	str	r3, [r7, #36]	; 0x24
 8001a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a28:	2b03      	cmp	r3, #3
 8001a2a:	dddb      	ble.n	80019e4 <main+0x610>
					}
				}
				inv1_direction = 0;
 8001a2c:	4b7e      	ldr	r3, [pc, #504]	; (8001c28 <main+0x854>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	601a      	str	r2, [r3, #0]
 8001a32:	e02d      	b.n	8001a90 <main+0x6bc>
			}
			else if (invader1_xpos[0][0] < 4) { // down at left side
 8001a34:	4b7e      	ldr	r3, [pc, #504]	; (8001c30 <main+0x85c>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2b03      	cmp	r3, #3
 8001a3a:	dc29      	bgt.n	8001a90 <main+0x6bc>
				for (int row = 0; row < 4; ++row) {
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	61fb      	str	r3, [r7, #28]
 8001a40:	e020      	b.n	8001a84 <main+0x6b0>
					for (int col = 0; col < 6; ++col) {
 8001a42:	2300      	movs	r3, #0
 8001a44:	61bb      	str	r3, [r7, #24]
 8001a46:	e017      	b.n	8001a78 <main+0x6a4>
						invader1_ypos[row][col] += 2;
 8001a48:	497a      	ldr	r1, [pc, #488]	; (8001c34 <main+0x860>)
 8001a4a:	69fa      	ldr	r2, [r7, #28]
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	4413      	add	r3, r2
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	4413      	add	r3, r2
 8001a58:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001a5c:	1c99      	adds	r1, r3, #2
 8001a5e:	4875      	ldr	r0, [pc, #468]	; (8001c34 <main+0x860>)
 8001a60:	69fa      	ldr	r2, [r7, #28]
 8001a62:	4613      	mov	r3, r2
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	4413      	add	r3, r2
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
					for (int col = 0; col < 6; ++col) {
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	3301      	adds	r3, #1
 8001a76:	61bb      	str	r3, [r7, #24]
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	2b05      	cmp	r3, #5
 8001a7c:	dde4      	ble.n	8001a48 <main+0x674>
				for (int row = 0; row < 4; ++row) {
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	3301      	adds	r3, #1
 8001a82:	61fb      	str	r3, [r7, #28]
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	2b03      	cmp	r3, #3
 8001a88:	dddb      	ble.n	8001a42 <main+0x66e>
					}
				}
				inv1_direction = 1;
 8001a8a:	4b67      	ldr	r3, [pc, #412]	; (8001c28 <main+0x854>)
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	601a      	str	r2, [r3, #0]
			}

			ctr_invader1_lastcheck = HAL_GetTick();
 8001a90:	f000 fc50 	bl	8002334 <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	4b68      	ldr	r3, [pc, #416]	; (8001c38 <main+0x864>)
 8001a98:	601a      	str	r2, [r3, #0]
		}


		// Player ship fired missile
		if (player_fire == 1) {
 8001a9a:	4b68      	ldr	r3, [pc, #416]	; (8001c3c <main+0x868>)
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d12b      	bne.n	8001afc <main+0x728>
			// loop to find available missile
			for (int missile_index = 0; missile_index < 3; ++missile_index) {
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	617b      	str	r3, [r7, #20]
 8001aa8:	e022      	b.n	8001af0 <main+0x71c>
				if (player_missile_status[missile_index] == 0) {
 8001aaa:	4a65      	ldr	r2, [pc, #404]	; (8001c40 <main+0x86c>)
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d119      	bne.n	8001aea <main+0x716>
					HAL_I2S_Transmit_DMA(&hi2s3, (uint16_t*) pew, AUDIOLEN_PEW);
 8001ab6:	f642 62f6 	movw	r2, #12022	; 0x2ef6
 8001aba:	4962      	ldr	r1, [pc, #392]	; (8001c44 <main+0x870>)
 8001abc:	4862      	ldr	r0, [pc, #392]	; (8001c48 <main+0x874>)
 8001abe:	f001 fbc3 	bl	8003248 <HAL_I2S_Transmit_DMA>
					player_missile_status[missile_index] = 1;
 8001ac2:	4a5f      	ldr	r2, [pc, #380]	; (8001c40 <main+0x86c>)
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	2101      	movs	r1, #1
 8001ac8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					player_missile_xpos[missile_index] = ship_x + 5;
 8001acc:	4b5f      	ldr	r3, [pc, #380]	; (8001c4c <main+0x878>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	1d5a      	adds	r2, r3, #5
 8001ad2:	495f      	ldr	r1, [pc, #380]	; (8001c50 <main+0x87c>)
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					player_missile_ypos[missile_index] = ship_y - 4;
 8001ada:	4b5e      	ldr	r3, [pc, #376]	; (8001c54 <main+0x880>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	1f1a      	subs	r2, r3, #4
 8001ae0:	495d      	ldr	r1, [pc, #372]	; (8001c58 <main+0x884>)
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					break;
 8001ae8:	e005      	b.n	8001af6 <main+0x722>
			for (int missile_index = 0; missile_index < 3; ++missile_index) {
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	3301      	adds	r3, #1
 8001aee:	617b      	str	r3, [r7, #20]
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	ddd9      	ble.n	8001aaa <main+0x6d6>
				}
			}

			player_fire = 0;
 8001af6:	4b51      	ldr	r3, [pc, #324]	; (8001c3c <main+0x868>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	701a      	strb	r2, [r3, #0]
		}

		// Fire invader 1 missile
		if (HAL_GetTick() - ctr_invader1_fire >= 2) {
 8001afc:	f000 fc1a 	bl	8002334 <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	4b56      	ldr	r3, [pc, #344]	; (8001c5c <main+0x888>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d964      	bls.n	8001bd6 <main+0x802>
			for (int missile_index = 0; missile_index < 6; ++missile_index) {
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	60bb      	str	r3, [r7, #8]
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	2b05      	cmp	r3, #5
 8001b14:	dc5a      	bgt.n	8001bcc <main+0x7f8>

				if (invader1_missile_status[missile_index] == 0) {
 8001b16:	4a52      	ldr	r2, [pc, #328]	; (8001c60 <main+0x88c>)
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d153      	bne.n	8001bca <main+0x7f6>
					if (invader1_fire_index > 95) {
 8001b22:	4b50      	ldr	r3, [pc, #320]	; (8001c64 <main+0x890>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2b5f      	cmp	r3, #95	; 0x5f
 8001b28:	dd02      	ble.n	8001b30 <main+0x75c>
						invader1_fire_index = 0;
 8001b2a:	4b4e      	ldr	r3, [pc, #312]	; (8001c64 <main+0x890>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]
					}
					int row = invader1_fire_sequence[invader1_fire_index] / 6;
 8001b30:	4b4c      	ldr	r3, [pc, #304]	; (8001c64 <main+0x890>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a4c      	ldr	r2, [pc, #304]	; (8001c68 <main+0x894>)
 8001b36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b3a:	4a4c      	ldr	r2, [pc, #304]	; (8001c6c <main+0x898>)
 8001b3c:	fb82 1203 	smull	r1, r2, r2, r3
 8001b40:	17db      	asrs	r3, r3, #31
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	607b      	str	r3, [r7, #4]
					int col = invader1_fire_sequence[invader1_fire_index] % 6;
 8001b46:	4b47      	ldr	r3, [pc, #284]	; (8001c64 <main+0x890>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a47      	ldr	r2, [pc, #284]	; (8001c68 <main+0x894>)
 8001b4c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001b50:	4b46      	ldr	r3, [pc, #280]	; (8001c6c <main+0x898>)
 8001b52:	fb83 3102 	smull	r3, r1, r3, r2
 8001b56:	17d3      	asrs	r3, r2, #31
 8001b58:	1ac9      	subs	r1, r1, r3
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	440b      	add	r3, r1
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	603b      	str	r3, [r7, #0]
					invader1_fire_index++;
 8001b66:	4b3f      	ldr	r3, [pc, #252]	; (8001c64 <main+0x890>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	4a3d      	ldr	r2, [pc, #244]	; (8001c64 <main+0x890>)
 8001b6e:	6013      	str	r3, [r2, #0]
					if (invader1_status[row][col] == 1) {
 8001b70:	493f      	ldr	r1, [pc, #252]	; (8001c70 <main+0x89c>)
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	4613      	mov	r3, r2
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	4413      	add	r3, r2
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	683a      	ldr	r2, [r7, #0]
 8001b7e:	4413      	add	r3, r2
 8001b80:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d120      	bne.n	8001bca <main+0x7f6>
						invader1_missile_status[missile_index] = 1;
 8001b88:	4a35      	ldr	r2, [pc, #212]	; (8001c60 <main+0x88c>)
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	2101      	movs	r1, #1
 8001b8e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						invader1_missile_xpos[missile_index] = invader1_xpos[row][col];
 8001b92:	4927      	ldr	r1, [pc, #156]	; (8001c30 <main+0x85c>)
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	4613      	mov	r3, r2
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	4413      	add	r3, r2
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	683a      	ldr	r2, [r7, #0]
 8001ba0:	4413      	add	r3, r2
 8001ba2:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8001ba6:	4933      	ldr	r1, [pc, #204]	; (8001c74 <main+0x8a0>)
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						invader1_missile_ypos[missile_index] = invader1_ypos[row][col];
 8001bae:	4921      	ldr	r1, [pc, #132]	; (8001c34 <main+0x860>)
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	4613      	mov	r3, r2
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	4413      	add	r3, r2
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	683a      	ldr	r2, [r7, #0]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8001bc2:	492d      	ldr	r1, [pc, #180]	; (8001c78 <main+0x8a4>)
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					}
				}
				break;
 8001bca:	bf00      	nop
			}
			ctr_invader1_fire = HAL_GetTick();
 8001bcc:	f000 fbb2 	bl	8002334 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	4b22      	ldr	r3, [pc, #136]	; (8001c5c <main+0x888>)
 8001bd4:	601a      	str	r2, [r3, #0]
		}

		// Check if all Invader1 are dead
		all_invader1_alive = 0;
 8001bd6:	4b29      	ldr	r3, [pc, #164]	; (8001c7c <main+0x8a8>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]
		for (int row = 0; row < 4; ++row) {
 8001bdc:	2300      	movs	r3, #0
 8001bde:	613b      	str	r3, [r7, #16]
 8001be0:	e01e      	b.n	8001c20 <main+0x84c>
			for (int col = 0; col < 6; ++col) {
 8001be2:	2300      	movs	r3, #0
 8001be4:	60fb      	str	r3, [r7, #12]
 8001be6:	e011      	b.n	8001c0c <main+0x838>
				if (invader1_status[row][col] == 1) {
 8001be8:	4921      	ldr	r1, [pc, #132]	; (8001c70 <main+0x89c>)
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	4613      	mov	r3, r2
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	4413      	add	r3, r2
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	68fa      	ldr	r2, [r7, #12]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d102      	bne.n	8001c06 <main+0x832>
					all_invader1_alive = 1;
 8001c00:	4b1e      	ldr	r3, [pc, #120]	; (8001c7c <main+0x8a8>)
 8001c02:	2201      	movs	r2, #1
 8001c04:	601a      	str	r2, [r3, #0]
			for (int col = 0; col < 6; ++col) {
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	3301      	adds	r3, #1
 8001c0a:	60fb      	str	r3, [r7, #12]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2b05      	cmp	r3, #5
 8001c10:	ddea      	ble.n	8001be8 <main+0x814>
				}
			}
			if (all_invader1_alive) {
 8001c12:	4b1a      	ldr	r3, [pc, #104]	; (8001c7c <main+0x8a8>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d132      	bne.n	8001c80 <main+0x8ac>
		for (int row = 0; row < 4; ++row) {
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	613b      	str	r3, [r7, #16]
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	2b03      	cmp	r3, #3
 8001c24:	dddd      	ble.n	8001be2 <main+0x80e>
 8001c26:	e02c      	b.n	8001c82 <main+0x8ae>
 8001c28:	20000008 	.word	0x20000008
 8001c2c:	20000004 	.word	0x20000004
 8001c30:	20000200 	.word	0x20000200
 8001c34:	20000260 	.word	0x20000260
 8001c38:	20000400 	.word	0x20000400
 8001c3c:	200001c5 	.word	0x200001c5
 8001c40:	200001d0 	.word	0x200001d0
 8001c44:	08013bf8 	.word	0x08013bf8
 8001c48:	20000528 	.word	0x20000528
 8001c4c:	20000474 	.word	0x20000474
 8001c50:	20000504 	.word	0x20000504
 8001c54:	200001c8 	.word	0x200001c8
 8001c58:	2000045c 	.word	0x2000045c
 8001c5c:	20000404 	.word	0x20000404
 8001c60:	200003e4 	.word	0x200003e4
 8001c64:	200003e0 	.word	0x200003e0
 8001c68:	20000014 	.word	0x20000014
 8001c6c:	2aaaaaab 	.word	0x2aaaaaab
 8001c70:	20000380 	.word	0x20000380
 8001c74:	20000510 	.word	0x20000510
 8001c78:	2000047c 	.word	0x2000047c
 8001c7c:	2000000c 	.word	0x2000000c
				break;
 8001c80:	bf00      	nop
			}
		}
		if (all_invader1_alive == 0) {
 8001c82:	4b07      	ldr	r3, [pc, #28]	; (8001ca0 <main+0x8cc>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	f47f ac29 	bne.w	80014de <main+0x10a>
			HAL_I2S_Transmit_DMA(&hi2s3, (uint16_t*) great_success, AUDIOLEN_GREAT_SUCCESS);
 8001c8c:	f24c 32ef 	movw	r2, #50159	; 0xc3ef
 8001c90:	4904      	ldr	r1, [pc, #16]	; (8001ca4 <main+0x8d0>)
 8001c92:	4805      	ldr	r0, [pc, #20]	; (8001ca8 <main+0x8d4>)
 8001c94:	f001 fad8 	bl	8003248 <HAL_I2S_Transmit_DMA>
			gameStatus = RESET_LEVEL1;
 8001c98:	4b04      	ldr	r3, [pc, #16]	; (8001cac <main+0x8d8>)
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	701a      	strb	r2, [r3, #0]
	  if (gameStatus == INTRO_SCREEN) {
 8001c9e:	e41e      	b.n	80014de <main+0x10a>
 8001ca0:	2000000c 	.word	0x2000000c
 8001ca4:	080199e4 	.word	0x080199e4
 8001ca8:	20000528 	.word	0x20000528
 8001cac:	20000500 	.word	0x20000500

08001cb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b09a      	sub	sp, #104	; 0x68
 8001cb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cb6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001cba:	2230      	movs	r2, #48	; 0x30
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f002 fca2 	bl	8004608 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	605a      	str	r2, [r3, #4]
 8001cce:	609a      	str	r2, [r3, #8]
 8001cd0:	60da      	str	r2, [r3, #12]
 8001cd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cd4:	f107 030c 	add.w	r3, r7, #12
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	605a      	str	r2, [r3, #4]
 8001cde:	609a      	str	r2, [r3, #8]
 8001ce0:	60da      	str	r2, [r3, #12]
 8001ce2:	611a      	str	r2, [r3, #16]
 8001ce4:	615a      	str	r2, [r3, #20]

  /** Macro to configure the PLL multiplication factor 
  */
  __HAL_RCC_PLL_PLLM_CONFIG(16);
 8001ce6:	4b34      	ldr	r3, [pc, #208]	; (8001db8 <SystemClock_Config+0x108>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001cee:	4a32      	ldr	r2, [pc, #200]	; (8001db8 <SystemClock_Config+0x108>)
 8001cf0:	f043 0310 	orr.w	r3, r3, #16
 8001cf4:	6053      	str	r3, [r2, #4]
  /** Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8001cf6:	4b30      	ldr	r3, [pc, #192]	; (8001db8 <SystemClock_Config+0x108>)
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	4a2f      	ldr	r2, [pc, #188]	; (8001db8 <SystemClock_Config+0x108>)
 8001cfc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001d00:	6053      	str	r3, [r2, #4]
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d02:	2300      	movs	r3, #0
 8001d04:	60bb      	str	r3, [r7, #8]
 8001d06:	4b2c      	ldr	r3, [pc, #176]	; (8001db8 <SystemClock_Config+0x108>)
 8001d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0a:	4a2b      	ldr	r2, [pc, #172]	; (8001db8 <SystemClock_Config+0x108>)
 8001d0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d10:	6413      	str	r3, [r2, #64]	; 0x40
 8001d12:	4b29      	ldr	r3, [pc, #164]	; (8001db8 <SystemClock_Config+0x108>)
 8001d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d1a:	60bb      	str	r3, [r7, #8]
 8001d1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d1e:	2300      	movs	r3, #0
 8001d20:	607b      	str	r3, [r7, #4]
 8001d22:	4b26      	ldr	r3, [pc, #152]	; (8001dbc <SystemClock_Config+0x10c>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a25      	ldr	r2, [pc, #148]	; (8001dbc <SystemClock_Config+0x10c>)
 8001d28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d2c:	6013      	str	r3, [r2, #0]
 8001d2e:	4b23      	ldr	r3, [pc, #140]	; (8001dbc <SystemClock_Config+0x10c>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d36:	607b      	str	r3, [r7, #4]
 8001d38:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d42:	2310      	movs	r3, #16
 8001d44:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001d46:	2300      	movs	r3, #0
 8001d48:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d4e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001d52:	4618      	mov	r0, r3
 8001d54:	f001 fede 	bl	8003b14 <HAL_RCC_OscConfig>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001d5e:	f000 f919 	bl	8001f94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d62:	230f      	movs	r3, #15
 8001d64:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001d66:	2300      	movs	r3, #0
 8001d68:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d72:	2300      	movs	r3, #0
 8001d74:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001d76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f002 f939 	bl	8003ff4 <HAL_RCC_ClockConfig>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8001d88:	f000 f904 	bl	8001f94 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001d90:	23c0      	movs	r3, #192	; 0xc0
 8001d92:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 16;
 8001d94:	2310      	movs	r3, #16
 8001d96:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001d98:	2302      	movs	r3, #2
 8001d9a:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d9c:	f107 030c 	add.w	r3, r7, #12
 8001da0:	4618      	mov	r0, r3
 8001da2:	f002 fabf 	bl	8004324 <HAL_RCCEx_PeriphCLKConfig>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <SystemClock_Config+0x100>
  {
    Error_Handler();
 8001dac:	f000 f8f2 	bl	8001f94 <Error_Handler>
  }
}
 8001db0:	bf00      	nop
 8001db2:	3768      	adds	r7, #104	; 0x68
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	40023800 	.word	0x40023800
 8001dbc:	40007000 	.word	0x40007000

08001dc0 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001dc4:	4b13      	ldr	r3, [pc, #76]	; (8001e14 <MX_I2S3_Init+0x54>)
 8001dc6:	4a14      	ldr	r2, [pc, #80]	; (8001e18 <MX_I2S3_Init+0x58>)
 8001dc8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001dca:	4b12      	ldr	r3, [pc, #72]	; (8001e14 <MX_I2S3_Init+0x54>)
 8001dcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dd0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001dd2:	4b10      	ldr	r3, [pc, #64]	; (8001e14 <MX_I2S3_Init+0x54>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001dd8:	4b0e      	ldr	r3, [pc, #56]	; (8001e14 <MX_I2S3_Init+0x54>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8001dde:	4b0d      	ldr	r3, [pc, #52]	; (8001e14 <MX_I2S3_Init+0x54>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8001de4:	4b0b      	ldr	r3, [pc, #44]	; (8001e14 <MX_I2S3_Init+0x54>)
 8001de6:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001dea:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001dec:	4b09      	ldr	r3, [pc, #36]	; (8001e14 <MX_I2S3_Init+0x54>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001df2:	4b08      	ldr	r3, [pc, #32]	; (8001e14 <MX_I2S3_Init+0x54>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001df8:	4b06      	ldr	r3, [pc, #24]	; (8001e14 <MX_I2S3_Init+0x54>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001dfe:	4805      	ldr	r0, [pc, #20]	; (8001e14 <MX_I2S3_Init+0x54>)
 8001e00:	f001 f8e2 	bl	8002fc8 <HAL_I2S_Init>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8001e0a:	f000 f8c3 	bl	8001f94 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001e0e:	bf00      	nop
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	20000528 	.word	0x20000528
 8001e18:	40003c00 	.word	0x40003c00

08001e1c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e22:	2300      	movs	r3, #0
 8001e24:	607b      	str	r3, [r7, #4]
 8001e26:	4b0c      	ldr	r3, [pc, #48]	; (8001e58 <MX_DMA_Init+0x3c>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2a:	4a0b      	ldr	r2, [pc, #44]	; (8001e58 <MX_DMA_Init+0x3c>)
 8001e2c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e30:	6313      	str	r3, [r2, #48]	; 0x30
 8001e32:	4b09      	ldr	r3, [pc, #36]	; (8001e58 <MX_DMA_Init+0x3c>)
 8001e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e3a:	607b      	str	r3, [r7, #4]
 8001e3c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001e3e:	2200      	movs	r2, #0
 8001e40:	2100      	movs	r1, #0
 8001e42:	2010      	movs	r0, #16
 8001e44:	f000 fb5d 	bl	8002502 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001e48:	2010      	movs	r0, #16
 8001e4a:	f000 fb76 	bl	800253a <HAL_NVIC_EnableIRQ>

}
 8001e4e:	bf00      	nop
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	40023800 	.word	0x40023800

08001e5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b08a      	sub	sp, #40	; 0x28
 8001e60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e62:	f107 0314 	add.w	r3, r7, #20
 8001e66:	2200      	movs	r2, #0
 8001e68:	601a      	str	r2, [r3, #0]
 8001e6a:	605a      	str	r2, [r3, #4]
 8001e6c:	609a      	str	r2, [r3, #8]
 8001e6e:	60da      	str	r2, [r3, #12]
 8001e70:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e72:	2300      	movs	r3, #0
 8001e74:	613b      	str	r3, [r7, #16]
 8001e76:	4b42      	ldr	r3, [pc, #264]	; (8001f80 <MX_GPIO_Init+0x124>)
 8001e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7a:	4a41      	ldr	r2, [pc, #260]	; (8001f80 <MX_GPIO_Init+0x124>)
 8001e7c:	f043 0301 	orr.w	r3, r3, #1
 8001e80:	6313      	str	r3, [r2, #48]	; 0x30
 8001e82:	4b3f      	ldr	r3, [pc, #252]	; (8001f80 <MX_GPIO_Init+0x124>)
 8001e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	613b      	str	r3, [r7, #16]
 8001e8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e8e:	2300      	movs	r3, #0
 8001e90:	60fb      	str	r3, [r7, #12]
 8001e92:	4b3b      	ldr	r3, [pc, #236]	; (8001f80 <MX_GPIO_Init+0x124>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e96:	4a3a      	ldr	r2, [pc, #232]	; (8001f80 <MX_GPIO_Init+0x124>)
 8001e98:	f043 0308 	orr.w	r3, r3, #8
 8001e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e9e:	4b38      	ldr	r3, [pc, #224]	; (8001f80 <MX_GPIO_Init+0x124>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea2:	f003 0308 	and.w	r3, r3, #8
 8001ea6:	60fb      	str	r3, [r7, #12]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eaa:	2300      	movs	r3, #0
 8001eac:	60bb      	str	r3, [r7, #8]
 8001eae:	4b34      	ldr	r3, [pc, #208]	; (8001f80 <MX_GPIO_Init+0x124>)
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb2:	4a33      	ldr	r2, [pc, #204]	; (8001f80 <MX_GPIO_Init+0x124>)
 8001eb4:	f043 0304 	orr.w	r3, r3, #4
 8001eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eba:	4b31      	ldr	r3, [pc, #196]	; (8001f80 <MX_GPIO_Init+0x124>)
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ebe:	f003 0304 	and.w	r3, r3, #4
 8001ec2:	60bb      	str	r3, [r7, #8]
 8001ec4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	607b      	str	r3, [r7, #4]
 8001eca:	4b2d      	ldr	r3, [pc, #180]	; (8001f80 <MX_GPIO_Init+0x124>)
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ece:	4a2c      	ldr	r2, [pc, #176]	; (8001f80 <MX_GPIO_Init+0x124>)
 8001ed0:	f043 0302 	orr.w	r3, r3, #2
 8001ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ed6:	4b2a      	ldr	r3, [pc, #168]	; (8001f80 <MX_GPIO_Init+0x124>)
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	607b      	str	r3, [r7, #4]
 8001ee0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ee6:	4b27      	ldr	r3, [pc, #156]	; (8001f84 <MX_GPIO_Init+0x128>)
 8001ee8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eea:	2300      	movs	r3, #0
 8001eec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eee:	f107 0314 	add.w	r3, r7, #20
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	4824      	ldr	r0, [pc, #144]	; (8001f88 <MX_GPIO_Init+0x12c>)
 8001ef6:	f000 fea9 	bl	8002c4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001efa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001efe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f00:	4b20      	ldr	r3, [pc, #128]	; (8001f84 <MX_GPIO_Init+0x128>)
 8001f02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f04:	2300      	movs	r3, #0
 8001f06:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f08:	f107 0314 	add.w	r3, r7, #20
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	481f      	ldr	r0, [pc, #124]	; (8001f8c <MX_GPIO_Init+0x130>)
 8001f10:	f000 fe9c 	bl	8002c4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001f14:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001f18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f22:	f107 0314 	add.w	r3, r7, #20
 8001f26:	4619      	mov	r1, r3
 8001f28:	4818      	ldr	r0, [pc, #96]	; (8001f8c <MX_GPIO_Init+0x130>)
 8001f2a:	f000 fe8f 	bl	8002c4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001f2e:	2310      	movs	r3, #16
 8001f30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f32:	4b14      	ldr	r3, [pc, #80]	; (8001f84 <MX_GPIO_Init+0x128>)
 8001f34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f36:	2300      	movs	r3, #0
 8001f38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f3a:	f107 0314 	add.w	r3, r7, #20
 8001f3e:	4619      	mov	r1, r3
 8001f40:	4813      	ldr	r0, [pc, #76]	; (8001f90 <MX_GPIO_Init+0x134>)
 8001f42:	f000 fe83 	bl	8002c4c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001f46:	2200      	movs	r2, #0
 8001f48:	2100      	movs	r1, #0
 8001f4a:	2006      	movs	r0, #6
 8001f4c:	f000 fad9 	bl	8002502 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001f50:	2006      	movs	r0, #6
 8001f52:	f000 faf2 	bl	800253a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001f56:	2200      	movs	r2, #0
 8001f58:	2100      	movs	r1, #0
 8001f5a:	200a      	movs	r0, #10
 8001f5c:	f000 fad1 	bl	8002502 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001f60:	200a      	movs	r0, #10
 8001f62:	f000 faea 	bl	800253a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001f66:	2200      	movs	r2, #0
 8001f68:	2100      	movs	r1, #0
 8001f6a:	2017      	movs	r0, #23
 8001f6c:	f000 fac9 	bl	8002502 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001f70:	2017      	movs	r0, #23
 8001f72:	f000 fae2 	bl	800253a <HAL_NVIC_EnableIRQ>

}
 8001f76:	bf00      	nop
 8001f78:	3728      	adds	r7, #40	; 0x28
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	40023800 	.word	0x40023800
 8001f84:	10110000 	.word	0x10110000
 8001f88:	40020000 	.word	0x40020000
 8001f8c:	40020c00 	.word	0x40020c00
 8001f90:	40020400 	.word	0x40020400

08001f94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001f98:	bf00      	nop
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
	...

08001fa4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001faa:	2300      	movs	r3, #0
 8001fac:	607b      	str	r3, [r7, #4]
 8001fae:	4b10      	ldr	r3, [pc, #64]	; (8001ff0 <HAL_MspInit+0x4c>)
 8001fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb2:	4a0f      	ldr	r2, [pc, #60]	; (8001ff0 <HAL_MspInit+0x4c>)
 8001fb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fb8:	6453      	str	r3, [r2, #68]	; 0x44
 8001fba:	4b0d      	ldr	r3, [pc, #52]	; (8001ff0 <HAL_MspInit+0x4c>)
 8001fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fc2:	607b      	str	r3, [r7, #4]
 8001fc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	603b      	str	r3, [r7, #0]
 8001fca:	4b09      	ldr	r3, [pc, #36]	; (8001ff0 <HAL_MspInit+0x4c>)
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fce:	4a08      	ldr	r2, [pc, #32]	; (8001ff0 <HAL_MspInit+0x4c>)
 8001fd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fd4:	6413      	str	r3, [r2, #64]	; 0x40
 8001fd6:	4b06      	ldr	r3, [pc, #24]	; (8001ff0 <HAL_MspInit+0x4c>)
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fde:	603b      	str	r3, [r7, #0]
 8001fe0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fe2:	bf00      	nop
 8001fe4:	370c      	adds	r7, #12
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	40023800 	.word	0x40023800

08001ff4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b08a      	sub	sp, #40	; 0x28
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ffc:	f107 0314 	add.w	r3, r7, #20
 8002000:	2200      	movs	r2, #0
 8002002:	601a      	str	r2, [r3, #0]
 8002004:	605a      	str	r2, [r3, #4]
 8002006:	609a      	str	r2, [r3, #8]
 8002008:	60da      	str	r2, [r3, #12]
 800200a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a40      	ldr	r2, [pc, #256]	; (8002114 <HAL_I2S_MspInit+0x120>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d179      	bne.n	800210a <HAL_I2S_MspInit+0x116>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002016:	2300      	movs	r3, #0
 8002018:	613b      	str	r3, [r7, #16]
 800201a:	4b3f      	ldr	r3, [pc, #252]	; (8002118 <HAL_I2S_MspInit+0x124>)
 800201c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201e:	4a3e      	ldr	r2, [pc, #248]	; (8002118 <HAL_I2S_MspInit+0x124>)
 8002020:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002024:	6413      	str	r3, [r2, #64]	; 0x40
 8002026:	4b3c      	ldr	r3, [pc, #240]	; (8002118 <HAL_I2S_MspInit+0x124>)
 8002028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800202e:	613b      	str	r3, [r7, #16]
 8002030:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002032:	2300      	movs	r3, #0
 8002034:	60fb      	str	r3, [r7, #12]
 8002036:	4b38      	ldr	r3, [pc, #224]	; (8002118 <HAL_I2S_MspInit+0x124>)
 8002038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203a:	4a37      	ldr	r2, [pc, #220]	; (8002118 <HAL_I2S_MspInit+0x124>)
 800203c:	f043 0301 	orr.w	r3, r3, #1
 8002040:	6313      	str	r3, [r2, #48]	; 0x30
 8002042:	4b35      	ldr	r3, [pc, #212]	; (8002118 <HAL_I2S_MspInit+0x124>)
 8002044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	60fb      	str	r3, [r7, #12]
 800204c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800204e:	2300      	movs	r3, #0
 8002050:	60bb      	str	r3, [r7, #8]
 8002052:	4b31      	ldr	r3, [pc, #196]	; (8002118 <HAL_I2S_MspInit+0x124>)
 8002054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002056:	4a30      	ldr	r2, [pc, #192]	; (8002118 <HAL_I2S_MspInit+0x124>)
 8002058:	f043 0304 	orr.w	r3, r3, #4
 800205c:	6313      	str	r3, [r2, #48]	; 0x30
 800205e:	4b2e      	ldr	r3, [pc, #184]	; (8002118 <HAL_I2S_MspInit+0x124>)
 8002060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002062:	f003 0304 	and.w	r3, r3, #4
 8002066:	60bb      	str	r3, [r7, #8]
 8002068:	68bb      	ldr	r3, [r7, #8]
    /**I2S3 GPIO Configuration    
    PA4     ------> I2S3_WS
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800206a:	2310      	movs	r3, #16
 800206c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800206e:	2302      	movs	r3, #2
 8002070:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002072:	2300      	movs	r3, #0
 8002074:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002076:	2300      	movs	r3, #0
 8002078:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800207a:	2306      	movs	r3, #6
 800207c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800207e:	f107 0314 	add.w	r3, r7, #20
 8002082:	4619      	mov	r1, r3
 8002084:	4825      	ldr	r0, [pc, #148]	; (800211c <HAL_I2S_MspInit+0x128>)
 8002086:	f000 fde1 	bl	8002c4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 800208a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800208e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002090:	2302      	movs	r3, #2
 8002092:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002094:	2300      	movs	r3, #0
 8002096:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002098:	2300      	movs	r3, #0
 800209a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800209c:	2306      	movs	r3, #6
 800209e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020a0:	f107 0314 	add.w	r3, r7, #20
 80020a4:	4619      	mov	r1, r3
 80020a6:	481e      	ldr	r0, [pc, #120]	; (8002120 <HAL_I2S_MspInit+0x12c>)
 80020a8:	f000 fdd0 	bl	8002c4c <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 80020ac:	4b1d      	ldr	r3, [pc, #116]	; (8002124 <HAL_I2S_MspInit+0x130>)
 80020ae:	4a1e      	ldr	r2, [pc, #120]	; (8002128 <HAL_I2S_MspInit+0x134>)
 80020b0:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 80020b2:	4b1c      	ldr	r3, [pc, #112]	; (8002124 <HAL_I2S_MspInit+0x130>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80020b8:	4b1a      	ldr	r3, [pc, #104]	; (8002124 <HAL_I2S_MspInit+0x130>)
 80020ba:	2240      	movs	r2, #64	; 0x40
 80020bc:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020be:	4b19      	ldr	r3, [pc, #100]	; (8002124 <HAL_I2S_MspInit+0x130>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80020c4:	4b17      	ldr	r3, [pc, #92]	; (8002124 <HAL_I2S_MspInit+0x130>)
 80020c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020ca:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80020cc:	4b15      	ldr	r3, [pc, #84]	; (8002124 <HAL_I2S_MspInit+0x130>)
 80020ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020d2:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80020d4:	4b13      	ldr	r3, [pc, #76]	; (8002124 <HAL_I2S_MspInit+0x130>)
 80020d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020da:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 80020dc:	4b11      	ldr	r3, [pc, #68]	; (8002124 <HAL_I2S_MspInit+0x130>)
 80020de:	2200      	movs	r2, #0
 80020e0:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80020e2:	4b10      	ldr	r3, [pc, #64]	; (8002124 <HAL_I2S_MspInit+0x130>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020e8:	4b0e      	ldr	r3, [pc, #56]	; (8002124 <HAL_I2S_MspInit+0x130>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 80020ee:	480d      	ldr	r0, [pc, #52]	; (8002124 <HAL_I2S_MspInit+0x130>)
 80020f0:	f000 fa3e 	bl	8002570 <HAL_DMA_Init>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <HAL_I2S_MspInit+0x10a>
    {
      Error_Handler();
 80020fa:	f7ff ff4b 	bl	8001f94 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a08      	ldr	r2, [pc, #32]	; (8002124 <HAL_I2S_MspInit+0x130>)
 8002102:	639a      	str	r2, [r3, #56]	; 0x38
 8002104:	4a07      	ldr	r2, [pc, #28]	; (8002124 <HAL_I2S_MspInit+0x130>)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800210a:	bf00      	nop
 800210c:	3728      	adds	r7, #40	; 0x28
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	40003c00 	.word	0x40003c00
 8002118:	40023800 	.word	0x40023800
 800211c:	40020000 	.word	0x40020000
 8002120:	40020800 	.word	0x40020800
 8002124:	200004a0 	.word	0x200004a0
 8002128:	40026088 	.word	0x40026088

0800212c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002130:	bf00      	nop
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr

0800213a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800213a:	b480      	push	{r7}
 800213c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800213e:	e7fe      	b.n	800213e <HardFault_Handler+0x4>

08002140 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002144:	e7fe      	b.n	8002144 <MemManage_Handler+0x4>

08002146 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002146:	b480      	push	{r7}
 8002148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800214a:	e7fe      	b.n	800214a <BusFault_Handler+0x4>

0800214c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002150:	e7fe      	b.n	8002150 <UsageFault_Handler+0x4>

08002152 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002152:	b480      	push	{r7}
 8002154:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002156:	bf00      	nop
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002164:	bf00      	nop
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr

0800216e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800216e:	b480      	push	{r7}
 8002170:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002172:	bf00      	nop
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002180:	f000 f8c4 	bl	800230c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002184:	bf00      	nop
 8002186:	bd80      	pop	{r7, pc}

08002188 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	player_fire = 1;
 800218c:	4b03      	ldr	r3, [pc, #12]	; (800219c <EXTI0_IRQHandler+0x14>)
 800218e:	2201      	movs	r2, #1
 8002190:	701a      	strb	r2, [r3, #0]

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002192:	2001      	movs	r0, #1
 8002194:	f000 fef4 	bl	8002f80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002198:	bf00      	nop
 800219a:	bd80      	pop	{r7, pc}
 800219c:	200001c5 	.word	0x200001c5

080021a0 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	refresh = 1;
 80021a4:	4b03      	ldr	r3, [pc, #12]	; (80021b4 <EXTI4_IRQHandler+0x14>)
 80021a6:	2201      	movs	r2, #1
 80021a8:	701a      	strb	r2, [r3, #0]

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80021aa:	2010      	movs	r0, #16
 80021ac:	f000 fee8 	bl	8002f80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80021b0:	bf00      	nop
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	200001c4 	.word	0x200001c4

080021b8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 80021bc:	4802      	ldr	r0, [pc, #8]	; (80021c8 <DMA1_Stream5_IRQHandler+0x10>)
 80021be:	f000 fadd 	bl	800277c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80021c2:	bf00      	nop
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	200004a0 	.word	0x200004a0

080021cc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	continue_input = 1;
 80021d0:	4b04      	ldr	r3, [pc, #16]	; (80021e4 <EXTI9_5_IRQHandler+0x18>)
 80021d2:	2201      	movs	r2, #1
 80021d4:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80021d6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80021da:	f000 fed1 	bl	8002f80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80021de:	bf00      	nop
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	200001c6 	.word	0x200001c6

080021e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021ec:	4b08      	ldr	r3, [pc, #32]	; (8002210 <SystemInit+0x28>)
 80021ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021f2:	4a07      	ldr	r2, [pc, #28]	; (8002210 <SystemInit+0x28>)
 80021f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80021fc:	4b04      	ldr	r3, [pc, #16]	; (8002210 <SystemInit+0x28>)
 80021fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002202:	609a      	str	r2, [r3, #8]
#endif
}
 8002204:	bf00      	nop
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	e000ed00 	.word	0xe000ed00

08002214 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002214:	f8df d034 	ldr.w	sp, [pc, #52]	; 800224c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002218:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800221a:	e003      	b.n	8002224 <LoopCopyDataInit>

0800221c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800221c:	4b0c      	ldr	r3, [pc, #48]	; (8002250 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800221e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002220:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002222:	3104      	adds	r1, #4

08002224 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002224:	480b      	ldr	r0, [pc, #44]	; (8002254 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002226:	4b0c      	ldr	r3, [pc, #48]	; (8002258 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002228:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800222a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800222c:	d3f6      	bcc.n	800221c <CopyDataInit>
  ldr  r2, =_sbss
 800222e:	4a0b      	ldr	r2, [pc, #44]	; (800225c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002230:	e002      	b.n	8002238 <LoopFillZerobss>

08002232 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002232:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002234:	f842 3b04 	str.w	r3, [r2], #4

08002238 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002238:	4b09      	ldr	r3, [pc, #36]	; (8002260 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800223a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800223c:	d3f9      	bcc.n	8002232 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800223e:	f7ff ffd3 	bl	80021e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002242:	f002 f9bd 	bl	80045c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002246:	f7ff f8c5 	bl	80013d4 <main>
  bx  lr    
 800224a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800224c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002250:	08042d1c 	.word	0x08042d1c
  ldr  r0, =_sdata
 8002254:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002258:	200001a0 	.word	0x200001a0
  ldr  r2, =_sbss
 800225c:	200001a0 	.word	0x200001a0
  ldr  r3, = _ebss
 8002260:	20000574 	.word	0x20000574

08002264 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002264:	e7fe      	b.n	8002264 <ADC_IRQHandler>
	...

08002268 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800226c:	4b0e      	ldr	r3, [pc, #56]	; (80022a8 <HAL_Init+0x40>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a0d      	ldr	r2, [pc, #52]	; (80022a8 <HAL_Init+0x40>)
 8002272:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002276:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002278:	4b0b      	ldr	r3, [pc, #44]	; (80022a8 <HAL_Init+0x40>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a0a      	ldr	r2, [pc, #40]	; (80022a8 <HAL_Init+0x40>)
 800227e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002282:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002284:	4b08      	ldr	r3, [pc, #32]	; (80022a8 <HAL_Init+0x40>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a07      	ldr	r2, [pc, #28]	; (80022a8 <HAL_Init+0x40>)
 800228a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800228e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002290:	2003      	movs	r0, #3
 8002292:	f000 f92b 	bl	80024ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002296:	2000      	movs	r0, #0
 8002298:	f000 f808 	bl	80022ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800229c:	f7ff fe82 	bl	8001fa4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	40023c00 	.word	0x40023c00

080022ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022b4:	4b12      	ldr	r3, [pc, #72]	; (8002300 <HAL_InitTick+0x54>)
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	4b12      	ldr	r3, [pc, #72]	; (8002304 <HAL_InitTick+0x58>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	4619      	mov	r1, r3
 80022be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80022c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ca:	4618      	mov	r0, r3
 80022cc:	f000 f943 	bl	8002556 <HAL_SYSTICK_Config>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e00e      	b.n	80022f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2b0f      	cmp	r3, #15
 80022de:	d80a      	bhi.n	80022f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022e0:	2200      	movs	r2, #0
 80022e2:	6879      	ldr	r1, [r7, #4]
 80022e4:	f04f 30ff 	mov.w	r0, #4294967295
 80022e8:	f000 f90b 	bl	8002502 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022ec:	4a06      	ldr	r2, [pc, #24]	; (8002308 <HAL_InitTick+0x5c>)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022f2:	2300      	movs	r3, #0
 80022f4:	e000      	b.n	80022f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3708      	adds	r7, #8
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	20000194 	.word	0x20000194
 8002304:	2000019c 	.word	0x2000019c
 8002308:	20000198 	.word	0x20000198

0800230c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002310:	4b06      	ldr	r3, [pc, #24]	; (800232c <HAL_IncTick+0x20>)
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	461a      	mov	r2, r3
 8002316:	4b06      	ldr	r3, [pc, #24]	; (8002330 <HAL_IncTick+0x24>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4413      	add	r3, r2
 800231c:	4a04      	ldr	r2, [pc, #16]	; (8002330 <HAL_IncTick+0x24>)
 800231e:	6013      	str	r3, [r2, #0]
}
 8002320:	bf00      	nop
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	2000019c 	.word	0x2000019c
 8002330:	20000570 	.word	0x20000570

08002334 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
  return uwTick;
 8002338:	4b03      	ldr	r3, [pc, #12]	; (8002348 <HAL_GetTick+0x14>)
 800233a:	681b      	ldr	r3, [r3, #0]
}
 800233c:	4618      	mov	r0, r3
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	20000570 	.word	0x20000570

0800234c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800234c:	b480      	push	{r7}
 800234e:	b085      	sub	sp, #20
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f003 0307 	and.w	r3, r3, #7
 800235a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800235c:	4b0c      	ldr	r3, [pc, #48]	; (8002390 <__NVIC_SetPriorityGrouping+0x44>)
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002362:	68ba      	ldr	r2, [r7, #8]
 8002364:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002368:	4013      	ands	r3, r2
 800236a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002374:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002378:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800237c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800237e:	4a04      	ldr	r2, [pc, #16]	; (8002390 <__NVIC_SetPriorityGrouping+0x44>)
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	60d3      	str	r3, [r2, #12]
}
 8002384:	bf00      	nop
 8002386:	3714      	adds	r7, #20
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr
 8002390:	e000ed00 	.word	0xe000ed00

08002394 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002398:	4b04      	ldr	r3, [pc, #16]	; (80023ac <__NVIC_GetPriorityGrouping+0x18>)
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	0a1b      	lsrs	r3, r3, #8
 800239e:	f003 0307 	and.w	r3, r3, #7
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr
 80023ac:	e000ed00 	.word	0xe000ed00

080023b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	4603      	mov	r3, r0
 80023b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	db0b      	blt.n	80023da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023c2:	79fb      	ldrb	r3, [r7, #7]
 80023c4:	f003 021f 	and.w	r2, r3, #31
 80023c8:	4907      	ldr	r1, [pc, #28]	; (80023e8 <__NVIC_EnableIRQ+0x38>)
 80023ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ce:	095b      	lsrs	r3, r3, #5
 80023d0:	2001      	movs	r0, #1
 80023d2:	fa00 f202 	lsl.w	r2, r0, r2
 80023d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023da:	bf00      	nop
 80023dc:	370c      	adds	r7, #12
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	e000e100 	.word	0xe000e100

080023ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	4603      	mov	r3, r0
 80023f4:	6039      	str	r1, [r7, #0]
 80023f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	db0a      	blt.n	8002416 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	b2da      	uxtb	r2, r3
 8002404:	490c      	ldr	r1, [pc, #48]	; (8002438 <__NVIC_SetPriority+0x4c>)
 8002406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240a:	0112      	lsls	r2, r2, #4
 800240c:	b2d2      	uxtb	r2, r2
 800240e:	440b      	add	r3, r1
 8002410:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002414:	e00a      	b.n	800242c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	b2da      	uxtb	r2, r3
 800241a:	4908      	ldr	r1, [pc, #32]	; (800243c <__NVIC_SetPriority+0x50>)
 800241c:	79fb      	ldrb	r3, [r7, #7]
 800241e:	f003 030f 	and.w	r3, r3, #15
 8002422:	3b04      	subs	r3, #4
 8002424:	0112      	lsls	r2, r2, #4
 8002426:	b2d2      	uxtb	r2, r2
 8002428:	440b      	add	r3, r1
 800242a:	761a      	strb	r2, [r3, #24]
}
 800242c:	bf00      	nop
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr
 8002438:	e000e100 	.word	0xe000e100
 800243c:	e000ed00 	.word	0xe000ed00

08002440 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002440:	b480      	push	{r7}
 8002442:	b089      	sub	sp, #36	; 0x24
 8002444:	af00      	add	r7, sp, #0
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f003 0307 	and.w	r3, r3, #7
 8002452:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	f1c3 0307 	rsb	r3, r3, #7
 800245a:	2b04      	cmp	r3, #4
 800245c:	bf28      	it	cs
 800245e:	2304      	movcs	r3, #4
 8002460:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	3304      	adds	r3, #4
 8002466:	2b06      	cmp	r3, #6
 8002468:	d902      	bls.n	8002470 <NVIC_EncodePriority+0x30>
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	3b03      	subs	r3, #3
 800246e:	e000      	b.n	8002472 <NVIC_EncodePriority+0x32>
 8002470:	2300      	movs	r3, #0
 8002472:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002474:	f04f 32ff 	mov.w	r2, #4294967295
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	fa02 f303 	lsl.w	r3, r2, r3
 800247e:	43da      	mvns	r2, r3
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	401a      	ands	r2, r3
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002488:	f04f 31ff 	mov.w	r1, #4294967295
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	fa01 f303 	lsl.w	r3, r1, r3
 8002492:	43d9      	mvns	r1, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002498:	4313      	orrs	r3, r2
         );
}
 800249a:	4618      	mov	r0, r3
 800249c:	3724      	adds	r7, #36	; 0x24
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
	...

080024a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	3b01      	subs	r3, #1
 80024b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024b8:	d301      	bcc.n	80024be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024ba:	2301      	movs	r3, #1
 80024bc:	e00f      	b.n	80024de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024be:	4a0a      	ldr	r2, [pc, #40]	; (80024e8 <SysTick_Config+0x40>)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	3b01      	subs	r3, #1
 80024c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024c6:	210f      	movs	r1, #15
 80024c8:	f04f 30ff 	mov.w	r0, #4294967295
 80024cc:	f7ff ff8e 	bl	80023ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024d0:	4b05      	ldr	r3, [pc, #20]	; (80024e8 <SysTick_Config+0x40>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024d6:	4b04      	ldr	r3, [pc, #16]	; (80024e8 <SysTick_Config+0x40>)
 80024d8:	2207      	movs	r2, #7
 80024da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3708      	adds	r7, #8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	e000e010 	.word	0xe000e010

080024ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f7ff ff29 	bl	800234c <__NVIC_SetPriorityGrouping>
}
 80024fa:	bf00      	nop
 80024fc:	3708      	adds	r7, #8
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002502:	b580      	push	{r7, lr}
 8002504:	b086      	sub	sp, #24
 8002506:	af00      	add	r7, sp, #0
 8002508:	4603      	mov	r3, r0
 800250a:	60b9      	str	r1, [r7, #8]
 800250c:	607a      	str	r2, [r7, #4]
 800250e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002510:	2300      	movs	r3, #0
 8002512:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002514:	f7ff ff3e 	bl	8002394 <__NVIC_GetPriorityGrouping>
 8002518:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	68b9      	ldr	r1, [r7, #8]
 800251e:	6978      	ldr	r0, [r7, #20]
 8002520:	f7ff ff8e 	bl	8002440 <NVIC_EncodePriority>
 8002524:	4602      	mov	r2, r0
 8002526:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800252a:	4611      	mov	r1, r2
 800252c:	4618      	mov	r0, r3
 800252e:	f7ff ff5d 	bl	80023ec <__NVIC_SetPriority>
}
 8002532:	bf00      	nop
 8002534:	3718      	adds	r7, #24
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}

0800253a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800253a:	b580      	push	{r7, lr}
 800253c:	b082      	sub	sp, #8
 800253e:	af00      	add	r7, sp, #0
 8002540:	4603      	mov	r3, r0
 8002542:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002544:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002548:	4618      	mov	r0, r3
 800254a:	f7ff ff31 	bl	80023b0 <__NVIC_EnableIRQ>
}
 800254e:	bf00      	nop
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}

08002556 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002556:	b580      	push	{r7, lr}
 8002558:	b082      	sub	sp, #8
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f7ff ffa2 	bl	80024a8 <SysTick_Config>
 8002564:	4603      	mov	r3, r0
}
 8002566:	4618      	mov	r0, r3
 8002568:	3708      	adds	r7, #8
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
	...

08002570 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b086      	sub	sp, #24
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002578:	2300      	movs	r3, #0
 800257a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800257c:	f7ff feda 	bl	8002334 <HAL_GetTick>
 8002580:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d101      	bne.n	800258c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e099      	b.n	80026c0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2200      	movs	r2, #0
 8002590:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2202      	movs	r2, #2
 8002598:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f022 0201 	bic.w	r2, r2, #1
 80025aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025ac:	e00f      	b.n	80025ce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025ae:	f7ff fec1 	bl	8002334 <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	2b05      	cmp	r3, #5
 80025ba:	d908      	bls.n	80025ce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2220      	movs	r2, #32
 80025c0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2203      	movs	r2, #3
 80025c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e078      	b.n	80026c0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0301 	and.w	r3, r3, #1
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d1e8      	bne.n	80025ae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80025e4:	697a      	ldr	r2, [r7, #20]
 80025e6:	4b38      	ldr	r3, [pc, #224]	; (80026c8 <HAL_DMA_Init+0x158>)
 80025e8:	4013      	ands	r3, r2
 80025ea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685a      	ldr	r2, [r3, #4]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	691b      	ldr	r3, [r3, #16]
 8002600:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002606:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	699b      	ldr	r3, [r3, #24]
 800260c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002612:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6a1b      	ldr	r3, [r3, #32]
 8002618:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800261a:	697a      	ldr	r2, [r7, #20]
 800261c:	4313      	orrs	r3, r2
 800261e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002624:	2b04      	cmp	r3, #4
 8002626:	d107      	bne.n	8002638 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002630:	4313      	orrs	r3, r2
 8002632:	697a      	ldr	r2, [r7, #20]
 8002634:	4313      	orrs	r3, r2
 8002636:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	697a      	ldr	r2, [r7, #20]
 800263e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	695b      	ldr	r3, [r3, #20]
 8002646:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	f023 0307 	bic.w	r3, r3, #7
 800264e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002654:	697a      	ldr	r2, [r7, #20]
 8002656:	4313      	orrs	r3, r2
 8002658:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265e:	2b04      	cmp	r3, #4
 8002660:	d117      	bne.n	8002692 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002666:	697a      	ldr	r2, [r7, #20]
 8002668:	4313      	orrs	r3, r2
 800266a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002670:	2b00      	cmp	r3, #0
 8002672:	d00e      	beq.n	8002692 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f000 fa6f 	bl	8002b58 <DMA_CheckFifoParam>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d008      	beq.n	8002692 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2240      	movs	r2, #64	; 0x40
 8002684:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2201      	movs	r2, #1
 800268a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800268e:	2301      	movs	r3, #1
 8002690:	e016      	b.n	80026c0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	697a      	ldr	r2, [r7, #20]
 8002698:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f000 fa26 	bl	8002aec <DMA_CalcBaseAndBitshift>
 80026a0:	4603      	mov	r3, r0
 80026a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026a8:	223f      	movs	r2, #63	; 0x3f
 80026aa:	409a      	lsls	r2, r3
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2201      	movs	r2, #1
 80026ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80026be:	2300      	movs	r3, #0
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3718      	adds	r7, #24
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	f010803f 	.word	0xf010803f

080026cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b086      	sub	sp, #24
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	607a      	str	r2, [r7, #4]
 80026d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026da:	2300      	movs	r3, #0
 80026dc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d101      	bne.n	80026f2 <HAL_DMA_Start_IT+0x26>
 80026ee:	2302      	movs	r3, #2
 80026f0:	e040      	b.n	8002774 <HAL_DMA_Start_IT+0xa8>
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2201      	movs	r2, #1
 80026f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002700:	b2db      	uxtb	r3, r3
 8002702:	2b01      	cmp	r3, #1
 8002704:	d12f      	bne.n	8002766 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2202      	movs	r2, #2
 800270a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2200      	movs	r2, #0
 8002712:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	68b9      	ldr	r1, [r7, #8]
 800271a:	68f8      	ldr	r0, [r7, #12]
 800271c:	f000 f9b8 	bl	8002a90 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002724:	223f      	movs	r2, #63	; 0x3f
 8002726:	409a      	lsls	r2, r3
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f042 0216 	orr.w	r2, r2, #22
 800273a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002740:	2b00      	cmp	r3, #0
 8002742:	d007      	beq.n	8002754 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f042 0208 	orr.w	r2, r2, #8
 8002752:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f042 0201 	orr.w	r2, r2, #1
 8002762:	601a      	str	r2, [r3, #0]
 8002764:	e005      	b.n	8002772 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800276e:	2302      	movs	r3, #2
 8002770:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002772:	7dfb      	ldrb	r3, [r7, #23]
}
 8002774:	4618      	mov	r0, r3
 8002776:	3718      	adds	r7, #24
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b086      	sub	sp, #24
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002784:	2300      	movs	r3, #0
 8002786:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002788:	4b92      	ldr	r3, [pc, #584]	; (80029d4 <HAL_DMA_IRQHandler+0x258>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a92      	ldr	r2, [pc, #584]	; (80029d8 <HAL_DMA_IRQHandler+0x25c>)
 800278e:	fba2 2303 	umull	r2, r3, r2, r3
 8002792:	0a9b      	lsrs	r3, r3, #10
 8002794:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800279a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027a6:	2208      	movs	r2, #8
 80027a8:	409a      	lsls	r2, r3
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	4013      	ands	r3, r2
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d01a      	beq.n	80027e8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0304 	and.w	r3, r3, #4
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d013      	beq.n	80027e8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f022 0204 	bic.w	r2, r2, #4
 80027ce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027d4:	2208      	movs	r2, #8
 80027d6:	409a      	lsls	r2, r3
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027e0:	f043 0201 	orr.w	r2, r3, #1
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ec:	2201      	movs	r2, #1
 80027ee:	409a      	lsls	r2, r3
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	4013      	ands	r3, r2
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d012      	beq.n	800281e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	695b      	ldr	r3, [r3, #20]
 80027fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002802:	2b00      	cmp	r3, #0
 8002804:	d00b      	beq.n	800281e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800280a:	2201      	movs	r2, #1
 800280c:	409a      	lsls	r2, r3
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002816:	f043 0202 	orr.w	r2, r3, #2
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002822:	2204      	movs	r2, #4
 8002824:	409a      	lsls	r2, r3
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	4013      	ands	r3, r2
 800282a:	2b00      	cmp	r3, #0
 800282c:	d012      	beq.n	8002854 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0302 	and.w	r3, r3, #2
 8002838:	2b00      	cmp	r3, #0
 800283a:	d00b      	beq.n	8002854 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002840:	2204      	movs	r2, #4
 8002842:	409a      	lsls	r2, r3
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800284c:	f043 0204 	orr.w	r2, r3, #4
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002858:	2210      	movs	r2, #16
 800285a:	409a      	lsls	r2, r3
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	4013      	ands	r3, r2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d043      	beq.n	80028ec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0308 	and.w	r3, r3, #8
 800286e:	2b00      	cmp	r3, #0
 8002870:	d03c      	beq.n	80028ec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002876:	2210      	movs	r2, #16
 8002878:	409a      	lsls	r2, r3
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d018      	beq.n	80028be <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d108      	bne.n	80028ac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d024      	beq.n	80028ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	4798      	blx	r3
 80028aa:	e01f      	b.n	80028ec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d01b      	beq.n	80028ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	4798      	blx	r3
 80028bc:	e016      	b.n	80028ec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d107      	bne.n	80028dc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f022 0208 	bic.w	r2, r2, #8
 80028da:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d003      	beq.n	80028ec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028f0:	2220      	movs	r2, #32
 80028f2:	409a      	lsls	r2, r3
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	4013      	ands	r3, r2
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	f000 808e 	beq.w	8002a1a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0310 	and.w	r3, r3, #16
 8002908:	2b00      	cmp	r3, #0
 800290a:	f000 8086 	beq.w	8002a1a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002912:	2220      	movs	r2, #32
 8002914:	409a      	lsls	r2, r3
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002920:	b2db      	uxtb	r3, r3
 8002922:	2b05      	cmp	r3, #5
 8002924:	d136      	bne.n	8002994 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f022 0216 	bic.w	r2, r2, #22
 8002934:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	695a      	ldr	r2, [r3, #20]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002944:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294a:	2b00      	cmp	r3, #0
 800294c:	d103      	bne.n	8002956 <HAL_DMA_IRQHandler+0x1da>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002952:	2b00      	cmp	r3, #0
 8002954:	d007      	beq.n	8002966 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f022 0208 	bic.w	r2, r2, #8
 8002964:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800296a:	223f      	movs	r2, #63	; 0x3f
 800296c:	409a      	lsls	r2, r3
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2201      	movs	r2, #1
 800297e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002986:	2b00      	cmp	r3, #0
 8002988:	d07d      	beq.n	8002a86 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	4798      	blx	r3
        }
        return;
 8002992:	e078      	b.n	8002a86 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d01c      	beq.n	80029dc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d108      	bne.n	80029c2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d030      	beq.n	8002a1a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	4798      	blx	r3
 80029c0:	e02b      	b.n	8002a1a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d027      	beq.n	8002a1a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	4798      	blx	r3
 80029d2:	e022      	b.n	8002a1a <HAL_DMA_IRQHandler+0x29e>
 80029d4:	20000194 	.word	0x20000194
 80029d8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d10f      	bne.n	8002a0a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f022 0210 	bic.w	r2, r2, #16
 80029f8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2201      	movs	r2, #1
 8002a06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d003      	beq.n	8002a1a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d032      	beq.n	8002a88 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d022      	beq.n	8002a74 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2205      	movs	r2, #5
 8002a32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f022 0201 	bic.w	r2, r2, #1
 8002a44:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	3301      	adds	r3, #1
 8002a4a:	60bb      	str	r3, [r7, #8]
 8002a4c:	697a      	ldr	r2, [r7, #20]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d307      	bcc.n	8002a62 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0301 	and.w	r3, r3, #1
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d1f2      	bne.n	8002a46 <HAL_DMA_IRQHandler+0x2ca>
 8002a60:	e000      	b.n	8002a64 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002a62:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d005      	beq.n	8002a88 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	4798      	blx	r3
 8002a84:	e000      	b.n	8002a88 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002a86:	bf00      	nop
    }
  }
}
 8002a88:	3718      	adds	r7, #24
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop

08002a90 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b085      	sub	sp, #20
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	607a      	str	r2, [r7, #4]
 8002a9c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002aac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	683a      	ldr	r2, [r7, #0]
 8002ab4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	2b40      	cmp	r3, #64	; 0x40
 8002abc:	d108      	bne.n	8002ad0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	68ba      	ldr	r2, [r7, #8]
 8002acc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002ace:	e007      	b.n	8002ae0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	68ba      	ldr	r2, [r7, #8]
 8002ad6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	60da      	str	r2, [r3, #12]
}
 8002ae0:	bf00      	nop
 8002ae2:	3714      	adds	r7, #20
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	3b10      	subs	r3, #16
 8002afc:	4a14      	ldr	r2, [pc, #80]	; (8002b50 <DMA_CalcBaseAndBitshift+0x64>)
 8002afe:	fba2 2303 	umull	r2, r3, r2, r3
 8002b02:	091b      	lsrs	r3, r3, #4
 8002b04:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b06:	4a13      	ldr	r2, [pc, #76]	; (8002b54 <DMA_CalcBaseAndBitshift+0x68>)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	4413      	add	r3, r2
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	461a      	mov	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2b03      	cmp	r3, #3
 8002b18:	d909      	bls.n	8002b2e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b22:	f023 0303 	bic.w	r3, r3, #3
 8002b26:	1d1a      	adds	r2, r3, #4
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	659a      	str	r2, [r3, #88]	; 0x58
 8002b2c:	e007      	b.n	8002b3e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b36:	f023 0303 	bic.w	r3, r3, #3
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3714      	adds	r7, #20
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	aaaaaaab 	.word	0xaaaaaaab
 8002b54:	08042d04 	.word	0x08042d04

08002b58 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b085      	sub	sp, #20
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b60:	2300      	movs	r3, #0
 8002b62:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b68:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	699b      	ldr	r3, [r3, #24]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d11f      	bne.n	8002bb2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	2b03      	cmp	r3, #3
 8002b76:	d855      	bhi.n	8002c24 <DMA_CheckFifoParam+0xcc>
 8002b78:	a201      	add	r2, pc, #4	; (adr r2, 8002b80 <DMA_CheckFifoParam+0x28>)
 8002b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b7e:	bf00      	nop
 8002b80:	08002b91 	.word	0x08002b91
 8002b84:	08002ba3 	.word	0x08002ba3
 8002b88:	08002b91 	.word	0x08002b91
 8002b8c:	08002c25 	.word	0x08002c25
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d045      	beq.n	8002c28 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ba0:	e042      	b.n	8002c28 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002baa:	d13f      	bne.n	8002c2c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bb0:	e03c      	b.n	8002c2c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	699b      	ldr	r3, [r3, #24]
 8002bb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bba:	d121      	bne.n	8002c00 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	2b03      	cmp	r3, #3
 8002bc0:	d836      	bhi.n	8002c30 <DMA_CheckFifoParam+0xd8>
 8002bc2:	a201      	add	r2, pc, #4	; (adr r2, 8002bc8 <DMA_CheckFifoParam+0x70>)
 8002bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bc8:	08002bd9 	.word	0x08002bd9
 8002bcc:	08002bdf 	.word	0x08002bdf
 8002bd0:	08002bd9 	.word	0x08002bd9
 8002bd4:	08002bf1 	.word	0x08002bf1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	73fb      	strb	r3, [r7, #15]
      break;
 8002bdc:	e02f      	b.n	8002c3e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d024      	beq.n	8002c34 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bee:	e021      	b.n	8002c34 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002bf8:	d11e      	bne.n	8002c38 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002bfe:	e01b      	b.n	8002c38 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d902      	bls.n	8002c0c <DMA_CheckFifoParam+0xb4>
 8002c06:	2b03      	cmp	r3, #3
 8002c08:	d003      	beq.n	8002c12 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c0a:	e018      	b.n	8002c3e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	73fb      	strb	r3, [r7, #15]
      break;
 8002c10:	e015      	b.n	8002c3e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d00e      	beq.n	8002c3c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	73fb      	strb	r3, [r7, #15]
      break;
 8002c22:	e00b      	b.n	8002c3c <DMA_CheckFifoParam+0xe4>
      break;
 8002c24:	bf00      	nop
 8002c26:	e00a      	b.n	8002c3e <DMA_CheckFifoParam+0xe6>
      break;
 8002c28:	bf00      	nop
 8002c2a:	e008      	b.n	8002c3e <DMA_CheckFifoParam+0xe6>
      break;
 8002c2c:	bf00      	nop
 8002c2e:	e006      	b.n	8002c3e <DMA_CheckFifoParam+0xe6>
      break;
 8002c30:	bf00      	nop
 8002c32:	e004      	b.n	8002c3e <DMA_CheckFifoParam+0xe6>
      break;
 8002c34:	bf00      	nop
 8002c36:	e002      	b.n	8002c3e <DMA_CheckFifoParam+0xe6>
      break;   
 8002c38:	bf00      	nop
 8002c3a:	e000      	b.n	8002c3e <DMA_CheckFifoParam+0xe6>
      break;
 8002c3c:	bf00      	nop
    }
  } 
  
  return status; 
 8002c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3714      	adds	r7, #20
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b089      	sub	sp, #36	; 0x24
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c56:	2300      	movs	r3, #0
 8002c58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c62:	2300      	movs	r3, #0
 8002c64:	61fb      	str	r3, [r7, #28]
 8002c66:	e159      	b.n	8002f1c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c68:	2201      	movs	r2, #1
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	697a      	ldr	r2, [r7, #20]
 8002c78:	4013      	ands	r3, r2
 8002c7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c7c:	693a      	ldr	r2, [r7, #16]
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	f040 8148 	bne.w	8002f16 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d00b      	beq.n	8002ca6 <HAL_GPIO_Init+0x5a>
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d007      	beq.n	8002ca6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c9a:	2b11      	cmp	r3, #17
 8002c9c:	d003      	beq.n	8002ca6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	2b12      	cmp	r3, #18
 8002ca4:	d130      	bne.n	8002d08 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	005b      	lsls	r3, r3, #1
 8002cb0:	2203      	movs	r2, #3
 8002cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb6:	43db      	mvns	r3, r3
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	4013      	ands	r3, r2
 8002cbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	68da      	ldr	r2, [r3, #12]
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	005b      	lsls	r3, r3, #1
 8002cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cca:	69ba      	ldr	r2, [r7, #24]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	69ba      	ldr	r2, [r7, #24]
 8002cd4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cdc:	2201      	movs	r2, #1
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce4:	43db      	mvns	r3, r3
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	091b      	lsrs	r3, r3, #4
 8002cf2:	f003 0201 	and.w	r2, r3, #1
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfc:	69ba      	ldr	r2, [r7, #24]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	69ba      	ldr	r2, [r7, #24]
 8002d06:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	005b      	lsls	r3, r3, #1
 8002d12:	2203      	movs	r2, #3
 8002d14:	fa02 f303 	lsl.w	r3, r2, r3
 8002d18:	43db      	mvns	r3, r3
 8002d1a:	69ba      	ldr	r2, [r7, #24]
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	689a      	ldr	r2, [r3, #8]
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	005b      	lsls	r3, r3, #1
 8002d28:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d003      	beq.n	8002d48 <HAL_GPIO_Init+0xfc>
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	2b12      	cmp	r3, #18
 8002d46:	d123      	bne.n	8002d90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	08da      	lsrs	r2, r3, #3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	3208      	adds	r2, #8
 8002d50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	f003 0307 	and.w	r3, r3, #7
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	220f      	movs	r2, #15
 8002d60:	fa02 f303 	lsl.w	r3, r2, r3
 8002d64:	43db      	mvns	r3, r3
 8002d66:	69ba      	ldr	r2, [r7, #24]
 8002d68:	4013      	ands	r3, r2
 8002d6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	691a      	ldr	r2, [r3, #16]
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	f003 0307 	and.w	r3, r3, #7
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	08da      	lsrs	r2, r3, #3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	3208      	adds	r2, #8
 8002d8a:	69b9      	ldr	r1, [r7, #24]
 8002d8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	005b      	lsls	r3, r3, #1
 8002d9a:	2203      	movs	r2, #3
 8002d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002da0:	43db      	mvns	r3, r3
 8002da2:	69ba      	ldr	r2, [r7, #24]
 8002da4:	4013      	ands	r3, r2
 8002da6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f003 0203 	and.w	r2, r3, #3
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	005b      	lsls	r3, r3, #1
 8002db4:	fa02 f303 	lsl.w	r3, r2, r3
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	f000 80a2 	beq.w	8002f16 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	60fb      	str	r3, [r7, #12]
 8002dd6:	4b56      	ldr	r3, [pc, #344]	; (8002f30 <HAL_GPIO_Init+0x2e4>)
 8002dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dda:	4a55      	ldr	r2, [pc, #340]	; (8002f30 <HAL_GPIO_Init+0x2e4>)
 8002ddc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002de0:	6453      	str	r3, [r2, #68]	; 0x44
 8002de2:	4b53      	ldr	r3, [pc, #332]	; (8002f30 <HAL_GPIO_Init+0x2e4>)
 8002de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dea:	60fb      	str	r3, [r7, #12]
 8002dec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002dee:	4a51      	ldr	r2, [pc, #324]	; (8002f34 <HAL_GPIO_Init+0x2e8>)
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	089b      	lsrs	r3, r3, #2
 8002df4:	3302      	adds	r3, #2
 8002df6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	f003 0303 	and.w	r3, r3, #3
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	220f      	movs	r2, #15
 8002e06:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0a:	43db      	mvns	r3, r3
 8002e0c:	69ba      	ldr	r2, [r7, #24]
 8002e0e:	4013      	ands	r3, r2
 8002e10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4a48      	ldr	r2, [pc, #288]	; (8002f38 <HAL_GPIO_Init+0x2ec>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d019      	beq.n	8002e4e <HAL_GPIO_Init+0x202>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a47      	ldr	r2, [pc, #284]	; (8002f3c <HAL_GPIO_Init+0x2f0>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d013      	beq.n	8002e4a <HAL_GPIO_Init+0x1fe>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a46      	ldr	r2, [pc, #280]	; (8002f40 <HAL_GPIO_Init+0x2f4>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d00d      	beq.n	8002e46 <HAL_GPIO_Init+0x1fa>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a45      	ldr	r2, [pc, #276]	; (8002f44 <HAL_GPIO_Init+0x2f8>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d007      	beq.n	8002e42 <HAL_GPIO_Init+0x1f6>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a44      	ldr	r2, [pc, #272]	; (8002f48 <HAL_GPIO_Init+0x2fc>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d101      	bne.n	8002e3e <HAL_GPIO_Init+0x1f2>
 8002e3a:	2304      	movs	r3, #4
 8002e3c:	e008      	b.n	8002e50 <HAL_GPIO_Init+0x204>
 8002e3e:	2307      	movs	r3, #7
 8002e40:	e006      	b.n	8002e50 <HAL_GPIO_Init+0x204>
 8002e42:	2303      	movs	r3, #3
 8002e44:	e004      	b.n	8002e50 <HAL_GPIO_Init+0x204>
 8002e46:	2302      	movs	r3, #2
 8002e48:	e002      	b.n	8002e50 <HAL_GPIO_Init+0x204>
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e000      	b.n	8002e50 <HAL_GPIO_Init+0x204>
 8002e4e:	2300      	movs	r3, #0
 8002e50:	69fa      	ldr	r2, [r7, #28]
 8002e52:	f002 0203 	and.w	r2, r2, #3
 8002e56:	0092      	lsls	r2, r2, #2
 8002e58:	4093      	lsls	r3, r2
 8002e5a:	69ba      	ldr	r2, [r7, #24]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e60:	4934      	ldr	r1, [pc, #208]	; (8002f34 <HAL_GPIO_Init+0x2e8>)
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	089b      	lsrs	r3, r3, #2
 8002e66:	3302      	adds	r3, #2
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e6e:	4b37      	ldr	r3, [pc, #220]	; (8002f4c <HAL_GPIO_Init+0x300>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	43db      	mvns	r3, r3
 8002e78:	69ba      	ldr	r2, [r7, #24]
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d003      	beq.n	8002e92 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002e8a:	69ba      	ldr	r2, [r7, #24]
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e92:	4a2e      	ldr	r2, [pc, #184]	; (8002f4c <HAL_GPIO_Init+0x300>)
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002e98:	4b2c      	ldr	r3, [pc, #176]	; (8002f4c <HAL_GPIO_Init+0x300>)
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	43db      	mvns	r3, r3
 8002ea2:	69ba      	ldr	r2, [r7, #24]
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d003      	beq.n	8002ebc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002eb4:	69ba      	ldr	r2, [r7, #24]
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ebc:	4a23      	ldr	r2, [pc, #140]	; (8002f4c <HAL_GPIO_Init+0x300>)
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ec2:	4b22      	ldr	r3, [pc, #136]	; (8002f4c <HAL_GPIO_Init+0x300>)
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	43db      	mvns	r3, r3
 8002ecc:	69ba      	ldr	r2, [r7, #24]
 8002ece:	4013      	ands	r3, r2
 8002ed0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d003      	beq.n	8002ee6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002ede:	69ba      	ldr	r2, [r7, #24]
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ee6:	4a19      	ldr	r2, [pc, #100]	; (8002f4c <HAL_GPIO_Init+0x300>)
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002eec:	4b17      	ldr	r3, [pc, #92]	; (8002f4c <HAL_GPIO_Init+0x300>)
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	43db      	mvns	r3, r3
 8002ef6:	69ba      	ldr	r2, [r7, #24]
 8002ef8:	4013      	ands	r3, r2
 8002efa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d003      	beq.n	8002f10 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002f08:	69ba      	ldr	r2, [r7, #24]
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f10:	4a0e      	ldr	r2, [pc, #56]	; (8002f4c <HAL_GPIO_Init+0x300>)
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	3301      	adds	r3, #1
 8002f1a:	61fb      	str	r3, [r7, #28]
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	2b0f      	cmp	r3, #15
 8002f20:	f67f aea2 	bls.w	8002c68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f24:	bf00      	nop
 8002f26:	3724      	adds	r7, #36	; 0x24
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr
 8002f30:	40023800 	.word	0x40023800
 8002f34:	40013800 	.word	0x40013800
 8002f38:	40020000 	.word	0x40020000
 8002f3c:	40020400 	.word	0x40020400
 8002f40:	40020800 	.word	0x40020800
 8002f44:	40020c00 	.word	0x40020c00
 8002f48:	40021000 	.word	0x40021000
 8002f4c:	40013c00 	.word	0x40013c00

08002f50 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b085      	sub	sp, #20
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	460b      	mov	r3, r1
 8002f5a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	691a      	ldr	r2, [r3, #16]
 8002f60:	887b      	ldrh	r3, [r7, #2]
 8002f62:	4013      	ands	r3, r2
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d002      	beq.n	8002f6e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	73fb      	strb	r3, [r7, #15]
 8002f6c:	e001      	b.n	8002f72 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f72:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3714      	adds	r7, #20
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	4603      	mov	r3, r0
 8002f88:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002f8a:	4b08      	ldr	r3, [pc, #32]	; (8002fac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f8c:	695a      	ldr	r2, [r3, #20]
 8002f8e:	88fb      	ldrh	r3, [r7, #6]
 8002f90:	4013      	ands	r3, r2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d006      	beq.n	8002fa4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f96:	4a05      	ldr	r2, [pc, #20]	; (8002fac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f98:	88fb      	ldrh	r3, [r7, #6]
 8002f9a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f9c:	88fb      	ldrh	r3, [r7, #6]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f000 f806 	bl	8002fb0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002fa4:	bf00      	nop
 8002fa6:	3708      	adds	r7, #8
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	40013c00 	.word	0x40013c00

08002fb0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002fba:	bf00      	nop
 8002fbc:	370c      	adds	r7, #12
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
	...

08002fc8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b088      	sub	sp, #32
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d101      	bne.n	8002fda <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e128      	b.n	800322c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d109      	bne.n	8002ffa <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a90      	ldr	r2, [pc, #576]	; (8003234 <HAL_I2S_Init+0x26c>)
 8002ff2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f7fe fffd 	bl	8001ff4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2202      	movs	r2, #2
 8002ffe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	69db      	ldr	r3, [r3, #28]
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	6812      	ldr	r2, [r2, #0]
 800300c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003010:	f023 030f 	bic.w	r3, r3, #15
 8003014:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	2202      	movs	r2, #2
 800301c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	695b      	ldr	r3, [r3, #20]
 8003022:	2b02      	cmp	r3, #2
 8003024:	d060      	beq.n	80030e8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d102      	bne.n	8003034 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800302e:	2310      	movs	r3, #16
 8003030:	617b      	str	r3, [r7, #20]
 8003032:	e001      	b.n	8003038 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003034:	2320      	movs	r3, #32
 8003036:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	2b20      	cmp	r3, #32
 800303e:	d802      	bhi.n	8003046 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	005b      	lsls	r3, r3, #1
 8003044:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003046:	2001      	movs	r0, #1
 8003048:	f001 fa5c 	bl	8004504 <HAL_RCCEx_GetPeriphCLKFreq>
 800304c:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003056:	d125      	bne.n	80030a4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d010      	beq.n	8003082 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	68fa      	ldr	r2, [r7, #12]
 8003066:	fbb2 f2f3 	udiv	r2, r2, r3
 800306a:	4613      	mov	r3, r2
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	4413      	add	r3, r2
 8003070:	005b      	lsls	r3, r3, #1
 8003072:	461a      	mov	r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	695b      	ldr	r3, [r3, #20]
 8003078:	fbb2 f3f3 	udiv	r3, r2, r3
 800307c:	3305      	adds	r3, #5
 800307e:	613b      	str	r3, [r7, #16]
 8003080:	e01f      	b.n	80030c2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	00db      	lsls	r3, r3, #3
 8003086:	68fa      	ldr	r2, [r7, #12]
 8003088:	fbb2 f2f3 	udiv	r2, r2, r3
 800308c:	4613      	mov	r3, r2
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	4413      	add	r3, r2
 8003092:	005b      	lsls	r3, r3, #1
 8003094:	461a      	mov	r2, r3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	695b      	ldr	r3, [r3, #20]
 800309a:	fbb2 f3f3 	udiv	r3, r2, r3
 800309e:	3305      	adds	r3, #5
 80030a0:	613b      	str	r3, [r7, #16]
 80030a2:	e00e      	b.n	80030c2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80030a4:	68fa      	ldr	r2, [r7, #12]
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80030ac:	4613      	mov	r3, r2
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	4413      	add	r3, r2
 80030b2:	005b      	lsls	r3, r3, #1
 80030b4:	461a      	mov	r2, r3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	695b      	ldr	r3, [r3, #20]
 80030ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80030be:	3305      	adds	r3, #5
 80030c0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	4a5c      	ldr	r2, [pc, #368]	; (8003238 <HAL_I2S_Init+0x270>)
 80030c6:	fba2 2303 	umull	r2, r3, r2, r3
 80030ca:	08db      	lsrs	r3, r3, #3
 80030cc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	f003 0301 	and.w	r3, r3, #1
 80030d4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80030d6:	693a      	ldr	r2, [r7, #16]
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	085b      	lsrs	r3, r3, #1
 80030de:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	021b      	lsls	r3, r3, #8
 80030e4:	61bb      	str	r3, [r7, #24]
 80030e6:	e003      	b.n	80030f0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80030e8:	2302      	movs	r3, #2
 80030ea:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80030ec:	2300      	movs	r3, #0
 80030ee:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d902      	bls.n	80030fc <HAL_I2S_Init+0x134>
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	2bff      	cmp	r3, #255	; 0xff
 80030fa:	d907      	bls.n	800310c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003100:	f043 0210 	orr.w	r2, r3, #16
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e08f      	b.n	800322c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	691a      	ldr	r2, [r3, #16]
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	ea42 0103 	orr.w	r1, r2, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	69fa      	ldr	r2, [r7, #28]
 800311c:	430a      	orrs	r2, r1
 800311e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	69db      	ldr	r3, [r3, #28]
 8003126:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800312a:	f023 030f 	bic.w	r3, r3, #15
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	6851      	ldr	r1, [r2, #4]
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	6892      	ldr	r2, [r2, #8]
 8003136:	4311      	orrs	r1, r2
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	68d2      	ldr	r2, [r2, #12]
 800313c:	4311      	orrs	r1, r2
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	6992      	ldr	r2, [r2, #24]
 8003142:	430a      	orrs	r2, r1
 8003144:	431a      	orrs	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800314e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6a1b      	ldr	r3, [r3, #32]
 8003154:	2b01      	cmp	r3, #1
 8003156:	d161      	bne.n	800321c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4a38      	ldr	r2, [pc, #224]	; (800323c <HAL_I2S_Init+0x274>)
 800315c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a37      	ldr	r2, [pc, #220]	; (8003240 <HAL_I2S_Init+0x278>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d101      	bne.n	800316c <HAL_I2S_Init+0x1a4>
 8003168:	4b36      	ldr	r3, [pc, #216]	; (8003244 <HAL_I2S_Init+0x27c>)
 800316a:	e001      	b.n	8003170 <HAL_I2S_Init+0x1a8>
 800316c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003170:	69db      	ldr	r3, [r3, #28]
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	6812      	ldr	r2, [r2, #0]
 8003176:	4932      	ldr	r1, [pc, #200]	; (8003240 <HAL_I2S_Init+0x278>)
 8003178:	428a      	cmp	r2, r1
 800317a:	d101      	bne.n	8003180 <HAL_I2S_Init+0x1b8>
 800317c:	4a31      	ldr	r2, [pc, #196]	; (8003244 <HAL_I2S_Init+0x27c>)
 800317e:	e001      	b.n	8003184 <HAL_I2S_Init+0x1bc>
 8003180:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003184:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003188:	f023 030f 	bic.w	r3, r3, #15
 800318c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a2b      	ldr	r2, [pc, #172]	; (8003240 <HAL_I2S_Init+0x278>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d101      	bne.n	800319c <HAL_I2S_Init+0x1d4>
 8003198:	4b2a      	ldr	r3, [pc, #168]	; (8003244 <HAL_I2S_Init+0x27c>)
 800319a:	e001      	b.n	80031a0 <HAL_I2S_Init+0x1d8>
 800319c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031a0:	2202      	movs	r2, #2
 80031a2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a25      	ldr	r2, [pc, #148]	; (8003240 <HAL_I2S_Init+0x278>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d101      	bne.n	80031b2 <HAL_I2S_Init+0x1ea>
 80031ae:	4b25      	ldr	r3, [pc, #148]	; (8003244 <HAL_I2S_Init+0x27c>)
 80031b0:	e001      	b.n	80031b6 <HAL_I2S_Init+0x1ee>
 80031b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031b6:	69db      	ldr	r3, [r3, #28]
 80031b8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031c2:	d003      	beq.n	80031cc <HAL_I2S_Init+0x204>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d103      	bne.n	80031d4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80031cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031d0:	613b      	str	r3, [r7, #16]
 80031d2:	e001      	b.n	80031d8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80031d4:	2300      	movs	r3, #0
 80031d6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	b299      	uxth	r1, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	699b      	ldr	r3, [r3, #24]
 80031ec:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80031ee:	4303      	orrs	r3, r0
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	430b      	orrs	r3, r1
 80031f4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80031f6:	4313      	orrs	r3, r2
 80031f8:	b29a      	uxth	r2, r3
 80031fa:	897b      	ldrh	r3, [r7, #10]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	b29b      	uxth	r3, r3
 8003200:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003204:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a0d      	ldr	r2, [pc, #52]	; (8003240 <HAL_I2S_Init+0x278>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d101      	bne.n	8003214 <HAL_I2S_Init+0x24c>
 8003210:	4b0c      	ldr	r3, [pc, #48]	; (8003244 <HAL_I2S_Init+0x27c>)
 8003212:	e001      	b.n	8003218 <HAL_I2S_Init+0x250>
 8003214:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003218:	897a      	ldrh	r2, [r7, #10]
 800321a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2201      	movs	r2, #1
 8003226:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800322a:	2300      	movs	r3, #0
}
 800322c:	4618      	mov	r0, r3
 800322e:	3720      	adds	r7, #32
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	0800354d 	.word	0x0800354d
 8003238:	cccccccd 	.word	0xcccccccd
 800323c:	08003661 	.word	0x08003661
 8003240:	40003800 	.word	0x40003800
 8003244:	40003400 	.word	0x40003400

08003248 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b086      	sub	sp, #24
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	4613      	mov	r3, r2
 8003254:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d002      	beq.n	8003262 <HAL_I2S_Transmit_DMA+0x1a>
 800325c:	88fb      	ldrh	r3, [r7, #6]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d101      	bne.n	8003266 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e08e      	b.n	8003384 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800326c:	b2db      	uxtb	r3, r3
 800326e:	2b01      	cmp	r3, #1
 8003270:	d101      	bne.n	8003276 <HAL_I2S_Transmit_DMA+0x2e>
 8003272:	2302      	movs	r3, #2
 8003274:	e086      	b.n	8003384 <HAL_I2S_Transmit_DMA+0x13c>
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2201      	movs	r2, #1
 800327a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003284:	b2db      	uxtb	r3, r3
 8003286:	2b01      	cmp	r3, #1
 8003288:	d005      	beq.n	8003296 <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2200      	movs	r2, #0
 800328e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8003292:	2302      	movs	r3, #2
 8003294:	e076      	b.n	8003384 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2203      	movs	r2, #3
 800329a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2200      	movs	r2, #0
 80032a2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	68ba      	ldr	r2, [r7, #8]
 80032a8:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	69db      	ldr	r3, [r3, #28]
 80032b0:	f003 0307 	and.w	r3, r3, #7
 80032b4:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	2b03      	cmp	r3, #3
 80032ba:	d002      	beq.n	80032c2 <HAL_I2S_Transmit_DMA+0x7a>
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	2b05      	cmp	r3, #5
 80032c0:	d10a      	bne.n	80032d8 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 80032c2:	88fb      	ldrh	r3, [r7, #6]
 80032c4:	005b      	lsls	r3, r3, #1
 80032c6:	b29a      	uxth	r2, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 80032cc:	88fb      	ldrh	r3, [r7, #6]
 80032ce:	005b      	lsls	r3, r3, #1
 80032d0:	b29a      	uxth	r2, r3
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80032d6:	e005      	b.n	80032e4 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	88fa      	ldrh	r2, [r7, #6]
 80032dc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	88fa      	ldrh	r2, [r7, #6]
 80032e2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e8:	4a28      	ldr	r2, [pc, #160]	; (800338c <HAL_I2S_Transmit_DMA+0x144>)
 80032ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032f0:	4a27      	ldr	r2, [pc, #156]	; (8003390 <HAL_I2S_Transmit_DMA+0x148>)
 80032f2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032f8:	4a26      	ldr	r2, [pc, #152]	; (8003394 <HAL_I2S_Transmit_DMA+0x14c>)
 80032fa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003304:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800330c:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003312:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003314:	f7ff f9da 	bl	80026cc <HAL_DMA_Start_IT>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d00f      	beq.n	800333e <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003322:	f043 0208 	orr.w	r2, r3, #8
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2201      	movs	r2, #1
 800332e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2200      	movs	r2, #0
 8003336:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e022      	b.n	8003384 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	69db      	ldr	r3, [r3, #28]
 8003344:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003348:	2b00      	cmp	r3, #0
 800334a:	d107      	bne.n	800335c <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	69da      	ldr	r2, [r3, #28]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800335a:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f003 0302 	and.w	r3, r3, #2
 8003366:	2b00      	cmp	r3, #0
 8003368:	d107      	bne.n	800337a <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	685a      	ldr	r2, [r3, #4]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f042 0202 	orr.w	r2, r2, #2
 8003378:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2200      	movs	r2, #0
 800337e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8003382:	2300      	movs	r3, #0
}
 8003384:	4618      	mov	r0, r3
 8003386:	3718      	adds	r7, #24
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	0800342b 	.word	0x0800342b
 8003390:	080033e9 	.word	0x080033e9
 8003394:	08003447 	.word	0x08003447

08003398 <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 80033a0:	bf00      	nop
 80033a2:	370c      	adds	r7, #12
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr

080033ac <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80033b4:	bf00      	nop
 80033b6:	370c      	adds	r7, #12
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80033c8:	bf00      	nop
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80033dc:	bf00      	nop
 80033de:	370c      	adds	r7, #12
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr

080033e8 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033f4:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	69db      	ldr	r3, [r3, #28]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d10e      	bne.n	800341c <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	685a      	ldr	r2, [r3, #4]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f022 0202 	bic.w	r2, r2, #2
 800340c:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2200      	movs	r2, #0
 8003412:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 800341c:	68f8      	ldr	r0, [r7, #12]
 800341e:	f7ff ffc5 	bl	80033ac <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003422:	bf00      	nop
 8003424:	3710      	adds	r7, #16
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}

0800342a <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800342a:	b580      	push	{r7, lr}
 800342c:	b084      	sub	sp, #16
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003436:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8003438:	68f8      	ldr	r0, [r7, #12]
 800343a:	f7ff ffad 	bl	8003398 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800343e:	bf00      	nop
 8003440:	3710      	adds	r7, #16
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}

08003446 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8003446:	b580      	push	{r7, lr}
 8003448:	b084      	sub	sp, #16
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003452:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	685a      	ldr	r2, [r3, #4]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f022 0203 	bic.w	r2, r2, #3
 8003462:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2200      	movs	r2, #0
 8003468:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2200      	movs	r2, #0
 800346e:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347c:	f043 0208 	orr.w	r2, r3, #8
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8003484:	68f8      	ldr	r0, [r7, #12]
 8003486:	f7ff ffa5 	bl	80033d4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800348a:	bf00      	nop
 800348c:	3710      	adds	r7, #16
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}

08003492 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003492:	b580      	push	{r7, lr}
 8003494:	b082      	sub	sp, #8
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349e:	881a      	ldrh	r2, [r3, #0]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034aa:	1c9a      	adds	r2, r3, #2
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	3b01      	subs	r3, #1
 80034b8:	b29a      	uxth	r2, r3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d10e      	bne.n	80034e6 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	685a      	ldr	r2, [r3, #4]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80034d6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f7ff ff63 	bl	80033ac <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80034e6:	bf00      	nop
 80034e8:	3708      	adds	r7, #8
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}

080034ee <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80034ee:	b580      	push	{r7, lr}
 80034f0:	b082      	sub	sp, #8
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68da      	ldr	r2, [r3, #12]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003500:	b292      	uxth	r2, r2
 8003502:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003508:	1c9a      	adds	r2, r3, #2
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003512:	b29b      	uxth	r3, r3
 8003514:	3b01      	subs	r3, #1
 8003516:	b29a      	uxth	r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003520:	b29b      	uxth	r3, r3
 8003522:	2b00      	cmp	r3, #0
 8003524:	d10e      	bne.n	8003544 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	685a      	ldr	r2, [r3, #4]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003534:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2201      	movs	r2, #1
 800353a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f7ff ff3e 	bl	80033c0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003544:	bf00      	nop
 8003546:	3708      	adds	r7, #8
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b086      	sub	sp, #24
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003562:	b2db      	uxtb	r3, r3
 8003564:	2b04      	cmp	r3, #4
 8003566:	d13a      	bne.n	80035de <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	f003 0301 	and.w	r3, r3, #1
 800356e:	2b01      	cmp	r3, #1
 8003570:	d109      	bne.n	8003586 <I2S_IRQHandler+0x3a>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800357c:	2b40      	cmp	r3, #64	; 0x40
 800357e:	d102      	bne.n	8003586 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f7ff ffb4 	bl	80034ee <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800358c:	2b40      	cmp	r3, #64	; 0x40
 800358e:	d126      	bne.n	80035de <I2S_IRQHandler+0x92>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f003 0320 	and.w	r3, r3, #32
 800359a:	2b20      	cmp	r3, #32
 800359c:	d11f      	bne.n	80035de <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	685a      	ldr	r2, [r3, #4]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035ac:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80035ae:	2300      	movs	r3, #0
 80035b0:	613b      	str	r3, [r7, #16]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	613b      	str	r3, [r7, #16]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	613b      	str	r3, [r7, #16]
 80035c2:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035d0:	f043 0202 	orr.w	r2, r3, #2
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f7ff fefb 	bl	80033d4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2b03      	cmp	r3, #3
 80035e8:	d136      	bne.n	8003658 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	f003 0302 	and.w	r3, r3, #2
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d109      	bne.n	8003608 <I2S_IRQHandler+0xbc>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035fe:	2b80      	cmp	r3, #128	; 0x80
 8003600:	d102      	bne.n	8003608 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f7ff ff45 	bl	8003492 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	f003 0308 	and.w	r3, r3, #8
 800360e:	2b08      	cmp	r3, #8
 8003610:	d122      	bne.n	8003658 <I2S_IRQHandler+0x10c>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f003 0320 	and.w	r3, r3, #32
 800361c:	2b20      	cmp	r3, #32
 800361e:	d11b      	bne.n	8003658 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	685a      	ldr	r2, [r3, #4]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800362e:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003630:	2300      	movs	r3, #0
 8003632:	60fb      	str	r3, [r7, #12]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	60fb      	str	r3, [r7, #12]
 800363c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2201      	movs	r2, #1
 8003642:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800364a:	f043 0204 	orr.w	r2, r3, #4
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f7ff febe 	bl	80033d4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003658:	bf00      	nop
 800365a:	3718      	adds	r7, #24
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b088      	sub	sp, #32
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4aa2      	ldr	r2, [pc, #648]	; (8003900 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d101      	bne.n	800367e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800367a:	4ba2      	ldr	r3, [pc, #648]	; (8003904 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800367c:	e001      	b.n	8003682 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800367e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a9b      	ldr	r2, [pc, #620]	; (8003900 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d101      	bne.n	800369c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003698:	4b9a      	ldr	r3, [pc, #616]	; (8003904 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800369a:	e001      	b.n	80036a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800369c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036ac:	d004      	beq.n	80036b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	f040 8099 	bne.w	80037ea <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	f003 0302 	and.w	r3, r3, #2
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d107      	bne.n	80036d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d002      	beq.n	80036d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f000 f925 	bl	800391c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	f003 0301 	and.w	r3, r3, #1
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d107      	bne.n	80036ec <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d002      	beq.n	80036ec <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f000 f9c8 	bl	8003a7c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036f2:	2b40      	cmp	r3, #64	; 0x40
 80036f4:	d13a      	bne.n	800376c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	f003 0320 	and.w	r3, r3, #32
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d035      	beq.n	800376c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a7e      	ldr	r2, [pc, #504]	; (8003900 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d101      	bne.n	800370e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800370a:	4b7e      	ldr	r3, [pc, #504]	; (8003904 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800370c:	e001      	b.n	8003712 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800370e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003712:	685a      	ldr	r2, [r3, #4]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4979      	ldr	r1, [pc, #484]	; (8003900 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800371a:	428b      	cmp	r3, r1
 800371c:	d101      	bne.n	8003722 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800371e:	4b79      	ldr	r3, [pc, #484]	; (8003904 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003720:	e001      	b.n	8003726 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003722:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003726:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800372a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	685a      	ldr	r2, [r3, #4]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800373a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800373c:	2300      	movs	r3, #0
 800373e:	60fb      	str	r3, [r7, #12]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	60fb      	str	r3, [r7, #12]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	60fb      	str	r3, [r7, #12]
 8003750:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2201      	movs	r2, #1
 8003756:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800375e:	f043 0202 	orr.w	r2, r3, #2
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f7ff fe34 	bl	80033d4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	f003 0308 	and.w	r3, r3, #8
 8003772:	2b08      	cmp	r3, #8
 8003774:	f040 80be 	bne.w	80038f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	f003 0320 	and.w	r3, r3, #32
 800377e:	2b00      	cmp	r3, #0
 8003780:	f000 80b8 	beq.w	80038f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	685a      	ldr	r2, [r3, #4]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003792:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a59      	ldr	r2, [pc, #356]	; (8003900 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d101      	bne.n	80037a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800379e:	4b59      	ldr	r3, [pc, #356]	; (8003904 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80037a0:	e001      	b.n	80037a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80037a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037a6:	685a      	ldr	r2, [r3, #4]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4954      	ldr	r1, [pc, #336]	; (8003900 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80037ae:	428b      	cmp	r3, r1
 80037b0:	d101      	bne.n	80037b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80037b2:	4b54      	ldr	r3, [pc, #336]	; (8003904 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80037b4:	e001      	b.n	80037ba <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80037b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037ba:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037be:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80037c0:	2300      	movs	r3, #0
 80037c2:	60bb      	str	r3, [r7, #8]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	60bb      	str	r3, [r7, #8]
 80037cc:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2201      	movs	r2, #1
 80037d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037da:	f043 0204 	orr.w	r2, r3, #4
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f7ff fdf6 	bl	80033d4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80037e8:	e084      	b.n	80038f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80037ea:	69bb      	ldr	r3, [r7, #24]
 80037ec:	f003 0302 	and.w	r3, r3, #2
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d107      	bne.n	8003804 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d002      	beq.n	8003804 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 f8be 	bl	8003980 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	f003 0301 	and.w	r3, r3, #1
 800380a:	2b01      	cmp	r3, #1
 800380c:	d107      	bne.n	800381e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003814:	2b00      	cmp	r3, #0
 8003816:	d002      	beq.n	800381e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f000 f8fd 	bl	8003a18 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003824:	2b40      	cmp	r3, #64	; 0x40
 8003826:	d12f      	bne.n	8003888 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	f003 0320 	and.w	r3, r3, #32
 800382e:	2b00      	cmp	r3, #0
 8003830:	d02a      	beq.n	8003888 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	685a      	ldr	r2, [r3, #4]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003840:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a2e      	ldr	r2, [pc, #184]	; (8003900 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d101      	bne.n	8003850 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800384c:	4b2d      	ldr	r3, [pc, #180]	; (8003904 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800384e:	e001      	b.n	8003854 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003850:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003854:	685a      	ldr	r2, [r3, #4]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4929      	ldr	r1, [pc, #164]	; (8003900 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800385c:	428b      	cmp	r3, r1
 800385e:	d101      	bne.n	8003864 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003860:	4b28      	ldr	r3, [pc, #160]	; (8003904 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003862:	e001      	b.n	8003868 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003864:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003868:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800386c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2201      	movs	r2, #1
 8003872:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800387a:	f043 0202 	orr.w	r2, r3, #2
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f7ff fda6 	bl	80033d4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	f003 0308 	and.w	r3, r3, #8
 800388e:	2b08      	cmp	r3, #8
 8003890:	d131      	bne.n	80038f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	f003 0320 	and.w	r3, r3, #32
 8003898:	2b00      	cmp	r3, #0
 800389a:	d02c      	beq.n	80038f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a17      	ldr	r2, [pc, #92]	; (8003900 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d101      	bne.n	80038aa <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80038a6:	4b17      	ldr	r3, [pc, #92]	; (8003904 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80038a8:	e001      	b.n	80038ae <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80038aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038ae:	685a      	ldr	r2, [r3, #4]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4912      	ldr	r1, [pc, #72]	; (8003900 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80038b6:	428b      	cmp	r3, r1
 80038b8:	d101      	bne.n	80038be <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80038ba:	4b12      	ldr	r3, [pc, #72]	; (8003904 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80038bc:	e001      	b.n	80038c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80038be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038c2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038c6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	685a      	ldr	r2, [r3, #4]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80038d6:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e4:	f043 0204 	orr.w	r2, r3, #4
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f7ff fd71 	bl	80033d4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80038f2:	e000      	b.n	80038f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80038f4:	bf00      	nop
}
 80038f6:	bf00      	nop
 80038f8:	3720      	adds	r7, #32
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	40003800 	.word	0x40003800
 8003904:	40003400 	.word	0x40003400

08003908 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003910:	bf00      	nop
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003928:	1c99      	adds	r1, r3, #2
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	6251      	str	r1, [r2, #36]	; 0x24
 800392e:	881a      	ldrh	r2, [r3, #0]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800393a:	b29b      	uxth	r3, r3
 800393c:	3b01      	subs	r3, #1
 800393e:	b29a      	uxth	r2, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003948:	b29b      	uxth	r3, r3
 800394a:	2b00      	cmp	r3, #0
 800394c:	d113      	bne.n	8003976 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	685a      	ldr	r2, [r3, #4]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800395c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003962:	b29b      	uxth	r3, r3
 8003964:	2b00      	cmp	r3, #0
 8003966:	d106      	bne.n	8003976 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f7ff ffc9 	bl	8003908 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003976:	bf00      	nop
 8003978:	3708      	adds	r7, #8
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
	...

08003980 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398c:	1c99      	adds	r1, r3, #2
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	6251      	str	r1, [r2, #36]	; 0x24
 8003992:	8819      	ldrh	r1, [r3, #0]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a1d      	ldr	r2, [pc, #116]	; (8003a10 <I2SEx_TxISR_I2SExt+0x90>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d101      	bne.n	80039a2 <I2SEx_TxISR_I2SExt+0x22>
 800399e:	4b1d      	ldr	r3, [pc, #116]	; (8003a14 <I2SEx_TxISR_I2SExt+0x94>)
 80039a0:	e001      	b.n	80039a6 <I2SEx_TxISR_I2SExt+0x26>
 80039a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039a6:	460a      	mov	r2, r1
 80039a8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	3b01      	subs	r3, #1
 80039b2:	b29a      	uxth	r2, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039bc:	b29b      	uxth	r3, r3
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d121      	bne.n	8003a06 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a12      	ldr	r2, [pc, #72]	; (8003a10 <I2SEx_TxISR_I2SExt+0x90>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d101      	bne.n	80039d0 <I2SEx_TxISR_I2SExt+0x50>
 80039cc:	4b11      	ldr	r3, [pc, #68]	; (8003a14 <I2SEx_TxISR_I2SExt+0x94>)
 80039ce:	e001      	b.n	80039d4 <I2SEx_TxISR_I2SExt+0x54>
 80039d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039d4:	685a      	ldr	r2, [r3, #4]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	490d      	ldr	r1, [pc, #52]	; (8003a10 <I2SEx_TxISR_I2SExt+0x90>)
 80039dc:	428b      	cmp	r3, r1
 80039de:	d101      	bne.n	80039e4 <I2SEx_TxISR_I2SExt+0x64>
 80039e0:	4b0c      	ldr	r3, [pc, #48]	; (8003a14 <I2SEx_TxISR_I2SExt+0x94>)
 80039e2:	e001      	b.n	80039e8 <I2SEx_TxISR_I2SExt+0x68>
 80039e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039e8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80039ec:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039f2:	b29b      	uxth	r3, r3
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d106      	bne.n	8003a06 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f7ff ff81 	bl	8003908 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a06:	bf00      	nop
 8003a08:	3708      	adds	r7, #8
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	40003800 	.word	0x40003800
 8003a14:	40003400 	.word	0x40003400

08003a18 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	68d8      	ldr	r0, [r3, #12]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a2a:	1c99      	adds	r1, r3, #2
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003a30:	b282      	uxth	r2, r0
 8003a32:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	3b01      	subs	r3, #1
 8003a3c:	b29a      	uxth	r2, r3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d113      	bne.n	8003a74 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	685a      	ldr	r2, [r3, #4]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a5a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d106      	bne.n	8003a74 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f7ff ff4a 	bl	8003908 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a74:	bf00      	nop
 8003a76:	3708      	adds	r7, #8
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a20      	ldr	r2, [pc, #128]	; (8003b0c <I2SEx_RxISR_I2SExt+0x90>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d101      	bne.n	8003a92 <I2SEx_RxISR_I2SExt+0x16>
 8003a8e:	4b20      	ldr	r3, [pc, #128]	; (8003b10 <I2SEx_RxISR_I2SExt+0x94>)
 8003a90:	e001      	b.n	8003a96 <I2SEx_RxISR_I2SExt+0x1a>
 8003a92:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a96:	68d8      	ldr	r0, [r3, #12]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a9c:	1c99      	adds	r1, r3, #2
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003aa2:	b282      	uxth	r2, r0
 8003aa4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	3b01      	subs	r3, #1
 8003aae:	b29a      	uxth	r2, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d121      	bne.n	8003b02 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a12      	ldr	r2, [pc, #72]	; (8003b0c <I2SEx_RxISR_I2SExt+0x90>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d101      	bne.n	8003acc <I2SEx_RxISR_I2SExt+0x50>
 8003ac8:	4b11      	ldr	r3, [pc, #68]	; (8003b10 <I2SEx_RxISR_I2SExt+0x94>)
 8003aca:	e001      	b.n	8003ad0 <I2SEx_RxISR_I2SExt+0x54>
 8003acc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ad0:	685a      	ldr	r2, [r3, #4]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	490d      	ldr	r1, [pc, #52]	; (8003b0c <I2SEx_RxISR_I2SExt+0x90>)
 8003ad8:	428b      	cmp	r3, r1
 8003ada:	d101      	bne.n	8003ae0 <I2SEx_RxISR_I2SExt+0x64>
 8003adc:	4b0c      	ldr	r3, [pc, #48]	; (8003b10 <I2SEx_RxISR_I2SExt+0x94>)
 8003ade:	e001      	b.n	8003ae4 <I2SEx_RxISR_I2SExt+0x68>
 8003ae0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ae4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ae8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d106      	bne.n	8003b02 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f7ff ff03 	bl	8003908 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b02:	bf00      	nop
 8003b04:	3708      	adds	r7, #8
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	40003800 	.word	0x40003800
 8003b10:	40003400 	.word	0x40003400

08003b14 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b086      	sub	sp, #24
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d101      	bne.n	8003b26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e25b      	b.n	8003fde <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0301 	and.w	r3, r3, #1
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d075      	beq.n	8003c1e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b32:	4ba3      	ldr	r3, [pc, #652]	; (8003dc0 <HAL_RCC_OscConfig+0x2ac>)
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	f003 030c 	and.w	r3, r3, #12
 8003b3a:	2b04      	cmp	r3, #4
 8003b3c:	d00c      	beq.n	8003b58 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b3e:	4ba0      	ldr	r3, [pc, #640]	; (8003dc0 <HAL_RCC_OscConfig+0x2ac>)
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b46:	2b08      	cmp	r3, #8
 8003b48:	d112      	bne.n	8003b70 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b4a:	4b9d      	ldr	r3, [pc, #628]	; (8003dc0 <HAL_RCC_OscConfig+0x2ac>)
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b56:	d10b      	bne.n	8003b70 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b58:	4b99      	ldr	r3, [pc, #612]	; (8003dc0 <HAL_RCC_OscConfig+0x2ac>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d05b      	beq.n	8003c1c <HAL_RCC_OscConfig+0x108>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d157      	bne.n	8003c1c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e236      	b.n	8003fde <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b78:	d106      	bne.n	8003b88 <HAL_RCC_OscConfig+0x74>
 8003b7a:	4b91      	ldr	r3, [pc, #580]	; (8003dc0 <HAL_RCC_OscConfig+0x2ac>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a90      	ldr	r2, [pc, #576]	; (8003dc0 <HAL_RCC_OscConfig+0x2ac>)
 8003b80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b84:	6013      	str	r3, [r2, #0]
 8003b86:	e01d      	b.n	8003bc4 <HAL_RCC_OscConfig+0xb0>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b90:	d10c      	bne.n	8003bac <HAL_RCC_OscConfig+0x98>
 8003b92:	4b8b      	ldr	r3, [pc, #556]	; (8003dc0 <HAL_RCC_OscConfig+0x2ac>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a8a      	ldr	r2, [pc, #552]	; (8003dc0 <HAL_RCC_OscConfig+0x2ac>)
 8003b98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b9c:	6013      	str	r3, [r2, #0]
 8003b9e:	4b88      	ldr	r3, [pc, #544]	; (8003dc0 <HAL_RCC_OscConfig+0x2ac>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a87      	ldr	r2, [pc, #540]	; (8003dc0 <HAL_RCC_OscConfig+0x2ac>)
 8003ba4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ba8:	6013      	str	r3, [r2, #0]
 8003baa:	e00b      	b.n	8003bc4 <HAL_RCC_OscConfig+0xb0>
 8003bac:	4b84      	ldr	r3, [pc, #528]	; (8003dc0 <HAL_RCC_OscConfig+0x2ac>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a83      	ldr	r2, [pc, #524]	; (8003dc0 <HAL_RCC_OscConfig+0x2ac>)
 8003bb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bb6:	6013      	str	r3, [r2, #0]
 8003bb8:	4b81      	ldr	r3, [pc, #516]	; (8003dc0 <HAL_RCC_OscConfig+0x2ac>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a80      	ldr	r2, [pc, #512]	; (8003dc0 <HAL_RCC_OscConfig+0x2ac>)
 8003bbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d013      	beq.n	8003bf4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bcc:	f7fe fbb2 	bl	8002334 <HAL_GetTick>
 8003bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bd2:	e008      	b.n	8003be6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bd4:	f7fe fbae 	bl	8002334 <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	2b64      	cmp	r3, #100	; 0x64
 8003be0:	d901      	bls.n	8003be6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e1fb      	b.n	8003fde <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003be6:	4b76      	ldr	r3, [pc, #472]	; (8003dc0 <HAL_RCC_OscConfig+0x2ac>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d0f0      	beq.n	8003bd4 <HAL_RCC_OscConfig+0xc0>
 8003bf2:	e014      	b.n	8003c1e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bf4:	f7fe fb9e 	bl	8002334 <HAL_GetTick>
 8003bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bfa:	e008      	b.n	8003c0e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bfc:	f7fe fb9a 	bl	8002334 <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	2b64      	cmp	r3, #100	; 0x64
 8003c08:	d901      	bls.n	8003c0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e1e7      	b.n	8003fde <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c0e:	4b6c      	ldr	r3, [pc, #432]	; (8003dc0 <HAL_RCC_OscConfig+0x2ac>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d1f0      	bne.n	8003bfc <HAL_RCC_OscConfig+0xe8>
 8003c1a:	e000      	b.n	8003c1e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0302 	and.w	r3, r3, #2
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d063      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c2a:	4b65      	ldr	r3, [pc, #404]	; (8003dc0 <HAL_RCC_OscConfig+0x2ac>)
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	f003 030c 	and.w	r3, r3, #12
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d00b      	beq.n	8003c4e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c36:	4b62      	ldr	r3, [pc, #392]	; (8003dc0 <HAL_RCC_OscConfig+0x2ac>)
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c3e:	2b08      	cmp	r3, #8
 8003c40:	d11c      	bne.n	8003c7c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c42:	4b5f      	ldr	r3, [pc, #380]	; (8003dc0 <HAL_RCC_OscConfig+0x2ac>)
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d116      	bne.n	8003c7c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c4e:	4b5c      	ldr	r3, [pc, #368]	; (8003dc0 <HAL_RCC_OscConfig+0x2ac>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0302 	and.w	r3, r3, #2
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d005      	beq.n	8003c66 <HAL_RCC_OscConfig+0x152>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d001      	beq.n	8003c66 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e1bb      	b.n	8003fde <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c66:	4b56      	ldr	r3, [pc, #344]	; (8003dc0 <HAL_RCC_OscConfig+0x2ac>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	00db      	lsls	r3, r3, #3
 8003c74:	4952      	ldr	r1, [pc, #328]	; (8003dc0 <HAL_RCC_OscConfig+0x2ac>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c7a:	e03a      	b.n	8003cf2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d020      	beq.n	8003cc6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c84:	4b4f      	ldr	r3, [pc, #316]	; (8003dc4 <HAL_RCC_OscConfig+0x2b0>)
 8003c86:	2201      	movs	r2, #1
 8003c88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c8a:	f7fe fb53 	bl	8002334 <HAL_GetTick>
 8003c8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c90:	e008      	b.n	8003ca4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c92:	f7fe fb4f 	bl	8002334 <HAL_GetTick>
 8003c96:	4602      	mov	r2, r0
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	2b02      	cmp	r3, #2
 8003c9e:	d901      	bls.n	8003ca4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ca0:	2303      	movs	r3, #3
 8003ca2:	e19c      	b.n	8003fde <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ca4:	4b46      	ldr	r3, [pc, #280]	; (8003dc0 <HAL_RCC_OscConfig+0x2ac>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0302 	and.w	r3, r3, #2
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d0f0      	beq.n	8003c92 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cb0:	4b43      	ldr	r3, [pc, #268]	; (8003dc0 <HAL_RCC_OscConfig+0x2ac>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	691b      	ldr	r3, [r3, #16]
 8003cbc:	00db      	lsls	r3, r3, #3
 8003cbe:	4940      	ldr	r1, [pc, #256]	; (8003dc0 <HAL_RCC_OscConfig+0x2ac>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	600b      	str	r3, [r1, #0]
 8003cc4:	e015      	b.n	8003cf2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cc6:	4b3f      	ldr	r3, [pc, #252]	; (8003dc4 <HAL_RCC_OscConfig+0x2b0>)
 8003cc8:	2200      	movs	r2, #0
 8003cca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ccc:	f7fe fb32 	bl	8002334 <HAL_GetTick>
 8003cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cd2:	e008      	b.n	8003ce6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cd4:	f7fe fb2e 	bl	8002334 <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	d901      	bls.n	8003ce6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e17b      	b.n	8003fde <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ce6:	4b36      	ldr	r3, [pc, #216]	; (8003dc0 <HAL_RCC_OscConfig+0x2ac>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0302 	and.w	r3, r3, #2
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d1f0      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0308 	and.w	r3, r3, #8
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d030      	beq.n	8003d60 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	695b      	ldr	r3, [r3, #20]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d016      	beq.n	8003d34 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d06:	4b30      	ldr	r3, [pc, #192]	; (8003dc8 <HAL_RCC_OscConfig+0x2b4>)
 8003d08:	2201      	movs	r2, #1
 8003d0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d0c:	f7fe fb12 	bl	8002334 <HAL_GetTick>
 8003d10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d12:	e008      	b.n	8003d26 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d14:	f7fe fb0e 	bl	8002334 <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	d901      	bls.n	8003d26 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e15b      	b.n	8003fde <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d26:	4b26      	ldr	r3, [pc, #152]	; (8003dc0 <HAL_RCC_OscConfig+0x2ac>)
 8003d28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d2a:	f003 0302 	and.w	r3, r3, #2
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d0f0      	beq.n	8003d14 <HAL_RCC_OscConfig+0x200>
 8003d32:	e015      	b.n	8003d60 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d34:	4b24      	ldr	r3, [pc, #144]	; (8003dc8 <HAL_RCC_OscConfig+0x2b4>)
 8003d36:	2200      	movs	r2, #0
 8003d38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d3a:	f7fe fafb 	bl	8002334 <HAL_GetTick>
 8003d3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d40:	e008      	b.n	8003d54 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d42:	f7fe faf7 	bl	8002334 <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d901      	bls.n	8003d54 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	e144      	b.n	8003fde <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d54:	4b1a      	ldr	r3, [pc, #104]	; (8003dc0 <HAL_RCC_OscConfig+0x2ac>)
 8003d56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d58:	f003 0302 	and.w	r3, r3, #2
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d1f0      	bne.n	8003d42 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0304 	and.w	r3, r3, #4
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	f000 80a0 	beq.w	8003eae <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d72:	4b13      	ldr	r3, [pc, #76]	; (8003dc0 <HAL_RCC_OscConfig+0x2ac>)
 8003d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d10f      	bne.n	8003d9e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d7e:	2300      	movs	r3, #0
 8003d80:	60bb      	str	r3, [r7, #8]
 8003d82:	4b0f      	ldr	r3, [pc, #60]	; (8003dc0 <HAL_RCC_OscConfig+0x2ac>)
 8003d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d86:	4a0e      	ldr	r2, [pc, #56]	; (8003dc0 <HAL_RCC_OscConfig+0x2ac>)
 8003d88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d8c:	6413      	str	r3, [r2, #64]	; 0x40
 8003d8e:	4b0c      	ldr	r3, [pc, #48]	; (8003dc0 <HAL_RCC_OscConfig+0x2ac>)
 8003d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d96:	60bb      	str	r3, [r7, #8]
 8003d98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d9e:	4b0b      	ldr	r3, [pc, #44]	; (8003dcc <HAL_RCC_OscConfig+0x2b8>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d121      	bne.n	8003dee <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003daa:	4b08      	ldr	r3, [pc, #32]	; (8003dcc <HAL_RCC_OscConfig+0x2b8>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a07      	ldr	r2, [pc, #28]	; (8003dcc <HAL_RCC_OscConfig+0x2b8>)
 8003db0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003db4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003db6:	f7fe fabd 	bl	8002334 <HAL_GetTick>
 8003dba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dbc:	e011      	b.n	8003de2 <HAL_RCC_OscConfig+0x2ce>
 8003dbe:	bf00      	nop
 8003dc0:	40023800 	.word	0x40023800
 8003dc4:	42470000 	.word	0x42470000
 8003dc8:	42470e80 	.word	0x42470e80
 8003dcc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dd0:	f7fe fab0 	bl	8002334 <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d901      	bls.n	8003de2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e0fd      	b.n	8003fde <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003de2:	4b81      	ldr	r3, [pc, #516]	; (8003fe8 <HAL_RCC_OscConfig+0x4d4>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d0f0      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d106      	bne.n	8003e04 <HAL_RCC_OscConfig+0x2f0>
 8003df6:	4b7d      	ldr	r3, [pc, #500]	; (8003fec <HAL_RCC_OscConfig+0x4d8>)
 8003df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dfa:	4a7c      	ldr	r2, [pc, #496]	; (8003fec <HAL_RCC_OscConfig+0x4d8>)
 8003dfc:	f043 0301 	orr.w	r3, r3, #1
 8003e00:	6713      	str	r3, [r2, #112]	; 0x70
 8003e02:	e01c      	b.n	8003e3e <HAL_RCC_OscConfig+0x32a>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	2b05      	cmp	r3, #5
 8003e0a:	d10c      	bne.n	8003e26 <HAL_RCC_OscConfig+0x312>
 8003e0c:	4b77      	ldr	r3, [pc, #476]	; (8003fec <HAL_RCC_OscConfig+0x4d8>)
 8003e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e10:	4a76      	ldr	r2, [pc, #472]	; (8003fec <HAL_RCC_OscConfig+0x4d8>)
 8003e12:	f043 0304 	orr.w	r3, r3, #4
 8003e16:	6713      	str	r3, [r2, #112]	; 0x70
 8003e18:	4b74      	ldr	r3, [pc, #464]	; (8003fec <HAL_RCC_OscConfig+0x4d8>)
 8003e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e1c:	4a73      	ldr	r2, [pc, #460]	; (8003fec <HAL_RCC_OscConfig+0x4d8>)
 8003e1e:	f043 0301 	orr.w	r3, r3, #1
 8003e22:	6713      	str	r3, [r2, #112]	; 0x70
 8003e24:	e00b      	b.n	8003e3e <HAL_RCC_OscConfig+0x32a>
 8003e26:	4b71      	ldr	r3, [pc, #452]	; (8003fec <HAL_RCC_OscConfig+0x4d8>)
 8003e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e2a:	4a70      	ldr	r2, [pc, #448]	; (8003fec <HAL_RCC_OscConfig+0x4d8>)
 8003e2c:	f023 0301 	bic.w	r3, r3, #1
 8003e30:	6713      	str	r3, [r2, #112]	; 0x70
 8003e32:	4b6e      	ldr	r3, [pc, #440]	; (8003fec <HAL_RCC_OscConfig+0x4d8>)
 8003e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e36:	4a6d      	ldr	r2, [pc, #436]	; (8003fec <HAL_RCC_OscConfig+0x4d8>)
 8003e38:	f023 0304 	bic.w	r3, r3, #4
 8003e3c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d015      	beq.n	8003e72 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e46:	f7fe fa75 	bl	8002334 <HAL_GetTick>
 8003e4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e4c:	e00a      	b.n	8003e64 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e4e:	f7fe fa71 	bl	8002334 <HAL_GetTick>
 8003e52:	4602      	mov	r2, r0
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d901      	bls.n	8003e64 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003e60:	2303      	movs	r3, #3
 8003e62:	e0bc      	b.n	8003fde <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e64:	4b61      	ldr	r3, [pc, #388]	; (8003fec <HAL_RCC_OscConfig+0x4d8>)
 8003e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e68:	f003 0302 	and.w	r3, r3, #2
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d0ee      	beq.n	8003e4e <HAL_RCC_OscConfig+0x33a>
 8003e70:	e014      	b.n	8003e9c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e72:	f7fe fa5f 	bl	8002334 <HAL_GetTick>
 8003e76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e78:	e00a      	b.n	8003e90 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e7a:	f7fe fa5b 	bl	8002334 <HAL_GetTick>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d901      	bls.n	8003e90 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	e0a6      	b.n	8003fde <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e90:	4b56      	ldr	r3, [pc, #344]	; (8003fec <HAL_RCC_OscConfig+0x4d8>)
 8003e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e94:	f003 0302 	and.w	r3, r3, #2
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d1ee      	bne.n	8003e7a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e9c:	7dfb      	ldrb	r3, [r7, #23]
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d105      	bne.n	8003eae <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ea2:	4b52      	ldr	r3, [pc, #328]	; (8003fec <HAL_RCC_OscConfig+0x4d8>)
 8003ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea6:	4a51      	ldr	r2, [pc, #324]	; (8003fec <HAL_RCC_OscConfig+0x4d8>)
 8003ea8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003eac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	699b      	ldr	r3, [r3, #24]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	f000 8092 	beq.w	8003fdc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003eb8:	4b4c      	ldr	r3, [pc, #304]	; (8003fec <HAL_RCC_OscConfig+0x4d8>)
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	f003 030c 	and.w	r3, r3, #12
 8003ec0:	2b08      	cmp	r3, #8
 8003ec2:	d05c      	beq.n	8003f7e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	699b      	ldr	r3, [r3, #24]
 8003ec8:	2b02      	cmp	r3, #2
 8003eca:	d141      	bne.n	8003f50 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ecc:	4b48      	ldr	r3, [pc, #288]	; (8003ff0 <HAL_RCC_OscConfig+0x4dc>)
 8003ece:	2200      	movs	r2, #0
 8003ed0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ed2:	f7fe fa2f 	bl	8002334 <HAL_GetTick>
 8003ed6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ed8:	e008      	b.n	8003eec <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003eda:	f7fe fa2b 	bl	8002334 <HAL_GetTick>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d901      	bls.n	8003eec <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	e078      	b.n	8003fde <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eec:	4b3f      	ldr	r3, [pc, #252]	; (8003fec <HAL_RCC_OscConfig+0x4d8>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d1f0      	bne.n	8003eda <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	69da      	ldr	r2, [r3, #28]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6a1b      	ldr	r3, [r3, #32]
 8003f00:	431a      	orrs	r2, r3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f06:	019b      	lsls	r3, r3, #6
 8003f08:	431a      	orrs	r2, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f0e:	085b      	lsrs	r3, r3, #1
 8003f10:	3b01      	subs	r3, #1
 8003f12:	041b      	lsls	r3, r3, #16
 8003f14:	431a      	orrs	r2, r3
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f1a:	061b      	lsls	r3, r3, #24
 8003f1c:	4933      	ldr	r1, [pc, #204]	; (8003fec <HAL_RCC_OscConfig+0x4d8>)
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f22:	4b33      	ldr	r3, [pc, #204]	; (8003ff0 <HAL_RCC_OscConfig+0x4dc>)
 8003f24:	2201      	movs	r2, #1
 8003f26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f28:	f7fe fa04 	bl	8002334 <HAL_GetTick>
 8003f2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f2e:	e008      	b.n	8003f42 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f30:	f7fe fa00 	bl	8002334 <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	d901      	bls.n	8003f42 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e04d      	b.n	8003fde <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f42:	4b2a      	ldr	r3, [pc, #168]	; (8003fec <HAL_RCC_OscConfig+0x4d8>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d0f0      	beq.n	8003f30 <HAL_RCC_OscConfig+0x41c>
 8003f4e:	e045      	b.n	8003fdc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f50:	4b27      	ldr	r3, [pc, #156]	; (8003ff0 <HAL_RCC_OscConfig+0x4dc>)
 8003f52:	2200      	movs	r2, #0
 8003f54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f56:	f7fe f9ed 	bl	8002334 <HAL_GetTick>
 8003f5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f5c:	e008      	b.n	8003f70 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f5e:	f7fe f9e9 	bl	8002334 <HAL_GetTick>
 8003f62:	4602      	mov	r2, r0
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d901      	bls.n	8003f70 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	e036      	b.n	8003fde <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f70:	4b1e      	ldr	r3, [pc, #120]	; (8003fec <HAL_RCC_OscConfig+0x4d8>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d1f0      	bne.n	8003f5e <HAL_RCC_OscConfig+0x44a>
 8003f7c:	e02e      	b.n	8003fdc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	699b      	ldr	r3, [r3, #24]
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d101      	bne.n	8003f8a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e029      	b.n	8003fde <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f8a:	4b18      	ldr	r3, [pc, #96]	; (8003fec <HAL_RCC_OscConfig+0x4d8>)
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	69db      	ldr	r3, [r3, #28]
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d11c      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d115      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003fac:	68fa      	ldr	r2, [r7, #12]
 8003fae:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d10d      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d106      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d001      	beq.n	8003fdc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e000      	b.n	8003fde <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003fdc:	2300      	movs	r3, #0
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3718      	adds	r7, #24
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	40007000 	.word	0x40007000
 8003fec:	40023800 	.word	0x40023800
 8003ff0:	42470060 	.word	0x42470060

08003ff4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d101      	bne.n	8004008 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e0cc      	b.n	80041a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004008:	4b68      	ldr	r3, [pc, #416]	; (80041ac <HAL_RCC_ClockConfig+0x1b8>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 030f 	and.w	r3, r3, #15
 8004010:	683a      	ldr	r2, [r7, #0]
 8004012:	429a      	cmp	r2, r3
 8004014:	d90c      	bls.n	8004030 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004016:	4b65      	ldr	r3, [pc, #404]	; (80041ac <HAL_RCC_ClockConfig+0x1b8>)
 8004018:	683a      	ldr	r2, [r7, #0]
 800401a:	b2d2      	uxtb	r2, r2
 800401c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800401e:	4b63      	ldr	r3, [pc, #396]	; (80041ac <HAL_RCC_ClockConfig+0x1b8>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 030f 	and.w	r3, r3, #15
 8004026:	683a      	ldr	r2, [r7, #0]
 8004028:	429a      	cmp	r2, r3
 800402a:	d001      	beq.n	8004030 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	e0b8      	b.n	80041a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 0302 	and.w	r3, r3, #2
 8004038:	2b00      	cmp	r3, #0
 800403a:	d020      	beq.n	800407e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0304 	and.w	r3, r3, #4
 8004044:	2b00      	cmp	r3, #0
 8004046:	d005      	beq.n	8004054 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004048:	4b59      	ldr	r3, [pc, #356]	; (80041b0 <HAL_RCC_ClockConfig+0x1bc>)
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	4a58      	ldr	r2, [pc, #352]	; (80041b0 <HAL_RCC_ClockConfig+0x1bc>)
 800404e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004052:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0308 	and.w	r3, r3, #8
 800405c:	2b00      	cmp	r3, #0
 800405e:	d005      	beq.n	800406c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004060:	4b53      	ldr	r3, [pc, #332]	; (80041b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	4a52      	ldr	r2, [pc, #328]	; (80041b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004066:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800406a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800406c:	4b50      	ldr	r3, [pc, #320]	; (80041b0 <HAL_RCC_ClockConfig+0x1bc>)
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	494d      	ldr	r1, [pc, #308]	; (80041b0 <HAL_RCC_ClockConfig+0x1bc>)
 800407a:	4313      	orrs	r3, r2
 800407c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0301 	and.w	r3, r3, #1
 8004086:	2b00      	cmp	r3, #0
 8004088:	d044      	beq.n	8004114 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	2b01      	cmp	r3, #1
 8004090:	d107      	bne.n	80040a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004092:	4b47      	ldr	r3, [pc, #284]	; (80041b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d119      	bne.n	80040d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e07f      	b.n	80041a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	2b02      	cmp	r3, #2
 80040a8:	d003      	beq.n	80040b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040ae:	2b03      	cmp	r3, #3
 80040b0:	d107      	bne.n	80040c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040b2:	4b3f      	ldr	r3, [pc, #252]	; (80041b0 <HAL_RCC_ClockConfig+0x1bc>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d109      	bne.n	80040d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e06f      	b.n	80041a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040c2:	4b3b      	ldr	r3, [pc, #236]	; (80041b0 <HAL_RCC_ClockConfig+0x1bc>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 0302 	and.w	r3, r3, #2
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d101      	bne.n	80040d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e067      	b.n	80041a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040d2:	4b37      	ldr	r3, [pc, #220]	; (80041b0 <HAL_RCC_ClockConfig+0x1bc>)
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	f023 0203 	bic.w	r2, r3, #3
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	4934      	ldr	r1, [pc, #208]	; (80041b0 <HAL_RCC_ClockConfig+0x1bc>)
 80040e0:	4313      	orrs	r3, r2
 80040e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040e4:	f7fe f926 	bl	8002334 <HAL_GetTick>
 80040e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040ea:	e00a      	b.n	8004102 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040ec:	f7fe f922 	bl	8002334 <HAL_GetTick>
 80040f0:	4602      	mov	r2, r0
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d901      	bls.n	8004102 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	e04f      	b.n	80041a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004102:	4b2b      	ldr	r3, [pc, #172]	; (80041b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	f003 020c 	and.w	r2, r3, #12
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	429a      	cmp	r2, r3
 8004112:	d1eb      	bne.n	80040ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004114:	4b25      	ldr	r3, [pc, #148]	; (80041ac <HAL_RCC_ClockConfig+0x1b8>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 030f 	and.w	r3, r3, #15
 800411c:	683a      	ldr	r2, [r7, #0]
 800411e:	429a      	cmp	r2, r3
 8004120:	d20c      	bcs.n	800413c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004122:	4b22      	ldr	r3, [pc, #136]	; (80041ac <HAL_RCC_ClockConfig+0x1b8>)
 8004124:	683a      	ldr	r2, [r7, #0]
 8004126:	b2d2      	uxtb	r2, r2
 8004128:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800412a:	4b20      	ldr	r3, [pc, #128]	; (80041ac <HAL_RCC_ClockConfig+0x1b8>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 030f 	and.w	r3, r3, #15
 8004132:	683a      	ldr	r2, [r7, #0]
 8004134:	429a      	cmp	r2, r3
 8004136:	d001      	beq.n	800413c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e032      	b.n	80041a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0304 	and.w	r3, r3, #4
 8004144:	2b00      	cmp	r3, #0
 8004146:	d008      	beq.n	800415a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004148:	4b19      	ldr	r3, [pc, #100]	; (80041b0 <HAL_RCC_ClockConfig+0x1bc>)
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	4916      	ldr	r1, [pc, #88]	; (80041b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004156:	4313      	orrs	r3, r2
 8004158:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0308 	and.w	r3, r3, #8
 8004162:	2b00      	cmp	r3, #0
 8004164:	d009      	beq.n	800417a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004166:	4b12      	ldr	r3, [pc, #72]	; (80041b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	00db      	lsls	r3, r3, #3
 8004174:	490e      	ldr	r1, [pc, #56]	; (80041b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004176:	4313      	orrs	r3, r2
 8004178:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800417a:	f000 f821 	bl	80041c0 <HAL_RCC_GetSysClockFreq>
 800417e:	4601      	mov	r1, r0
 8004180:	4b0b      	ldr	r3, [pc, #44]	; (80041b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	091b      	lsrs	r3, r3, #4
 8004186:	f003 030f 	and.w	r3, r3, #15
 800418a:	4a0a      	ldr	r2, [pc, #40]	; (80041b4 <HAL_RCC_ClockConfig+0x1c0>)
 800418c:	5cd3      	ldrb	r3, [r2, r3]
 800418e:	fa21 f303 	lsr.w	r3, r1, r3
 8004192:	4a09      	ldr	r2, [pc, #36]	; (80041b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004194:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004196:	4b09      	ldr	r3, [pc, #36]	; (80041bc <HAL_RCC_ClockConfig+0x1c8>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4618      	mov	r0, r3
 800419c:	f7fe f886 	bl	80022ac <HAL_InitTick>

  return HAL_OK;
 80041a0:	2300      	movs	r3, #0
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3710      	adds	r7, #16
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	40023c00 	.word	0x40023c00
 80041b0:	40023800 	.word	0x40023800
 80041b4:	08042cf4 	.word	0x08042cf4
 80041b8:	20000194 	.word	0x20000194
 80041bc:	20000198 	.word	0x20000198

080041c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041c2:	b085      	sub	sp, #20
 80041c4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80041c6:	2300      	movs	r3, #0
 80041c8:	607b      	str	r3, [r7, #4]
 80041ca:	2300      	movs	r3, #0
 80041cc:	60fb      	str	r3, [r7, #12]
 80041ce:	2300      	movs	r3, #0
 80041d0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80041d2:	2300      	movs	r3, #0
 80041d4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041d6:	4b50      	ldr	r3, [pc, #320]	; (8004318 <HAL_RCC_GetSysClockFreq+0x158>)
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	f003 030c 	and.w	r3, r3, #12
 80041de:	2b04      	cmp	r3, #4
 80041e0:	d007      	beq.n	80041f2 <HAL_RCC_GetSysClockFreq+0x32>
 80041e2:	2b08      	cmp	r3, #8
 80041e4:	d008      	beq.n	80041f8 <HAL_RCC_GetSysClockFreq+0x38>
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	f040 808d 	bne.w	8004306 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80041ec:	4b4b      	ldr	r3, [pc, #300]	; (800431c <HAL_RCC_GetSysClockFreq+0x15c>)
 80041ee:	60bb      	str	r3, [r7, #8]
       break;
 80041f0:	e08c      	b.n	800430c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80041f2:	4b4b      	ldr	r3, [pc, #300]	; (8004320 <HAL_RCC_GetSysClockFreq+0x160>)
 80041f4:	60bb      	str	r3, [r7, #8]
      break;
 80041f6:	e089      	b.n	800430c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041f8:	4b47      	ldr	r3, [pc, #284]	; (8004318 <HAL_RCC_GetSysClockFreq+0x158>)
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004200:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004202:	4b45      	ldr	r3, [pc, #276]	; (8004318 <HAL_RCC_GetSysClockFreq+0x158>)
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d023      	beq.n	8004256 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800420e:	4b42      	ldr	r3, [pc, #264]	; (8004318 <HAL_RCC_GetSysClockFreq+0x158>)
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	099b      	lsrs	r3, r3, #6
 8004214:	f04f 0400 	mov.w	r4, #0
 8004218:	f240 11ff 	movw	r1, #511	; 0x1ff
 800421c:	f04f 0200 	mov.w	r2, #0
 8004220:	ea03 0501 	and.w	r5, r3, r1
 8004224:	ea04 0602 	and.w	r6, r4, r2
 8004228:	4a3d      	ldr	r2, [pc, #244]	; (8004320 <HAL_RCC_GetSysClockFreq+0x160>)
 800422a:	fb02 f106 	mul.w	r1, r2, r6
 800422e:	2200      	movs	r2, #0
 8004230:	fb02 f205 	mul.w	r2, r2, r5
 8004234:	440a      	add	r2, r1
 8004236:	493a      	ldr	r1, [pc, #232]	; (8004320 <HAL_RCC_GetSysClockFreq+0x160>)
 8004238:	fba5 0101 	umull	r0, r1, r5, r1
 800423c:	1853      	adds	r3, r2, r1
 800423e:	4619      	mov	r1, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f04f 0400 	mov.w	r4, #0
 8004246:	461a      	mov	r2, r3
 8004248:	4623      	mov	r3, r4
 800424a:	f7fb ffc5 	bl	80001d8 <__aeabi_uldivmod>
 800424e:	4603      	mov	r3, r0
 8004250:	460c      	mov	r4, r1
 8004252:	60fb      	str	r3, [r7, #12]
 8004254:	e049      	b.n	80042ea <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004256:	4b30      	ldr	r3, [pc, #192]	; (8004318 <HAL_RCC_GetSysClockFreq+0x158>)
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	099b      	lsrs	r3, r3, #6
 800425c:	f04f 0400 	mov.w	r4, #0
 8004260:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004264:	f04f 0200 	mov.w	r2, #0
 8004268:	ea03 0501 	and.w	r5, r3, r1
 800426c:	ea04 0602 	and.w	r6, r4, r2
 8004270:	4629      	mov	r1, r5
 8004272:	4632      	mov	r2, r6
 8004274:	f04f 0300 	mov.w	r3, #0
 8004278:	f04f 0400 	mov.w	r4, #0
 800427c:	0154      	lsls	r4, r2, #5
 800427e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004282:	014b      	lsls	r3, r1, #5
 8004284:	4619      	mov	r1, r3
 8004286:	4622      	mov	r2, r4
 8004288:	1b49      	subs	r1, r1, r5
 800428a:	eb62 0206 	sbc.w	r2, r2, r6
 800428e:	f04f 0300 	mov.w	r3, #0
 8004292:	f04f 0400 	mov.w	r4, #0
 8004296:	0194      	lsls	r4, r2, #6
 8004298:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800429c:	018b      	lsls	r3, r1, #6
 800429e:	1a5b      	subs	r3, r3, r1
 80042a0:	eb64 0402 	sbc.w	r4, r4, r2
 80042a4:	f04f 0100 	mov.w	r1, #0
 80042a8:	f04f 0200 	mov.w	r2, #0
 80042ac:	00e2      	lsls	r2, r4, #3
 80042ae:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80042b2:	00d9      	lsls	r1, r3, #3
 80042b4:	460b      	mov	r3, r1
 80042b6:	4614      	mov	r4, r2
 80042b8:	195b      	adds	r3, r3, r5
 80042ba:	eb44 0406 	adc.w	r4, r4, r6
 80042be:	f04f 0100 	mov.w	r1, #0
 80042c2:	f04f 0200 	mov.w	r2, #0
 80042c6:	02a2      	lsls	r2, r4, #10
 80042c8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80042cc:	0299      	lsls	r1, r3, #10
 80042ce:	460b      	mov	r3, r1
 80042d0:	4614      	mov	r4, r2
 80042d2:	4618      	mov	r0, r3
 80042d4:	4621      	mov	r1, r4
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f04f 0400 	mov.w	r4, #0
 80042dc:	461a      	mov	r2, r3
 80042de:	4623      	mov	r3, r4
 80042e0:	f7fb ff7a 	bl	80001d8 <__aeabi_uldivmod>
 80042e4:	4603      	mov	r3, r0
 80042e6:	460c      	mov	r4, r1
 80042e8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80042ea:	4b0b      	ldr	r3, [pc, #44]	; (8004318 <HAL_RCC_GetSysClockFreq+0x158>)
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	0c1b      	lsrs	r3, r3, #16
 80042f0:	f003 0303 	and.w	r3, r3, #3
 80042f4:	3301      	adds	r3, #1
 80042f6:	005b      	lsls	r3, r3, #1
 80042f8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80042fa:	68fa      	ldr	r2, [r7, #12]
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004302:	60bb      	str	r3, [r7, #8]
      break;
 8004304:	e002      	b.n	800430c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004306:	4b05      	ldr	r3, [pc, #20]	; (800431c <HAL_RCC_GetSysClockFreq+0x15c>)
 8004308:	60bb      	str	r3, [r7, #8]
      break;
 800430a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800430c:	68bb      	ldr	r3, [r7, #8]
}
 800430e:	4618      	mov	r0, r3
 8004310:	3714      	adds	r7, #20
 8004312:	46bd      	mov	sp, r7
 8004314:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004316:	bf00      	nop
 8004318:	40023800 	.word	0x40023800
 800431c:	00f42400 	.word	0x00f42400
 8004320:	017d7840 	.word	0x017d7840

08004324 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b086      	sub	sp, #24
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800432c:	2300      	movs	r3, #0
 800432e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004330:	2300      	movs	r3, #0
 8004332:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0301 	and.w	r3, r3, #1
 800433c:	2b00      	cmp	r3, #0
 800433e:	d105      	bne.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004348:	2b00      	cmp	r3, #0
 800434a:	d038      	beq.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800434c:	4b68      	ldr	r3, [pc, #416]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800434e:	2200      	movs	r2, #0
 8004350:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004352:	f7fd ffef 	bl	8002334 <HAL_GetTick>
 8004356:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004358:	e008      	b.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800435a:	f7fd ffeb 	bl	8002334 <HAL_GetTick>
 800435e:	4602      	mov	r2, r0
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	2b02      	cmp	r3, #2
 8004366:	d901      	bls.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004368:	2303      	movs	r3, #3
 800436a:	e0bd      	b.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800436c:	4b61      	ldr	r3, [pc, #388]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004374:	2b00      	cmp	r3, #0
 8004376:	d1f0      	bne.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	685a      	ldr	r2, [r3, #4]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	019b      	lsls	r3, r3, #6
 8004382:	431a      	orrs	r2, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	071b      	lsls	r3, r3, #28
 800438a:	495a      	ldr	r1, [pc, #360]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800438c:	4313      	orrs	r3, r2
 800438e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004392:	4b57      	ldr	r3, [pc, #348]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004394:	2201      	movs	r2, #1
 8004396:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004398:	f7fd ffcc 	bl	8002334 <HAL_GetTick>
 800439c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800439e:	e008      	b.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80043a0:	f7fd ffc8 	bl	8002334 <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d901      	bls.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e09a      	b.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043b2:	4b50      	ldr	r3, [pc, #320]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d0f0      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0302 	and.w	r3, r3, #2
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	f000 8083 	beq.w	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80043cc:	2300      	movs	r3, #0
 80043ce:	60fb      	str	r3, [r7, #12]
 80043d0:	4b48      	ldr	r3, [pc, #288]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d4:	4a47      	ldr	r2, [pc, #284]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043da:	6413      	str	r3, [r2, #64]	; 0x40
 80043dc:	4b45      	ldr	r3, [pc, #276]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043e4:	60fb      	str	r3, [r7, #12]
 80043e6:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80043e8:	4b43      	ldr	r3, [pc, #268]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a42      	ldr	r2, [pc, #264]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80043ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043f2:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80043f4:	f7fd ff9e 	bl	8002334 <HAL_GetTick>
 80043f8:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80043fa:	e008      	b.n	800440e <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80043fc:	f7fd ff9a 	bl	8002334 <HAL_GetTick>
 8004400:	4602      	mov	r2, r0
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	2b02      	cmp	r3, #2
 8004408:	d901      	bls.n	800440e <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800440a:	2303      	movs	r3, #3
 800440c:	e06c      	b.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800440e:	4b3a      	ldr	r3, [pc, #232]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004416:	2b00      	cmp	r3, #0
 8004418:	d0f0      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800441a:	4b36      	ldr	r3, [pc, #216]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800441c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800441e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004422:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d02f      	beq.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x166>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004432:	693a      	ldr	r2, [r7, #16]
 8004434:	429a      	cmp	r2, r3
 8004436:	d028      	beq.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004438:	4b2e      	ldr	r3, [pc, #184]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800443a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800443c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004440:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004442:	4b2e      	ldr	r3, [pc, #184]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004444:	2201      	movs	r2, #1
 8004446:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004448:	4b2c      	ldr	r3, [pc, #176]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800444a:	2200      	movs	r2, #0
 800444c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800444e:	4a29      	ldr	r2, [pc, #164]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004454:	4b27      	ldr	r3, [pc, #156]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004458:	f003 0301 	and.w	r3, r3, #1
 800445c:	2b01      	cmp	r3, #1
 800445e:	d114      	bne.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004460:	f7fd ff68 	bl	8002334 <HAL_GetTick>
 8004464:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004466:	e00a      	b.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004468:	f7fd ff64 	bl	8002334 <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	f241 3288 	movw	r2, #5000	; 0x1388
 8004476:	4293      	cmp	r3, r2
 8004478:	d901      	bls.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	e034      	b.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800447e:	4b1d      	ldr	r3, [pc, #116]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004482:	f003 0302 	and.w	r3, r3, #2
 8004486:	2b00      	cmp	r3, #0
 8004488:	d0ee      	beq.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004492:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004496:	d10d      	bne.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8004498:	4b16      	ldr	r3, [pc, #88]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	691b      	ldr	r3, [r3, #16]
 80044a4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80044a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044ac:	4911      	ldr	r1, [pc, #68]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ae:	4313      	orrs	r3, r2
 80044b0:	608b      	str	r3, [r1, #8]
 80044b2:	e005      	b.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80044b4:	4b0f      	ldr	r3, [pc, #60]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	4a0e      	ldr	r2, [pc, #56]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ba:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80044be:	6093      	str	r3, [r2, #8]
 80044c0:	4b0c      	ldr	r3, [pc, #48]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	691b      	ldr	r3, [r3, #16]
 80044c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044cc:	4909      	ldr	r1, [pc, #36]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ce:	4313      	orrs	r3, r2
 80044d0:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0308 	and.w	r3, r3, #8
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d003      	beq.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	7d1a      	ldrb	r2, [r3, #20]
 80044e2:	4b07      	ldr	r3, [pc, #28]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80044e4:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80044e6:	2300      	movs	r3, #0
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3718      	adds	r7, #24
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	42470068 	.word	0x42470068
 80044f4:	40023800 	.word	0x40023800
 80044f8:	40007000 	.word	0x40007000
 80044fc:	42470e40 	.word	0x42470e40
 8004500:	424711e0 	.word	0x424711e0

08004504 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004504:	b480      	push	{r7}
 8004506:	b087      	sub	sp, #28
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800450c:	2300      	movs	r3, #0
 800450e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004510:	2300      	movs	r3, #0
 8004512:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004514:	2300      	movs	r3, #0
 8004516:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004518:	2300      	movs	r3, #0
 800451a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2b01      	cmp	r3, #1
 8004520:	d13f      	bne.n	80045a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004522:	4b23      	ldr	r3, [pc, #140]	; (80045b0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800452a:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d004      	beq.n	800453c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004532:	2b01      	cmp	r3, #1
 8004534:	d131      	bne.n	800459a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004536:	4b1f      	ldr	r3, [pc, #124]	; (80045b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004538:	617b      	str	r3, [r7, #20]
          break;
 800453a:	e031      	b.n	80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800453c:	4b1c      	ldr	r3, [pc, #112]	; (80045b0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004544:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004548:	d109      	bne.n	800455e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800454a:	4b19      	ldr	r3, [pc, #100]	; (80045b0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800454c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004550:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004554:	4a18      	ldr	r2, [pc, #96]	; (80045b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004556:	fbb2 f3f3 	udiv	r3, r2, r3
 800455a:	613b      	str	r3, [r7, #16]
 800455c:	e008      	b.n	8004570 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800455e:	4b14      	ldr	r3, [pc, #80]	; (80045b0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004560:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004564:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004568:	4a14      	ldr	r2, [pc, #80]	; (80045bc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800456a:	fbb2 f3f3 	udiv	r3, r2, r3
 800456e:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004570:	4b0f      	ldr	r3, [pc, #60]	; (80045b0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004572:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004576:	099b      	lsrs	r3, r3, #6
 8004578:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	fb02 f303 	mul.w	r3, r2, r3
 8004582:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004584:	4b0a      	ldr	r3, [pc, #40]	; (80045b0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004586:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800458a:	0f1b      	lsrs	r3, r3, #28
 800458c:	f003 0307 	and.w	r3, r3, #7
 8004590:	68ba      	ldr	r2, [r7, #8]
 8004592:	fbb2 f3f3 	udiv	r3, r2, r3
 8004596:	617b      	str	r3, [r7, #20]
          break;
 8004598:	e002      	b.n	80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800459a:	2300      	movs	r3, #0
 800459c:	617b      	str	r3, [r7, #20]
          break;
 800459e:	bf00      	nop
        }
      }
      break;
 80045a0:	bf00      	nop
    }
  }
  return frequency;
 80045a2:	697b      	ldr	r3, [r7, #20]
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	371c      	adds	r7, #28
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr
 80045b0:	40023800 	.word	0x40023800
 80045b4:	00bb8000 	.word	0x00bb8000
 80045b8:	017d7840 	.word	0x017d7840
 80045bc:	00f42400 	.word	0x00f42400

080045c0 <__libc_init_array>:
 80045c0:	b570      	push	{r4, r5, r6, lr}
 80045c2:	4e0d      	ldr	r6, [pc, #52]	; (80045f8 <__libc_init_array+0x38>)
 80045c4:	4c0d      	ldr	r4, [pc, #52]	; (80045fc <__libc_init_array+0x3c>)
 80045c6:	1ba4      	subs	r4, r4, r6
 80045c8:	10a4      	asrs	r4, r4, #2
 80045ca:	2500      	movs	r5, #0
 80045cc:	42a5      	cmp	r5, r4
 80045ce:	d109      	bne.n	80045e4 <__libc_init_array+0x24>
 80045d0:	4e0b      	ldr	r6, [pc, #44]	; (8004600 <__libc_init_array+0x40>)
 80045d2:	4c0c      	ldr	r4, [pc, #48]	; (8004604 <__libc_init_array+0x44>)
 80045d4:	f000 f820 	bl	8004618 <_init>
 80045d8:	1ba4      	subs	r4, r4, r6
 80045da:	10a4      	asrs	r4, r4, #2
 80045dc:	2500      	movs	r5, #0
 80045de:	42a5      	cmp	r5, r4
 80045e0:	d105      	bne.n	80045ee <__libc_init_array+0x2e>
 80045e2:	bd70      	pop	{r4, r5, r6, pc}
 80045e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80045e8:	4798      	blx	r3
 80045ea:	3501      	adds	r5, #1
 80045ec:	e7ee      	b.n	80045cc <__libc_init_array+0xc>
 80045ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80045f2:	4798      	blx	r3
 80045f4:	3501      	adds	r5, #1
 80045f6:	e7f2      	b.n	80045de <__libc_init_array+0x1e>
 80045f8:	08042d14 	.word	0x08042d14
 80045fc:	08042d14 	.word	0x08042d14
 8004600:	08042d14 	.word	0x08042d14
 8004604:	08042d18 	.word	0x08042d18

08004608 <memset>:
 8004608:	4402      	add	r2, r0
 800460a:	4603      	mov	r3, r0
 800460c:	4293      	cmp	r3, r2
 800460e:	d100      	bne.n	8004612 <memset+0xa>
 8004610:	4770      	bx	lr
 8004612:	f803 1b01 	strb.w	r1, [r3], #1
 8004616:	e7f9      	b.n	800460c <memset+0x4>

08004618 <_init>:
 8004618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800461a:	bf00      	nop
 800461c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800461e:	bc08      	pop	{r3}
 8004620:	469e      	mov	lr, r3
 8004622:	4770      	bx	lr

08004624 <_fini>:
 8004624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004626:	bf00      	nop
 8004628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800462a:	bc08      	pop	{r3}
 800462c:	469e      	mov	lr, r3
 800462e:	4770      	bx	lr
