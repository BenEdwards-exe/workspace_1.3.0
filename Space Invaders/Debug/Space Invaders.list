
Space Invaders.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028c0  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000558c  08002a58  08002a58  00012a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007fe4  08007fe4  0002025c  2**0
                  CONTENTS
  4 .ARM          00000008  08007fe4  08007fe4  00017fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007fec  08007fec  0002025c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007fec  08007fec  00017fec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ff0  08007ff0  00017ff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000025c  20000000  08007ff4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000308  2000025c  08008250  0002025c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000564  08008250  00020564  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002025c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004d28  00000000  00000000  0002028c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001013  00000000  00000000  00024fb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000468  00000000  00000000  00025fc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000003d0  00000000  00000000  00026430  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001431c  00000000  00000000  00026800  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00004bf1  00000000  00000000  0003ab1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007e6d2  00000000  00000000  0003f70d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bdddf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000ff4  00000000  00000000  000bde5c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000025c 	.word	0x2000025c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002a40 	.word	0x08002a40

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000260 	.word	0x20000260
 80001d4:	08002a40 	.word	0x08002a40

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <displayIntroScreen>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void displayIntroScreen(uint32_t waitTime)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b08a      	sub	sp, #40	; 0x28
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]

	// Intro Screen
	uint8_t* title_screen = (uint8_t*) Title_Screen;
 80004e0:	4b25      	ldr	r3, [pc, #148]	; (8000578 <displayIntroScreen+0xa0>)
 80004e2:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t* ptrsc = (uint8_t*) (0x20020000 + 40*320 + 37);
 80004e4:	4b25      	ldr	r3, [pc, #148]	; (800057c <displayIntroScreen+0xa4>)
 80004e6:	623b      	str	r3, [r7, #32]
	for (int i = 0; i < 31; ++i) {
 80004e8:	2300      	movs	r3, #0
 80004ea:	61fb      	str	r3, [r7, #28]
 80004ec:	e016      	b.n	800051c <displayIntroScreen+0x44>
		for (int j = 0; j < 245; ++j) {
 80004ee:	2300      	movs	r3, #0
 80004f0:	61bb      	str	r3, [r7, #24]
 80004f2:	e00a      	b.n	800050a <displayIntroScreen+0x32>
			*ptrsc++ = *title_screen++;
 80004f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80004f6:	1c53      	adds	r3, r2, #1
 80004f8:	627b      	str	r3, [r7, #36]	; 0x24
 80004fa:	6a3b      	ldr	r3, [r7, #32]
 80004fc:	1c59      	adds	r1, r3, #1
 80004fe:	6239      	str	r1, [r7, #32]
 8000500:	7812      	ldrb	r2, [r2, #0]
 8000502:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 245; ++j) {
 8000504:	69bb      	ldr	r3, [r7, #24]
 8000506:	3301      	adds	r3, #1
 8000508:	61bb      	str	r3, [r7, #24]
 800050a:	69bb      	ldr	r3, [r7, #24]
 800050c:	2bf4      	cmp	r3, #244	; 0xf4
 800050e:	ddf1      	ble.n	80004f4 <displayIntroScreen+0x1c>
		}
		ptrsc += 75;
 8000510:	6a3b      	ldr	r3, [r7, #32]
 8000512:	334b      	adds	r3, #75	; 0x4b
 8000514:	623b      	str	r3, [r7, #32]
	for (int i = 0; i < 31; ++i) {
 8000516:	69fb      	ldr	r3, [r7, #28]
 8000518:	3301      	adds	r3, #1
 800051a:	61fb      	str	r3, [r7, #28]
 800051c:	69fb      	ldr	r3, [r7, #28]
 800051e:	2b1e      	cmp	r3, #30
 8000520:	dde5      	ble.n	80004ee <displayIntroScreen+0x16>
	}

	uint32_t ctr_time = HAL_GetTick();
 8000522:	f001 fb7d 	bl	8001c20 <HAL_GetTick>
 8000526:	60f8      	str	r0, [r7, #12]
	while (HAL_GetTick() - ctr_time <= waitTime);
 8000528:	bf00      	nop
 800052a:	f001 fb79 	bl	8001c20 <HAL_GetTick>
 800052e:	4602      	mov	r2, r0
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	1ad3      	subs	r3, r2, r3
 8000534:	687a      	ldr	r2, [r7, #4]
 8000536:	429a      	cmp	r2, r3
 8000538:	d2f7      	bcs.n	800052a <displayIntroScreen+0x52>

	for (int i = 0; i < 31; ++i) {
 800053a:	2300      	movs	r3, #0
 800053c:	617b      	str	r3, [r7, #20]
 800053e:	e013      	b.n	8000568 <displayIntroScreen+0x90>
		for (int j = 0; j < 245; ++j) {
 8000540:	2300      	movs	r3, #0
 8000542:	613b      	str	r3, [r7, #16]
 8000544:	e007      	b.n	8000556 <displayIntroScreen+0x7e>
			*ptrsc++ = 0;
 8000546:	6a3b      	ldr	r3, [r7, #32]
 8000548:	1c5a      	adds	r2, r3, #1
 800054a:	623a      	str	r2, [r7, #32]
 800054c:	2200      	movs	r2, #0
 800054e:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 245; ++j) {
 8000550:	693b      	ldr	r3, [r7, #16]
 8000552:	3301      	adds	r3, #1
 8000554:	613b      	str	r3, [r7, #16]
 8000556:	693b      	ldr	r3, [r7, #16]
 8000558:	2bf4      	cmp	r3, #244	; 0xf4
 800055a:	ddf4      	ble.n	8000546 <displayIntroScreen+0x6e>
		}
		ptrsc += 75;
 800055c:	6a3b      	ldr	r3, [r7, #32]
 800055e:	334b      	adds	r3, #75	; 0x4b
 8000560:	623b      	str	r3, [r7, #32]
	for (int i = 0; i < 31; ++i) {
 8000562:	697b      	ldr	r3, [r7, #20]
 8000564:	3301      	adds	r3, #1
 8000566:	617b      	str	r3, [r7, #20]
 8000568:	697b      	ldr	r3, [r7, #20]
 800056a:	2b1e      	cmp	r3, #30
 800056c:	dde8      	ble.n	8000540 <displayIntroScreen+0x68>
	}

}
 800056e:	bf00      	nop
 8000570:	3728      	adds	r7, #40	; 0x28
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	08006228 	.word	0x08006228
 800057c:	20023225 	.word	0x20023225

08000580 <clearscreen>:

void clearscreen()
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0
	uint32_t* ptrscreen = (uint32_t*)0x20021900;
 8000586:	4b16      	ldr	r3, [pc, #88]	; (80005e0 <clearscreen+0x60>)
 8000588:	60fb      	str	r3, [r7, #12]
	*ptrscreen = 0;
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]


	// copy title sprite
	uint32_t* titleptr = (uint32_t*)title;
 8000590:	4b14      	ldr	r3, [pc, #80]	; (80005e4 <clearscreen+0x64>)
 8000592:	60bb      	str	r3, [r7, #8]
	ptrscreen = (uint32_t*)0x20020000;
 8000594:	4b14      	ldr	r3, [pc, #80]	; (80005e8 <clearscreen+0x68>)
 8000596:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 1600; i++)
 8000598:	2300      	movs	r3, #0
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	e00a      	b.n	80005b4 <clearscreen+0x34>
	{
		*ptrscreen++ = *titleptr++;
 800059e:	68ba      	ldr	r2, [r7, #8]
 80005a0:	1d13      	adds	r3, r2, #4
 80005a2:	60bb      	str	r3, [r7, #8]
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	1d19      	adds	r1, r3, #4
 80005a8:	60f9      	str	r1, [r7, #12]
 80005aa:	6812      	ldr	r2, [r2, #0]
 80005ac:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 1600; i++)
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	3301      	adds	r3, #1
 80005b2:	607b      	str	r3, [r7, #4]
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80005ba:	dbf0      	blt.n	800059e <clearscreen+0x1e>
	}

	displayint(highScore, (uint32_t*)(0x200204E0));
 80005bc:	4b0b      	ldr	r3, [pc, #44]	; (80005ec <clearscreen+0x6c>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	b29b      	uxth	r3, r3
 80005c2:	490b      	ldr	r1, [pc, #44]	; (80005f0 <clearscreen+0x70>)
 80005c4:	4618      	mov	r0, r3
 80005c6:	f000 f819 	bl	80005fc <displayint>
	displayint(playerScore, (uint32_t*)(0x20020418));
 80005ca:	4b0a      	ldr	r3, [pc, #40]	; (80005f4 <clearscreen+0x74>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	b29b      	uxth	r3, r3
 80005d0:	4909      	ldr	r1, [pc, #36]	; (80005f8 <clearscreen+0x78>)
 80005d2:	4618      	mov	r0, r3
 80005d4:	f000 f812 	bl	80005fc <displayint>
	{
		*ptrscreen++ = *titleptr++;
	}
	displayint(highscore, (uint32_t*)(0x200204E0));
	*/
}
 80005d8:	bf00      	nop
 80005da:	3710      	adds	r7, #16
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	20021900 	.word	0x20021900
 80005e4:	08002a58 	.word	0x08002a58
 80005e8:	20020000 	.word	0x20020000
 80005ec:	20000278 	.word	0x20000278
 80005f0:	200204e0 	.word	0x200204e0
 80005f4:	2000027c 	.word	0x2000027c
 80005f8:	20020418 	.word	0x20020418

080005fc <displayint>:

void displayint(uint16_t val, uint32_t* screenptr)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b089      	sub	sp, #36	; 0x24
 8000600:	af00      	add	r7, sp, #0
 8000602:	4603      	mov	r3, r0
 8000604:	6039      	str	r1, [r7, #0]
 8000606:	80fb      	strh	r3, [r7, #6]
	uint8_t digit = 0;
 8000608:	2300      	movs	r3, #0
 800060a:	72fb      	strb	r3, [r7, #11]
	uint32_t* digitptr;
	uint32_t* scrcopyptr;
	for (int i = 0; i < 5; i++)
 800060c:	2300      	movs	r3, #0
 800060e:	617b      	str	r3, [r7, #20]
 8000610:	e040      	b.n	8000694 <displayint+0x98>
	{
		digit = val % 10;
 8000612:	88fa      	ldrh	r2, [r7, #6]
 8000614:	4b24      	ldr	r3, [pc, #144]	; (80006a8 <displayint+0xac>)
 8000616:	fba3 1302 	umull	r1, r3, r3, r2
 800061a:	08d9      	lsrs	r1, r3, #3
 800061c:	460b      	mov	r3, r1
 800061e:	009b      	lsls	r3, r3, #2
 8000620:	440b      	add	r3, r1
 8000622:	005b      	lsls	r3, r3, #1
 8000624:	1ad3      	subs	r3, r2, r3
 8000626:	b29b      	uxth	r3, r3
 8000628:	72fb      	strb	r3, [r7, #11]
		val /= 10;
 800062a:	88fb      	ldrh	r3, [r7, #6]
 800062c:	4a1e      	ldr	r2, [pc, #120]	; (80006a8 <displayint+0xac>)
 800062e:	fba2 2303 	umull	r2, r3, r2, r3
 8000632:	08db      	lsrs	r3, r3, #3
 8000634:	80fb      	strh	r3, [r7, #6]

		scrcopyptr = screenptr;
 8000636:	683b      	ldr	r3, [r7, #0]
 8000638:	61bb      	str	r3, [r7, #24]
		digitptr = (uint32_t*)(digits + (digit << 3));
 800063a:	7afb      	ldrb	r3, [r7, #11]
 800063c:	00db      	lsls	r3, r3, #3
 800063e:	461a      	mov	r2, r3
 8000640:	4b1a      	ldr	r3, [pc, #104]	; (80006ac <displayint+0xb0>)
 8000642:	4413      	add	r3, r2
 8000644:	61fb      	str	r3, [r7, #28]
		for (int i = 0; i < 9; i++)
 8000646:	2300      	movs	r3, #0
 8000648:	613b      	str	r3, [r7, #16]
 800064a:	e01a      	b.n	8000682 <displayint+0x86>
		{
			for (int j = 0; j < 2; j++)
 800064c:	2300      	movs	r3, #0
 800064e:	60fb      	str	r3, [r7, #12]
 8000650:	e00a      	b.n	8000668 <displayint+0x6c>
			{
				*scrcopyptr++ = *digitptr++;
 8000652:	69fa      	ldr	r2, [r7, #28]
 8000654:	1d13      	adds	r3, r2, #4
 8000656:	61fb      	str	r3, [r7, #28]
 8000658:	69bb      	ldr	r3, [r7, #24]
 800065a:	1d19      	adds	r1, r3, #4
 800065c:	61b9      	str	r1, [r7, #24]
 800065e:	6812      	ldr	r2, [r2, #0]
 8000660:	601a      	str	r2, [r3, #0]
			for (int j = 0; j < 2; j++)
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	3301      	adds	r3, #1
 8000666:	60fb      	str	r3, [r7, #12]
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	2b01      	cmp	r3, #1
 800066c:	ddf1      	ble.n	8000652 <displayint+0x56>
			}
			digitptr += 18;
 800066e:	69fb      	ldr	r3, [r7, #28]
 8000670:	3348      	adds	r3, #72	; 0x48
 8000672:	61fb      	str	r3, [r7, #28]
			scrcopyptr += 78;
 8000674:	69bb      	ldr	r3, [r7, #24]
 8000676:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800067a:	61bb      	str	r3, [r7, #24]
		for (int i = 0; i < 9; i++)
 800067c:	693b      	ldr	r3, [r7, #16]
 800067e:	3301      	adds	r3, #1
 8000680:	613b      	str	r3, [r7, #16]
 8000682:	693b      	ldr	r3, [r7, #16]
 8000684:	2b08      	cmp	r3, #8
 8000686:	dde1      	ble.n	800064c <displayint+0x50>

		}
		screenptr -= 2;
 8000688:	683b      	ldr	r3, [r7, #0]
 800068a:	3b08      	subs	r3, #8
 800068c:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < 5; i++)
 800068e:	697b      	ldr	r3, [r7, #20]
 8000690:	3301      	adds	r3, #1
 8000692:	617b      	str	r3, [r7, #20]
 8000694:	697b      	ldr	r3, [r7, #20]
 8000696:	2b04      	cmp	r3, #4
 8000698:	ddbb      	ble.n	8000612 <displayint+0x16>
	}
}
 800069a:	bf00      	nop
 800069c:	3724      	adds	r7, #36	; 0x24
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	cccccccd 	.word	0xcccccccd
 80006ac:	08004358 	.word	0x08004358

080006b0 <updatescreen>:

void updatescreen()
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b09a      	sub	sp, #104	; 0x68
 80006b4:	af00      	add	r7, sp, #0
	uint8_t* ptrscreen;

	// Erase Previous Ship
	ptrscreen = (uint8_t*)(0x20020000 + ship_py*320 + ship_px);
 80006b6:	4baa      	ldr	r3, [pc, #680]	; (8000960 <updatescreen+0x2b0>)
 80006b8:	681a      	ldr	r2, [r3, #0]
 80006ba:	4613      	mov	r3, r2
 80006bc:	009b      	lsls	r3, r3, #2
 80006be:	4413      	add	r3, r2
 80006c0:	019b      	lsls	r3, r3, #6
 80006c2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80006c6:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80006ca:	4aa6      	ldr	r2, [pc, #664]	; (8000964 <updatescreen+0x2b4>)
 80006cc:	6812      	ldr	r2, [r2, #0]
 80006ce:	4413      	add	r3, r2
 80006d0:	667b      	str	r3, [r7, #100]	; 0x64
	for (int i = 0; i < 8; i++) {
 80006d2:	2300      	movs	r3, #0
 80006d4:	663b      	str	r3, [r7, #96]	; 0x60
 80006d6:	e014      	b.n	8000702 <updatescreen+0x52>
		for (int j = 0; j < 12; j++) {
 80006d8:	2300      	movs	r3, #0
 80006da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80006dc:	e007      	b.n	80006ee <updatescreen+0x3e>
			*ptrscreen++ = 0;
 80006de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80006e0:	1c5a      	adds	r2, r3, #1
 80006e2:	667a      	str	r2, [r7, #100]	; 0x64
 80006e4:	2200      	movs	r2, #0
 80006e6:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 12; j++) {
 80006e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80006ea:	3301      	adds	r3, #1
 80006ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80006ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80006f0:	2b0b      	cmp	r3, #11
 80006f2:	ddf4      	ble.n	80006de <updatescreen+0x2e>
		}
		ptrscreen += 308;
 80006f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80006f6:	f503 739a 	add.w	r3, r3, #308	; 0x134
 80006fa:	667b      	str	r3, [r7, #100]	; 0x64
	for (int i = 0; i < 8; i++) {
 80006fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80006fe:	3301      	adds	r3, #1
 8000700:	663b      	str	r3, [r7, #96]	; 0x60
 8000702:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000704:	2b07      	cmp	r3, #7
 8000706:	dde7      	ble.n	80006d8 <updatescreen+0x28>
	}

	// Draw New Ship
	ptrscreen = (uint8_t*)(0x20020000 + ship_y*320 + ship_x);
 8000708:	4b97      	ldr	r3, [pc, #604]	; (8000968 <updatescreen+0x2b8>)
 800070a:	681a      	ldr	r2, [r3, #0]
 800070c:	4613      	mov	r3, r2
 800070e:	009b      	lsls	r3, r3, #2
 8000710:	4413      	add	r3, r2
 8000712:	019b      	lsls	r3, r3, #6
 8000714:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8000718:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800071c:	4a93      	ldr	r2, [pc, #588]	; (800096c <updatescreen+0x2bc>)
 800071e:	6812      	ldr	r2, [r2, #0]
 8000720:	4413      	add	r3, r2
 8000722:	667b      	str	r3, [r7, #100]	; 0x64
	uint8_t* ptrsrc = Ship;
 8000724:	4b92      	ldr	r3, [pc, #584]	; (8000970 <updatescreen+0x2c0>)
 8000726:	65bb      	str	r3, [r7, #88]	; 0x58
	for (int i = 0; i < 8; i++) {
 8000728:	2300      	movs	r3, #0
 800072a:	657b      	str	r3, [r7, #84]	; 0x54
 800072c:	e017      	b.n	800075e <updatescreen+0xae>
		for (int j = 0; j < 12; j++) {
 800072e:	2300      	movs	r3, #0
 8000730:	653b      	str	r3, [r7, #80]	; 0x50
 8000732:	e00a      	b.n	800074a <updatescreen+0x9a>
			*ptrscreen++ = *ptrsrc++;
 8000734:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000736:	1c53      	adds	r3, r2, #1
 8000738:	65bb      	str	r3, [r7, #88]	; 0x58
 800073a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800073c:	1c59      	adds	r1, r3, #1
 800073e:	6679      	str	r1, [r7, #100]	; 0x64
 8000740:	7812      	ldrb	r2, [r2, #0]
 8000742:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 12; j++) {
 8000744:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000746:	3301      	adds	r3, #1
 8000748:	653b      	str	r3, [r7, #80]	; 0x50
 800074a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800074c:	2b0b      	cmp	r3, #11
 800074e:	ddf1      	ble.n	8000734 <updatescreen+0x84>
		}
		ptrscreen += 308;
 8000750:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000752:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8000756:	667b      	str	r3, [r7, #100]	; 0x64
	for (int i = 0; i < 8; i++) {
 8000758:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800075a:	3301      	adds	r3, #1
 800075c:	657b      	str	r3, [r7, #84]	; 0x54
 800075e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000760:	2b07      	cmp	r3, #7
 8000762:	dde4      	ble.n	800072e <updatescreen+0x7e>
	}


	// Erase Previous Invader 1 Positions
	for (int row = 0; row < 4; row++) {
 8000764:	2300      	movs	r3, #0
 8000766:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000768:	e044      	b.n	80007f4 <updatescreen+0x144>
		for (int col = 0; col < 6; col++) {
 800076a:	2300      	movs	r3, #0
 800076c:	64bb      	str	r3, [r7, #72]	; 0x48
 800076e:	e03b      	b.n	80007e8 <updatescreen+0x138>
				ptrscreen = (uint8_t*)(0x20020000 +invader1_prev_ypos[row][col]*320 + invader1_prev_xpos[row][col]);
 8000770:	4980      	ldr	r1, [pc, #512]	; (8000974 <updatescreen+0x2c4>)
 8000772:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000774:	4613      	mov	r3, r2
 8000776:	005b      	lsls	r3, r3, #1
 8000778:	4413      	add	r3, r2
 800077a:	005b      	lsls	r3, r3, #1
 800077c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800077e:	4413      	add	r3, r2
 8000780:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8000784:	4613      	mov	r3, r2
 8000786:	009b      	lsls	r3, r3, #2
 8000788:	4413      	add	r3, r2
 800078a:	019b      	lsls	r3, r3, #6
 800078c:	f103 5200 	add.w	r2, r3, #536870912	; 0x20000000
 8000790:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
 8000794:	4878      	ldr	r0, [pc, #480]	; (8000978 <updatescreen+0x2c8>)
 8000796:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8000798:	460b      	mov	r3, r1
 800079a:	005b      	lsls	r3, r3, #1
 800079c:	440b      	add	r3, r1
 800079e:	005b      	lsls	r3, r3, #1
 80007a0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80007a2:	440b      	add	r3, r1
 80007a4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80007a8:	4413      	add	r3, r2
 80007aa:	667b      	str	r3, [r7, #100]	; 0x64
				for (int i = 0; i < 8; i++) {
 80007ac:	2300      	movs	r3, #0
 80007ae:	647b      	str	r3, [r7, #68]	; 0x44
 80007b0:	e014      	b.n	80007dc <updatescreen+0x12c>
					for (int j = 0; j < 12; j++) {
 80007b2:	2300      	movs	r3, #0
 80007b4:	643b      	str	r3, [r7, #64]	; 0x40
 80007b6:	e007      	b.n	80007c8 <updatescreen+0x118>
						*ptrscreen++ = 0;
 80007b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80007ba:	1c5a      	adds	r2, r3, #1
 80007bc:	667a      	str	r2, [r7, #100]	; 0x64
 80007be:	2200      	movs	r2, #0
 80007c0:	701a      	strb	r2, [r3, #0]
					for (int j = 0; j < 12; j++) {
 80007c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80007c4:	3301      	adds	r3, #1
 80007c6:	643b      	str	r3, [r7, #64]	; 0x40
 80007c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80007ca:	2b0b      	cmp	r3, #11
 80007cc:	ddf4      	ble.n	80007b8 <updatescreen+0x108>
					}
					ptrscreen += 308;
 80007ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80007d0:	f503 739a 	add.w	r3, r3, #308	; 0x134
 80007d4:	667b      	str	r3, [r7, #100]	; 0x64
				for (int i = 0; i < 8; i++) {
 80007d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80007d8:	3301      	adds	r3, #1
 80007da:	647b      	str	r3, [r7, #68]	; 0x44
 80007dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80007de:	2b07      	cmp	r3, #7
 80007e0:	dde7      	ble.n	80007b2 <updatescreen+0x102>
		for (int col = 0; col < 6; col++) {
 80007e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80007e4:	3301      	adds	r3, #1
 80007e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80007e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80007ea:	2b05      	cmp	r3, #5
 80007ec:	ddc0      	ble.n	8000770 <updatescreen+0xc0>
	for (int row = 0; row < 4; row++) {
 80007ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80007f0:	3301      	adds	r3, #1
 80007f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80007f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80007f6:	2b03      	cmp	r3, #3
 80007f8:	ddb7      	ble.n	800076a <updatescreen+0xba>
		}
	}


	// Draw New Invader 1 Positions
	for (int row = 0; row < 4; row++) {
 80007fa:	2300      	movs	r3, #0
 80007fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80007fe:	e055      	b.n	80008ac <updatescreen+0x1fc>
		for (int col = 0; col < 6; col++) {
 8000800:	2300      	movs	r3, #0
 8000802:	63bb      	str	r3, [r7, #56]	; 0x38
 8000804:	e04c      	b.n	80008a0 <updatescreen+0x1f0>
			if (invader1_status[row][col] == 1) {
 8000806:	495d      	ldr	r1, [pc, #372]	; (800097c <updatescreen+0x2cc>)
 8000808:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800080a:	4613      	mov	r3, r2
 800080c:	005b      	lsls	r3, r3, #1
 800080e:	4413      	add	r3, r2
 8000810:	005b      	lsls	r3, r3, #1
 8000812:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000814:	4413      	add	r3, r2
 8000816:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800081a:	2b01      	cmp	r3, #1
 800081c:	d13d      	bne.n	800089a <updatescreen+0x1ea>
				ptrscreen = (uint8_t*)(0x20020000 +invader1_ypos[row][col]*320 + invader1_xpos[row][col]);
 800081e:	4958      	ldr	r1, [pc, #352]	; (8000980 <updatescreen+0x2d0>)
 8000820:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000822:	4613      	mov	r3, r2
 8000824:	005b      	lsls	r3, r3, #1
 8000826:	4413      	add	r3, r2
 8000828:	005b      	lsls	r3, r3, #1
 800082a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800082c:	4413      	add	r3, r2
 800082e:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8000832:	4613      	mov	r3, r2
 8000834:	009b      	lsls	r3, r3, #2
 8000836:	4413      	add	r3, r2
 8000838:	019b      	lsls	r3, r3, #6
 800083a:	f103 5200 	add.w	r2, r3, #536870912	; 0x20000000
 800083e:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
 8000842:	4850      	ldr	r0, [pc, #320]	; (8000984 <updatescreen+0x2d4>)
 8000844:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000846:	460b      	mov	r3, r1
 8000848:	005b      	lsls	r3, r3, #1
 800084a:	440b      	add	r3, r1
 800084c:	005b      	lsls	r3, r3, #1
 800084e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000850:	440b      	add	r3, r1
 8000852:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000856:	4413      	add	r3, r2
 8000858:	667b      	str	r3, [r7, #100]	; 0x64
				ptrsrc = Invader1;
 800085a:	4b4b      	ldr	r3, [pc, #300]	; (8000988 <updatescreen+0x2d8>)
 800085c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (int i = 0; i < 8; i++) {
 800085e:	2300      	movs	r3, #0
 8000860:	637b      	str	r3, [r7, #52]	; 0x34
 8000862:	e017      	b.n	8000894 <updatescreen+0x1e4>
					for (int j = 0; j < 12; j++) {
 8000864:	2300      	movs	r3, #0
 8000866:	633b      	str	r3, [r7, #48]	; 0x30
 8000868:	e00a      	b.n	8000880 <updatescreen+0x1d0>
						*ptrscreen++ = *ptrsrc++;
 800086a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800086c:	1c53      	adds	r3, r2, #1
 800086e:	65bb      	str	r3, [r7, #88]	; 0x58
 8000870:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000872:	1c59      	adds	r1, r3, #1
 8000874:	6679      	str	r1, [r7, #100]	; 0x64
 8000876:	7812      	ldrb	r2, [r2, #0]
 8000878:	701a      	strb	r2, [r3, #0]
					for (int j = 0; j < 12; j++) {
 800087a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800087c:	3301      	adds	r3, #1
 800087e:	633b      	str	r3, [r7, #48]	; 0x30
 8000880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000882:	2b0b      	cmp	r3, #11
 8000884:	ddf1      	ble.n	800086a <updatescreen+0x1ba>
					}
					ptrscreen += 308;
 8000886:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000888:	f503 739a 	add.w	r3, r3, #308	; 0x134
 800088c:	667b      	str	r3, [r7, #100]	; 0x64
				for (int i = 0; i < 8; i++) {
 800088e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000890:	3301      	adds	r3, #1
 8000892:	637b      	str	r3, [r7, #52]	; 0x34
 8000894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000896:	2b07      	cmp	r3, #7
 8000898:	dde4      	ble.n	8000864 <updatescreen+0x1b4>
		for (int col = 0; col < 6; col++) {
 800089a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800089c:	3301      	adds	r3, #1
 800089e:	63bb      	str	r3, [r7, #56]	; 0x38
 80008a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80008a2:	2b05      	cmp	r3, #5
 80008a4:	ddaf      	ble.n	8000806 <updatescreen+0x156>
	for (int row = 0; row < 4; row++) {
 80008a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80008a8:	3301      	adds	r3, #1
 80008aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80008ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80008ae:	2b03      	cmp	r3, #3
 80008b0:	dda6      	ble.n	8000800 <updatescreen+0x150>
			}
		}
	}

	// Erase Previous Player Missile Positions
	for (int missile_index = 0; missile_index < 3; ++missile_index) {
 80008b2:	2300      	movs	r3, #0
 80008b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80008b6:	e02f      	b.n	8000918 <updatescreen+0x268>
		ptrscreen = (uint8_t*)(0x20020000 + player_missile_prev_ypos[missile_index]*320 + player_missile_prev_xpos[missile_index]);
 80008b8:	4a34      	ldr	r2, [pc, #208]	; (800098c <updatescreen+0x2dc>)
 80008ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008bc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80008c0:	4613      	mov	r3, r2
 80008c2:	009b      	lsls	r3, r3, #2
 80008c4:	4413      	add	r3, r2
 80008c6:	019b      	lsls	r3, r3, #6
 80008c8:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80008cc:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80008d0:	492f      	ldr	r1, [pc, #188]	; (8000990 <updatescreen+0x2e0>)
 80008d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80008d4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80008d8:	4413      	add	r3, r2
 80008da:	667b      	str	r3, [r7, #100]	; 0x64
		for (int i = 0; i < 4; i++) {
 80008dc:	2300      	movs	r3, #0
 80008de:	62bb      	str	r3, [r7, #40]	; 0x28
 80008e0:	e014      	b.n	800090c <updatescreen+0x25c>
			for (int j = 0; j < 1; j++) {
 80008e2:	2300      	movs	r3, #0
 80008e4:	627b      	str	r3, [r7, #36]	; 0x24
 80008e6:	e007      	b.n	80008f8 <updatescreen+0x248>
				*ptrscreen++ = 0;
 80008e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80008ea:	1c5a      	adds	r2, r3, #1
 80008ec:	667a      	str	r2, [r7, #100]	; 0x64
 80008ee:	2200      	movs	r2, #0
 80008f0:	701a      	strb	r2, [r3, #0]
			for (int j = 0; j < 1; j++) {
 80008f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008f4:	3301      	adds	r3, #1
 80008f6:	627b      	str	r3, [r7, #36]	; 0x24
 80008f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	ddf4      	ble.n	80008e8 <updatescreen+0x238>
			}
			ptrscreen += 319;
 80008fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000900:	f203 133f 	addw	r3, r3, #319	; 0x13f
 8000904:	667b      	str	r3, [r7, #100]	; 0x64
		for (int i = 0; i < 4; i++) {
 8000906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000908:	3301      	adds	r3, #1
 800090a:	62bb      	str	r3, [r7, #40]	; 0x28
 800090c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800090e:	2b03      	cmp	r3, #3
 8000910:	dde7      	ble.n	80008e2 <updatescreen+0x232>
	for (int missile_index = 0; missile_index < 3; ++missile_index) {
 8000912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000914:	3301      	adds	r3, #1
 8000916:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800091a:	2b02      	cmp	r3, #2
 800091c:	ddcc      	ble.n	80008b8 <updatescreen+0x208>
		}
	}

	// Display Player Missile
	for (int m = 0; m < 3; ++m) {
 800091e:	2300      	movs	r3, #0
 8000920:	623b      	str	r3, [r7, #32]
 8000922:	e05d      	b.n	80009e0 <updatescreen+0x330>
		if (player_missile_status[m] == 1) {
 8000924:	4a1b      	ldr	r2, [pc, #108]	; (8000994 <updatescreen+0x2e4>)
 8000926:	6a3b      	ldr	r3, [r7, #32]
 8000928:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800092c:	2b01      	cmp	r3, #1
 800092e:	d154      	bne.n	80009da <updatescreen+0x32a>
			ptrscreen = (uint8_t*)(0x20020000 + player_missile_ypos[m]*320 + player_missile_xpos[m]);
 8000930:	4a19      	ldr	r2, [pc, #100]	; (8000998 <updatescreen+0x2e8>)
 8000932:	6a3b      	ldr	r3, [r7, #32]
 8000934:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000938:	4613      	mov	r3, r2
 800093a:	009b      	lsls	r3, r3, #2
 800093c:	4413      	add	r3, r2
 800093e:	019b      	lsls	r3, r3, #6
 8000940:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8000944:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000948:	4914      	ldr	r1, [pc, #80]	; (800099c <updatescreen+0x2ec>)
 800094a:	6a3a      	ldr	r2, [r7, #32]
 800094c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000950:	4413      	add	r3, r2
 8000952:	667b      	str	r3, [r7, #100]	; 0x64
			ptrsrc = Missile;
 8000954:	4b12      	ldr	r3, [pc, #72]	; (80009a0 <updatescreen+0x2f0>)
 8000956:	65bb      	str	r3, [r7, #88]	; 0x58
			for (int i = 0; i < 4; ++i) {
 8000958:	2300      	movs	r3, #0
 800095a:	61fb      	str	r3, [r7, #28]
 800095c:	e03a      	b.n	80009d4 <updatescreen+0x324>
 800095e:	bf00      	nop
 8000960:	20000288 	.word	0x20000288
 8000964:	20000510 	.word	0x20000510
 8000968:	20000284 	.word	0x20000284
 800096c:	2000050c 	.word	0x2000050c
 8000970:	20000060 	.word	0x20000060
 8000974:	200003b8 	.word	0x200003b8
 8000978:	20000358 	.word	0x20000358
 800097c:	20000418 	.word	0x20000418
 8000980:	200002f8 	.word	0x200002f8
 8000984:	20000298 	.word	0x20000298
 8000988:	20000000 	.word	0x20000000
 800098c:	2000052c 	.word	0x2000052c
 8000990:	20000500 	.word	0x20000500
 8000994:	2000028c 	.word	0x2000028c
 8000998:	200004f4 	.word	0x200004f4
 800099c:	2000053c 	.word	0x2000053c
 80009a0:	200000c0 	.word	0x200000c0
				for (int j = 0; j < 1; ++j) {
 80009a4:	2300      	movs	r3, #0
 80009a6:	61bb      	str	r3, [r7, #24]
 80009a8:	e00a      	b.n	80009c0 <updatescreen+0x310>
					*ptrscreen++ = *ptrsrc++;
 80009aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80009ac:	1c53      	adds	r3, r2, #1
 80009ae:	65bb      	str	r3, [r7, #88]	; 0x58
 80009b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80009b2:	1c59      	adds	r1, r3, #1
 80009b4:	6679      	str	r1, [r7, #100]	; 0x64
 80009b6:	7812      	ldrb	r2, [r2, #0]
 80009b8:	701a      	strb	r2, [r3, #0]
				for (int j = 0; j < 1; ++j) {
 80009ba:	69bb      	ldr	r3, [r7, #24]
 80009bc:	3301      	adds	r3, #1
 80009be:	61bb      	str	r3, [r7, #24]
 80009c0:	69bb      	ldr	r3, [r7, #24]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	ddf1      	ble.n	80009aa <updatescreen+0x2fa>
				}
				ptrscreen += 319;
 80009c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80009c8:	f203 133f 	addw	r3, r3, #319	; 0x13f
 80009cc:	667b      	str	r3, [r7, #100]	; 0x64
			for (int i = 0; i < 4; ++i) {
 80009ce:	69fb      	ldr	r3, [r7, #28]
 80009d0:	3301      	adds	r3, #1
 80009d2:	61fb      	str	r3, [r7, #28]
 80009d4:	69fb      	ldr	r3, [r7, #28]
 80009d6:	2b03      	cmp	r3, #3
 80009d8:	dde4      	ble.n	80009a4 <updatescreen+0x2f4>
	for (int m = 0; m < 3; ++m) {
 80009da:	6a3b      	ldr	r3, [r7, #32]
 80009dc:	3301      	adds	r3, #1
 80009de:	623b      	str	r3, [r7, #32]
 80009e0:	6a3b      	ldr	r3, [r7, #32]
 80009e2:	2b02      	cmp	r3, #2
 80009e4:	dd9e      	ble.n	8000924 <updatescreen+0x274>
			}
		}
	}

	// Erase Previous Invader 1 Missile Positions
	for (int missile_index = 0; missile_index < 6; ++missile_index) {
 80009e6:	2300      	movs	r3, #0
 80009e8:	617b      	str	r3, [r7, #20]
 80009ea:	e035      	b.n	8000a58 <updatescreen+0x3a8>
		if (invader1_missile_status[missile_index] == 1) {
 80009ec:	4a43      	ldr	r2, [pc, #268]	; (8000afc <updatescreen+0x44c>)
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009f4:	2b01      	cmp	r3, #1
 80009f6:	d12c      	bne.n	8000a52 <updatescreen+0x3a2>
			ptrscreen = (uint8_t*)(0x20020000 + invader1_missile_prev_ypos[missile_index]*320 + invader1_missile_prev_xpos[missile_index]);
 80009f8:	4a41      	ldr	r2, [pc, #260]	; (8000b00 <updatescreen+0x450>)
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a00:	4613      	mov	r3, r2
 8000a02:	009b      	lsls	r3, r3, #2
 8000a04:	4413      	add	r3, r2
 8000a06:	019b      	lsls	r3, r3, #6
 8000a08:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8000a0c:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000a10:	493c      	ldr	r1, [pc, #240]	; (8000b04 <updatescreen+0x454>)
 8000a12:	697a      	ldr	r2, [r7, #20]
 8000a14:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000a18:	4413      	add	r3, r2
 8000a1a:	667b      	str	r3, [r7, #100]	; 0x64
			for (int i = 0; i < 4; ++i) {
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	613b      	str	r3, [r7, #16]
 8000a20:	e014      	b.n	8000a4c <updatescreen+0x39c>
				for (int j = 0; j < 1; ++j) {
 8000a22:	2300      	movs	r3, #0
 8000a24:	60fb      	str	r3, [r7, #12]
 8000a26:	e007      	b.n	8000a38 <updatescreen+0x388>
					*ptrscreen++ = 0;
 8000a28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000a2a:	1c5a      	adds	r2, r3, #1
 8000a2c:	667a      	str	r2, [r7, #100]	; 0x64
 8000a2e:	2200      	movs	r2, #0
 8000a30:	701a      	strb	r2, [r3, #0]
				for (int j = 0; j < 1; ++j) {
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	3301      	adds	r3, #1
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	ddf4      	ble.n	8000a28 <updatescreen+0x378>
				}
				ptrscreen += 319;
 8000a3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000a40:	f203 133f 	addw	r3, r3, #319	; 0x13f
 8000a44:	667b      	str	r3, [r7, #100]	; 0x64
			for (int i = 0; i < 4; ++i) {
 8000a46:	693b      	ldr	r3, [r7, #16]
 8000a48:	3301      	adds	r3, #1
 8000a4a:	613b      	str	r3, [r7, #16]
 8000a4c:	693b      	ldr	r3, [r7, #16]
 8000a4e:	2b03      	cmp	r3, #3
 8000a50:	dde7      	ble.n	8000a22 <updatescreen+0x372>
	for (int missile_index = 0; missile_index < 6; ++missile_index) {
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	3301      	adds	r3, #1
 8000a56:	617b      	str	r3, [r7, #20]
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	2b05      	cmp	r3, #5
 8000a5c:	ddc6      	ble.n	80009ec <updatescreen+0x33c>
			}
		}
	}

	// Display Invader 1 Missile
	for (int missile_index = 0; missile_index < 6; ++missile_index) {
 8000a5e:	2300      	movs	r3, #0
 8000a60:	60bb      	str	r3, [r7, #8]
 8000a62:	e03a      	b.n	8000ada <updatescreen+0x42a>
		if (invader1_missile_status[missile_index] == 1) {
 8000a64:	4a25      	ldr	r2, [pc, #148]	; (8000afc <updatescreen+0x44c>)
 8000a66:	68bb      	ldr	r3, [r7, #8]
 8000a68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a6c:	2b01      	cmp	r3, #1
 8000a6e:	d131      	bne.n	8000ad4 <updatescreen+0x424>
			ptrscreen = (uint8_t*)(0x20020000 + invader1_missile_ypos[missile_index]*320 + invader1_missile_xpos[missile_index]);
 8000a70:	4a25      	ldr	r2, [pc, #148]	; (8000b08 <updatescreen+0x458>)
 8000a72:	68bb      	ldr	r3, [r7, #8]
 8000a74:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a78:	4613      	mov	r3, r2
 8000a7a:	009b      	lsls	r3, r3, #2
 8000a7c:	4413      	add	r3, r2
 8000a7e:	019b      	lsls	r3, r3, #6
 8000a80:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8000a84:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000a88:	4920      	ldr	r1, [pc, #128]	; (8000b0c <updatescreen+0x45c>)
 8000a8a:	68ba      	ldr	r2, [r7, #8]
 8000a8c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000a90:	4413      	add	r3, r2
 8000a92:	667b      	str	r3, [r7, #100]	; 0x64
			ptrsrc = Missile;
 8000a94:	4b1e      	ldr	r3, [pc, #120]	; (8000b10 <updatescreen+0x460>)
 8000a96:	65bb      	str	r3, [r7, #88]	; 0x58
			for (int i = 0; i < 4; ++i) {
 8000a98:	2300      	movs	r3, #0
 8000a9a:	607b      	str	r3, [r7, #4]
 8000a9c:	e017      	b.n	8000ace <updatescreen+0x41e>
				for (int j = 0; j < 1; ++j) {
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	603b      	str	r3, [r7, #0]
 8000aa2:	e00a      	b.n	8000aba <updatescreen+0x40a>
					*ptrscreen++ = *ptrsrc++;
 8000aa4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000aa6:	1c53      	adds	r3, r2, #1
 8000aa8:	65bb      	str	r3, [r7, #88]	; 0x58
 8000aaa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000aac:	1c59      	adds	r1, r3, #1
 8000aae:	6679      	str	r1, [r7, #100]	; 0x64
 8000ab0:	7812      	ldrb	r2, [r2, #0]
 8000ab2:	701a      	strb	r2, [r3, #0]
				for (int j = 0; j < 1; ++j) {
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	603b      	str	r3, [r7, #0]
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	ddf1      	ble.n	8000aa4 <updatescreen+0x3f4>
				}
				ptrscreen += 319;
 8000ac0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000ac2:	f203 133f 	addw	r3, r3, #319	; 0x13f
 8000ac6:	667b      	str	r3, [r7, #100]	; 0x64
			for (int i = 0; i < 4; ++i) {
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	3301      	adds	r3, #1
 8000acc:	607b      	str	r3, [r7, #4]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	2b03      	cmp	r3, #3
 8000ad2:	dde4      	ble.n	8000a9e <updatescreen+0x3ee>
	for (int missile_index = 0; missile_index < 6; ++missile_index) {
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	3301      	adds	r3, #1
 8000ad8:	60bb      	str	r3, [r7, #8]
 8000ada:	68bb      	ldr	r3, [r7, #8]
 8000adc:	2b05      	cmp	r3, #5
 8000ade:	ddc1      	ble.n	8000a64 <updatescreen+0x3b4>
			}
		}
	}

	// Display explosions
	explodeInvader1();
 8000ae0:	f000 f9d8 	bl	8000e94 <explodeInvader1>


	displayint(playerScore, (uint32_t*)(0x20020418));
 8000ae4:	4b0b      	ldr	r3, [pc, #44]	; (8000b14 <updatescreen+0x464>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	b29b      	uxth	r3, r3
 8000aea:	490b      	ldr	r1, [pc, #44]	; (8000b18 <updatescreen+0x468>)
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff fd85 	bl	80005fc <displayint>
}
 8000af2:	bf00      	nop
 8000af4:	3768      	adds	r7, #104	; 0x68
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	2000047c 	.word	0x2000047c
 8000b00:	200004dc 	.word	0x200004dc
 8000b04:	200004c4 	.word	0x200004c4
 8000b08:	20000514 	.word	0x20000514
 8000b0c:	20000548 	.word	0x20000548
 8000b10:	200000c0 	.word	0x200000c0
 8000b14:	2000027c 	.word	0x2000027c
 8000b18:	20020418 	.word	0x20020418

08000b1c <updatePlayerMissileStatus>:

void updatePlayerMissileStatus(int missile_index)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b099      	sub	sp, #100	; 0x64
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
	int pos_x = player_missile_prev_xpos[missile_index];
 8000b24:	4aa9      	ldr	r2, [pc, #676]	; (8000dcc <updatePlayerMissileStatus+0x2b0>)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b2c:	61fb      	str	r3, [r7, #28]
	int pos_y = player_missile_prev_ypos[missile_index];
 8000b2e:	4aa8      	ldr	r2, [pc, #672]	; (8000dd0 <updatePlayerMissileStatus+0x2b4>)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b36:	61bb      	str	r3, [r7, #24]

	// Check if missile is out of bounds
	if (player_missile_ypos[missile_index] <= 15) {
 8000b38:	4aa6      	ldr	r2, [pc, #664]	; (8000dd4 <updatePlayerMissileStatus+0x2b8>)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b40:	2b0f      	cmp	r3, #15
 8000b42:	dc2c      	bgt.n	8000b9e <updatePlayerMissileStatus+0x82>
		player_missile_status[missile_index] = 0;
 8000b44:	4aa4      	ldr	r2, [pc, #656]	; (8000dd8 <updatePlayerMissileStatus+0x2bc>)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	2100      	movs	r1, #0
 8000b4a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		uint8_t* ptrscreen = (uint8_t*)(0x20020000 + pos_y*320 + pos_x);
 8000b4e:	69ba      	ldr	r2, [r7, #24]
 8000b50:	4613      	mov	r3, r2
 8000b52:	009b      	lsls	r3, r3, #2
 8000b54:	4413      	add	r3, r2
 8000b56:	019b      	lsls	r3, r3, #6
 8000b58:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8000b5c:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000b60:	69fa      	ldr	r2, [r7, #28]
 8000b62:	4413      	add	r3, r2
 8000b64:	65fb      	str	r3, [r7, #92]	; 0x5c
		for (int i = 0; i < 4; i++) {
 8000b66:	2300      	movs	r3, #0
 8000b68:	65bb      	str	r3, [r7, #88]	; 0x58
 8000b6a:	e014      	b.n	8000b96 <updatePlayerMissileStatus+0x7a>
			for (int j = 0; j < 1; j++) {
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	657b      	str	r3, [r7, #84]	; 0x54
 8000b70:	e007      	b.n	8000b82 <updatePlayerMissileStatus+0x66>
				*ptrscreen++ = 0;
 8000b72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000b74:	1c5a      	adds	r2, r3, #1
 8000b76:	65fa      	str	r2, [r7, #92]	; 0x5c
 8000b78:	2200      	movs	r2, #0
 8000b7a:	701a      	strb	r2, [r3, #0]
			for (int j = 0; j < 1; j++) {
 8000b7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000b7e:	3301      	adds	r3, #1
 8000b80:	657b      	str	r3, [r7, #84]	; 0x54
 8000b82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	ddf4      	ble.n	8000b72 <updatePlayerMissileStatus+0x56>
			}
			ptrscreen += 319;
 8000b88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000b8a:	f203 133f 	addw	r3, r3, #319	; 0x13f
 8000b8e:	65fb      	str	r3, [r7, #92]	; 0x5c
		for (int i = 0; i < 4; i++) {
 8000b90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000b92:	3301      	adds	r3, #1
 8000b94:	65bb      	str	r3, [r7, #88]	; 0x58
 8000b96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000b98:	2b03      	cmp	r3, #3
 8000b9a:	dde7      	ble.n	8000b6c <updatePlayerMissileStatus+0x50>
		}
		return;
 8000b9c:	e110      	b.n	8000dc0 <updatePlayerMissileStatus+0x2a4>

	/// Check for player missile and enemy collision
	// Loop through enemy positions to check if one is hit
	int inv_pos_x;
	int inv_pos_y;
	int inv_w = 12;
 8000b9e:	230c      	movs	r3, #12
 8000ba0:	617b      	str	r3, [r7, #20]
	int inv_h = 8;
 8000ba2:	2308      	movs	r3, #8
 8000ba4:	613b      	str	r3, [r7, #16]
	int inv_r, inv_c, inv_hit = 0;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	64bb      	str	r3, [r7, #72]	; 0x48
	for (int row = 0; row < 4; ++row) {
 8000baa:	2300      	movs	r3, #0
 8000bac:	647b      	str	r3, [r7, #68]	; 0x44
 8000bae:	e04a      	b.n	8000c46 <updatePlayerMissileStatus+0x12a>
		for (int col = 0; col < 6; ++col) {
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	643b      	str	r3, [r7, #64]	; 0x40
 8000bb4:	e041      	b.n	8000c3a <updatePlayerMissileStatus+0x11e>
			if (invader1_status[row][col] == 0) {
 8000bb6:	4989      	ldr	r1, [pc, #548]	; (8000ddc <updatePlayerMissileStatus+0x2c0>)
 8000bb8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000bba:	4613      	mov	r3, r2
 8000bbc:	005b      	lsls	r3, r3, #1
 8000bbe:	4413      	add	r3, r2
 8000bc0:	005b      	lsls	r3, r3, #1
 8000bc2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000bc4:	4413      	add	r3, r2
 8000bc6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d031      	beq.n	8000c32 <updatePlayerMissileStatus+0x116>
				continue;
			}
			inv_pos_x = invader1_prev_xpos[row][col];
 8000bce:	4984      	ldr	r1, [pc, #528]	; (8000de0 <updatePlayerMissileStatus+0x2c4>)
 8000bd0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000bd2:	4613      	mov	r3, r2
 8000bd4:	005b      	lsls	r3, r3, #1
 8000bd6:	4413      	add	r3, r2
 8000bd8:	005b      	lsls	r3, r3, #1
 8000bda:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000bdc:	4413      	add	r3, r2
 8000bde:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000be2:	60fb      	str	r3, [r7, #12]
			inv_pos_y = invader1_prev_ypos[row][col];
 8000be4:	497f      	ldr	r1, [pc, #508]	; (8000de4 <updatePlayerMissileStatus+0x2c8>)
 8000be6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000be8:	4613      	mov	r3, r2
 8000bea:	005b      	lsls	r3, r3, #1
 8000bec:	4413      	add	r3, r2
 8000bee:	005b      	lsls	r3, r3, #1
 8000bf0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000bf2:	4413      	add	r3, r2
 8000bf4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000bf8:	60bb      	str	r3, [r7, #8]

			if ( ((inv_pos_x + inv_w) >= pos_x) && (inv_pos_x <= pos_x + 2) && ((inv_pos_y + inv_h) >= pos_y) && (inv_pos_y <= pos_y) ) {
 8000bfa:	68fa      	ldr	r2, [r7, #12]
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	4413      	add	r3, r2
 8000c00:	69fa      	ldr	r2, [r7, #28]
 8000c02:	429a      	cmp	r2, r3
 8000c04:	dc16      	bgt.n	8000c34 <updatePlayerMissileStatus+0x118>
 8000c06:	69fb      	ldr	r3, [r7, #28]
 8000c08:	3302      	adds	r3, #2
 8000c0a:	68fa      	ldr	r2, [r7, #12]
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	dc11      	bgt.n	8000c34 <updatePlayerMissileStatus+0x118>
 8000c10:	68ba      	ldr	r2, [r7, #8]
 8000c12:	693b      	ldr	r3, [r7, #16]
 8000c14:	4413      	add	r3, r2
 8000c16:	69ba      	ldr	r2, [r7, #24]
 8000c18:	429a      	cmp	r2, r3
 8000c1a:	dc0b      	bgt.n	8000c34 <updatePlayerMissileStatus+0x118>
 8000c1c:	68ba      	ldr	r2, [r7, #8]
 8000c1e:	69bb      	ldr	r3, [r7, #24]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	dc07      	bgt.n	8000c34 <updatePlayerMissileStatus+0x118>
				inv_hit = 1;
 8000c24:	2301      	movs	r3, #1
 8000c26:	64bb      	str	r3, [r7, #72]	; 0x48
				inv_r = row;
 8000c28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c2a:	653b      	str	r3, [r7, #80]	; 0x50
				inv_c = col;
 8000c2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000c2e:	64fb      	str	r3, [r7, #76]	; 0x4c
				break;
 8000c30:	e006      	b.n	8000c40 <updatePlayerMissileStatus+0x124>
				continue;
 8000c32:	bf00      	nop
		for (int col = 0; col < 6; ++col) {
 8000c34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000c36:	3301      	adds	r3, #1
 8000c38:	643b      	str	r3, [r7, #64]	; 0x40
 8000c3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000c3c:	2b05      	cmp	r3, #5
 8000c3e:	ddba      	ble.n	8000bb6 <updatePlayerMissileStatus+0x9a>
	for (int row = 0; row < 4; ++row) {
 8000c40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c42:	3301      	adds	r3, #1
 8000c44:	647b      	str	r3, [r7, #68]	; 0x44
 8000c46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c48:	2b03      	cmp	r3, #3
 8000c4a:	ddb1      	ble.n	8000bb0 <updatePlayerMissileStatus+0x94>


		}
	}

	if (inv_hit == 1) {
 8000c4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c4e:	2b01      	cmp	r3, #1
 8000c50:	f040 80b5 	bne.w	8000dbe <updatePlayerMissileStatus+0x2a2>
		playerScore += 10;
 8000c54:	4b64      	ldr	r3, [pc, #400]	; (8000de8 <updatePlayerMissileStatus+0x2cc>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	330a      	adds	r3, #10
 8000c5a:	4a63      	ldr	r2, [pc, #396]	; (8000de8 <updatePlayerMissileStatus+0x2cc>)
 8000c5c:	6013      	str	r3, [r2, #0]
		player_missile_status[missile_index] = 0;
 8000c5e:	4a5e      	ldr	r2, [pc, #376]	; (8000dd8 <updatePlayerMissileStatus+0x2bc>)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	2100      	movs	r1, #0
 8000c64:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		invader1_status[inv_r][inv_c] = 0;
 8000c68:	495c      	ldr	r1, [pc, #368]	; (8000ddc <updatePlayerMissileStatus+0x2c0>)
 8000c6a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000c6c:	4613      	mov	r3, r2
 8000c6e:	005b      	lsls	r3, r3, #1
 8000c70:	4413      	add	r3, r2
 8000c72:	005b      	lsls	r3, r3, #1
 8000c74:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000c76:	4413      	add	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		inv_pos_x = invader1_prev_xpos[inv_r][inv_c];
 8000c7e:	4958      	ldr	r1, [pc, #352]	; (8000de0 <updatePlayerMissileStatus+0x2c4>)
 8000c80:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000c82:	4613      	mov	r3, r2
 8000c84:	005b      	lsls	r3, r3, #1
 8000c86:	4413      	add	r3, r2
 8000c88:	005b      	lsls	r3, r3, #1
 8000c8a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000c8c:	4413      	add	r3, r2
 8000c8e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000c92:	60fb      	str	r3, [r7, #12]
		inv_pos_y = invader1_prev_ypos[inv_r][inv_c];
 8000c94:	4953      	ldr	r1, [pc, #332]	; (8000de4 <updatePlayerMissileStatus+0x2c8>)
 8000c96:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000c98:	4613      	mov	r3, r2
 8000c9a:	005b      	lsls	r3, r3, #1
 8000c9c:	4413      	add	r3, r2
 8000c9e:	005b      	lsls	r3, r3, #1
 8000ca0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000ca2:	4413      	add	r3, r2
 8000ca4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000ca8:	60bb      	str	r3, [r7, #8]

		// Erase missile and enemy
		uint8_t* ptrscreen = (uint8_t*)(0x20020000 + pos_y*320 + pos_x);
 8000caa:	69ba      	ldr	r2, [r7, #24]
 8000cac:	4613      	mov	r3, r2
 8000cae:	009b      	lsls	r3, r3, #2
 8000cb0:	4413      	add	r3, r2
 8000cb2:	019b      	lsls	r3, r3, #6
 8000cb4:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8000cb8:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000cbc:	69fa      	ldr	r2, [r7, #28]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
		for (int i = 0; i < 4; i++) {
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	63bb      	str	r3, [r7, #56]	; 0x38
 8000cc6:	e014      	b.n	8000cf2 <updatePlayerMissileStatus+0x1d6>
			for (int j = 0; j < 1; j++) {
 8000cc8:	2300      	movs	r3, #0
 8000cca:	637b      	str	r3, [r7, #52]	; 0x34
 8000ccc:	e007      	b.n	8000cde <updatePlayerMissileStatus+0x1c2>
				*ptrscreen++ = 0;
 8000cce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000cd0:	1c5a      	adds	r2, r3, #1
 8000cd2:	63fa      	str	r2, [r7, #60]	; 0x3c
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	701a      	strb	r2, [r3, #0]
			for (int j = 0; j < 1; j++) {
 8000cd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cda:	3301      	adds	r3, #1
 8000cdc:	637b      	str	r3, [r7, #52]	; 0x34
 8000cde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	ddf4      	ble.n	8000cce <updatePlayerMissileStatus+0x1b2>
			}
			ptrscreen += 319;
 8000ce4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ce6:	f203 133f 	addw	r3, r3, #319	; 0x13f
 8000cea:	63fb      	str	r3, [r7, #60]	; 0x3c
		for (int i = 0; i < 4; i++) {
 8000cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000cee:	3301      	adds	r3, #1
 8000cf0:	63bb      	str	r3, [r7, #56]	; 0x38
 8000cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000cf4:	2b03      	cmp	r3, #3
 8000cf6:	dde7      	ble.n	8000cc8 <updatePlayerMissileStatus+0x1ac>
		}

		ptrscreen = (uint8_t*)(0x20020000 + inv_pos_y*320 + inv_pos_x);
 8000cf8:	68ba      	ldr	r2, [r7, #8]
 8000cfa:	4613      	mov	r3, r2
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	4413      	add	r3, r2
 8000d00:	019b      	lsls	r3, r3, #6
 8000d02:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8000d06:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000d0a:	68fa      	ldr	r2, [r7, #12]
 8000d0c:	4413      	add	r3, r2
 8000d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
		for (int i = 0; i < 8; i++) {
 8000d10:	2300      	movs	r3, #0
 8000d12:	633b      	str	r3, [r7, #48]	; 0x30
 8000d14:	e014      	b.n	8000d40 <updatePlayerMissileStatus+0x224>
			for (int j = 0; j < 12; j++) {
 8000d16:	2300      	movs	r3, #0
 8000d18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d1a:	e007      	b.n	8000d2c <updatePlayerMissileStatus+0x210>
				*ptrscreen++ = 0;
 8000d1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d1e:	1c5a      	adds	r2, r3, #1
 8000d20:	63fa      	str	r2, [r7, #60]	; 0x3c
 8000d22:	2200      	movs	r2, #0
 8000d24:	701a      	strb	r2, [r3, #0]
			for (int j = 0; j < 12; j++) {
 8000d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d28:	3301      	adds	r3, #1
 8000d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d2e:	2b0b      	cmp	r3, #11
 8000d30:	ddf4      	ble.n	8000d1c <updatePlayerMissileStatus+0x200>
			}
			ptrscreen += 308;
 8000d32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d34:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8000d38:	63fb      	str	r3, [r7, #60]	; 0x3c
		for (int i = 0; i < 8; i++) {
 8000d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	633b      	str	r3, [r7, #48]	; 0x30
 8000d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d42:	2b07      	cmp	r3, #7
 8000d44:	dde7      	ble.n	8000d16 <updatePlayerMissileStatus+0x1fa>
		}

		// Find an open explosion index and assign explode coordinates
		for (int explode_index = 0; explode_index < 3; ++explode_index) {
 8000d46:	2300      	movs	r3, #0
 8000d48:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d4a:	e034      	b.n	8000db6 <updatePlayerMissileStatus+0x29a>
			if (inv1_explode_phase[explode_index] == 0){
 8000d4c:	4a27      	ldr	r2, [pc, #156]	; (8000dec <updatePlayerMissileStatus+0x2d0>)
 8000d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d12b      	bne.n	8000db0 <updatePlayerMissileStatus+0x294>
				inv1_explode_phase[explode_index] = 1;
 8000d58:	4a24      	ldr	r2, [pc, #144]	; (8000dec <updatePlayerMissileStatus+0x2d0>)
 8000d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d5c:	2101      	movs	r1, #1
 8000d5e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

				int explode_x_pos = inv_pos_x - 10;
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	3b0a      	subs	r3, #10
 8000d66:	627b      	str	r3, [r7, #36]	; 0x24
				int explode_y_pos = inv_pos_y - 12;
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	3b0c      	subs	r3, #12
 8000d6c:	623b      	str	r3, [r7, #32]

				// Cap explosion coordinates to the screen
				if (explode_x_pos <= 0) explode_x_pos = 0;
 8000d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	dc01      	bgt.n	8000d78 <updatePlayerMissileStatus+0x25c>
 8000d74:	2300      	movs	r3, #0
 8000d76:	627b      	str	r3, [r7, #36]	; 0x24
				if (explode_x_pos >= 288) explode_x_pos = 288;
 8000d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d7a:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 8000d7e:	db02      	blt.n	8000d86 <updatePlayerMissileStatus+0x26a>
 8000d80:	f44f 7390 	mov.w	r3, #288	; 0x120
 8000d84:	627b      	str	r3, [r7, #36]	; 0x24
				if (explode_y_pos >= 167) explode_y_pos = 167;
 8000d86:	6a3b      	ldr	r3, [r7, #32]
 8000d88:	2ba6      	cmp	r3, #166	; 0xa6
 8000d8a:	dd01      	ble.n	8000d90 <updatePlayerMissileStatus+0x274>
 8000d8c:	23a7      	movs	r3, #167	; 0xa7
 8000d8e:	623b      	str	r3, [r7, #32]
				if (explode_y_pos <= 0) explode_y_pos = 0;
 8000d90:	6a3b      	ldr	r3, [r7, #32]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	dc01      	bgt.n	8000d9a <updatePlayerMissileStatus+0x27e>
 8000d96:	2300      	movs	r3, #0
 8000d98:	623b      	str	r3, [r7, #32]

				inv1_x_pos_to_explode[explode_index] = explode_x_pos;
 8000d9a:	4915      	ldr	r1, [pc, #84]	; (8000df0 <updatePlayerMissileStatus+0x2d4>)
 8000d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000da0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				inv1_y_pos_to_explode[explode_index] = explode_y_pos;
 8000da4:	4913      	ldr	r1, [pc, #76]	; (8000df4 <updatePlayerMissileStatus+0x2d8>)
 8000da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000da8:	6a3a      	ldr	r2, [r7, #32]
 8000daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				break;
 8000dae:	e005      	b.n	8000dbc <updatePlayerMissileStatus+0x2a0>
		for (int explode_index = 0; explode_index < 3; ++explode_index) {
 8000db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000db2:	3301      	adds	r3, #1
 8000db4:	62bb      	str	r3, [r7, #40]	; 0x28
 8000db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000db8:	2b02      	cmp	r3, #2
 8000dba:	ddc7      	ble.n	8000d4c <updatePlayerMissileStatus+0x230>
		}

	}


	return;
 8000dbc:	bf00      	nop
 8000dbe:	bf00      	nop
}
 8000dc0:	3764      	adds	r7, #100	; 0x64
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	20000500 	.word	0x20000500
 8000dd0:	2000052c 	.word	0x2000052c
 8000dd4:	200004f4 	.word	0x200004f4
 8000dd8:	2000028c 	.word	0x2000028c
 8000ddc:	20000418 	.word	0x20000418
 8000de0:	20000358 	.word	0x20000358
 8000de4:	200003b8 	.word	0x200003b8
 8000de8:	2000027c 	.word	0x2000027c
 8000dec:	200004b8 	.word	0x200004b8
 8000df0:	200004a0 	.word	0x200004a0
 8000df4:	200004ac 	.word	0x200004ac

08000df8 <updateEnemyMissileStatus>:


void updateEnemyMissileStatus(int missile_index)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b087      	sub	sp, #28
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]

	//int pos_x = invader1_missile_xpos[missile_index];
	int pos_y = invader1_missile_ypos[missile_index];
 8000e00:	4a20      	ldr	r2, [pc, #128]	; (8000e84 <updateEnemyMissileStatus+0x8c>)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e08:	60bb      	str	r3, [r7, #8]

	if (pos_y >= 200) { // out of bounds and erase
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	2bc7      	cmp	r3, #199	; 0xc7
 8000e0e:	dd32      	ble.n	8000e76 <updateEnemyMissileStatus+0x7e>
		invader1_missile_status[missile_index] = 0;
 8000e10:	4a1d      	ldr	r2, [pc, #116]	; (8000e88 <updateEnemyMissileStatus+0x90>)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2100      	movs	r1, #0
 8000e16:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		uint8_t* ptrscreen = (uint8_t*)(0x20020000 + invader1_missile_prev_ypos[missile_index]*320 + invader1_missile_prev_xpos[missile_index]);
 8000e1a:	4a1c      	ldr	r2, [pc, #112]	; (8000e8c <updateEnemyMissileStatus+0x94>)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e22:	4613      	mov	r3, r2
 8000e24:	009b      	lsls	r3, r3, #2
 8000e26:	4413      	add	r3, r2
 8000e28:	019b      	lsls	r3, r3, #6
 8000e2a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8000e2e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000e32:	4917      	ldr	r1, [pc, #92]	; (8000e90 <updateEnemyMissileStatus+0x98>)
 8000e34:	687a      	ldr	r2, [r7, #4]
 8000e36:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	617b      	str	r3, [r7, #20]
		for (int i = 0; i < 4; ++i) {
 8000e3e:	2300      	movs	r3, #0
 8000e40:	613b      	str	r3, [r7, #16]
 8000e42:	e014      	b.n	8000e6e <updateEnemyMissileStatus+0x76>
			for (int j = 0; j < 1; ++j) {
 8000e44:	2300      	movs	r3, #0
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	e007      	b.n	8000e5a <updateEnemyMissileStatus+0x62>
				*ptrscreen++ = 0;
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	1c5a      	adds	r2, r3, #1
 8000e4e:	617a      	str	r2, [r7, #20]
 8000e50:	2200      	movs	r2, #0
 8000e52:	701a      	strb	r2, [r3, #0]
			for (int j = 0; j < 1; ++j) {
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	3301      	adds	r3, #1
 8000e58:	60fb      	str	r3, [r7, #12]
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	ddf4      	ble.n	8000e4a <updateEnemyMissileStatus+0x52>
			}
			ptrscreen += 319;
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	f203 133f 	addw	r3, r3, #319	; 0x13f
 8000e66:	617b      	str	r3, [r7, #20]
		for (int i = 0; i < 4; ++i) {
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	613b      	str	r3, [r7, #16]
 8000e6e:	693b      	ldr	r3, [r7, #16]
 8000e70:	2b03      	cmp	r3, #3
 8000e72:	dde7      	ble.n	8000e44 <updateEnemyMissileStatus+0x4c>
		}
		return;
 8000e74:	e000      	b.n	8000e78 <updateEnemyMissileStatus+0x80>
	}


	return;
 8000e76:	bf00      	nop
}
 8000e78:	371c      	adds	r7, #28
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	20000514 	.word	0x20000514
 8000e88:	2000047c 	.word	0x2000047c
 8000e8c:	200004dc 	.word	0x200004dc
 8000e90:	200004c4 	.word	0x200004c4

08000e94 <explodeInvader1>:

void explodeInvader1()
{
 8000e94:	b480      	push	{r7}
 8000e96:	b089      	sub	sp, #36	; 0x24
 8000e98:	af00      	add	r7, sp, #0
	for (int explode_index = 0; explode_index < 3; ++explode_index) {
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	61fb      	str	r3, [r7, #28]
 8000e9e:	e0a0      	b.n	8000fe2 <explodeInvader1+0x14e>

		//if (inv1_explode_phase[explode_index] != 0) {

			uint8_t* screenptr = (uint8_t*) (0x20020000 + inv1_y_pos_to_explode[explode_index]*320 + inv1_x_pos_to_explode[explode_index]);
 8000ea0:	4a55      	ldr	r2, [pc, #340]	; (8000ff8 <explodeInvader1+0x164>)
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ea8:	4613      	mov	r3, r2
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	4413      	add	r3, r2
 8000eae:	019b      	lsls	r3, r3, #6
 8000eb0:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8000eb4:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000eb8:	4950      	ldr	r1, [pc, #320]	; (8000ffc <explodeInvader1+0x168>)
 8000eba:	69fa      	ldr	r2, [r7, #28]
 8000ebc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000ec0:	4413      	add	r3, r2
 8000ec2:	61bb      	str	r3, [r7, #24]
			uint8_t* explode_sprite = 0;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	617b      	str	r3, [r7, #20]

			// Erase explosion if sequence was complete and set explode_phase to 0
			if (inv1_explode_phase[explode_index] == 8) {
 8000ec8:	4a4d      	ldr	r2, [pc, #308]	; (8001000 <explodeInvader1+0x16c>)
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ed0:	2b08      	cmp	r3, #8
 8000ed2:	d129      	bne.n	8000f28 <explodeInvader1+0x94>

				for (int i = 0; i < 32; ++i) {
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	613b      	str	r3, [r7, #16]
 8000ed8:	e014      	b.n	8000f04 <explodeInvader1+0x70>
					for (int j = 0; j < 32; ++j) {
 8000eda:	2300      	movs	r3, #0
 8000edc:	60fb      	str	r3, [r7, #12]
 8000ede:	e007      	b.n	8000ef0 <explodeInvader1+0x5c>
						*screenptr++ = 0;
 8000ee0:	69bb      	ldr	r3, [r7, #24]
 8000ee2:	1c5a      	adds	r2, r3, #1
 8000ee4:	61ba      	str	r2, [r7, #24]
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	701a      	strb	r2, [r3, #0]
					for (int j = 0; j < 32; ++j) {
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	3301      	adds	r3, #1
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	2b1f      	cmp	r3, #31
 8000ef4:	ddf4      	ble.n	8000ee0 <explodeInvader1+0x4c>
					}
					screenptr += 288;
 8000ef6:	69bb      	ldr	r3, [r7, #24]
 8000ef8:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8000efc:	61bb      	str	r3, [r7, #24]
				for (int i = 0; i < 32; ++i) {
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	3301      	adds	r3, #1
 8000f02:	613b      	str	r3, [r7, #16]
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	2b1f      	cmp	r3, #31
 8000f08:	dde7      	ble.n	8000eda <explodeInvader1+0x46>
				}
				inv1_explode_phase[explode_index] = 0;
 8000f0a:	4a3d      	ldr	r2, [pc, #244]	; (8001000 <explodeInvader1+0x16c>)
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	2100      	movs	r1, #0
 8000f10:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				inv1_x_pos_to_explode[explode_index] = 0;
 8000f14:	4a39      	ldr	r2, [pc, #228]	; (8000ffc <explodeInvader1+0x168>)
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	2100      	movs	r1, #0
 8000f1a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				inv1_y_pos_to_explode[explode_index] = 0;
 8000f1e:	4a36      	ldr	r2, [pc, #216]	; (8000ff8 <explodeInvader1+0x164>)
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	2100      	movs	r1, #0
 8000f24:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			}

			// Find the right explode sprite
			switch (inv1_explode_phase[explode_index]) {
 8000f28:	4a35      	ldr	r2, [pc, #212]	; (8001000 <explodeInvader1+0x16c>)
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f30:	3b01      	subs	r3, #1
 8000f32:	2b06      	cmp	r3, #6
 8000f34:	d825      	bhi.n	8000f82 <explodeInvader1+0xee>
 8000f36:	a201      	add	r2, pc, #4	; (adr r2, 8000f3c <explodeInvader1+0xa8>)
 8000f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f3c:	08000f59 	.word	0x08000f59
 8000f40:	08000f5f 	.word	0x08000f5f
 8000f44:	08000f65 	.word	0x08000f65
 8000f48:	08000f6b 	.word	0x08000f6b
 8000f4c:	08000f71 	.word	0x08000f71
 8000f50:	08000f77 	.word	0x08000f77
 8000f54:	08000f7d 	.word	0x08000f7d
				case 1:
					explode_sprite = (uint8_t*) explode1;
 8000f58:	4b2a      	ldr	r3, [pc, #168]	; (8001004 <explodeInvader1+0x170>)
 8000f5a:	617b      	str	r3, [r7, #20]
					break;
 8000f5c:	e011      	b.n	8000f82 <explodeInvader1+0xee>
				case 2:
					explode_sprite = (uint8_t*) explode2;
 8000f5e:	4b2a      	ldr	r3, [pc, #168]	; (8001008 <explodeInvader1+0x174>)
 8000f60:	617b      	str	r3, [r7, #20]
					break;
 8000f62:	e00e      	b.n	8000f82 <explodeInvader1+0xee>
				case 3:
					explode_sprite = (uint8_t*) explode3;
 8000f64:	4b29      	ldr	r3, [pc, #164]	; (800100c <explodeInvader1+0x178>)
 8000f66:	617b      	str	r3, [r7, #20]
					break;
 8000f68:	e00b      	b.n	8000f82 <explodeInvader1+0xee>
				case 4:
					explode_sprite = (uint8_t*) explode4;
 8000f6a:	4b29      	ldr	r3, [pc, #164]	; (8001010 <explodeInvader1+0x17c>)
 8000f6c:	617b      	str	r3, [r7, #20]
					break;
 8000f6e:	e008      	b.n	8000f82 <explodeInvader1+0xee>
				case 5:
					explode_sprite = (uint8_t*) explode5;
 8000f70:	4b28      	ldr	r3, [pc, #160]	; (8001014 <explodeInvader1+0x180>)
 8000f72:	617b      	str	r3, [r7, #20]
					break;
 8000f74:	e005      	b.n	8000f82 <explodeInvader1+0xee>
				case 6:
					explode_sprite = (uint8_t*) explode6;
 8000f76:	4b28      	ldr	r3, [pc, #160]	; (8001018 <explodeInvader1+0x184>)
 8000f78:	617b      	str	r3, [r7, #20]
					break;
 8000f7a:	e002      	b.n	8000f82 <explodeInvader1+0xee>
				case 7:
					explode_sprite = (uint8_t*) explode7;
 8000f7c:	4b27      	ldr	r3, [pc, #156]	; (800101c <explodeInvader1+0x188>)
 8000f7e:	617b      	str	r3, [r7, #20]
					break;
 8000f80:	bf00      	nop
			}
			if (inv1_explode_phase[explode_index] != 0) {
 8000f82:	4a1f      	ldr	r2, [pc, #124]	; (8001000 <explodeInvader1+0x16c>)
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d026      	beq.n	8000fdc <explodeInvader1+0x148>
				for (int i = 0; i < 32; ++i) {
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60bb      	str	r3, [r7, #8]
 8000f92:	e017      	b.n	8000fc4 <explodeInvader1+0x130>
					for (int j = 0; j < 32; ++j) {
 8000f94:	2300      	movs	r3, #0
 8000f96:	607b      	str	r3, [r7, #4]
 8000f98:	e00a      	b.n	8000fb0 <explodeInvader1+0x11c>
						*screenptr++ = *explode_sprite++;
 8000f9a:	697a      	ldr	r2, [r7, #20]
 8000f9c:	1c53      	adds	r3, r2, #1
 8000f9e:	617b      	str	r3, [r7, #20]
 8000fa0:	69bb      	ldr	r3, [r7, #24]
 8000fa2:	1c59      	adds	r1, r3, #1
 8000fa4:	61b9      	str	r1, [r7, #24]
 8000fa6:	7812      	ldrb	r2, [r2, #0]
 8000fa8:	701a      	strb	r2, [r3, #0]
					for (int j = 0; j < 32; ++j) {
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	3301      	adds	r3, #1
 8000fae:	607b      	str	r3, [r7, #4]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2b1f      	cmp	r3, #31
 8000fb4:	ddf1      	ble.n	8000f9a <explodeInvader1+0x106>
					}
					screenptr += 288;
 8000fb6:	69bb      	ldr	r3, [r7, #24]
 8000fb8:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8000fbc:	61bb      	str	r3, [r7, #24]
				for (int i = 0; i < 32; ++i) {
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	60bb      	str	r3, [r7, #8]
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	2b1f      	cmp	r3, #31
 8000fc8:	dde4      	ble.n	8000f94 <explodeInvader1+0x100>
				}
				inv1_explode_phase[explode_index]++;
 8000fca:	4a0d      	ldr	r2, [pc, #52]	; (8001000 <explodeInvader1+0x16c>)
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fd2:	1c5a      	adds	r2, r3, #1
 8000fd4:	490a      	ldr	r1, [pc, #40]	; (8001000 <explodeInvader1+0x16c>)
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int explode_index = 0; explode_index < 3; ++explode_index) {
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	3301      	adds	r3, #1
 8000fe0:	61fb      	str	r3, [r7, #28]
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	2b02      	cmp	r3, #2
 8000fe6:	f77f af5b 	ble.w	8000ea0 <explodeInvader1+0xc>


		//}

	}
	return;
 8000fea:	bf00      	nop
}
 8000fec:	3724      	adds	r7, #36	; 0x24
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	200004ac 	.word	0x200004ac
 8000ffc:	200004a0 	.word	0x200004a0
 8001000:	200004b8 	.word	0x200004b8
 8001004:	08004628 	.word	0x08004628
 8001008:	08004a28 	.word	0x08004a28
 800100c:	08004e28 	.word	0x08004e28
 8001010:	08005228 	.word	0x08005228
 8001014:	08005628 	.word	0x08005628
 8001018:	08005a28 	.word	0x08005a28
 800101c:	08005e28 	.word	0x08005e28

08001020 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b098      	sub	sp, #96	; 0x60
 8001024:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001026:	f000 fd95 	bl	8001b54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800102a:	f000 fc07 	bl	800183c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800102e:	f000 fc63 	bl	80018f8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  ship_x = 154;
 8001032:	4b99      	ldr	r3, [pc, #612]	; (8001298 <main+0x278>)
 8001034:	229a      	movs	r2, #154	; 0x9a
 8001036:	601a      	str	r2, [r3, #0]
  ship_y = 192;
 8001038:	4b98      	ldr	r3, [pc, #608]	; (800129c <main+0x27c>)
 800103a:	22c0      	movs	r2, #192	; 0xc0
 800103c:	601a      	str	r2, [r3, #0]
  ship_px = ship_x;
 800103e:	4b96      	ldr	r3, [pc, #600]	; (8001298 <main+0x278>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a97      	ldr	r2, [pc, #604]	; (80012a0 <main+0x280>)
 8001044:	6013      	str	r3, [r2, #0]
  ship_py = ship_y;
 8001046:	4b95      	ldr	r3, [pc, #596]	; (800129c <main+0x27c>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a96      	ldr	r2, [pc, #600]	; (80012a4 <main+0x284>)
 800104c:	6013      	str	r3, [r2, #0]

  // Initialize Invader 1 position and status
  for (int r = 0; r < 4; r++) {
 800104e:	2300      	movs	r3, #0
 8001050:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001052:	e060      	b.n	8001116 <main+0xf6>
	  for (int c = 0; c < 6; c++) {
 8001054:	2300      	movs	r3, #0
 8001056:	65bb      	str	r3, [r7, #88]	; 0x58
 8001058:	e057      	b.n	800110a <main+0xea>
		  invader1_status[r][c] = 1;
 800105a:	4993      	ldr	r1, [pc, #588]	; (80012a8 <main+0x288>)
 800105c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800105e:	4613      	mov	r3, r2
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	4413      	add	r3, r2
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001068:	4413      	add	r3, r2
 800106a:	2201      	movs	r2, #1
 800106c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		  invader1_xpos[r][c] = 80 + c*30;
 8001070:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001072:	4613      	mov	r3, r2
 8001074:	011b      	lsls	r3, r3, #4
 8001076:	1a9b      	subs	r3, r3, r2
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	f103 0150 	add.w	r1, r3, #80	; 0x50
 800107e:	488b      	ldr	r0, [pc, #556]	; (80012ac <main+0x28c>)
 8001080:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001082:	4613      	mov	r3, r2
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	4413      	add	r3, r2
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800108c:	4413      	add	r3, r2
 800108e:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
		  invader1_ypos[r][c] = 50 + r*20;
 8001092:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001094:	4613      	mov	r3, r2
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	4413      	add	r3, r2
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	f103 0132 	add.w	r1, r3, #50	; 0x32
 80010a0:	4883      	ldr	r0, [pc, #524]	; (80012b0 <main+0x290>)
 80010a2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80010a4:	4613      	mov	r3, r2
 80010a6:	005b      	lsls	r3, r3, #1
 80010a8:	4413      	add	r3, r2
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80010ae:	4413      	add	r3, r2
 80010b0:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
		  invader1_prev_xpos[r][c] = invader1_xpos[r][c];
 80010b4:	497d      	ldr	r1, [pc, #500]	; (80012ac <main+0x28c>)
 80010b6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80010b8:	4613      	mov	r3, r2
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	4413      	add	r3, r2
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80010c2:	4413      	add	r3, r2
 80010c4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80010c8:	487a      	ldr	r0, [pc, #488]	; (80012b4 <main+0x294>)
 80010ca:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80010cc:	4613      	mov	r3, r2
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	4413      	add	r3, r2
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80010d6:	4413      	add	r3, r2
 80010d8:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
		  invader1_prev_ypos[r][c] = invader1_ypos[r][c];
 80010dc:	4974      	ldr	r1, [pc, #464]	; (80012b0 <main+0x290>)
 80010de:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80010e0:	4613      	mov	r3, r2
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	4413      	add	r3, r2
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80010ea:	4413      	add	r3, r2
 80010ec:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80010f0:	4871      	ldr	r0, [pc, #452]	; (80012b8 <main+0x298>)
 80010f2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80010f4:	4613      	mov	r3, r2
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	4413      	add	r3, r2
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80010fe:	4413      	add	r3, r2
 8001100:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
	  for (int c = 0; c < 6; c++) {
 8001104:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001106:	3301      	adds	r3, #1
 8001108:	65bb      	str	r3, [r7, #88]	; 0x58
 800110a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800110c:	2b05      	cmp	r3, #5
 800110e:	dda4      	ble.n	800105a <main+0x3a>
  for (int r = 0; r < 4; r++) {
 8001110:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001112:	3301      	adds	r3, #1
 8001114:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001116:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001118:	2b03      	cmp	r3, #3
 800111a:	dd9b      	ble.n	8001054 <main+0x34>
	  }
  }


  displayIntroScreen((uint32_t) 250);
 800111c:	20fa      	movs	r0, #250	; 0xfa
 800111e:	f7ff f9db 	bl	80004d8 <displayIntroScreen>

  clearscreen();
 8001122:	f7ff fa2d 	bl	8000580 <clearscreen>

  gameStatus = LEVEL_1;
 8001126:	4b65      	ldr	r3, [pc, #404]	; (80012bc <main+0x29c>)
 8001128:	2201      	movs	r2, #1
 800112a:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /// Reset Game
	  if (gameStatus == RESET_LEVEL1) {
 800112c:	4b63      	ldr	r3, [pc, #396]	; (80012bc <main+0x29c>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	2b00      	cmp	r3, #0
 8001132:	f040 8095 	bne.w	8001260 <main+0x240>
		  highScore += playerScore;
 8001136:	4b62      	ldr	r3, [pc, #392]	; (80012c0 <main+0x2a0>)
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	4b62      	ldr	r3, [pc, #392]	; (80012c4 <main+0x2a4>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4413      	add	r3, r2
 8001140:	4a5f      	ldr	r2, [pc, #380]	; (80012c0 <main+0x2a0>)
 8001142:	6013      	str	r3, [r2, #0]
		  playerScore = 0;
 8001144:	4b5f      	ldr	r3, [pc, #380]	; (80012c4 <main+0x2a4>)
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]

		  // Initialize Invader 1 position and status
		  all_invader1_alive = 1;
 800114a:	4b5f      	ldr	r3, [pc, #380]	; (80012c8 <main+0x2a8>)
 800114c:	2201      	movs	r2, #1
 800114e:	601a      	str	r2, [r3, #0]
		  for (int r = 0; r < 4; r++) {
 8001150:	2300      	movs	r3, #0
 8001152:	657b      	str	r3, [r7, #84]	; 0x54
 8001154:	e060      	b.n	8001218 <main+0x1f8>
			  for (int c = 0; c < 6; c++) {
 8001156:	2300      	movs	r3, #0
 8001158:	653b      	str	r3, [r7, #80]	; 0x50
 800115a:	e057      	b.n	800120c <main+0x1ec>
				  invader1_status[r][c] = 1;
 800115c:	4952      	ldr	r1, [pc, #328]	; (80012a8 <main+0x288>)
 800115e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001160:	4613      	mov	r3, r2
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	4413      	add	r3, r2
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800116a:	4413      	add	r3, r2
 800116c:	2201      	movs	r2, #1
 800116e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				  invader1_xpos[r][c] = 80 + c*30;
 8001172:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001174:	4613      	mov	r3, r2
 8001176:	011b      	lsls	r3, r3, #4
 8001178:	1a9b      	subs	r3, r3, r2
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8001180:	484a      	ldr	r0, [pc, #296]	; (80012ac <main+0x28c>)
 8001182:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001184:	4613      	mov	r3, r2
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	4413      	add	r3, r2
 800118a:	005b      	lsls	r3, r3, #1
 800118c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800118e:	4413      	add	r3, r2
 8001190:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
				  invader1_ypos[r][c] = 50 + r*20;
 8001194:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001196:	4613      	mov	r3, r2
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	4413      	add	r3, r2
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	f103 0132 	add.w	r1, r3, #50	; 0x32
 80011a2:	4843      	ldr	r0, [pc, #268]	; (80012b0 <main+0x290>)
 80011a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80011a6:	4613      	mov	r3, r2
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	4413      	add	r3, r2
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80011b0:	4413      	add	r3, r2
 80011b2:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
				  invader1_prev_xpos[r][c] = invader1_xpos[r][c];
 80011b6:	493d      	ldr	r1, [pc, #244]	; (80012ac <main+0x28c>)
 80011b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80011ba:	4613      	mov	r3, r2
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	4413      	add	r3, r2
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80011c4:	4413      	add	r3, r2
 80011c6:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80011ca:	483a      	ldr	r0, [pc, #232]	; (80012b4 <main+0x294>)
 80011cc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80011ce:	4613      	mov	r3, r2
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	4413      	add	r3, r2
 80011d4:	005b      	lsls	r3, r3, #1
 80011d6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80011d8:	4413      	add	r3, r2
 80011da:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
				  invader1_prev_ypos[r][c] = invader1_ypos[r][c];
 80011de:	4934      	ldr	r1, [pc, #208]	; (80012b0 <main+0x290>)
 80011e0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80011e2:	4613      	mov	r3, r2
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	4413      	add	r3, r2
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80011ec:	4413      	add	r3, r2
 80011ee:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80011f2:	4831      	ldr	r0, [pc, #196]	; (80012b8 <main+0x298>)
 80011f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80011f6:	4613      	mov	r3, r2
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	4413      	add	r3, r2
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001200:	4413      	add	r3, r2
 8001202:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
			  for (int c = 0; c < 6; c++) {
 8001206:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001208:	3301      	adds	r3, #1
 800120a:	653b      	str	r3, [r7, #80]	; 0x50
 800120c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800120e:	2b05      	cmp	r3, #5
 8001210:	dda4      	ble.n	800115c <main+0x13c>
		  for (int r = 0; r < 4; r++) {
 8001212:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001214:	3301      	adds	r3, #1
 8001216:	657b      	str	r3, [r7, #84]	; 0x54
 8001218:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800121a:	2b03      	cmp	r3, #3
 800121c:	dd9b      	ble.n	8001156 <main+0x136>
			  }
		  }

		  // Reset Player Missiles
		  for (int missile_index = 0; missile_index < 3; ++missile_index) {
 800121e:	2300      	movs	r3, #0
 8001220:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001222:	e007      	b.n	8001234 <main+0x214>
			player_missile_status[missile_index] = 0;
 8001224:	4a29      	ldr	r2, [pc, #164]	; (80012cc <main+0x2ac>)
 8001226:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001228:	2100      	movs	r1, #0
 800122a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  for (int missile_index = 0; missile_index < 3; ++missile_index) {
 800122e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001230:	3301      	adds	r3, #1
 8001232:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001234:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001236:	2b02      	cmp	r3, #2
 8001238:	ddf4      	ble.n	8001224 <main+0x204>
		  }
		  // Reset Invader 1 Missiles
		  for (int missile_index = 0; missile_index < 6; ++missile_index) {
 800123a:	2300      	movs	r3, #0
 800123c:	64bb      	str	r3, [r7, #72]	; 0x48
 800123e:	e007      	b.n	8001250 <main+0x230>
			invader1_missile_status[missile_index] = 0;
 8001240:	4a23      	ldr	r2, [pc, #140]	; (80012d0 <main+0x2b0>)
 8001242:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001244:	2100      	movs	r1, #0
 8001246:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  for (int missile_index = 0; missile_index < 6; ++missile_index) {
 800124a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800124c:	3301      	adds	r3, #1
 800124e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001250:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001252:	2b05      	cmp	r3, #5
 8001254:	ddf4      	ble.n	8001240 <main+0x220>
		  }

		  gameStatus = LEVEL_1;
 8001256:	4b19      	ldr	r3, [pc, #100]	; (80012bc <main+0x29c>)
 8001258:	2201      	movs	r2, #1
 800125a:	701a      	strb	r2, [r3, #0]
		  clearscreen();
 800125c:	f7ff f990 	bl	8000580 <clearscreen>
	  }

	  /// Level 1
	  if (gameStatus == LEVEL_1) {
 8001260:	4b16      	ldr	r3, [pc, #88]	; (80012bc <main+0x29c>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	2b01      	cmp	r3, #1
 8001266:	f47f af61 	bne.w	800112c <main+0x10c>
		if (refresh==1) { // refresh interrupt was triggered
 800126a:	4b1a      	ldr	r3, [pc, #104]	; (80012d4 <main+0x2b4>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	b2db      	uxtb	r3, r3
 8001270:	2b01      	cmp	r3, #1
 8001272:	f040 80a6 	bne.w	80013c2 <main+0x3a2>
		  updatescreen();
 8001276:	f7ff fa1b 	bl	80006b0 <updatescreen>

		  // Save player previous position
		  ship_px = ship_x;
 800127a:	4b07      	ldr	r3, [pc, #28]	; (8001298 <main+0x278>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a08      	ldr	r2, [pc, #32]	; (80012a0 <main+0x280>)
 8001280:	6013      	str	r3, [r2, #0]
		  ship_py = ship_y;
 8001282:	4b06      	ldr	r3, [pc, #24]	; (800129c <main+0x27c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a07      	ldr	r2, [pc, #28]	; (80012a4 <main+0x284>)
 8001288:	6013      	str	r3, [r2, #0]

		  // Save enemy invader 1 previous position
		  for (int r = 0; r < 4; r++) {
 800128a:	2300      	movs	r3, #0
 800128c:	647b      	str	r3, [r7, #68]	; 0x44
 800128e:	e054      	b.n	800133a <main+0x31a>
			  for (int c = 0; c < 6; c++) {
 8001290:	2300      	movs	r3, #0
 8001292:	643b      	str	r3, [r7, #64]	; 0x40
 8001294:	e04b      	b.n	800132e <main+0x30e>
 8001296:	bf00      	nop
 8001298:	2000050c 	.word	0x2000050c
 800129c:	20000284 	.word	0x20000284
 80012a0:	20000510 	.word	0x20000510
 80012a4:	20000288 	.word	0x20000288
 80012a8:	20000418 	.word	0x20000418
 80012ac:	20000298 	.word	0x20000298
 80012b0:	200002f8 	.word	0x200002f8
 80012b4:	20000358 	.word	0x20000358
 80012b8:	200003b8 	.word	0x200003b8
 80012bc:	20000538 	.word	0x20000538
 80012c0:	20000278 	.word	0x20000278
 80012c4:	2000027c 	.word	0x2000027c
 80012c8:	200000cc 	.word	0x200000cc
 80012cc:	2000028c 	.word	0x2000028c
 80012d0:	2000047c 	.word	0x2000047c
 80012d4:	20000280 	.word	0x20000280
				  invader1_prev_xpos[r][c] = invader1_xpos[r][c];
 80012d8:	499d      	ldr	r1, [pc, #628]	; (8001550 <main+0x530>)
 80012da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80012dc:	4613      	mov	r3, r2
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	4413      	add	r3, r2
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80012e6:	4413      	add	r3, r2
 80012e8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80012ec:	4899      	ldr	r0, [pc, #612]	; (8001554 <main+0x534>)
 80012ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80012f0:	4613      	mov	r3, r2
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	4413      	add	r3, r2
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80012fa:	4413      	add	r3, r2
 80012fc:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
				  invader1_prev_ypos[r][c] = invader1_ypos[r][c];
 8001300:	4995      	ldr	r1, [pc, #596]	; (8001558 <main+0x538>)
 8001302:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001304:	4613      	mov	r3, r2
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	4413      	add	r3, r2
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800130e:	4413      	add	r3, r2
 8001310:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8001314:	4891      	ldr	r0, [pc, #580]	; (800155c <main+0x53c>)
 8001316:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001318:	4613      	mov	r3, r2
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	4413      	add	r3, r2
 800131e:	005b      	lsls	r3, r3, #1
 8001320:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001322:	4413      	add	r3, r2
 8001324:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
			  for (int c = 0; c < 6; c++) {
 8001328:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800132a:	3301      	adds	r3, #1
 800132c:	643b      	str	r3, [r7, #64]	; 0x40
 800132e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001330:	2b05      	cmp	r3, #5
 8001332:	ddd1      	ble.n	80012d8 <main+0x2b8>
		  for (int r = 0; r < 4; r++) {
 8001334:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001336:	3301      	adds	r3, #1
 8001338:	647b      	str	r3, [r7, #68]	; 0x44
 800133a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800133c:	2b03      	cmp	r3, #3
 800133e:	dda7      	ble.n	8001290 <main+0x270>
			  }
		  }

		  // Save player missiles previous position
		  for (int missile_index = 0; missile_index < 3; ++missile_index) {
 8001340:	2300      	movs	r3, #0
 8001342:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001344:	e018      	b.n	8001378 <main+0x358>
			if (player_missile_status[missile_index] == 1) {
 8001346:	4a86      	ldr	r2, [pc, #536]	; (8001560 <main+0x540>)
 8001348:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800134a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800134e:	2b01      	cmp	r3, #1
 8001350:	d10f      	bne.n	8001372 <main+0x352>
				player_missile_prev_xpos[missile_index] = player_missile_xpos[missile_index];
 8001352:	4a84      	ldr	r2, [pc, #528]	; (8001564 <main+0x544>)
 8001354:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001356:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800135a:	4983      	ldr	r1, [pc, #524]	; (8001568 <main+0x548>)
 800135c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800135e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				player_missile_prev_ypos[missile_index] = player_missile_ypos[missile_index];
 8001362:	4a82      	ldr	r2, [pc, #520]	; (800156c <main+0x54c>)
 8001364:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001366:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800136a:	4981      	ldr	r1, [pc, #516]	; (8001570 <main+0x550>)
 800136c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800136e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		  for (int missile_index = 0; missile_index < 3; ++missile_index) {
 8001372:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001374:	3301      	adds	r3, #1
 8001376:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800137a:	2b02      	cmp	r3, #2
 800137c:	dde3      	ble.n	8001346 <main+0x326>
			}
		  }

		  // Save enemy missiles previous position
		  for (int missile_index = 0; missile_index < 6; ++missile_index) {
 800137e:	2300      	movs	r3, #0
 8001380:	63bb      	str	r3, [r7, #56]	; 0x38
 8001382:	e018      	b.n	80013b6 <main+0x396>
			if (invader1_missile_status[missile_index] == 1) {
 8001384:	4a7b      	ldr	r2, [pc, #492]	; (8001574 <main+0x554>)
 8001386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001388:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800138c:	2b01      	cmp	r3, #1
 800138e:	d10f      	bne.n	80013b0 <main+0x390>
				invader1_missile_prev_xpos[missile_index] = invader1_missile_xpos[missile_index];
 8001390:	4a79      	ldr	r2, [pc, #484]	; (8001578 <main+0x558>)
 8001392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001394:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001398:	4978      	ldr	r1, [pc, #480]	; (800157c <main+0x55c>)
 800139a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800139c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				invader1_missile_prev_ypos[missile_index] = invader1_missile_ypos[missile_index];
 80013a0:	4a77      	ldr	r2, [pc, #476]	; (8001580 <main+0x560>)
 80013a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013a4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80013a8:	4976      	ldr	r1, [pc, #472]	; (8001584 <main+0x564>)
 80013aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		  for (int missile_index = 0; missile_index < 6; ++missile_index) {
 80013b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013b2:	3301      	adds	r3, #1
 80013b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80013b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013b8:	2b05      	cmp	r3, #5
 80013ba:	dde3      	ble.n	8001384 <main+0x364>
			}
		}

		  refresh = 0;
 80013bc:	4b72      	ldr	r3, [pc, #456]	; (8001588 <main+0x568>)
 80013be:	2200      	movs	r2, #0
 80013c0:	701a      	strb	r2, [r3, #0]
		}



		// Move player ship, player missiles and enemy missiles
		if (HAL_GetTick() - ctr_lastcheck >= 1) {
 80013c2:	f000 fc2d 	bl	8001c20 <HAL_GetTick>
 80013c6:	4602      	mov	r2, r0
 80013c8:	4b70      	ldr	r3, [pc, #448]	; (800158c <main+0x56c>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d05e      	beq.n	800148e <main+0x46e>
			if ((ship_x < 308) && HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_9)) { // Right
 80013d0:	4b6f      	ldr	r3, [pc, #444]	; (8001590 <main+0x570>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 80013d8:	da0d      	bge.n	80013f6 <main+0x3d6>
 80013da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013de:	486d      	ldr	r0, [pc, #436]	; (8001594 <main+0x574>)
 80013e0:	f000 febe 	bl	8002160 <HAL_GPIO_ReadPin>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d005      	beq.n	80013f6 <main+0x3d6>
				ship_x++;
 80013ea:	4b69      	ldr	r3, [pc, #420]	; (8001590 <main+0x570>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	3301      	adds	r3, #1
 80013f0:	4a67      	ldr	r2, [pc, #412]	; (8001590 <main+0x570>)
 80013f2:	6013      	str	r3, [r2, #0]
 80013f4:	e010      	b.n	8001418 <main+0x3f8>
			}
			else if ((ship_x > 0) && HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_10)) { // Left
 80013f6:	4b66      	ldr	r3, [pc, #408]	; (8001590 <main+0x570>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	dd0c      	ble.n	8001418 <main+0x3f8>
 80013fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001402:	4864      	ldr	r0, [pc, #400]	; (8001594 <main+0x574>)
 8001404:	f000 feac 	bl	8002160 <HAL_GPIO_ReadPin>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d004      	beq.n	8001418 <main+0x3f8>
				ship_x--;
 800140e:	4b60      	ldr	r3, [pc, #384]	; (8001590 <main+0x570>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	3b01      	subs	r3, #1
 8001414:	4a5e      	ldr	r2, [pc, #376]	; (8001590 <main+0x570>)
 8001416:	6013      	str	r3, [r2, #0]
			}

			// Move the fired player missiles
			for (int missile_index = 0; missile_index < 3; ++missile_index) {
 8001418:	2300      	movs	r3, #0
 800141a:	637b      	str	r3, [r7, #52]	; 0x34
 800141c:	e014      	b.n	8001448 <main+0x428>
				if (player_missile_status[missile_index] == 1) {
 800141e:	4a50      	ldr	r2, [pc, #320]	; (8001560 <main+0x540>)
 8001420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001422:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001426:	2b01      	cmp	r3, #1
 8001428:	d10b      	bne.n	8001442 <main+0x422>
					player_missile_ypos[missile_index]--;
 800142a:	4a50      	ldr	r2, [pc, #320]	; (800156c <main+0x54c>)
 800142c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800142e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001432:	1e5a      	subs	r2, r3, #1
 8001434:	494d      	ldr	r1, [pc, #308]	; (800156c <main+0x54c>)
 8001436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001438:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					updatePlayerMissileStatus(missile_index);
 800143c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800143e:	f7ff fb6d 	bl	8000b1c <updatePlayerMissileStatus>
			for (int missile_index = 0; missile_index < 3; ++missile_index) {
 8001442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001444:	3301      	adds	r3, #1
 8001446:	637b      	str	r3, [r7, #52]	; 0x34
 8001448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800144a:	2b02      	cmp	r3, #2
 800144c:	dde7      	ble.n	800141e <main+0x3fe>
				}
			}

			// Move fired enemy missiles
			for (int missile_index = 0; missile_index < 6; ++missile_index) {
 800144e:	2300      	movs	r3, #0
 8001450:	633b      	str	r3, [r7, #48]	; 0x30
 8001452:	e014      	b.n	800147e <main+0x45e>
				if (invader1_missile_status[missile_index] == 1) {
 8001454:	4a47      	ldr	r2, [pc, #284]	; (8001574 <main+0x554>)
 8001456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001458:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800145c:	2b01      	cmp	r3, #1
 800145e:	d10b      	bne.n	8001478 <main+0x458>
					invader1_missile_ypos[missile_index]++;
 8001460:	4a47      	ldr	r2, [pc, #284]	; (8001580 <main+0x560>)
 8001462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001464:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001468:	1c5a      	adds	r2, r3, #1
 800146a:	4945      	ldr	r1, [pc, #276]	; (8001580 <main+0x560>)
 800146c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800146e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					updateEnemyMissileStatus(missile_index);
 8001472:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001474:	f7ff fcc0 	bl	8000df8 <updateEnemyMissileStatus>
			for (int missile_index = 0; missile_index < 6; ++missile_index) {
 8001478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800147a:	3301      	adds	r3, #1
 800147c:	633b      	str	r3, [r7, #48]	; 0x30
 800147e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001480:	2b05      	cmp	r3, #5
 8001482:	dde7      	ble.n	8001454 <main+0x434>
				}
			}

			ctr_lastcheck = HAL_GetTick();
 8001484:	f000 fbcc 	bl	8001c20 <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	4b40      	ldr	r3, [pc, #256]	; (800158c <main+0x56c>)
 800148c:	601a      	str	r2, [r3, #0]
		}

		// Move Invader 1
		if (HAL_GetTick() - ctr_invader1_lastcheck >= 16) {
 800148e:	f000 fbc7 	bl	8001c20 <HAL_GetTick>
 8001492:	4602      	mov	r2, r0
 8001494:	4b40      	ldr	r3, [pc, #256]	; (8001598 <main+0x578>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	2b0f      	cmp	r3, #15
 800149c:	f240 80da 	bls.w	8001654 <main+0x634>

			if (row_to_move < 0) {
 80014a0:	4b3e      	ldr	r3, [pc, #248]	; (800159c <main+0x57c>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	da02      	bge.n	80014ae <main+0x48e>
				row_to_move = 3;
 80014a8:	4b3c      	ldr	r3, [pc, #240]	; (800159c <main+0x57c>)
 80014aa:	2203      	movs	r2, #3
 80014ac:	601a      	str	r2, [r3, #0]
			}
			for (int col = 0; col < 6; col++) {
 80014ae:	2300      	movs	r3, #0
 80014b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014b2:	e039      	b.n	8001528 <main+0x508>
				if (inv1_direction == 1) {
 80014b4:	4b3a      	ldr	r3, [pc, #232]	; (80015a0 <main+0x580>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d117      	bne.n	80014ec <main+0x4cc>
					invader1_xpos[row_to_move][col] += 4;
 80014bc:	4b37      	ldr	r3, [pc, #220]	; (800159c <main+0x57c>)
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	4923      	ldr	r1, [pc, #140]	; (8001550 <main+0x530>)
 80014c2:	4613      	mov	r3, r2
 80014c4:	005b      	lsls	r3, r3, #1
 80014c6:	4413      	add	r3, r2
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80014cc:	4413      	add	r3, r2
 80014ce:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80014d2:	4a32      	ldr	r2, [pc, #200]	; (800159c <main+0x57c>)
 80014d4:	6812      	ldr	r2, [r2, #0]
 80014d6:	1d19      	adds	r1, r3, #4
 80014d8:	481d      	ldr	r0, [pc, #116]	; (8001550 <main+0x530>)
 80014da:	4613      	mov	r3, r2
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	4413      	add	r3, r2
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80014e4:	4413      	add	r3, r2
 80014e6:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 80014ea:	e01a      	b.n	8001522 <main+0x502>
				}
				else if (inv1_direction == 0) {
 80014ec:	4b2c      	ldr	r3, [pc, #176]	; (80015a0 <main+0x580>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d116      	bne.n	8001522 <main+0x502>
					invader1_xpos[row_to_move][col] -= 4;
 80014f4:	4b29      	ldr	r3, [pc, #164]	; (800159c <main+0x57c>)
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	4915      	ldr	r1, [pc, #84]	; (8001550 <main+0x530>)
 80014fa:	4613      	mov	r3, r2
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	4413      	add	r3, r2
 8001500:	005b      	lsls	r3, r3, #1
 8001502:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001504:	4413      	add	r3, r2
 8001506:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800150a:	4a24      	ldr	r2, [pc, #144]	; (800159c <main+0x57c>)
 800150c:	6812      	ldr	r2, [r2, #0]
 800150e:	1f19      	subs	r1, r3, #4
 8001510:	480f      	ldr	r0, [pc, #60]	; (8001550 <main+0x530>)
 8001512:	4613      	mov	r3, r2
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	4413      	add	r3, r2
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800151c:	4413      	add	r3, r2
 800151e:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
			for (int col = 0; col < 6; col++) {
 8001522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001524:	3301      	adds	r3, #1
 8001526:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800152a:	2b05      	cmp	r3, #5
 800152c:	ddc2      	ble.n	80014b4 <main+0x494>
				}
			}
			row_to_move--;
 800152e:	4b1b      	ldr	r3, [pc, #108]	; (800159c <main+0x57c>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	3b01      	subs	r3, #1
 8001534:	4a19      	ldr	r2, [pc, #100]	; (800159c <main+0x57c>)
 8001536:	6013      	str	r3, [r2, #0]

			if (invader1_xpos[0][5] > 304) { // move down at right side
 8001538:	4b05      	ldr	r3, [pc, #20]	; (8001550 <main+0x530>)
 800153a:	695b      	ldr	r3, [r3, #20]
 800153c:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8001540:	dd55      	ble.n	80015ee <main+0x5ce>
				for (int row = 0; row < 4; row++) {
 8001542:	2300      	movs	r3, #0
 8001544:	62bb      	str	r3, [r7, #40]	; 0x28
 8001546:	e04b      	b.n	80015e0 <main+0x5c0>
					for (int col = 0; col < 6; col++) {
 8001548:	2300      	movs	r3, #0
 800154a:	627b      	str	r3, [r7, #36]	; 0x24
 800154c:	e042      	b.n	80015d4 <main+0x5b4>
 800154e:	bf00      	nop
 8001550:	20000298 	.word	0x20000298
 8001554:	20000358 	.word	0x20000358
 8001558:	200002f8 	.word	0x200002f8
 800155c:	200003b8 	.word	0x200003b8
 8001560:	2000028c 	.word	0x2000028c
 8001564:	2000053c 	.word	0x2000053c
 8001568:	20000500 	.word	0x20000500
 800156c:	200004f4 	.word	0x200004f4
 8001570:	2000052c 	.word	0x2000052c
 8001574:	2000047c 	.word	0x2000047c
 8001578:	20000548 	.word	0x20000548
 800157c:	200004c4 	.word	0x200004c4
 8001580:	20000514 	.word	0x20000514
 8001584:	200004dc 	.word	0x200004dc
 8001588:	20000280 	.word	0x20000280
 800158c:	20000494 	.word	0x20000494
 8001590:	2000050c 	.word	0x2000050c
 8001594:	40020c00 	.word	0x40020c00
 8001598:	20000498 	.word	0x20000498
 800159c:	200000c4 	.word	0x200000c4
 80015a0:	200000c8 	.word	0x200000c8
						invader1_ypos[row][col] += 2;
 80015a4:	4991      	ldr	r1, [pc, #580]	; (80017ec <main+0x7cc>)
 80015a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015a8:	4613      	mov	r3, r2
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	4413      	add	r3, r2
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015b2:	4413      	add	r3, r2
 80015b4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80015b8:	1c99      	adds	r1, r3, #2
 80015ba:	488c      	ldr	r0, [pc, #560]	; (80017ec <main+0x7cc>)
 80015bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015be:	4613      	mov	r3, r2
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	4413      	add	r3, r2
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015c8:	4413      	add	r3, r2
 80015ca:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
					for (int col = 0; col < 6; col++) {
 80015ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d0:	3301      	adds	r3, #1
 80015d2:	627b      	str	r3, [r7, #36]	; 0x24
 80015d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d6:	2b05      	cmp	r3, #5
 80015d8:	dde4      	ble.n	80015a4 <main+0x584>
				for (int row = 0; row < 4; row++) {
 80015da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015dc:	3301      	adds	r3, #1
 80015de:	62bb      	str	r3, [r7, #40]	; 0x28
 80015e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015e2:	2b03      	cmp	r3, #3
 80015e4:	ddb0      	ble.n	8001548 <main+0x528>
					}
				}
				inv1_direction = 0;
 80015e6:	4b82      	ldr	r3, [pc, #520]	; (80017f0 <main+0x7d0>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	e02d      	b.n	800164a <main+0x62a>
			}
			else if (invader1_xpos[0][0] < 4) { // down at left side
 80015ee:	4b81      	ldr	r3, [pc, #516]	; (80017f4 <main+0x7d4>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	2b03      	cmp	r3, #3
 80015f4:	dc29      	bgt.n	800164a <main+0x62a>
				for (int row = 0; row < 4; ++row) {
 80015f6:	2300      	movs	r3, #0
 80015f8:	623b      	str	r3, [r7, #32]
 80015fa:	e020      	b.n	800163e <main+0x61e>
					for (int col = 0; col < 6; ++col) {
 80015fc:	2300      	movs	r3, #0
 80015fe:	61fb      	str	r3, [r7, #28]
 8001600:	e017      	b.n	8001632 <main+0x612>
						invader1_ypos[row][col] += 2;
 8001602:	497a      	ldr	r1, [pc, #488]	; (80017ec <main+0x7cc>)
 8001604:	6a3a      	ldr	r2, [r7, #32]
 8001606:	4613      	mov	r3, r2
 8001608:	005b      	lsls	r3, r3, #1
 800160a:	4413      	add	r3, r2
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	69fa      	ldr	r2, [r7, #28]
 8001610:	4413      	add	r3, r2
 8001612:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001616:	1c99      	adds	r1, r3, #2
 8001618:	4874      	ldr	r0, [pc, #464]	; (80017ec <main+0x7cc>)
 800161a:	6a3a      	ldr	r2, [r7, #32]
 800161c:	4613      	mov	r3, r2
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	4413      	add	r3, r2
 8001622:	005b      	lsls	r3, r3, #1
 8001624:	69fa      	ldr	r2, [r7, #28]
 8001626:	4413      	add	r3, r2
 8001628:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
					for (int col = 0; col < 6; ++col) {
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	3301      	adds	r3, #1
 8001630:	61fb      	str	r3, [r7, #28]
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	2b05      	cmp	r3, #5
 8001636:	dde4      	ble.n	8001602 <main+0x5e2>
				for (int row = 0; row < 4; ++row) {
 8001638:	6a3b      	ldr	r3, [r7, #32]
 800163a:	3301      	adds	r3, #1
 800163c:	623b      	str	r3, [r7, #32]
 800163e:	6a3b      	ldr	r3, [r7, #32]
 8001640:	2b03      	cmp	r3, #3
 8001642:	dddb      	ble.n	80015fc <main+0x5dc>
					}
				}
				inv1_direction = 1;
 8001644:	4b6a      	ldr	r3, [pc, #424]	; (80017f0 <main+0x7d0>)
 8001646:	2201      	movs	r2, #1
 8001648:	601a      	str	r2, [r3, #0]
			}

			ctr_invader1_lastcheck = HAL_GetTick();
 800164a:	f000 fae9 	bl	8001c20 <HAL_GetTick>
 800164e:	4602      	mov	r2, r0
 8001650:	4b69      	ldr	r3, [pc, #420]	; (80017f8 <main+0x7d8>)
 8001652:	601a      	str	r2, [r3, #0]
		}


		// Player ship fired missile
		if (player_fire == 1) {
 8001654:	4b69      	ldr	r3, [pc, #420]	; (80017fc <main+0x7dc>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	b2db      	uxtb	r3, r3
 800165a:	2b01      	cmp	r3, #1
 800165c:	d125      	bne.n	80016aa <main+0x68a>
			// loop to find available missile
			for (int missile_index = 0; missile_index < 3; ++missile_index) {
 800165e:	2300      	movs	r3, #0
 8001660:	61bb      	str	r3, [r7, #24]
 8001662:	e01c      	b.n	800169e <main+0x67e>
				if (player_missile_status[missile_index] == 0) {
 8001664:	4a66      	ldr	r2, [pc, #408]	; (8001800 <main+0x7e0>)
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d113      	bne.n	8001698 <main+0x678>

					player_missile_status[missile_index] = 1;
 8001670:	4a63      	ldr	r2, [pc, #396]	; (8001800 <main+0x7e0>)
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	2101      	movs	r1, #1
 8001676:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					player_missile_xpos[missile_index] = ship_x + 5;
 800167a:	4b62      	ldr	r3, [pc, #392]	; (8001804 <main+0x7e4>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	1d5a      	adds	r2, r3, #5
 8001680:	4961      	ldr	r1, [pc, #388]	; (8001808 <main+0x7e8>)
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					player_missile_ypos[missile_index] = ship_y - 4;
 8001688:	4b60      	ldr	r3, [pc, #384]	; (800180c <main+0x7ec>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	1f1a      	subs	r2, r3, #4
 800168e:	4960      	ldr	r1, [pc, #384]	; (8001810 <main+0x7f0>)
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					break;
 8001696:	e005      	b.n	80016a4 <main+0x684>
			for (int missile_index = 0; missile_index < 3; ++missile_index) {
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	3301      	adds	r3, #1
 800169c:	61bb      	str	r3, [r7, #24]
 800169e:	69bb      	ldr	r3, [r7, #24]
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	dddf      	ble.n	8001664 <main+0x644>
				}
			}
			player_fire = 0;
 80016a4:	4b55      	ldr	r3, [pc, #340]	; (80017fc <main+0x7dc>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	701a      	strb	r2, [r3, #0]
		}

		// Fire invader 1 missile
		if (HAL_GetTick() - ctr_invader1_fire >= 2) {
 80016aa:	f000 fab9 	bl	8001c20 <HAL_GetTick>
 80016ae:	4602      	mov	r2, r0
 80016b0:	4b58      	ldr	r3, [pc, #352]	; (8001814 <main+0x7f4>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d964      	bls.n	8001784 <main+0x764>
			for (int missile_index = 0; missile_index < 6; ++missile_index) {
 80016ba:	2300      	movs	r3, #0
 80016bc:	60fb      	str	r3, [r7, #12]
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	2b05      	cmp	r3, #5
 80016c2:	dc5a      	bgt.n	800177a <main+0x75a>

				if (invader1_missile_status[missile_index] == 0) {
 80016c4:	4a54      	ldr	r2, [pc, #336]	; (8001818 <main+0x7f8>)
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d153      	bne.n	8001778 <main+0x758>
					if (invader1_fire_index > 95) {
 80016d0:	4b52      	ldr	r3, [pc, #328]	; (800181c <main+0x7fc>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2b5f      	cmp	r3, #95	; 0x5f
 80016d6:	dd02      	ble.n	80016de <main+0x6be>
						invader1_fire_index = 0;
 80016d8:	4b50      	ldr	r3, [pc, #320]	; (800181c <main+0x7fc>)
 80016da:	2200      	movs	r2, #0
 80016dc:	601a      	str	r2, [r3, #0]
					}
					int row = invader1_fire_sequence[invader1_fire_index] / 6;
 80016de:	4b4f      	ldr	r3, [pc, #316]	; (800181c <main+0x7fc>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a4f      	ldr	r2, [pc, #316]	; (8001820 <main+0x800>)
 80016e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016e8:	4a4e      	ldr	r2, [pc, #312]	; (8001824 <main+0x804>)
 80016ea:	fb82 1203 	smull	r1, r2, r2, r3
 80016ee:	17db      	asrs	r3, r3, #31
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	60bb      	str	r3, [r7, #8]
					int col = invader1_fire_sequence[invader1_fire_index] % 6;
 80016f4:	4b49      	ldr	r3, [pc, #292]	; (800181c <main+0x7fc>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a49      	ldr	r2, [pc, #292]	; (8001820 <main+0x800>)
 80016fa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80016fe:	4b49      	ldr	r3, [pc, #292]	; (8001824 <main+0x804>)
 8001700:	fb83 3102 	smull	r3, r1, r3, r2
 8001704:	17d3      	asrs	r3, r2, #31
 8001706:	1ac9      	subs	r1, r1, r3
 8001708:	460b      	mov	r3, r1
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	440b      	add	r3, r1
 800170e:	005b      	lsls	r3, r3, #1
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	607b      	str	r3, [r7, #4]
					invader1_fire_index++;
 8001714:	4b41      	ldr	r3, [pc, #260]	; (800181c <main+0x7fc>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	3301      	adds	r3, #1
 800171a:	4a40      	ldr	r2, [pc, #256]	; (800181c <main+0x7fc>)
 800171c:	6013      	str	r3, [r2, #0]
					if (invader1_status[row][col] == 1) {
 800171e:	4942      	ldr	r1, [pc, #264]	; (8001828 <main+0x808>)
 8001720:	68ba      	ldr	r2, [r7, #8]
 8001722:	4613      	mov	r3, r2
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	4413      	add	r3, r2
 8001728:	005b      	lsls	r3, r3, #1
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	4413      	add	r3, r2
 800172e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001732:	2b01      	cmp	r3, #1
 8001734:	d120      	bne.n	8001778 <main+0x758>
						invader1_missile_status[missile_index] = 1;
 8001736:	4a38      	ldr	r2, [pc, #224]	; (8001818 <main+0x7f8>)
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	2101      	movs	r1, #1
 800173c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						invader1_missile_xpos[missile_index] = invader1_xpos[row][col];
 8001740:	492c      	ldr	r1, [pc, #176]	; (80017f4 <main+0x7d4>)
 8001742:	68ba      	ldr	r2, [r7, #8]
 8001744:	4613      	mov	r3, r2
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	4413      	add	r3, r2
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	4413      	add	r3, r2
 8001750:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8001754:	4935      	ldr	r1, [pc, #212]	; (800182c <main+0x80c>)
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						invader1_missile_ypos[missile_index] = invader1_ypos[row][col];
 800175c:	4923      	ldr	r1, [pc, #140]	; (80017ec <main+0x7cc>)
 800175e:	68ba      	ldr	r2, [r7, #8]
 8001760:	4613      	mov	r3, r2
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	4413      	add	r3, r2
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	687a      	ldr	r2, [r7, #4]
 800176a:	4413      	add	r3, r2
 800176c:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8001770:	492f      	ldr	r1, [pc, #188]	; (8001830 <main+0x810>)
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					}
				}
				break;
 8001778:	bf00      	nop
			}

			ctr_invader1_fire = HAL_GetTick();
 800177a:	f000 fa51 	bl	8001c20 <HAL_GetTick>
 800177e:	4602      	mov	r2, r0
 8001780:	4b24      	ldr	r3, [pc, #144]	; (8001814 <main+0x7f4>)
 8001782:	601a      	str	r2, [r3, #0]
		}

		// Check if all Invader1 are dead
		all_invader1_alive = 0;
 8001784:	4b2b      	ldr	r3, [pc, #172]	; (8001834 <main+0x814>)
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]
		for (int row = 0; row < 4; ++row) {
 800178a:	2300      	movs	r3, #0
 800178c:	617b      	str	r3, [r7, #20]
 800178e:	e01e      	b.n	80017ce <main+0x7ae>
			for (int col = 0; col < 6; ++col) {
 8001790:	2300      	movs	r3, #0
 8001792:	613b      	str	r3, [r7, #16]
 8001794:	e011      	b.n	80017ba <main+0x79a>
				if (invader1_status[row][col] == 1) {
 8001796:	4924      	ldr	r1, [pc, #144]	; (8001828 <main+0x808>)
 8001798:	697a      	ldr	r2, [r7, #20]
 800179a:	4613      	mov	r3, r2
 800179c:	005b      	lsls	r3, r3, #1
 800179e:	4413      	add	r3, r2
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	4413      	add	r3, r2
 80017a6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d102      	bne.n	80017b4 <main+0x794>
					all_invader1_alive = 1;
 80017ae:	4b21      	ldr	r3, [pc, #132]	; (8001834 <main+0x814>)
 80017b0:	2201      	movs	r2, #1
 80017b2:	601a      	str	r2, [r3, #0]
			for (int col = 0; col < 6; ++col) {
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	3301      	adds	r3, #1
 80017b8:	613b      	str	r3, [r7, #16]
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	2b05      	cmp	r3, #5
 80017be:	ddea      	ble.n	8001796 <main+0x776>
				}
			}
			if (all_invader1_alive) {
 80017c0:	4b1c      	ldr	r3, [pc, #112]	; (8001834 <main+0x814>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d106      	bne.n	80017d6 <main+0x7b6>
		for (int row = 0; row < 4; ++row) {
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	3301      	adds	r3, #1
 80017cc:	617b      	str	r3, [r7, #20]
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	2b03      	cmp	r3, #3
 80017d2:	dddd      	ble.n	8001790 <main+0x770>
 80017d4:	e000      	b.n	80017d8 <main+0x7b8>
				break;
 80017d6:	bf00      	nop
			}
		}
		if (all_invader1_alive == 0) {
 80017d8:	4b16      	ldr	r3, [pc, #88]	; (8001834 <main+0x814>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	f47f aca5 	bne.w	800112c <main+0x10c>
			gameStatus = RESET_LEVEL1;
 80017e2:	4b15      	ldr	r3, [pc, #84]	; (8001838 <main+0x818>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	701a      	strb	r2, [r3, #0]
	  if (gameStatus == RESET_LEVEL1) {
 80017e8:	e4a0      	b.n	800112c <main+0x10c>
 80017ea:	bf00      	nop
 80017ec:	200002f8 	.word	0x200002f8
 80017f0:	200000c8 	.word	0x200000c8
 80017f4:	20000298 	.word	0x20000298
 80017f8:	20000498 	.word	0x20000498
 80017fc:	20000281 	.word	0x20000281
 8001800:	2000028c 	.word	0x2000028c
 8001804:	2000050c 	.word	0x2000050c
 8001808:	2000053c 	.word	0x2000053c
 800180c:	20000284 	.word	0x20000284
 8001810:	200004f4 	.word	0x200004f4
 8001814:	2000049c 	.word	0x2000049c
 8001818:	2000047c 	.word	0x2000047c
 800181c:	20000478 	.word	0x20000478
 8001820:	200000d0 	.word	0x200000d0
 8001824:	2aaaaaab 	.word	0x2aaaaaab
 8001828:	20000418 	.word	0x20000418
 800182c:	20000548 	.word	0x20000548
 8001830:	20000514 	.word	0x20000514
 8001834:	200000cc 	.word	0x200000cc
 8001838:	20000538 	.word	0x20000538

0800183c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b094      	sub	sp, #80	; 0x50
 8001840:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001842:	f107 0320 	add.w	r3, r7, #32
 8001846:	2230      	movs	r2, #48	; 0x30
 8001848:	2100      	movs	r1, #0
 800184a:	4618      	mov	r0, r3
 800184c:	f001 f8f0 	bl	8002a30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001850:	f107 030c 	add.w	r3, r7, #12
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	605a      	str	r2, [r3, #4]
 800185a:	609a      	str	r2, [r3, #8]
 800185c:	60da      	str	r2, [r3, #12]
 800185e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001860:	2300      	movs	r3, #0
 8001862:	60bb      	str	r3, [r7, #8]
 8001864:	4b22      	ldr	r3, [pc, #136]	; (80018f0 <SystemClock_Config+0xb4>)
 8001866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001868:	4a21      	ldr	r2, [pc, #132]	; (80018f0 <SystemClock_Config+0xb4>)
 800186a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800186e:	6413      	str	r3, [r2, #64]	; 0x40
 8001870:	4b1f      	ldr	r3, [pc, #124]	; (80018f0 <SystemClock_Config+0xb4>)
 8001872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001874:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001878:	60bb      	str	r3, [r7, #8]
 800187a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800187c:	2300      	movs	r3, #0
 800187e:	607b      	str	r3, [r7, #4]
 8001880:	4b1c      	ldr	r3, [pc, #112]	; (80018f4 <SystemClock_Config+0xb8>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a1b      	ldr	r2, [pc, #108]	; (80018f4 <SystemClock_Config+0xb8>)
 8001886:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800188a:	6013      	str	r3, [r2, #0]
 800188c:	4b19      	ldr	r3, [pc, #100]	; (80018f4 <SystemClock_Config+0xb8>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001894:	607b      	str	r3, [r7, #4]
 8001896:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001898:	2302      	movs	r3, #2
 800189a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800189c:	2301      	movs	r3, #1
 800189e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018a0:	2310      	movs	r3, #16
 80018a2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80018a4:	2300      	movs	r3, #0
 80018a6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018a8:	f107 0320 	add.w	r3, r7, #32
 80018ac:	4618      	mov	r0, r3
 80018ae:	f000 fc93 	bl	80021d8 <HAL_RCC_OscConfig>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <SystemClock_Config+0x80>
  {
    Error_Handler();
 80018b8:	f000 f896 	bl	80019e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018bc:	230f      	movs	r3, #15
 80018be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80018c0:	2300      	movs	r3, #0
 80018c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018c4:	2300      	movs	r3, #0
 80018c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018c8:	2300      	movs	r3, #0
 80018ca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018cc:	2300      	movs	r3, #0
 80018ce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80018d0:	f107 030c 	add.w	r3, r7, #12
 80018d4:	2100      	movs	r1, #0
 80018d6:	4618      	mov	r0, r3
 80018d8:	f000 feee 	bl	80026b8 <HAL_RCC_ClockConfig>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80018e2:	f000 f881 	bl	80019e8 <Error_Handler>
  }
}
 80018e6:	bf00      	nop
 80018e8:	3750      	adds	r7, #80	; 0x50
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	40023800 	.word	0x40023800
 80018f4:	40007000 	.word	0x40007000

080018f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b088      	sub	sp, #32
 80018fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018fe:	f107 030c 	add.w	r3, r7, #12
 8001902:	2200      	movs	r2, #0
 8001904:	601a      	str	r2, [r3, #0]
 8001906:	605a      	str	r2, [r3, #4]
 8001908:	609a      	str	r2, [r3, #8]
 800190a:	60da      	str	r2, [r3, #12]
 800190c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800190e:	2300      	movs	r3, #0
 8001910:	60bb      	str	r3, [r7, #8]
 8001912:	4b30      	ldr	r3, [pc, #192]	; (80019d4 <MX_GPIO_Init+0xdc>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	4a2f      	ldr	r2, [pc, #188]	; (80019d4 <MX_GPIO_Init+0xdc>)
 8001918:	f043 0301 	orr.w	r3, r3, #1
 800191c:	6313      	str	r3, [r2, #48]	; 0x30
 800191e:	4b2d      	ldr	r3, [pc, #180]	; (80019d4 <MX_GPIO_Init+0xdc>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	60bb      	str	r3, [r7, #8]
 8001928:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800192a:	2300      	movs	r3, #0
 800192c:	607b      	str	r3, [r7, #4]
 800192e:	4b29      	ldr	r3, [pc, #164]	; (80019d4 <MX_GPIO_Init+0xdc>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	4a28      	ldr	r2, [pc, #160]	; (80019d4 <MX_GPIO_Init+0xdc>)
 8001934:	f043 0308 	orr.w	r3, r3, #8
 8001938:	6313      	str	r3, [r2, #48]	; 0x30
 800193a:	4b26      	ldr	r3, [pc, #152]	; (80019d4 <MX_GPIO_Init+0xdc>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	f003 0308 	and.w	r3, r3, #8
 8001942:	607b      	str	r3, [r7, #4]
 8001944:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	603b      	str	r3, [r7, #0]
 800194a:	4b22      	ldr	r3, [pc, #136]	; (80019d4 <MX_GPIO_Init+0xdc>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194e:	4a21      	ldr	r2, [pc, #132]	; (80019d4 <MX_GPIO_Init+0xdc>)
 8001950:	f043 0302 	orr.w	r3, r3, #2
 8001954:	6313      	str	r3, [r2, #48]	; 0x30
 8001956:	4b1f      	ldr	r3, [pc, #124]	; (80019d4 <MX_GPIO_Init+0xdc>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	603b      	str	r3, [r7, #0]
 8001960:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001962:	2301      	movs	r3, #1
 8001964:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001966:	4b1c      	ldr	r3, [pc, #112]	; (80019d8 <MX_GPIO_Init+0xe0>)
 8001968:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196a:	2300      	movs	r3, #0
 800196c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800196e:	f107 030c 	add.w	r3, r7, #12
 8001972:	4619      	mov	r1, r3
 8001974:	4819      	ldr	r0, [pc, #100]	; (80019dc <MX_GPIO_Init+0xe4>)
 8001976:	f000 fa71 	bl	8001e5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800197a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800197e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001980:	2300      	movs	r3, #0
 8001982:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001984:	2300      	movs	r3, #0
 8001986:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001988:	f107 030c 	add.w	r3, r7, #12
 800198c:	4619      	mov	r1, r3
 800198e:	4814      	ldr	r0, [pc, #80]	; (80019e0 <MX_GPIO_Init+0xe8>)
 8001990:	f000 fa64 	bl	8001e5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001994:	2310      	movs	r3, #16
 8001996:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001998:	4b0f      	ldr	r3, [pc, #60]	; (80019d8 <MX_GPIO_Init+0xe0>)
 800199a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199c:	2300      	movs	r3, #0
 800199e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019a0:	f107 030c 	add.w	r3, r7, #12
 80019a4:	4619      	mov	r1, r3
 80019a6:	480f      	ldr	r0, [pc, #60]	; (80019e4 <MX_GPIO_Init+0xec>)
 80019a8:	f000 fa58 	bl	8001e5c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80019ac:	2200      	movs	r2, #0
 80019ae:	2100      	movs	r1, #0
 80019b0:	2006      	movs	r0, #6
 80019b2:	f000 fa1c 	bl	8001dee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80019b6:	2006      	movs	r0, #6
 80019b8:	f000 fa35 	bl	8001e26 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80019bc:	2200      	movs	r2, #0
 80019be:	2100      	movs	r1, #0
 80019c0:	200a      	movs	r0, #10
 80019c2:	f000 fa14 	bl	8001dee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80019c6:	200a      	movs	r0, #10
 80019c8:	f000 fa2d 	bl	8001e26 <HAL_NVIC_EnableIRQ>

}
 80019cc:	bf00      	nop
 80019ce:	3720      	adds	r7, #32
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	40023800 	.word	0x40023800
 80019d8:	10110000 	.word	0x10110000
 80019dc:	40020000 	.word	0x40020000
 80019e0:	40020c00 	.word	0x40020c00
 80019e4:	40020400 	.word	0x40020400

080019e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80019ec:	bf00      	nop
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
	...

080019f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019fe:	2300      	movs	r3, #0
 8001a00:	607b      	str	r3, [r7, #4]
 8001a02:	4b10      	ldr	r3, [pc, #64]	; (8001a44 <HAL_MspInit+0x4c>)
 8001a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a06:	4a0f      	ldr	r2, [pc, #60]	; (8001a44 <HAL_MspInit+0x4c>)
 8001a08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a0e:	4b0d      	ldr	r3, [pc, #52]	; (8001a44 <HAL_MspInit+0x4c>)
 8001a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a16:	607b      	str	r3, [r7, #4]
 8001a18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	603b      	str	r3, [r7, #0]
 8001a1e:	4b09      	ldr	r3, [pc, #36]	; (8001a44 <HAL_MspInit+0x4c>)
 8001a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a22:	4a08      	ldr	r2, [pc, #32]	; (8001a44 <HAL_MspInit+0x4c>)
 8001a24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a28:	6413      	str	r3, [r2, #64]	; 0x40
 8001a2a:	4b06      	ldr	r3, [pc, #24]	; (8001a44 <HAL_MspInit+0x4c>)
 8001a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a32:	603b      	str	r3, [r7, #0]
 8001a34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a36:	bf00      	nop
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	40023800 	.word	0x40023800

08001a48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001a4c:	bf00      	nop
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr

08001a56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a56:	b480      	push	{r7}
 8001a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a5a:	e7fe      	b.n	8001a5a <HardFault_Handler+0x4>

08001a5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a60:	e7fe      	b.n	8001a60 <MemManage_Handler+0x4>

08001a62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a62:	b480      	push	{r7}
 8001a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a66:	e7fe      	b.n	8001a66 <BusFault_Handler+0x4>

08001a68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a6c:	e7fe      	b.n	8001a6c <UsageFault_Handler+0x4>

08001a6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a72:	bf00      	nop
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a80:	bf00      	nop
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr

08001a8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a9c:	f000 f8ac 	bl	8001bf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001aa0:	bf00      	nop
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	player_fire = 1;
 8001aa8:	4b03      	ldr	r3, [pc, #12]	; (8001ab8 <EXTI0_IRQHandler+0x14>)
 8001aaa:	2201      	movs	r2, #1
 8001aac:	701a      	strb	r2, [r3, #0]

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001aae:	2001      	movs	r0, #1
 8001ab0:	f000 fb6e 	bl	8002190 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001ab4:	bf00      	nop
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	20000281 	.word	0x20000281

08001abc <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	refresh = 1;
 8001ac0:	4b03      	ldr	r3, [pc, #12]	; (8001ad0 <EXTI4_IRQHandler+0x14>)
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	701a      	strb	r2, [r3, #0]

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001ac6:	2010      	movs	r0, #16
 8001ac8:	f000 fb62 	bl	8002190 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001acc:	bf00      	nop
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	20000280 	.word	0x20000280

08001ad4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ad8:	4b08      	ldr	r3, [pc, #32]	; (8001afc <SystemInit+0x28>)
 8001ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ade:	4a07      	ldr	r2, [pc, #28]	; (8001afc <SystemInit+0x28>)
 8001ae0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ae4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ae8:	4b04      	ldr	r3, [pc, #16]	; (8001afc <SystemInit+0x28>)
 8001aea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001aee:	609a      	str	r2, [r3, #8]
#endif
}
 8001af0:	bf00      	nop
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	e000ed00 	.word	0xe000ed00

08001b00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b38 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001b04:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001b06:	e003      	b.n	8001b10 <LoopCopyDataInit>

08001b08 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001b08:	4b0c      	ldr	r3, [pc, #48]	; (8001b3c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001b0a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001b0c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001b0e:	3104      	adds	r1, #4

08001b10 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001b10:	480b      	ldr	r0, [pc, #44]	; (8001b40 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001b12:	4b0c      	ldr	r3, [pc, #48]	; (8001b44 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001b14:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001b16:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001b18:	d3f6      	bcc.n	8001b08 <CopyDataInit>
  ldr  r2, =_sbss
 8001b1a:	4a0b      	ldr	r2, [pc, #44]	; (8001b48 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001b1c:	e002      	b.n	8001b24 <LoopFillZerobss>

08001b1e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001b1e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001b20:	f842 3b04 	str.w	r3, [r2], #4

08001b24 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001b24:	4b09      	ldr	r3, [pc, #36]	; (8001b4c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001b26:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001b28:	d3f9      	bcc.n	8001b1e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b2a:	f7ff ffd3 	bl	8001ad4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b2e:	f000 ff5b 	bl	80029e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b32:	f7ff fa75 	bl	8001020 <main>
  bx  lr    
 8001b36:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b38:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001b3c:	08007ff4 	.word	0x08007ff4
  ldr  r0, =_sdata
 8001b40:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001b44:	2000025c 	.word	0x2000025c
  ldr  r2, =_sbss
 8001b48:	2000025c 	.word	0x2000025c
  ldr  r3, = _ebss
 8001b4c:	20000564 	.word	0x20000564

08001b50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b50:	e7fe      	b.n	8001b50 <ADC_IRQHandler>
	...

08001b54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b58:	4b0e      	ldr	r3, [pc, #56]	; (8001b94 <HAL_Init+0x40>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a0d      	ldr	r2, [pc, #52]	; (8001b94 <HAL_Init+0x40>)
 8001b5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b64:	4b0b      	ldr	r3, [pc, #44]	; (8001b94 <HAL_Init+0x40>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a0a      	ldr	r2, [pc, #40]	; (8001b94 <HAL_Init+0x40>)
 8001b6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b70:	4b08      	ldr	r3, [pc, #32]	; (8001b94 <HAL_Init+0x40>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a07      	ldr	r2, [pc, #28]	; (8001b94 <HAL_Init+0x40>)
 8001b76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b7c:	2003      	movs	r0, #3
 8001b7e:	f000 f92b 	bl	8001dd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b82:	2000      	movs	r0, #0
 8001b84:	f000 f808 	bl	8001b98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b88:	f7ff ff36 	bl	80019f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b8c:	2300      	movs	r3, #0
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	40023c00 	.word	0x40023c00

08001b98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ba0:	4b12      	ldr	r3, [pc, #72]	; (8001bec <HAL_InitTick+0x54>)
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	4b12      	ldr	r3, [pc, #72]	; (8001bf0 <HAL_InitTick+0x58>)
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	4619      	mov	r1, r3
 8001baa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bae:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f000 f943 	bl	8001e42 <HAL_SYSTICK_Config>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e00e      	b.n	8001be4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2b0f      	cmp	r3, #15
 8001bca:	d80a      	bhi.n	8001be2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bcc:	2200      	movs	r2, #0
 8001bce:	6879      	ldr	r1, [r7, #4]
 8001bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8001bd4:	f000 f90b 	bl	8001dee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bd8:	4a06      	ldr	r2, [pc, #24]	; (8001bf4 <HAL_InitTick+0x5c>)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bde:	2300      	movs	r3, #0
 8001be0:	e000      	b.n	8001be4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3708      	adds	r7, #8
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	20000250 	.word	0x20000250
 8001bf0:	20000258 	.word	0x20000258
 8001bf4:	20000254 	.word	0x20000254

08001bf8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bfc:	4b06      	ldr	r3, [pc, #24]	; (8001c18 <HAL_IncTick+0x20>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	461a      	mov	r2, r3
 8001c02:	4b06      	ldr	r3, [pc, #24]	; (8001c1c <HAL_IncTick+0x24>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4413      	add	r3, r2
 8001c08:	4a04      	ldr	r2, [pc, #16]	; (8001c1c <HAL_IncTick+0x24>)
 8001c0a:	6013      	str	r3, [r2, #0]
}
 8001c0c:	bf00      	nop
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	20000258 	.word	0x20000258
 8001c1c:	20000560 	.word	0x20000560

08001c20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  return uwTick;
 8001c24:	4b03      	ldr	r3, [pc, #12]	; (8001c34 <HAL_GetTick+0x14>)
 8001c26:	681b      	ldr	r3, [r3, #0]
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	20000560 	.word	0x20000560

08001c38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f003 0307 	and.w	r3, r3, #7
 8001c46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c48:	4b0c      	ldr	r3, [pc, #48]	; (8001c7c <__NVIC_SetPriorityGrouping+0x44>)
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c4e:	68ba      	ldr	r2, [r7, #8]
 8001c50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c54:	4013      	ands	r3, r2
 8001c56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c6a:	4a04      	ldr	r2, [pc, #16]	; (8001c7c <__NVIC_SetPriorityGrouping+0x44>)
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	60d3      	str	r3, [r2, #12]
}
 8001c70:	bf00      	nop
 8001c72:	3714      	adds	r7, #20
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr
 8001c7c:	e000ed00 	.word	0xe000ed00

08001c80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c84:	4b04      	ldr	r3, [pc, #16]	; (8001c98 <__NVIC_GetPriorityGrouping+0x18>)
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	0a1b      	lsrs	r3, r3, #8
 8001c8a:	f003 0307 	and.w	r3, r3, #7
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr
 8001c98:	e000ed00 	.word	0xe000ed00

08001c9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	db0b      	blt.n	8001cc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cae:	79fb      	ldrb	r3, [r7, #7]
 8001cb0:	f003 021f 	and.w	r2, r3, #31
 8001cb4:	4907      	ldr	r1, [pc, #28]	; (8001cd4 <__NVIC_EnableIRQ+0x38>)
 8001cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cba:	095b      	lsrs	r3, r3, #5
 8001cbc:	2001      	movs	r0, #1
 8001cbe:	fa00 f202 	lsl.w	r2, r0, r2
 8001cc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cc6:	bf00      	nop
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	e000e100 	.word	0xe000e100

08001cd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	4603      	mov	r3, r0
 8001ce0:	6039      	str	r1, [r7, #0]
 8001ce2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	db0a      	blt.n	8001d02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	b2da      	uxtb	r2, r3
 8001cf0:	490c      	ldr	r1, [pc, #48]	; (8001d24 <__NVIC_SetPriority+0x4c>)
 8001cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf6:	0112      	lsls	r2, r2, #4
 8001cf8:	b2d2      	uxtb	r2, r2
 8001cfa:	440b      	add	r3, r1
 8001cfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d00:	e00a      	b.n	8001d18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	b2da      	uxtb	r2, r3
 8001d06:	4908      	ldr	r1, [pc, #32]	; (8001d28 <__NVIC_SetPriority+0x50>)
 8001d08:	79fb      	ldrb	r3, [r7, #7]
 8001d0a:	f003 030f 	and.w	r3, r3, #15
 8001d0e:	3b04      	subs	r3, #4
 8001d10:	0112      	lsls	r2, r2, #4
 8001d12:	b2d2      	uxtb	r2, r2
 8001d14:	440b      	add	r3, r1
 8001d16:	761a      	strb	r2, [r3, #24]
}
 8001d18:	bf00      	nop
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr
 8001d24:	e000e100 	.word	0xe000e100
 8001d28:	e000ed00 	.word	0xe000ed00

08001d2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b089      	sub	sp, #36	; 0x24
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	60f8      	str	r0, [r7, #12]
 8001d34:	60b9      	str	r1, [r7, #8]
 8001d36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	f003 0307 	and.w	r3, r3, #7
 8001d3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	f1c3 0307 	rsb	r3, r3, #7
 8001d46:	2b04      	cmp	r3, #4
 8001d48:	bf28      	it	cs
 8001d4a:	2304      	movcs	r3, #4
 8001d4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	3304      	adds	r3, #4
 8001d52:	2b06      	cmp	r3, #6
 8001d54:	d902      	bls.n	8001d5c <NVIC_EncodePriority+0x30>
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	3b03      	subs	r3, #3
 8001d5a:	e000      	b.n	8001d5e <NVIC_EncodePriority+0x32>
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d60:	f04f 32ff 	mov.w	r2, #4294967295
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6a:	43da      	mvns	r2, r3
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	401a      	ands	r2, r3
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d74:	f04f 31ff 	mov.w	r1, #4294967295
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d7e:	43d9      	mvns	r1, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d84:	4313      	orrs	r3, r2
         );
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3724      	adds	r7, #36	; 0x24
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
	...

08001d94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	3b01      	subs	r3, #1
 8001da0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001da4:	d301      	bcc.n	8001daa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001da6:	2301      	movs	r3, #1
 8001da8:	e00f      	b.n	8001dca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001daa:	4a0a      	ldr	r2, [pc, #40]	; (8001dd4 <SysTick_Config+0x40>)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	3b01      	subs	r3, #1
 8001db0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001db2:	210f      	movs	r1, #15
 8001db4:	f04f 30ff 	mov.w	r0, #4294967295
 8001db8:	f7ff ff8e 	bl	8001cd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dbc:	4b05      	ldr	r3, [pc, #20]	; (8001dd4 <SysTick_Config+0x40>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dc2:	4b04      	ldr	r3, [pc, #16]	; (8001dd4 <SysTick_Config+0x40>)
 8001dc4:	2207      	movs	r2, #7
 8001dc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	e000e010 	.word	0xe000e010

08001dd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f7ff ff29 	bl	8001c38 <__NVIC_SetPriorityGrouping>
}
 8001de6:	bf00      	nop
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b086      	sub	sp, #24
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	4603      	mov	r3, r0
 8001df6:	60b9      	str	r1, [r7, #8]
 8001df8:	607a      	str	r2, [r7, #4]
 8001dfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e00:	f7ff ff3e 	bl	8001c80 <__NVIC_GetPriorityGrouping>
 8001e04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	68b9      	ldr	r1, [r7, #8]
 8001e0a:	6978      	ldr	r0, [r7, #20]
 8001e0c:	f7ff ff8e 	bl	8001d2c <NVIC_EncodePriority>
 8001e10:	4602      	mov	r2, r0
 8001e12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e16:	4611      	mov	r1, r2
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7ff ff5d 	bl	8001cd8 <__NVIC_SetPriority>
}
 8001e1e:	bf00      	nop
 8001e20:	3718      	adds	r7, #24
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b082      	sub	sp, #8
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7ff ff31 	bl	8001c9c <__NVIC_EnableIRQ>
}
 8001e3a:	bf00      	nop
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b082      	sub	sp, #8
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f7ff ffa2 	bl	8001d94 <SysTick_Config>
 8001e50:	4603      	mov	r3, r0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
	...

08001e5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b089      	sub	sp, #36	; 0x24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e66:	2300      	movs	r3, #0
 8001e68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e72:	2300      	movs	r3, #0
 8001e74:	61fb      	str	r3, [r7, #28]
 8001e76:	e159      	b.n	800212c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e78:	2201      	movs	r2, #1
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	697a      	ldr	r2, [r7, #20]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e8c:	693a      	ldr	r2, [r7, #16]
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	f040 8148 	bne.w	8002126 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d00b      	beq.n	8001eb6 <HAL_GPIO_Init+0x5a>
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d007      	beq.n	8001eb6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001eaa:	2b11      	cmp	r3, #17
 8001eac:	d003      	beq.n	8001eb6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	2b12      	cmp	r3, #18
 8001eb4:	d130      	bne.n	8001f18 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	2203      	movs	r2, #3
 8001ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec6:	43db      	mvns	r3, r3
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	4013      	ands	r3, r2
 8001ecc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	68da      	ldr	r2, [r3, #12]
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	69ba      	ldr	r2, [r7, #24]
 8001ee4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001eec:	2201      	movs	r2, #1
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef4:	43db      	mvns	r3, r3
 8001ef6:	69ba      	ldr	r2, [r7, #24]
 8001ef8:	4013      	ands	r3, r2
 8001efa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	091b      	lsrs	r3, r3, #4
 8001f02:	f003 0201 	and.w	r2, r3, #1
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	2203      	movs	r2, #3
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	689a      	ldr	r2, [r3, #8]
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d003      	beq.n	8001f58 <HAL_GPIO_Init+0xfc>
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	2b12      	cmp	r3, #18
 8001f56:	d123      	bne.n	8001fa0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	08da      	lsrs	r2, r3, #3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	3208      	adds	r2, #8
 8001f60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	f003 0307 	and.w	r3, r3, #7
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	220f      	movs	r2, #15
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	43db      	mvns	r3, r3
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	4013      	ands	r3, r2
 8001f7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	691a      	ldr	r2, [r3, #16]
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	f003 0307 	and.w	r3, r3, #7
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	08da      	lsrs	r2, r3, #3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	3208      	adds	r2, #8
 8001f9a:	69b9      	ldr	r1, [r7, #24]
 8001f9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	2203      	movs	r2, #3
 8001fac:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb0:	43db      	mvns	r3, r3
 8001fb2:	69ba      	ldr	r2, [r7, #24]
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f003 0203 	and.w	r2, r3, #3
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	69ba      	ldr	r2, [r7, #24]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	f000 80a2 	beq.w	8002126 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	60fb      	str	r3, [r7, #12]
 8001fe6:	4b56      	ldr	r3, [pc, #344]	; (8002140 <HAL_GPIO_Init+0x2e4>)
 8001fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fea:	4a55      	ldr	r2, [pc, #340]	; (8002140 <HAL_GPIO_Init+0x2e4>)
 8001fec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ff0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ff2:	4b53      	ldr	r3, [pc, #332]	; (8002140 <HAL_GPIO_Init+0x2e4>)
 8001ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ffa:	60fb      	str	r3, [r7, #12]
 8001ffc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ffe:	4a51      	ldr	r2, [pc, #324]	; (8002144 <HAL_GPIO_Init+0x2e8>)
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	089b      	lsrs	r3, r3, #2
 8002004:	3302      	adds	r3, #2
 8002006:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800200a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	f003 0303 	and.w	r3, r3, #3
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	220f      	movs	r2, #15
 8002016:	fa02 f303 	lsl.w	r3, r2, r3
 800201a:	43db      	mvns	r3, r3
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	4013      	ands	r3, r2
 8002020:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a48      	ldr	r2, [pc, #288]	; (8002148 <HAL_GPIO_Init+0x2ec>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d019      	beq.n	800205e <HAL_GPIO_Init+0x202>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a47      	ldr	r2, [pc, #284]	; (800214c <HAL_GPIO_Init+0x2f0>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d013      	beq.n	800205a <HAL_GPIO_Init+0x1fe>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a46      	ldr	r2, [pc, #280]	; (8002150 <HAL_GPIO_Init+0x2f4>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d00d      	beq.n	8002056 <HAL_GPIO_Init+0x1fa>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a45      	ldr	r2, [pc, #276]	; (8002154 <HAL_GPIO_Init+0x2f8>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d007      	beq.n	8002052 <HAL_GPIO_Init+0x1f6>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a44      	ldr	r2, [pc, #272]	; (8002158 <HAL_GPIO_Init+0x2fc>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d101      	bne.n	800204e <HAL_GPIO_Init+0x1f2>
 800204a:	2304      	movs	r3, #4
 800204c:	e008      	b.n	8002060 <HAL_GPIO_Init+0x204>
 800204e:	2307      	movs	r3, #7
 8002050:	e006      	b.n	8002060 <HAL_GPIO_Init+0x204>
 8002052:	2303      	movs	r3, #3
 8002054:	e004      	b.n	8002060 <HAL_GPIO_Init+0x204>
 8002056:	2302      	movs	r3, #2
 8002058:	e002      	b.n	8002060 <HAL_GPIO_Init+0x204>
 800205a:	2301      	movs	r3, #1
 800205c:	e000      	b.n	8002060 <HAL_GPIO_Init+0x204>
 800205e:	2300      	movs	r3, #0
 8002060:	69fa      	ldr	r2, [r7, #28]
 8002062:	f002 0203 	and.w	r2, r2, #3
 8002066:	0092      	lsls	r2, r2, #2
 8002068:	4093      	lsls	r3, r2
 800206a:	69ba      	ldr	r2, [r7, #24]
 800206c:	4313      	orrs	r3, r2
 800206e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002070:	4934      	ldr	r1, [pc, #208]	; (8002144 <HAL_GPIO_Init+0x2e8>)
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	089b      	lsrs	r3, r3, #2
 8002076:	3302      	adds	r3, #2
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800207e:	4b37      	ldr	r3, [pc, #220]	; (800215c <HAL_GPIO_Init+0x300>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	43db      	mvns	r3, r3
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	4013      	ands	r3, r2
 800208c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d003      	beq.n	80020a2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800209a:	69ba      	ldr	r2, [r7, #24]
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	4313      	orrs	r3, r2
 80020a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020a2:	4a2e      	ldr	r2, [pc, #184]	; (800215c <HAL_GPIO_Init+0x300>)
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80020a8:	4b2c      	ldr	r3, [pc, #176]	; (800215c <HAL_GPIO_Init+0x300>)
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	43db      	mvns	r3, r3
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	4013      	ands	r3, r2
 80020b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d003      	beq.n	80020cc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020cc:	4a23      	ldr	r2, [pc, #140]	; (800215c <HAL_GPIO_Init+0x300>)
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020d2:	4b22      	ldr	r3, [pc, #136]	; (800215c <HAL_GPIO_Init+0x300>)
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	43db      	mvns	r3, r3
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	4013      	ands	r3, r2
 80020e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d003      	beq.n	80020f6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020f6:	4a19      	ldr	r2, [pc, #100]	; (800215c <HAL_GPIO_Init+0x300>)
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020fc:	4b17      	ldr	r3, [pc, #92]	; (800215c <HAL_GPIO_Init+0x300>)
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	43db      	mvns	r3, r3
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	4013      	ands	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d003      	beq.n	8002120 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	4313      	orrs	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002120:	4a0e      	ldr	r2, [pc, #56]	; (800215c <HAL_GPIO_Init+0x300>)
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	3301      	adds	r3, #1
 800212a:	61fb      	str	r3, [r7, #28]
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	2b0f      	cmp	r3, #15
 8002130:	f67f aea2 	bls.w	8001e78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002134:	bf00      	nop
 8002136:	3724      	adds	r7, #36	; 0x24
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr
 8002140:	40023800 	.word	0x40023800
 8002144:	40013800 	.word	0x40013800
 8002148:	40020000 	.word	0x40020000
 800214c:	40020400 	.word	0x40020400
 8002150:	40020800 	.word	0x40020800
 8002154:	40020c00 	.word	0x40020c00
 8002158:	40021000 	.word	0x40021000
 800215c:	40013c00 	.word	0x40013c00

08002160 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002160:	b480      	push	{r7}
 8002162:	b085      	sub	sp, #20
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	460b      	mov	r3, r1
 800216a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	691a      	ldr	r2, [r3, #16]
 8002170:	887b      	ldrh	r3, [r7, #2]
 8002172:	4013      	ands	r3, r2
 8002174:	2b00      	cmp	r3, #0
 8002176:	d002      	beq.n	800217e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002178:	2301      	movs	r3, #1
 800217a:	73fb      	strb	r3, [r7, #15]
 800217c:	e001      	b.n	8002182 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800217e:	2300      	movs	r3, #0
 8002180:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002182:	7bfb      	ldrb	r3, [r7, #15]
}
 8002184:	4618      	mov	r0, r3
 8002186:	3714      	adds	r7, #20
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	4603      	mov	r3, r0
 8002198:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800219a:	4b08      	ldr	r3, [pc, #32]	; (80021bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800219c:	695a      	ldr	r2, [r3, #20]
 800219e:	88fb      	ldrh	r3, [r7, #6]
 80021a0:	4013      	ands	r3, r2
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d006      	beq.n	80021b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80021a6:	4a05      	ldr	r2, [pc, #20]	; (80021bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021a8:	88fb      	ldrh	r3, [r7, #6]
 80021aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80021ac:	88fb      	ldrh	r3, [r7, #6]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f000 f806 	bl	80021c0 <HAL_GPIO_EXTI_Callback>
  }
}
 80021b4:	bf00      	nop
 80021b6:	3708      	adds	r7, #8
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	40013c00 	.word	0x40013c00

080021c0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	4603      	mov	r3, r0
 80021c8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80021ca:	bf00      	nop
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
	...

080021d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b086      	sub	sp, #24
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d101      	bne.n	80021ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e25b      	b.n	80026a2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d075      	beq.n	80022e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021f6:	4ba3      	ldr	r3, [pc, #652]	; (8002484 <HAL_RCC_OscConfig+0x2ac>)
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	f003 030c 	and.w	r3, r3, #12
 80021fe:	2b04      	cmp	r3, #4
 8002200:	d00c      	beq.n	800221c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002202:	4ba0      	ldr	r3, [pc, #640]	; (8002484 <HAL_RCC_OscConfig+0x2ac>)
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800220a:	2b08      	cmp	r3, #8
 800220c:	d112      	bne.n	8002234 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800220e:	4b9d      	ldr	r3, [pc, #628]	; (8002484 <HAL_RCC_OscConfig+0x2ac>)
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002216:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800221a:	d10b      	bne.n	8002234 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800221c:	4b99      	ldr	r3, [pc, #612]	; (8002484 <HAL_RCC_OscConfig+0x2ac>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d05b      	beq.n	80022e0 <HAL_RCC_OscConfig+0x108>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d157      	bne.n	80022e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e236      	b.n	80026a2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800223c:	d106      	bne.n	800224c <HAL_RCC_OscConfig+0x74>
 800223e:	4b91      	ldr	r3, [pc, #580]	; (8002484 <HAL_RCC_OscConfig+0x2ac>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a90      	ldr	r2, [pc, #576]	; (8002484 <HAL_RCC_OscConfig+0x2ac>)
 8002244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002248:	6013      	str	r3, [r2, #0]
 800224a:	e01d      	b.n	8002288 <HAL_RCC_OscConfig+0xb0>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002254:	d10c      	bne.n	8002270 <HAL_RCC_OscConfig+0x98>
 8002256:	4b8b      	ldr	r3, [pc, #556]	; (8002484 <HAL_RCC_OscConfig+0x2ac>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a8a      	ldr	r2, [pc, #552]	; (8002484 <HAL_RCC_OscConfig+0x2ac>)
 800225c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002260:	6013      	str	r3, [r2, #0]
 8002262:	4b88      	ldr	r3, [pc, #544]	; (8002484 <HAL_RCC_OscConfig+0x2ac>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a87      	ldr	r2, [pc, #540]	; (8002484 <HAL_RCC_OscConfig+0x2ac>)
 8002268:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800226c:	6013      	str	r3, [r2, #0]
 800226e:	e00b      	b.n	8002288 <HAL_RCC_OscConfig+0xb0>
 8002270:	4b84      	ldr	r3, [pc, #528]	; (8002484 <HAL_RCC_OscConfig+0x2ac>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a83      	ldr	r2, [pc, #524]	; (8002484 <HAL_RCC_OscConfig+0x2ac>)
 8002276:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800227a:	6013      	str	r3, [r2, #0]
 800227c:	4b81      	ldr	r3, [pc, #516]	; (8002484 <HAL_RCC_OscConfig+0x2ac>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a80      	ldr	r2, [pc, #512]	; (8002484 <HAL_RCC_OscConfig+0x2ac>)
 8002282:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002286:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d013      	beq.n	80022b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002290:	f7ff fcc6 	bl	8001c20 <HAL_GetTick>
 8002294:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002296:	e008      	b.n	80022aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002298:	f7ff fcc2 	bl	8001c20 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2b64      	cmp	r3, #100	; 0x64
 80022a4:	d901      	bls.n	80022aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e1fb      	b.n	80026a2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022aa:	4b76      	ldr	r3, [pc, #472]	; (8002484 <HAL_RCC_OscConfig+0x2ac>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d0f0      	beq.n	8002298 <HAL_RCC_OscConfig+0xc0>
 80022b6:	e014      	b.n	80022e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b8:	f7ff fcb2 	bl	8001c20 <HAL_GetTick>
 80022bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022be:	e008      	b.n	80022d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022c0:	f7ff fcae 	bl	8001c20 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b64      	cmp	r3, #100	; 0x64
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e1e7      	b.n	80026a2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022d2:	4b6c      	ldr	r3, [pc, #432]	; (8002484 <HAL_RCC_OscConfig+0x2ac>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d1f0      	bne.n	80022c0 <HAL_RCC_OscConfig+0xe8>
 80022de:	e000      	b.n	80022e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d063      	beq.n	80023b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022ee:	4b65      	ldr	r3, [pc, #404]	; (8002484 <HAL_RCC_OscConfig+0x2ac>)
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f003 030c 	and.w	r3, r3, #12
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d00b      	beq.n	8002312 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022fa:	4b62      	ldr	r3, [pc, #392]	; (8002484 <HAL_RCC_OscConfig+0x2ac>)
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002302:	2b08      	cmp	r3, #8
 8002304:	d11c      	bne.n	8002340 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002306:	4b5f      	ldr	r3, [pc, #380]	; (8002484 <HAL_RCC_OscConfig+0x2ac>)
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d116      	bne.n	8002340 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002312:	4b5c      	ldr	r3, [pc, #368]	; (8002484 <HAL_RCC_OscConfig+0x2ac>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	2b00      	cmp	r3, #0
 800231c:	d005      	beq.n	800232a <HAL_RCC_OscConfig+0x152>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d001      	beq.n	800232a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e1bb      	b.n	80026a2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800232a:	4b56      	ldr	r3, [pc, #344]	; (8002484 <HAL_RCC_OscConfig+0x2ac>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	00db      	lsls	r3, r3, #3
 8002338:	4952      	ldr	r1, [pc, #328]	; (8002484 <HAL_RCC_OscConfig+0x2ac>)
 800233a:	4313      	orrs	r3, r2
 800233c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800233e:	e03a      	b.n	80023b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d020      	beq.n	800238a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002348:	4b4f      	ldr	r3, [pc, #316]	; (8002488 <HAL_RCC_OscConfig+0x2b0>)
 800234a:	2201      	movs	r2, #1
 800234c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800234e:	f7ff fc67 	bl	8001c20 <HAL_GetTick>
 8002352:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002354:	e008      	b.n	8002368 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002356:	f7ff fc63 	bl	8001c20 <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	2b02      	cmp	r3, #2
 8002362:	d901      	bls.n	8002368 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002364:	2303      	movs	r3, #3
 8002366:	e19c      	b.n	80026a2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002368:	4b46      	ldr	r3, [pc, #280]	; (8002484 <HAL_RCC_OscConfig+0x2ac>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0302 	and.w	r3, r3, #2
 8002370:	2b00      	cmp	r3, #0
 8002372:	d0f0      	beq.n	8002356 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002374:	4b43      	ldr	r3, [pc, #268]	; (8002484 <HAL_RCC_OscConfig+0x2ac>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	691b      	ldr	r3, [r3, #16]
 8002380:	00db      	lsls	r3, r3, #3
 8002382:	4940      	ldr	r1, [pc, #256]	; (8002484 <HAL_RCC_OscConfig+0x2ac>)
 8002384:	4313      	orrs	r3, r2
 8002386:	600b      	str	r3, [r1, #0]
 8002388:	e015      	b.n	80023b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800238a:	4b3f      	ldr	r3, [pc, #252]	; (8002488 <HAL_RCC_OscConfig+0x2b0>)
 800238c:	2200      	movs	r2, #0
 800238e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002390:	f7ff fc46 	bl	8001c20 <HAL_GetTick>
 8002394:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002396:	e008      	b.n	80023aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002398:	f7ff fc42 	bl	8001c20 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e17b      	b.n	80026a2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023aa:	4b36      	ldr	r3, [pc, #216]	; (8002484 <HAL_RCC_OscConfig+0x2ac>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0302 	and.w	r3, r3, #2
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d1f0      	bne.n	8002398 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0308 	and.w	r3, r3, #8
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d030      	beq.n	8002424 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	695b      	ldr	r3, [r3, #20]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d016      	beq.n	80023f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023ca:	4b30      	ldr	r3, [pc, #192]	; (800248c <HAL_RCC_OscConfig+0x2b4>)
 80023cc:	2201      	movs	r2, #1
 80023ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023d0:	f7ff fc26 	bl	8001c20 <HAL_GetTick>
 80023d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023d6:	e008      	b.n	80023ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023d8:	f7ff fc22 	bl	8001c20 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d901      	bls.n	80023ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e15b      	b.n	80026a2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ea:	4b26      	ldr	r3, [pc, #152]	; (8002484 <HAL_RCC_OscConfig+0x2ac>)
 80023ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023ee:	f003 0302 	and.w	r3, r3, #2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d0f0      	beq.n	80023d8 <HAL_RCC_OscConfig+0x200>
 80023f6:	e015      	b.n	8002424 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023f8:	4b24      	ldr	r3, [pc, #144]	; (800248c <HAL_RCC_OscConfig+0x2b4>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023fe:	f7ff fc0f 	bl	8001c20 <HAL_GetTick>
 8002402:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002404:	e008      	b.n	8002418 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002406:	f7ff fc0b 	bl	8001c20 <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	2b02      	cmp	r3, #2
 8002412:	d901      	bls.n	8002418 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002414:	2303      	movs	r3, #3
 8002416:	e144      	b.n	80026a2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002418:	4b1a      	ldr	r3, [pc, #104]	; (8002484 <HAL_RCC_OscConfig+0x2ac>)
 800241a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800241c:	f003 0302 	and.w	r3, r3, #2
 8002420:	2b00      	cmp	r3, #0
 8002422:	d1f0      	bne.n	8002406 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0304 	and.w	r3, r3, #4
 800242c:	2b00      	cmp	r3, #0
 800242e:	f000 80a0 	beq.w	8002572 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002432:	2300      	movs	r3, #0
 8002434:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002436:	4b13      	ldr	r3, [pc, #76]	; (8002484 <HAL_RCC_OscConfig+0x2ac>)
 8002438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d10f      	bne.n	8002462 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002442:	2300      	movs	r3, #0
 8002444:	60bb      	str	r3, [r7, #8]
 8002446:	4b0f      	ldr	r3, [pc, #60]	; (8002484 <HAL_RCC_OscConfig+0x2ac>)
 8002448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244a:	4a0e      	ldr	r2, [pc, #56]	; (8002484 <HAL_RCC_OscConfig+0x2ac>)
 800244c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002450:	6413      	str	r3, [r2, #64]	; 0x40
 8002452:	4b0c      	ldr	r3, [pc, #48]	; (8002484 <HAL_RCC_OscConfig+0x2ac>)
 8002454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800245a:	60bb      	str	r3, [r7, #8]
 800245c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800245e:	2301      	movs	r3, #1
 8002460:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002462:	4b0b      	ldr	r3, [pc, #44]	; (8002490 <HAL_RCC_OscConfig+0x2b8>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800246a:	2b00      	cmp	r3, #0
 800246c:	d121      	bne.n	80024b2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800246e:	4b08      	ldr	r3, [pc, #32]	; (8002490 <HAL_RCC_OscConfig+0x2b8>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a07      	ldr	r2, [pc, #28]	; (8002490 <HAL_RCC_OscConfig+0x2b8>)
 8002474:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002478:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800247a:	f7ff fbd1 	bl	8001c20 <HAL_GetTick>
 800247e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002480:	e011      	b.n	80024a6 <HAL_RCC_OscConfig+0x2ce>
 8002482:	bf00      	nop
 8002484:	40023800 	.word	0x40023800
 8002488:	42470000 	.word	0x42470000
 800248c:	42470e80 	.word	0x42470e80
 8002490:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002494:	f7ff fbc4 	bl	8001c20 <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e0fd      	b.n	80026a2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024a6:	4b81      	ldr	r3, [pc, #516]	; (80026ac <HAL_RCC_OscConfig+0x4d4>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d0f0      	beq.n	8002494 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d106      	bne.n	80024c8 <HAL_RCC_OscConfig+0x2f0>
 80024ba:	4b7d      	ldr	r3, [pc, #500]	; (80026b0 <HAL_RCC_OscConfig+0x4d8>)
 80024bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024be:	4a7c      	ldr	r2, [pc, #496]	; (80026b0 <HAL_RCC_OscConfig+0x4d8>)
 80024c0:	f043 0301 	orr.w	r3, r3, #1
 80024c4:	6713      	str	r3, [r2, #112]	; 0x70
 80024c6:	e01c      	b.n	8002502 <HAL_RCC_OscConfig+0x32a>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	2b05      	cmp	r3, #5
 80024ce:	d10c      	bne.n	80024ea <HAL_RCC_OscConfig+0x312>
 80024d0:	4b77      	ldr	r3, [pc, #476]	; (80026b0 <HAL_RCC_OscConfig+0x4d8>)
 80024d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d4:	4a76      	ldr	r2, [pc, #472]	; (80026b0 <HAL_RCC_OscConfig+0x4d8>)
 80024d6:	f043 0304 	orr.w	r3, r3, #4
 80024da:	6713      	str	r3, [r2, #112]	; 0x70
 80024dc:	4b74      	ldr	r3, [pc, #464]	; (80026b0 <HAL_RCC_OscConfig+0x4d8>)
 80024de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e0:	4a73      	ldr	r2, [pc, #460]	; (80026b0 <HAL_RCC_OscConfig+0x4d8>)
 80024e2:	f043 0301 	orr.w	r3, r3, #1
 80024e6:	6713      	str	r3, [r2, #112]	; 0x70
 80024e8:	e00b      	b.n	8002502 <HAL_RCC_OscConfig+0x32a>
 80024ea:	4b71      	ldr	r3, [pc, #452]	; (80026b0 <HAL_RCC_OscConfig+0x4d8>)
 80024ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ee:	4a70      	ldr	r2, [pc, #448]	; (80026b0 <HAL_RCC_OscConfig+0x4d8>)
 80024f0:	f023 0301 	bic.w	r3, r3, #1
 80024f4:	6713      	str	r3, [r2, #112]	; 0x70
 80024f6:	4b6e      	ldr	r3, [pc, #440]	; (80026b0 <HAL_RCC_OscConfig+0x4d8>)
 80024f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024fa:	4a6d      	ldr	r2, [pc, #436]	; (80026b0 <HAL_RCC_OscConfig+0x4d8>)
 80024fc:	f023 0304 	bic.w	r3, r3, #4
 8002500:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d015      	beq.n	8002536 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800250a:	f7ff fb89 	bl	8001c20 <HAL_GetTick>
 800250e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002510:	e00a      	b.n	8002528 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002512:	f7ff fb85 	bl	8001c20 <HAL_GetTick>
 8002516:	4602      	mov	r2, r0
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002520:	4293      	cmp	r3, r2
 8002522:	d901      	bls.n	8002528 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e0bc      	b.n	80026a2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002528:	4b61      	ldr	r3, [pc, #388]	; (80026b0 <HAL_RCC_OscConfig+0x4d8>)
 800252a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800252c:	f003 0302 	and.w	r3, r3, #2
 8002530:	2b00      	cmp	r3, #0
 8002532:	d0ee      	beq.n	8002512 <HAL_RCC_OscConfig+0x33a>
 8002534:	e014      	b.n	8002560 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002536:	f7ff fb73 	bl	8001c20 <HAL_GetTick>
 800253a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800253c:	e00a      	b.n	8002554 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800253e:	f7ff fb6f 	bl	8001c20 <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	f241 3288 	movw	r2, #5000	; 0x1388
 800254c:	4293      	cmp	r3, r2
 800254e:	d901      	bls.n	8002554 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	e0a6      	b.n	80026a2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002554:	4b56      	ldr	r3, [pc, #344]	; (80026b0 <HAL_RCC_OscConfig+0x4d8>)
 8002556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002558:	f003 0302 	and.w	r3, r3, #2
 800255c:	2b00      	cmp	r3, #0
 800255e:	d1ee      	bne.n	800253e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002560:	7dfb      	ldrb	r3, [r7, #23]
 8002562:	2b01      	cmp	r3, #1
 8002564:	d105      	bne.n	8002572 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002566:	4b52      	ldr	r3, [pc, #328]	; (80026b0 <HAL_RCC_OscConfig+0x4d8>)
 8002568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256a:	4a51      	ldr	r2, [pc, #324]	; (80026b0 <HAL_RCC_OscConfig+0x4d8>)
 800256c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002570:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	699b      	ldr	r3, [r3, #24]
 8002576:	2b00      	cmp	r3, #0
 8002578:	f000 8092 	beq.w	80026a0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800257c:	4b4c      	ldr	r3, [pc, #304]	; (80026b0 <HAL_RCC_OscConfig+0x4d8>)
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	f003 030c 	and.w	r3, r3, #12
 8002584:	2b08      	cmp	r3, #8
 8002586:	d05c      	beq.n	8002642 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	699b      	ldr	r3, [r3, #24]
 800258c:	2b02      	cmp	r3, #2
 800258e:	d141      	bne.n	8002614 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002590:	4b48      	ldr	r3, [pc, #288]	; (80026b4 <HAL_RCC_OscConfig+0x4dc>)
 8002592:	2200      	movs	r2, #0
 8002594:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002596:	f7ff fb43 	bl	8001c20 <HAL_GetTick>
 800259a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800259c:	e008      	b.n	80025b0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800259e:	f7ff fb3f 	bl	8001c20 <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d901      	bls.n	80025b0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	e078      	b.n	80026a2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025b0:	4b3f      	ldr	r3, [pc, #252]	; (80026b0 <HAL_RCC_OscConfig+0x4d8>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d1f0      	bne.n	800259e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	69da      	ldr	r2, [r3, #28]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6a1b      	ldr	r3, [r3, #32]
 80025c4:	431a      	orrs	r2, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ca:	019b      	lsls	r3, r3, #6
 80025cc:	431a      	orrs	r2, r3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d2:	085b      	lsrs	r3, r3, #1
 80025d4:	3b01      	subs	r3, #1
 80025d6:	041b      	lsls	r3, r3, #16
 80025d8:	431a      	orrs	r2, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025de:	061b      	lsls	r3, r3, #24
 80025e0:	4933      	ldr	r1, [pc, #204]	; (80026b0 <HAL_RCC_OscConfig+0x4d8>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025e6:	4b33      	ldr	r3, [pc, #204]	; (80026b4 <HAL_RCC_OscConfig+0x4dc>)
 80025e8:	2201      	movs	r2, #1
 80025ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ec:	f7ff fb18 	bl	8001c20 <HAL_GetTick>
 80025f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025f2:	e008      	b.n	8002606 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025f4:	f7ff fb14 	bl	8001c20 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e04d      	b.n	80026a2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002606:	4b2a      	ldr	r3, [pc, #168]	; (80026b0 <HAL_RCC_OscConfig+0x4d8>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d0f0      	beq.n	80025f4 <HAL_RCC_OscConfig+0x41c>
 8002612:	e045      	b.n	80026a0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002614:	4b27      	ldr	r3, [pc, #156]	; (80026b4 <HAL_RCC_OscConfig+0x4dc>)
 8002616:	2200      	movs	r2, #0
 8002618:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800261a:	f7ff fb01 	bl	8001c20 <HAL_GetTick>
 800261e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002620:	e008      	b.n	8002634 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002622:	f7ff fafd 	bl	8001c20 <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	2b02      	cmp	r3, #2
 800262e:	d901      	bls.n	8002634 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e036      	b.n	80026a2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002634:	4b1e      	ldr	r3, [pc, #120]	; (80026b0 <HAL_RCC_OscConfig+0x4d8>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d1f0      	bne.n	8002622 <HAL_RCC_OscConfig+0x44a>
 8002640:	e02e      	b.n	80026a0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	699b      	ldr	r3, [r3, #24]
 8002646:	2b01      	cmp	r3, #1
 8002648:	d101      	bne.n	800264e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e029      	b.n	80026a2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800264e:	4b18      	ldr	r3, [pc, #96]	; (80026b0 <HAL_RCC_OscConfig+0x4d8>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	69db      	ldr	r3, [r3, #28]
 800265e:	429a      	cmp	r2, r3
 8002660:	d11c      	bne.n	800269c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800266c:	429a      	cmp	r2, r3
 800266e:	d115      	bne.n	800269c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002670:	68fa      	ldr	r2, [r7, #12]
 8002672:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002676:	4013      	ands	r3, r2
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800267c:	4293      	cmp	r3, r2
 800267e:	d10d      	bne.n	800269c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800268a:	429a      	cmp	r2, r3
 800268c:	d106      	bne.n	800269c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002698:	429a      	cmp	r2, r3
 800269a:	d001      	beq.n	80026a0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e000      	b.n	80026a2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3718      	adds	r7, #24
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	40007000 	.word	0x40007000
 80026b0:	40023800 	.word	0x40023800
 80026b4:	42470060 	.word	0x42470060

080026b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d101      	bne.n	80026cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e0cc      	b.n	8002866 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026cc:	4b68      	ldr	r3, [pc, #416]	; (8002870 <HAL_RCC_ClockConfig+0x1b8>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 030f 	and.w	r3, r3, #15
 80026d4:	683a      	ldr	r2, [r7, #0]
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d90c      	bls.n	80026f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026da:	4b65      	ldr	r3, [pc, #404]	; (8002870 <HAL_RCC_ClockConfig+0x1b8>)
 80026dc:	683a      	ldr	r2, [r7, #0]
 80026de:	b2d2      	uxtb	r2, r2
 80026e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026e2:	4b63      	ldr	r3, [pc, #396]	; (8002870 <HAL_RCC_ClockConfig+0x1b8>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 030f 	and.w	r3, r3, #15
 80026ea:	683a      	ldr	r2, [r7, #0]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d001      	beq.n	80026f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e0b8      	b.n	8002866 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0302 	and.w	r3, r3, #2
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d020      	beq.n	8002742 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0304 	and.w	r3, r3, #4
 8002708:	2b00      	cmp	r3, #0
 800270a:	d005      	beq.n	8002718 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800270c:	4b59      	ldr	r3, [pc, #356]	; (8002874 <HAL_RCC_ClockConfig+0x1bc>)
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	4a58      	ldr	r2, [pc, #352]	; (8002874 <HAL_RCC_ClockConfig+0x1bc>)
 8002712:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002716:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0308 	and.w	r3, r3, #8
 8002720:	2b00      	cmp	r3, #0
 8002722:	d005      	beq.n	8002730 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002724:	4b53      	ldr	r3, [pc, #332]	; (8002874 <HAL_RCC_ClockConfig+0x1bc>)
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	4a52      	ldr	r2, [pc, #328]	; (8002874 <HAL_RCC_ClockConfig+0x1bc>)
 800272a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800272e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002730:	4b50      	ldr	r3, [pc, #320]	; (8002874 <HAL_RCC_ClockConfig+0x1bc>)
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	494d      	ldr	r1, [pc, #308]	; (8002874 <HAL_RCC_ClockConfig+0x1bc>)
 800273e:	4313      	orrs	r3, r2
 8002740:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	2b00      	cmp	r3, #0
 800274c:	d044      	beq.n	80027d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	2b01      	cmp	r3, #1
 8002754:	d107      	bne.n	8002766 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002756:	4b47      	ldr	r3, [pc, #284]	; (8002874 <HAL_RCC_ClockConfig+0x1bc>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d119      	bne.n	8002796 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e07f      	b.n	8002866 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	2b02      	cmp	r3, #2
 800276c:	d003      	beq.n	8002776 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002772:	2b03      	cmp	r3, #3
 8002774:	d107      	bne.n	8002786 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002776:	4b3f      	ldr	r3, [pc, #252]	; (8002874 <HAL_RCC_ClockConfig+0x1bc>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d109      	bne.n	8002796 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e06f      	b.n	8002866 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002786:	4b3b      	ldr	r3, [pc, #236]	; (8002874 <HAL_RCC_ClockConfig+0x1bc>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0302 	and.w	r3, r3, #2
 800278e:	2b00      	cmp	r3, #0
 8002790:	d101      	bne.n	8002796 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e067      	b.n	8002866 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002796:	4b37      	ldr	r3, [pc, #220]	; (8002874 <HAL_RCC_ClockConfig+0x1bc>)
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f023 0203 	bic.w	r2, r3, #3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	4934      	ldr	r1, [pc, #208]	; (8002874 <HAL_RCC_ClockConfig+0x1bc>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027a8:	f7ff fa3a 	bl	8001c20 <HAL_GetTick>
 80027ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ae:	e00a      	b.n	80027c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027b0:	f7ff fa36 	bl	8001c20 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80027be:	4293      	cmp	r3, r2
 80027c0:	d901      	bls.n	80027c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e04f      	b.n	8002866 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027c6:	4b2b      	ldr	r3, [pc, #172]	; (8002874 <HAL_RCC_ClockConfig+0x1bc>)
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	f003 020c 	and.w	r2, r3, #12
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d1eb      	bne.n	80027b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027d8:	4b25      	ldr	r3, [pc, #148]	; (8002870 <HAL_RCC_ClockConfig+0x1b8>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 030f 	and.w	r3, r3, #15
 80027e0:	683a      	ldr	r2, [r7, #0]
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d20c      	bcs.n	8002800 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027e6:	4b22      	ldr	r3, [pc, #136]	; (8002870 <HAL_RCC_ClockConfig+0x1b8>)
 80027e8:	683a      	ldr	r2, [r7, #0]
 80027ea:	b2d2      	uxtb	r2, r2
 80027ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ee:	4b20      	ldr	r3, [pc, #128]	; (8002870 <HAL_RCC_ClockConfig+0x1b8>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 030f 	and.w	r3, r3, #15
 80027f6:	683a      	ldr	r2, [r7, #0]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d001      	beq.n	8002800 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e032      	b.n	8002866 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0304 	and.w	r3, r3, #4
 8002808:	2b00      	cmp	r3, #0
 800280a:	d008      	beq.n	800281e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800280c:	4b19      	ldr	r3, [pc, #100]	; (8002874 <HAL_RCC_ClockConfig+0x1bc>)
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	4916      	ldr	r1, [pc, #88]	; (8002874 <HAL_RCC_ClockConfig+0x1bc>)
 800281a:	4313      	orrs	r3, r2
 800281c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0308 	and.w	r3, r3, #8
 8002826:	2b00      	cmp	r3, #0
 8002828:	d009      	beq.n	800283e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800282a:	4b12      	ldr	r3, [pc, #72]	; (8002874 <HAL_RCC_ClockConfig+0x1bc>)
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	00db      	lsls	r3, r3, #3
 8002838:	490e      	ldr	r1, [pc, #56]	; (8002874 <HAL_RCC_ClockConfig+0x1bc>)
 800283a:	4313      	orrs	r3, r2
 800283c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800283e:	f000 f821 	bl	8002884 <HAL_RCC_GetSysClockFreq>
 8002842:	4601      	mov	r1, r0
 8002844:	4b0b      	ldr	r3, [pc, #44]	; (8002874 <HAL_RCC_ClockConfig+0x1bc>)
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	091b      	lsrs	r3, r3, #4
 800284a:	f003 030f 	and.w	r3, r3, #15
 800284e:	4a0a      	ldr	r2, [pc, #40]	; (8002878 <HAL_RCC_ClockConfig+0x1c0>)
 8002850:	5cd3      	ldrb	r3, [r2, r3]
 8002852:	fa21 f303 	lsr.w	r3, r1, r3
 8002856:	4a09      	ldr	r2, [pc, #36]	; (800287c <HAL_RCC_ClockConfig+0x1c4>)
 8002858:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800285a:	4b09      	ldr	r3, [pc, #36]	; (8002880 <HAL_RCC_ClockConfig+0x1c8>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4618      	mov	r0, r3
 8002860:	f7ff f99a 	bl	8001b98 <HAL_InitTick>

  return HAL_OK;
 8002864:	2300      	movs	r3, #0
}
 8002866:	4618      	mov	r0, r3
 8002868:	3710      	adds	r7, #16
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	40023c00 	.word	0x40023c00
 8002874:	40023800 	.word	0x40023800
 8002878:	08007fd4 	.word	0x08007fd4
 800287c:	20000250 	.word	0x20000250
 8002880:	20000254 	.word	0x20000254

08002884 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002884:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002886:	b085      	sub	sp, #20
 8002888:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800288a:	2300      	movs	r3, #0
 800288c:	607b      	str	r3, [r7, #4]
 800288e:	2300      	movs	r3, #0
 8002890:	60fb      	str	r3, [r7, #12]
 8002892:	2300      	movs	r3, #0
 8002894:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002896:	2300      	movs	r3, #0
 8002898:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800289a:	4b50      	ldr	r3, [pc, #320]	; (80029dc <HAL_RCC_GetSysClockFreq+0x158>)
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f003 030c 	and.w	r3, r3, #12
 80028a2:	2b04      	cmp	r3, #4
 80028a4:	d007      	beq.n	80028b6 <HAL_RCC_GetSysClockFreq+0x32>
 80028a6:	2b08      	cmp	r3, #8
 80028a8:	d008      	beq.n	80028bc <HAL_RCC_GetSysClockFreq+0x38>
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	f040 808d 	bne.w	80029ca <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028b0:	4b4b      	ldr	r3, [pc, #300]	; (80029e0 <HAL_RCC_GetSysClockFreq+0x15c>)
 80028b2:	60bb      	str	r3, [r7, #8]
       break;
 80028b4:	e08c      	b.n	80029d0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028b6:	4b4b      	ldr	r3, [pc, #300]	; (80029e4 <HAL_RCC_GetSysClockFreq+0x160>)
 80028b8:	60bb      	str	r3, [r7, #8]
      break;
 80028ba:	e089      	b.n	80029d0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028bc:	4b47      	ldr	r3, [pc, #284]	; (80029dc <HAL_RCC_GetSysClockFreq+0x158>)
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028c4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028c6:	4b45      	ldr	r3, [pc, #276]	; (80029dc <HAL_RCC_GetSysClockFreq+0x158>)
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d023      	beq.n	800291a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028d2:	4b42      	ldr	r3, [pc, #264]	; (80029dc <HAL_RCC_GetSysClockFreq+0x158>)
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	099b      	lsrs	r3, r3, #6
 80028d8:	f04f 0400 	mov.w	r4, #0
 80028dc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80028e0:	f04f 0200 	mov.w	r2, #0
 80028e4:	ea03 0501 	and.w	r5, r3, r1
 80028e8:	ea04 0602 	and.w	r6, r4, r2
 80028ec:	4a3d      	ldr	r2, [pc, #244]	; (80029e4 <HAL_RCC_GetSysClockFreq+0x160>)
 80028ee:	fb02 f106 	mul.w	r1, r2, r6
 80028f2:	2200      	movs	r2, #0
 80028f4:	fb02 f205 	mul.w	r2, r2, r5
 80028f8:	440a      	add	r2, r1
 80028fa:	493a      	ldr	r1, [pc, #232]	; (80029e4 <HAL_RCC_GetSysClockFreq+0x160>)
 80028fc:	fba5 0101 	umull	r0, r1, r5, r1
 8002900:	1853      	adds	r3, r2, r1
 8002902:	4619      	mov	r1, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f04f 0400 	mov.w	r4, #0
 800290a:	461a      	mov	r2, r3
 800290c:	4623      	mov	r3, r4
 800290e:	f7fd fc63 	bl	80001d8 <__aeabi_uldivmod>
 8002912:	4603      	mov	r3, r0
 8002914:	460c      	mov	r4, r1
 8002916:	60fb      	str	r3, [r7, #12]
 8002918:	e049      	b.n	80029ae <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800291a:	4b30      	ldr	r3, [pc, #192]	; (80029dc <HAL_RCC_GetSysClockFreq+0x158>)
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	099b      	lsrs	r3, r3, #6
 8002920:	f04f 0400 	mov.w	r4, #0
 8002924:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002928:	f04f 0200 	mov.w	r2, #0
 800292c:	ea03 0501 	and.w	r5, r3, r1
 8002930:	ea04 0602 	and.w	r6, r4, r2
 8002934:	4629      	mov	r1, r5
 8002936:	4632      	mov	r2, r6
 8002938:	f04f 0300 	mov.w	r3, #0
 800293c:	f04f 0400 	mov.w	r4, #0
 8002940:	0154      	lsls	r4, r2, #5
 8002942:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002946:	014b      	lsls	r3, r1, #5
 8002948:	4619      	mov	r1, r3
 800294a:	4622      	mov	r2, r4
 800294c:	1b49      	subs	r1, r1, r5
 800294e:	eb62 0206 	sbc.w	r2, r2, r6
 8002952:	f04f 0300 	mov.w	r3, #0
 8002956:	f04f 0400 	mov.w	r4, #0
 800295a:	0194      	lsls	r4, r2, #6
 800295c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002960:	018b      	lsls	r3, r1, #6
 8002962:	1a5b      	subs	r3, r3, r1
 8002964:	eb64 0402 	sbc.w	r4, r4, r2
 8002968:	f04f 0100 	mov.w	r1, #0
 800296c:	f04f 0200 	mov.w	r2, #0
 8002970:	00e2      	lsls	r2, r4, #3
 8002972:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002976:	00d9      	lsls	r1, r3, #3
 8002978:	460b      	mov	r3, r1
 800297a:	4614      	mov	r4, r2
 800297c:	195b      	adds	r3, r3, r5
 800297e:	eb44 0406 	adc.w	r4, r4, r6
 8002982:	f04f 0100 	mov.w	r1, #0
 8002986:	f04f 0200 	mov.w	r2, #0
 800298a:	02a2      	lsls	r2, r4, #10
 800298c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002990:	0299      	lsls	r1, r3, #10
 8002992:	460b      	mov	r3, r1
 8002994:	4614      	mov	r4, r2
 8002996:	4618      	mov	r0, r3
 8002998:	4621      	mov	r1, r4
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f04f 0400 	mov.w	r4, #0
 80029a0:	461a      	mov	r2, r3
 80029a2:	4623      	mov	r3, r4
 80029a4:	f7fd fc18 	bl	80001d8 <__aeabi_uldivmod>
 80029a8:	4603      	mov	r3, r0
 80029aa:	460c      	mov	r4, r1
 80029ac:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80029ae:	4b0b      	ldr	r3, [pc, #44]	; (80029dc <HAL_RCC_GetSysClockFreq+0x158>)
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	0c1b      	lsrs	r3, r3, #16
 80029b4:	f003 0303 	and.w	r3, r3, #3
 80029b8:	3301      	adds	r3, #1
 80029ba:	005b      	lsls	r3, r3, #1
 80029bc:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80029be:	68fa      	ldr	r2, [r7, #12]
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029c6:	60bb      	str	r3, [r7, #8]
      break;
 80029c8:	e002      	b.n	80029d0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029ca:	4b05      	ldr	r3, [pc, #20]	; (80029e0 <HAL_RCC_GetSysClockFreq+0x15c>)
 80029cc:	60bb      	str	r3, [r7, #8]
      break;
 80029ce:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029d0:	68bb      	ldr	r3, [r7, #8]
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3714      	adds	r7, #20
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029da:	bf00      	nop
 80029dc:	40023800 	.word	0x40023800
 80029e0:	00f42400 	.word	0x00f42400
 80029e4:	017d7840 	.word	0x017d7840

080029e8 <__libc_init_array>:
 80029e8:	b570      	push	{r4, r5, r6, lr}
 80029ea:	4e0d      	ldr	r6, [pc, #52]	; (8002a20 <__libc_init_array+0x38>)
 80029ec:	4c0d      	ldr	r4, [pc, #52]	; (8002a24 <__libc_init_array+0x3c>)
 80029ee:	1ba4      	subs	r4, r4, r6
 80029f0:	10a4      	asrs	r4, r4, #2
 80029f2:	2500      	movs	r5, #0
 80029f4:	42a5      	cmp	r5, r4
 80029f6:	d109      	bne.n	8002a0c <__libc_init_array+0x24>
 80029f8:	4e0b      	ldr	r6, [pc, #44]	; (8002a28 <__libc_init_array+0x40>)
 80029fa:	4c0c      	ldr	r4, [pc, #48]	; (8002a2c <__libc_init_array+0x44>)
 80029fc:	f000 f820 	bl	8002a40 <_init>
 8002a00:	1ba4      	subs	r4, r4, r6
 8002a02:	10a4      	asrs	r4, r4, #2
 8002a04:	2500      	movs	r5, #0
 8002a06:	42a5      	cmp	r5, r4
 8002a08:	d105      	bne.n	8002a16 <__libc_init_array+0x2e>
 8002a0a:	bd70      	pop	{r4, r5, r6, pc}
 8002a0c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002a10:	4798      	blx	r3
 8002a12:	3501      	adds	r5, #1
 8002a14:	e7ee      	b.n	80029f4 <__libc_init_array+0xc>
 8002a16:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002a1a:	4798      	blx	r3
 8002a1c:	3501      	adds	r5, #1
 8002a1e:	e7f2      	b.n	8002a06 <__libc_init_array+0x1e>
 8002a20:	08007fec 	.word	0x08007fec
 8002a24:	08007fec 	.word	0x08007fec
 8002a28:	08007fec 	.word	0x08007fec
 8002a2c:	08007ff0 	.word	0x08007ff0

08002a30 <memset>:
 8002a30:	4402      	add	r2, r0
 8002a32:	4603      	mov	r3, r0
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d100      	bne.n	8002a3a <memset+0xa>
 8002a38:	4770      	bx	lr
 8002a3a:	f803 1b01 	strb.w	r1, [r3], #1
 8002a3e:	e7f9      	b.n	8002a34 <memset+0x4>

08002a40 <_init>:
 8002a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a42:	bf00      	nop
 8002a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a46:	bc08      	pop	{r3}
 8002a48:	469e      	mov	lr, r3
 8002a4a:	4770      	bx	lr

08002a4c <_fini>:
 8002a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a4e:	bf00      	nop
 8002a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a52:	bc08      	pop	{r3}
 8002a54:	469e      	mov	lr, r3
 8002a56:	4770      	bx	lr
