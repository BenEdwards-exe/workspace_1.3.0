
Space Invaders.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025c8  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001be0  08002760  08002760  00012760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004340  08004340  0002025c  2**0
                  CONTENTS
  4 .ARM          00000008  08004340  08004340  00014340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004348  08004348  0002025c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004348  08004348  00014348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800434c  0800434c  0001434c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000025c  20000000  08004350  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e4  2000025c  080045ac  0002025c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000540  080045ac  00020540  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002025c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000049e6  00000000  00000000  0002028c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000fea  00000000  00000000  00024c72  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000458  00000000  00000000  00025c60  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000003c0  00000000  00000000  000260b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001431c  00000000  00000000  00026478  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00004ace  00000000  00000000  0003a794  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007e5d6  00000000  00000000  0003f262  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bd838  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000fa8  00000000  00000000  000bd8b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000025c 	.word	0x2000025c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002748 	.word	0x08002748

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000260 	.word	0x20000260
 80001d4:	08002748 	.word	0x08002748

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <clearscreen>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void clearscreen()
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b084      	sub	sp, #16
 80004dc:	af00      	add	r7, sp, #0
	uint32_t* ptrscreen = (uint32_t*)0x20021900;
 80004de:	4b16      	ldr	r3, [pc, #88]	; (8000538 <clearscreen+0x60>)
 80004e0:	60fb      	str	r3, [r7, #12]
	*ptrscreen = 0;
 80004e2:	68fb      	ldr	r3, [r7, #12]
 80004e4:	2200      	movs	r2, #0
 80004e6:	601a      	str	r2, [r3, #0]


	// copy title sprite
	uint32_t* titleptr = (uint32_t*)title;
 80004e8:	4b14      	ldr	r3, [pc, #80]	; (800053c <clearscreen+0x64>)
 80004ea:	60bb      	str	r3, [r7, #8]
	ptrscreen = (uint32_t*)0x20020000;
 80004ec:	4b14      	ldr	r3, [pc, #80]	; (8000540 <clearscreen+0x68>)
 80004ee:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 1600; i++)
 80004f0:	2300      	movs	r3, #0
 80004f2:	607b      	str	r3, [r7, #4]
 80004f4:	e00a      	b.n	800050c <clearscreen+0x34>
	{
		*ptrscreen++ = *titleptr++;
 80004f6:	68ba      	ldr	r2, [r7, #8]
 80004f8:	1d13      	adds	r3, r2, #4
 80004fa:	60bb      	str	r3, [r7, #8]
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	1d19      	adds	r1, r3, #4
 8000500:	60f9      	str	r1, [r7, #12]
 8000502:	6812      	ldr	r2, [r2, #0]
 8000504:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 1600; i++)
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	3301      	adds	r3, #1
 800050a:	607b      	str	r3, [r7, #4]
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8000512:	dbf0      	blt.n	80004f6 <clearscreen+0x1e>
	}

	displayint(highScore, (uint32_t*)(0x200204E0));
 8000514:	4b0b      	ldr	r3, [pc, #44]	; (8000544 <clearscreen+0x6c>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	b29b      	uxth	r3, r3
 800051a:	490b      	ldr	r1, [pc, #44]	; (8000548 <clearscreen+0x70>)
 800051c:	4618      	mov	r0, r3
 800051e:	f000 f819 	bl	8000554 <displayint>
	displayint(playerScore, (uint32_t*)(0x20020418));
 8000522:	4b0a      	ldr	r3, [pc, #40]	; (800054c <clearscreen+0x74>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	b29b      	uxth	r3, r3
 8000528:	4909      	ldr	r1, [pc, #36]	; (8000550 <clearscreen+0x78>)
 800052a:	4618      	mov	r0, r3
 800052c:	f000 f812 	bl	8000554 <displayint>
	{
		*ptrscreen++ = *titleptr++;
	}
	displayint(highscore, (uint32_t*)(0x200204E0));
	*/
}
 8000530:	bf00      	nop
 8000532:	3710      	adds	r7, #16
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}
 8000538:	20021900 	.word	0x20021900
 800053c:	08002760 	.word	0x08002760
 8000540:	20020000 	.word	0x20020000
 8000544:	20000278 	.word	0x20000278
 8000548:	200204e0 	.word	0x200204e0
 800054c:	2000027c 	.word	0x2000027c
 8000550:	20020418 	.word	0x20020418

08000554 <displayint>:

void displayint(uint16_t val, uint32_t* screenptr)
{
 8000554:	b480      	push	{r7}
 8000556:	b089      	sub	sp, #36	; 0x24
 8000558:	af00      	add	r7, sp, #0
 800055a:	4603      	mov	r3, r0
 800055c:	6039      	str	r1, [r7, #0]
 800055e:	80fb      	strh	r3, [r7, #6]
	uint8_t digit = 0;
 8000560:	2300      	movs	r3, #0
 8000562:	72fb      	strb	r3, [r7, #11]
	uint32_t* digitptr;
	uint32_t* scrcopyptr;
	for (int i = 0; i < 5; i++)
 8000564:	2300      	movs	r3, #0
 8000566:	617b      	str	r3, [r7, #20]
 8000568:	e040      	b.n	80005ec <displayint+0x98>
	{
		digit = val % 10;
 800056a:	88fa      	ldrh	r2, [r7, #6]
 800056c:	4b24      	ldr	r3, [pc, #144]	; (8000600 <displayint+0xac>)
 800056e:	fba3 1302 	umull	r1, r3, r3, r2
 8000572:	08d9      	lsrs	r1, r3, #3
 8000574:	460b      	mov	r3, r1
 8000576:	009b      	lsls	r3, r3, #2
 8000578:	440b      	add	r3, r1
 800057a:	005b      	lsls	r3, r3, #1
 800057c:	1ad3      	subs	r3, r2, r3
 800057e:	b29b      	uxth	r3, r3
 8000580:	72fb      	strb	r3, [r7, #11]
		val /= 10;
 8000582:	88fb      	ldrh	r3, [r7, #6]
 8000584:	4a1e      	ldr	r2, [pc, #120]	; (8000600 <displayint+0xac>)
 8000586:	fba2 2303 	umull	r2, r3, r2, r3
 800058a:	08db      	lsrs	r3, r3, #3
 800058c:	80fb      	strh	r3, [r7, #6]

		scrcopyptr = screenptr;
 800058e:	683b      	ldr	r3, [r7, #0]
 8000590:	61bb      	str	r3, [r7, #24]
		digitptr = (uint32_t*)(digits + (digit << 3));
 8000592:	7afb      	ldrb	r3, [r7, #11]
 8000594:	00db      	lsls	r3, r3, #3
 8000596:	461a      	mov	r2, r3
 8000598:	4b1a      	ldr	r3, [pc, #104]	; (8000604 <displayint+0xb0>)
 800059a:	4413      	add	r3, r2
 800059c:	61fb      	str	r3, [r7, #28]
		for (int i = 0; i < 9; i++)
 800059e:	2300      	movs	r3, #0
 80005a0:	613b      	str	r3, [r7, #16]
 80005a2:	e01a      	b.n	80005da <displayint+0x86>
		{
			for (int j = 0; j < 2; j++)
 80005a4:	2300      	movs	r3, #0
 80005a6:	60fb      	str	r3, [r7, #12]
 80005a8:	e00a      	b.n	80005c0 <displayint+0x6c>
			{
				*scrcopyptr++ = *digitptr++;
 80005aa:	69fa      	ldr	r2, [r7, #28]
 80005ac:	1d13      	adds	r3, r2, #4
 80005ae:	61fb      	str	r3, [r7, #28]
 80005b0:	69bb      	ldr	r3, [r7, #24]
 80005b2:	1d19      	adds	r1, r3, #4
 80005b4:	61b9      	str	r1, [r7, #24]
 80005b6:	6812      	ldr	r2, [r2, #0]
 80005b8:	601a      	str	r2, [r3, #0]
			for (int j = 0; j < 2; j++)
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	3301      	adds	r3, #1
 80005be:	60fb      	str	r3, [r7, #12]
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	2b01      	cmp	r3, #1
 80005c4:	ddf1      	ble.n	80005aa <displayint+0x56>
			}
			digitptr += 18;
 80005c6:	69fb      	ldr	r3, [r7, #28]
 80005c8:	3348      	adds	r3, #72	; 0x48
 80005ca:	61fb      	str	r3, [r7, #28]
			scrcopyptr += 78;
 80005cc:	69bb      	ldr	r3, [r7, #24]
 80005ce:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80005d2:	61bb      	str	r3, [r7, #24]
		for (int i = 0; i < 9; i++)
 80005d4:	693b      	ldr	r3, [r7, #16]
 80005d6:	3301      	adds	r3, #1
 80005d8:	613b      	str	r3, [r7, #16]
 80005da:	693b      	ldr	r3, [r7, #16]
 80005dc:	2b08      	cmp	r3, #8
 80005de:	dde1      	ble.n	80005a4 <displayint+0x50>

		}
		screenptr -= 2;
 80005e0:	683b      	ldr	r3, [r7, #0]
 80005e2:	3b08      	subs	r3, #8
 80005e4:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < 5; i++)
 80005e6:	697b      	ldr	r3, [r7, #20]
 80005e8:	3301      	adds	r3, #1
 80005ea:	617b      	str	r3, [r7, #20]
 80005ec:	697b      	ldr	r3, [r7, #20]
 80005ee:	2b04      	cmp	r3, #4
 80005f0:	ddbb      	ble.n	800056a <displayint+0x16>
	}
}
 80005f2:	bf00      	nop
 80005f4:	3724      	adds	r7, #36	; 0x24
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	cccccccd 	.word	0xcccccccd
 8000604:	08004060 	.word	0x08004060

08000608 <updatescreen>:

void updatescreen()
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b09a      	sub	sp, #104	; 0x68
 800060c:	af00      	add	r7, sp, #0
	uint8_t* ptrscreen;

	// Erase Previous Ship
	ptrscreen = (uint8_t*)(0x20020000 + ship_py*320 + ship_px);
 800060e:	4baa      	ldr	r3, [pc, #680]	; (80008b8 <updatescreen+0x2b0>)
 8000610:	681a      	ldr	r2, [r3, #0]
 8000612:	4613      	mov	r3, r2
 8000614:	009b      	lsls	r3, r3, #2
 8000616:	4413      	add	r3, r2
 8000618:	019b      	lsls	r3, r3, #6
 800061a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800061e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000622:	4aa6      	ldr	r2, [pc, #664]	; (80008bc <updatescreen+0x2b4>)
 8000624:	6812      	ldr	r2, [r2, #0]
 8000626:	4413      	add	r3, r2
 8000628:	667b      	str	r3, [r7, #100]	; 0x64
	for (int i = 0; i < 8; i++) {
 800062a:	2300      	movs	r3, #0
 800062c:	663b      	str	r3, [r7, #96]	; 0x60
 800062e:	e014      	b.n	800065a <updatescreen+0x52>
		for (int j = 0; j < 12; j++) {
 8000630:	2300      	movs	r3, #0
 8000632:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000634:	e007      	b.n	8000646 <updatescreen+0x3e>
			*ptrscreen++ = 0;
 8000636:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000638:	1c5a      	adds	r2, r3, #1
 800063a:	667a      	str	r2, [r7, #100]	; 0x64
 800063c:	2200      	movs	r2, #0
 800063e:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 12; j++) {
 8000640:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000642:	3301      	adds	r3, #1
 8000644:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000646:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000648:	2b0b      	cmp	r3, #11
 800064a:	ddf4      	ble.n	8000636 <updatescreen+0x2e>
		}
		ptrscreen += 308;
 800064c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800064e:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8000652:	667b      	str	r3, [r7, #100]	; 0x64
	for (int i = 0; i < 8; i++) {
 8000654:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000656:	3301      	adds	r3, #1
 8000658:	663b      	str	r3, [r7, #96]	; 0x60
 800065a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800065c:	2b07      	cmp	r3, #7
 800065e:	dde7      	ble.n	8000630 <updatescreen+0x28>
	}

	// Draw New Ship
	ptrscreen = (uint8_t*)(0x20020000 + ship_y*320 + ship_x);
 8000660:	4b97      	ldr	r3, [pc, #604]	; (80008c0 <updatescreen+0x2b8>)
 8000662:	681a      	ldr	r2, [r3, #0]
 8000664:	4613      	mov	r3, r2
 8000666:	009b      	lsls	r3, r3, #2
 8000668:	4413      	add	r3, r2
 800066a:	019b      	lsls	r3, r3, #6
 800066c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8000670:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000674:	4a93      	ldr	r2, [pc, #588]	; (80008c4 <updatescreen+0x2bc>)
 8000676:	6812      	ldr	r2, [r2, #0]
 8000678:	4413      	add	r3, r2
 800067a:	667b      	str	r3, [r7, #100]	; 0x64
	uint8_t* ptrsrc = Ship;
 800067c:	4b92      	ldr	r3, [pc, #584]	; (80008c8 <updatescreen+0x2c0>)
 800067e:	65bb      	str	r3, [r7, #88]	; 0x58
	for (int i = 0; i < 8; i++) {
 8000680:	2300      	movs	r3, #0
 8000682:	657b      	str	r3, [r7, #84]	; 0x54
 8000684:	e017      	b.n	80006b6 <updatescreen+0xae>
		for (int j = 0; j < 12; j++) {
 8000686:	2300      	movs	r3, #0
 8000688:	653b      	str	r3, [r7, #80]	; 0x50
 800068a:	e00a      	b.n	80006a2 <updatescreen+0x9a>
			*ptrscreen++ = *ptrsrc++;
 800068c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800068e:	1c53      	adds	r3, r2, #1
 8000690:	65bb      	str	r3, [r7, #88]	; 0x58
 8000692:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000694:	1c59      	adds	r1, r3, #1
 8000696:	6679      	str	r1, [r7, #100]	; 0x64
 8000698:	7812      	ldrb	r2, [r2, #0]
 800069a:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 12; j++) {
 800069c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800069e:	3301      	adds	r3, #1
 80006a0:	653b      	str	r3, [r7, #80]	; 0x50
 80006a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80006a4:	2b0b      	cmp	r3, #11
 80006a6:	ddf1      	ble.n	800068c <updatescreen+0x84>
		}
		ptrscreen += 308;
 80006a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80006aa:	f503 739a 	add.w	r3, r3, #308	; 0x134
 80006ae:	667b      	str	r3, [r7, #100]	; 0x64
	for (int i = 0; i < 8; i++) {
 80006b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80006b2:	3301      	adds	r3, #1
 80006b4:	657b      	str	r3, [r7, #84]	; 0x54
 80006b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80006b8:	2b07      	cmp	r3, #7
 80006ba:	dde4      	ble.n	8000686 <updatescreen+0x7e>
	}


	// Erase Previous Invader 1 Positions
	for (int row = 0; row < 4; row++) {
 80006bc:	2300      	movs	r3, #0
 80006be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80006c0:	e044      	b.n	800074c <updatescreen+0x144>
		for (int col = 0; col < 6; col++) {
 80006c2:	2300      	movs	r3, #0
 80006c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80006c6:	e03b      	b.n	8000740 <updatescreen+0x138>
				ptrscreen = (uint8_t*)(0x20020000 +invader1_prev_ypos[row][col]*320 + invader1_prev_xpos[row][col]);
 80006c8:	4980      	ldr	r1, [pc, #512]	; (80008cc <updatescreen+0x2c4>)
 80006ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80006cc:	4613      	mov	r3, r2
 80006ce:	005b      	lsls	r3, r3, #1
 80006d0:	4413      	add	r3, r2
 80006d2:	005b      	lsls	r3, r3, #1
 80006d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80006d6:	4413      	add	r3, r2
 80006d8:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 80006dc:	4613      	mov	r3, r2
 80006de:	009b      	lsls	r3, r3, #2
 80006e0:	4413      	add	r3, r2
 80006e2:	019b      	lsls	r3, r3, #6
 80006e4:	f103 5200 	add.w	r2, r3, #536870912	; 0x20000000
 80006e8:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
 80006ec:	4878      	ldr	r0, [pc, #480]	; (80008d0 <updatescreen+0x2c8>)
 80006ee:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80006f0:	460b      	mov	r3, r1
 80006f2:	005b      	lsls	r3, r3, #1
 80006f4:	440b      	add	r3, r1
 80006f6:	005b      	lsls	r3, r3, #1
 80006f8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80006fa:	440b      	add	r3, r1
 80006fc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000700:	4413      	add	r3, r2
 8000702:	667b      	str	r3, [r7, #100]	; 0x64
				for (int i = 0; i < 8; i++) {
 8000704:	2300      	movs	r3, #0
 8000706:	647b      	str	r3, [r7, #68]	; 0x44
 8000708:	e014      	b.n	8000734 <updatescreen+0x12c>
					for (int j = 0; j < 12; j++) {
 800070a:	2300      	movs	r3, #0
 800070c:	643b      	str	r3, [r7, #64]	; 0x40
 800070e:	e007      	b.n	8000720 <updatescreen+0x118>
						*ptrscreen++ = 0;
 8000710:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000712:	1c5a      	adds	r2, r3, #1
 8000714:	667a      	str	r2, [r7, #100]	; 0x64
 8000716:	2200      	movs	r2, #0
 8000718:	701a      	strb	r2, [r3, #0]
					for (int j = 0; j < 12; j++) {
 800071a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800071c:	3301      	adds	r3, #1
 800071e:	643b      	str	r3, [r7, #64]	; 0x40
 8000720:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000722:	2b0b      	cmp	r3, #11
 8000724:	ddf4      	ble.n	8000710 <updatescreen+0x108>
					}
					ptrscreen += 308;
 8000726:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000728:	f503 739a 	add.w	r3, r3, #308	; 0x134
 800072c:	667b      	str	r3, [r7, #100]	; 0x64
				for (int i = 0; i < 8; i++) {
 800072e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000730:	3301      	adds	r3, #1
 8000732:	647b      	str	r3, [r7, #68]	; 0x44
 8000734:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000736:	2b07      	cmp	r3, #7
 8000738:	dde7      	ble.n	800070a <updatescreen+0x102>
		for (int col = 0; col < 6; col++) {
 800073a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800073c:	3301      	adds	r3, #1
 800073e:	64bb      	str	r3, [r7, #72]	; 0x48
 8000740:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000742:	2b05      	cmp	r3, #5
 8000744:	ddc0      	ble.n	80006c8 <updatescreen+0xc0>
	for (int row = 0; row < 4; row++) {
 8000746:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000748:	3301      	adds	r3, #1
 800074a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800074c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800074e:	2b03      	cmp	r3, #3
 8000750:	ddb7      	ble.n	80006c2 <updatescreen+0xba>
		}
	}


	// Draw New Invader 1 Positions
	for (int row = 0; row < 4; row++) {
 8000752:	2300      	movs	r3, #0
 8000754:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000756:	e055      	b.n	8000804 <updatescreen+0x1fc>
		for (int col = 0; col < 6; col++) {
 8000758:	2300      	movs	r3, #0
 800075a:	63bb      	str	r3, [r7, #56]	; 0x38
 800075c:	e04c      	b.n	80007f8 <updatescreen+0x1f0>
			if (invader1_status[row][col] == 1) {
 800075e:	495d      	ldr	r1, [pc, #372]	; (80008d4 <updatescreen+0x2cc>)
 8000760:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000762:	4613      	mov	r3, r2
 8000764:	005b      	lsls	r3, r3, #1
 8000766:	4413      	add	r3, r2
 8000768:	005b      	lsls	r3, r3, #1
 800076a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800076c:	4413      	add	r3, r2
 800076e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000772:	2b01      	cmp	r3, #1
 8000774:	d13d      	bne.n	80007f2 <updatescreen+0x1ea>
				ptrscreen = (uint8_t*)(0x20020000 +invader1_ypos[row][col]*320 + invader1_xpos[row][col]);
 8000776:	4958      	ldr	r1, [pc, #352]	; (80008d8 <updatescreen+0x2d0>)
 8000778:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800077a:	4613      	mov	r3, r2
 800077c:	005b      	lsls	r3, r3, #1
 800077e:	4413      	add	r3, r2
 8000780:	005b      	lsls	r3, r3, #1
 8000782:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000784:	4413      	add	r3, r2
 8000786:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 800078a:	4613      	mov	r3, r2
 800078c:	009b      	lsls	r3, r3, #2
 800078e:	4413      	add	r3, r2
 8000790:	019b      	lsls	r3, r3, #6
 8000792:	f103 5200 	add.w	r2, r3, #536870912	; 0x20000000
 8000796:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
 800079a:	4850      	ldr	r0, [pc, #320]	; (80008dc <updatescreen+0x2d4>)
 800079c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800079e:	460b      	mov	r3, r1
 80007a0:	005b      	lsls	r3, r3, #1
 80007a2:	440b      	add	r3, r1
 80007a4:	005b      	lsls	r3, r3, #1
 80007a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80007a8:	440b      	add	r3, r1
 80007aa:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80007ae:	4413      	add	r3, r2
 80007b0:	667b      	str	r3, [r7, #100]	; 0x64
				ptrsrc = Invader1;
 80007b2:	4b4b      	ldr	r3, [pc, #300]	; (80008e0 <updatescreen+0x2d8>)
 80007b4:	65bb      	str	r3, [r7, #88]	; 0x58
				for (int i = 0; i < 8; i++) {
 80007b6:	2300      	movs	r3, #0
 80007b8:	637b      	str	r3, [r7, #52]	; 0x34
 80007ba:	e017      	b.n	80007ec <updatescreen+0x1e4>
					for (int j = 0; j < 12; j++) {
 80007bc:	2300      	movs	r3, #0
 80007be:	633b      	str	r3, [r7, #48]	; 0x30
 80007c0:	e00a      	b.n	80007d8 <updatescreen+0x1d0>
						*ptrscreen++ = *ptrsrc++;
 80007c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80007c4:	1c53      	adds	r3, r2, #1
 80007c6:	65bb      	str	r3, [r7, #88]	; 0x58
 80007c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80007ca:	1c59      	adds	r1, r3, #1
 80007cc:	6679      	str	r1, [r7, #100]	; 0x64
 80007ce:	7812      	ldrb	r2, [r2, #0]
 80007d0:	701a      	strb	r2, [r3, #0]
					for (int j = 0; j < 12; j++) {
 80007d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007d4:	3301      	adds	r3, #1
 80007d6:	633b      	str	r3, [r7, #48]	; 0x30
 80007d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007da:	2b0b      	cmp	r3, #11
 80007dc:	ddf1      	ble.n	80007c2 <updatescreen+0x1ba>
					}
					ptrscreen += 308;
 80007de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80007e0:	f503 739a 	add.w	r3, r3, #308	; 0x134
 80007e4:	667b      	str	r3, [r7, #100]	; 0x64
				for (int i = 0; i < 8; i++) {
 80007e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007e8:	3301      	adds	r3, #1
 80007ea:	637b      	str	r3, [r7, #52]	; 0x34
 80007ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007ee:	2b07      	cmp	r3, #7
 80007f0:	dde4      	ble.n	80007bc <updatescreen+0x1b4>
		for (int col = 0; col < 6; col++) {
 80007f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80007f4:	3301      	adds	r3, #1
 80007f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80007f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80007fa:	2b05      	cmp	r3, #5
 80007fc:	ddaf      	ble.n	800075e <updatescreen+0x156>
	for (int row = 0; row < 4; row++) {
 80007fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000800:	3301      	adds	r3, #1
 8000802:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000804:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000806:	2b03      	cmp	r3, #3
 8000808:	dda6      	ble.n	8000758 <updatescreen+0x150>
			}
		}
	}

	// Erase Previous Player Missile Positions
	for (int missile_index = 0; missile_index < 3; ++missile_index) {
 800080a:	2300      	movs	r3, #0
 800080c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800080e:	e02f      	b.n	8000870 <updatescreen+0x268>
		ptrscreen = (uint8_t*)(0x20020000 + player_missile_prev_ypos[missile_index]*320 + player_missile_prev_xpos[missile_index]);
 8000810:	4a34      	ldr	r2, [pc, #208]	; (80008e4 <updatescreen+0x2dc>)
 8000812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000814:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000818:	4613      	mov	r3, r2
 800081a:	009b      	lsls	r3, r3, #2
 800081c:	4413      	add	r3, r2
 800081e:	019b      	lsls	r3, r3, #6
 8000820:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8000824:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000828:	492f      	ldr	r1, [pc, #188]	; (80008e8 <updatescreen+0x2e0>)
 800082a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800082c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000830:	4413      	add	r3, r2
 8000832:	667b      	str	r3, [r7, #100]	; 0x64
		for (int i = 0; i < 4; i++) {
 8000834:	2300      	movs	r3, #0
 8000836:	62bb      	str	r3, [r7, #40]	; 0x28
 8000838:	e014      	b.n	8000864 <updatescreen+0x25c>
			for (int j = 0; j < 1; j++) {
 800083a:	2300      	movs	r3, #0
 800083c:	627b      	str	r3, [r7, #36]	; 0x24
 800083e:	e007      	b.n	8000850 <updatescreen+0x248>
				*ptrscreen++ = 0;
 8000840:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000842:	1c5a      	adds	r2, r3, #1
 8000844:	667a      	str	r2, [r7, #100]	; 0x64
 8000846:	2200      	movs	r2, #0
 8000848:	701a      	strb	r2, [r3, #0]
			for (int j = 0; j < 1; j++) {
 800084a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800084c:	3301      	adds	r3, #1
 800084e:	627b      	str	r3, [r7, #36]	; 0x24
 8000850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000852:	2b00      	cmp	r3, #0
 8000854:	ddf4      	ble.n	8000840 <updatescreen+0x238>
			}
			ptrscreen += 319;
 8000856:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000858:	f203 133f 	addw	r3, r3, #319	; 0x13f
 800085c:	667b      	str	r3, [r7, #100]	; 0x64
		for (int i = 0; i < 4; i++) {
 800085e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000860:	3301      	adds	r3, #1
 8000862:	62bb      	str	r3, [r7, #40]	; 0x28
 8000864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000866:	2b03      	cmp	r3, #3
 8000868:	dde7      	ble.n	800083a <updatescreen+0x232>
	for (int missile_index = 0; missile_index < 3; ++missile_index) {
 800086a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800086c:	3301      	adds	r3, #1
 800086e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000872:	2b02      	cmp	r3, #2
 8000874:	ddcc      	ble.n	8000810 <updatescreen+0x208>
		}
	}

	// Display Player Missile
	for (int m = 0; m < 3; ++m) {
 8000876:	2300      	movs	r3, #0
 8000878:	623b      	str	r3, [r7, #32]
 800087a:	e05d      	b.n	8000938 <updatescreen+0x330>
		if (player_missile_status[m] == 1) {
 800087c:	4a1b      	ldr	r2, [pc, #108]	; (80008ec <updatescreen+0x2e4>)
 800087e:	6a3b      	ldr	r3, [r7, #32]
 8000880:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000884:	2b01      	cmp	r3, #1
 8000886:	d154      	bne.n	8000932 <updatescreen+0x32a>
			ptrscreen = (uint8_t*)(0x20020000 + player_missile_ypos[m]*320 + player_missile_xpos[m]);
 8000888:	4a19      	ldr	r2, [pc, #100]	; (80008f0 <updatescreen+0x2e8>)
 800088a:	6a3b      	ldr	r3, [r7, #32]
 800088c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000890:	4613      	mov	r3, r2
 8000892:	009b      	lsls	r3, r3, #2
 8000894:	4413      	add	r3, r2
 8000896:	019b      	lsls	r3, r3, #6
 8000898:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800089c:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80008a0:	4914      	ldr	r1, [pc, #80]	; (80008f4 <updatescreen+0x2ec>)
 80008a2:	6a3a      	ldr	r2, [r7, #32]
 80008a4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80008a8:	4413      	add	r3, r2
 80008aa:	667b      	str	r3, [r7, #100]	; 0x64
			ptrsrc = Missile;
 80008ac:	4b12      	ldr	r3, [pc, #72]	; (80008f8 <updatescreen+0x2f0>)
 80008ae:	65bb      	str	r3, [r7, #88]	; 0x58
			for (int i = 0; i < 4; ++i) {
 80008b0:	2300      	movs	r3, #0
 80008b2:	61fb      	str	r3, [r7, #28]
 80008b4:	e03a      	b.n	800092c <updatescreen+0x324>
 80008b6:	bf00      	nop
 80008b8:	20000288 	.word	0x20000288
 80008bc:	200004ec 	.word	0x200004ec
 80008c0:	20000284 	.word	0x20000284
 80008c4:	200004e8 	.word	0x200004e8
 80008c8:	20000060 	.word	0x20000060
 80008cc:	200003b8 	.word	0x200003b8
 80008d0:	20000358 	.word	0x20000358
 80008d4:	20000418 	.word	0x20000418
 80008d8:	200002f8 	.word	0x200002f8
 80008dc:	20000298 	.word	0x20000298
 80008e0:	20000000 	.word	0x20000000
 80008e4:	20000508 	.word	0x20000508
 80008e8:	200004dc 	.word	0x200004dc
 80008ec:	2000028c 	.word	0x2000028c
 80008f0:	200004d0 	.word	0x200004d0
 80008f4:	20000518 	.word	0x20000518
 80008f8:	200000c0 	.word	0x200000c0
				for (int j = 0; j < 1; ++j) {
 80008fc:	2300      	movs	r3, #0
 80008fe:	61bb      	str	r3, [r7, #24]
 8000900:	e00a      	b.n	8000918 <updatescreen+0x310>
					*ptrscreen++ = *ptrsrc++;
 8000902:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000904:	1c53      	adds	r3, r2, #1
 8000906:	65bb      	str	r3, [r7, #88]	; 0x58
 8000908:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800090a:	1c59      	adds	r1, r3, #1
 800090c:	6679      	str	r1, [r7, #100]	; 0x64
 800090e:	7812      	ldrb	r2, [r2, #0]
 8000910:	701a      	strb	r2, [r3, #0]
				for (int j = 0; j < 1; ++j) {
 8000912:	69bb      	ldr	r3, [r7, #24]
 8000914:	3301      	adds	r3, #1
 8000916:	61bb      	str	r3, [r7, #24]
 8000918:	69bb      	ldr	r3, [r7, #24]
 800091a:	2b00      	cmp	r3, #0
 800091c:	ddf1      	ble.n	8000902 <updatescreen+0x2fa>
				}
				ptrscreen += 319;
 800091e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000920:	f203 133f 	addw	r3, r3, #319	; 0x13f
 8000924:	667b      	str	r3, [r7, #100]	; 0x64
			for (int i = 0; i < 4; ++i) {
 8000926:	69fb      	ldr	r3, [r7, #28]
 8000928:	3301      	adds	r3, #1
 800092a:	61fb      	str	r3, [r7, #28]
 800092c:	69fb      	ldr	r3, [r7, #28]
 800092e:	2b03      	cmp	r3, #3
 8000930:	dde4      	ble.n	80008fc <updatescreen+0x2f4>
	for (int m = 0; m < 3; ++m) {
 8000932:	6a3b      	ldr	r3, [r7, #32]
 8000934:	3301      	adds	r3, #1
 8000936:	623b      	str	r3, [r7, #32]
 8000938:	6a3b      	ldr	r3, [r7, #32]
 800093a:	2b02      	cmp	r3, #2
 800093c:	dd9e      	ble.n	800087c <updatescreen+0x274>
			}
		}
	}

	// Erase Previous Invader 1 Missile Positions
	for (int missile_index = 0; missile_index < 6; ++missile_index) {
 800093e:	2300      	movs	r3, #0
 8000940:	617b      	str	r3, [r7, #20]
 8000942:	e035      	b.n	80009b0 <updatescreen+0x3a8>
		if (invader1_missile_status[missile_index] == 1) {
 8000944:	4a42      	ldr	r2, [pc, #264]	; (8000a50 <updatescreen+0x448>)
 8000946:	697b      	ldr	r3, [r7, #20]
 8000948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800094c:	2b01      	cmp	r3, #1
 800094e:	d12c      	bne.n	80009aa <updatescreen+0x3a2>
			ptrscreen = (uint8_t*)(0x20020000 + invader1_missile_prev_ypos[missile_index]*320 + invader1_missile_prev_xpos[missile_index]);
 8000950:	4a40      	ldr	r2, [pc, #256]	; (8000a54 <updatescreen+0x44c>)
 8000952:	697b      	ldr	r3, [r7, #20]
 8000954:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000958:	4613      	mov	r3, r2
 800095a:	009b      	lsls	r3, r3, #2
 800095c:	4413      	add	r3, r2
 800095e:	019b      	lsls	r3, r3, #6
 8000960:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8000964:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000968:	493b      	ldr	r1, [pc, #236]	; (8000a58 <updatescreen+0x450>)
 800096a:	697a      	ldr	r2, [r7, #20]
 800096c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000970:	4413      	add	r3, r2
 8000972:	667b      	str	r3, [r7, #100]	; 0x64
			for (int i = 0; i < 4; ++i) {
 8000974:	2300      	movs	r3, #0
 8000976:	613b      	str	r3, [r7, #16]
 8000978:	e014      	b.n	80009a4 <updatescreen+0x39c>
				for (int j = 0; j < 1; ++j) {
 800097a:	2300      	movs	r3, #0
 800097c:	60fb      	str	r3, [r7, #12]
 800097e:	e007      	b.n	8000990 <updatescreen+0x388>
					*ptrscreen++ = 0;
 8000980:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000982:	1c5a      	adds	r2, r3, #1
 8000984:	667a      	str	r2, [r7, #100]	; 0x64
 8000986:	2200      	movs	r2, #0
 8000988:	701a      	strb	r2, [r3, #0]
				for (int j = 0; j < 1; ++j) {
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	3301      	adds	r3, #1
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	2b00      	cmp	r3, #0
 8000994:	ddf4      	ble.n	8000980 <updatescreen+0x378>
				}
				ptrscreen += 319;
 8000996:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000998:	f203 133f 	addw	r3, r3, #319	; 0x13f
 800099c:	667b      	str	r3, [r7, #100]	; 0x64
			for (int i = 0; i < 4; ++i) {
 800099e:	693b      	ldr	r3, [r7, #16]
 80009a0:	3301      	adds	r3, #1
 80009a2:	613b      	str	r3, [r7, #16]
 80009a4:	693b      	ldr	r3, [r7, #16]
 80009a6:	2b03      	cmp	r3, #3
 80009a8:	dde7      	ble.n	800097a <updatescreen+0x372>
	for (int missile_index = 0; missile_index < 6; ++missile_index) {
 80009aa:	697b      	ldr	r3, [r7, #20]
 80009ac:	3301      	adds	r3, #1
 80009ae:	617b      	str	r3, [r7, #20]
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	2b05      	cmp	r3, #5
 80009b4:	ddc6      	ble.n	8000944 <updatescreen+0x33c>
			}
		}
	}

	// Display Invader 1 Missile
	for (int missile_index = 0; missile_index < 6; ++missile_index) {
 80009b6:	2300      	movs	r3, #0
 80009b8:	60bb      	str	r3, [r7, #8]
 80009ba:	e03a      	b.n	8000a32 <updatescreen+0x42a>
		if (invader1_missile_status[missile_index] == 1) {
 80009bc:	4a24      	ldr	r2, [pc, #144]	; (8000a50 <updatescreen+0x448>)
 80009be:	68bb      	ldr	r3, [r7, #8]
 80009c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009c4:	2b01      	cmp	r3, #1
 80009c6:	d131      	bne.n	8000a2c <updatescreen+0x424>
			ptrscreen = (uint8_t*)(0x20020000 + invader1_missile_ypos[missile_index]*320 + invader1_missile_xpos[missile_index]);
 80009c8:	4a24      	ldr	r2, [pc, #144]	; (8000a5c <updatescreen+0x454>)
 80009ca:	68bb      	ldr	r3, [r7, #8]
 80009cc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80009d0:	4613      	mov	r3, r2
 80009d2:	009b      	lsls	r3, r3, #2
 80009d4:	4413      	add	r3, r2
 80009d6:	019b      	lsls	r3, r3, #6
 80009d8:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80009dc:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80009e0:	491f      	ldr	r1, [pc, #124]	; (8000a60 <updatescreen+0x458>)
 80009e2:	68ba      	ldr	r2, [r7, #8]
 80009e4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80009e8:	4413      	add	r3, r2
 80009ea:	667b      	str	r3, [r7, #100]	; 0x64
			ptrsrc = Missile;
 80009ec:	4b1d      	ldr	r3, [pc, #116]	; (8000a64 <updatescreen+0x45c>)
 80009ee:	65bb      	str	r3, [r7, #88]	; 0x58
			for (int i = 0; i < 4; ++i) {
 80009f0:	2300      	movs	r3, #0
 80009f2:	607b      	str	r3, [r7, #4]
 80009f4:	e017      	b.n	8000a26 <updatescreen+0x41e>
				for (int j = 0; j < 1; ++j) {
 80009f6:	2300      	movs	r3, #0
 80009f8:	603b      	str	r3, [r7, #0]
 80009fa:	e00a      	b.n	8000a12 <updatescreen+0x40a>
					*ptrscreen++ = *ptrsrc++;
 80009fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80009fe:	1c53      	adds	r3, r2, #1
 8000a00:	65bb      	str	r3, [r7, #88]	; 0x58
 8000a02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000a04:	1c59      	adds	r1, r3, #1
 8000a06:	6679      	str	r1, [r7, #100]	; 0x64
 8000a08:	7812      	ldrb	r2, [r2, #0]
 8000a0a:	701a      	strb	r2, [r3, #0]
				for (int j = 0; j < 1; ++j) {
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	3301      	adds	r3, #1
 8000a10:	603b      	str	r3, [r7, #0]
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	ddf1      	ble.n	80009fc <updatescreen+0x3f4>
				}
				ptrscreen += 319;
 8000a18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000a1a:	f203 133f 	addw	r3, r3, #319	; 0x13f
 8000a1e:	667b      	str	r3, [r7, #100]	; 0x64
			for (int i = 0; i < 4; ++i) {
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	3301      	adds	r3, #1
 8000a24:	607b      	str	r3, [r7, #4]
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	2b03      	cmp	r3, #3
 8000a2a:	dde4      	ble.n	80009f6 <updatescreen+0x3ee>
	for (int missile_index = 0; missile_index < 6; ++missile_index) {
 8000a2c:	68bb      	ldr	r3, [r7, #8]
 8000a2e:	3301      	adds	r3, #1
 8000a30:	60bb      	str	r3, [r7, #8]
 8000a32:	68bb      	ldr	r3, [r7, #8]
 8000a34:	2b05      	cmp	r3, #5
 8000a36:	ddc1      	ble.n	80009bc <updatescreen+0x3b4>
		}
	}



	displayint(playerScore, (uint32_t*)(0x20020418));
 8000a38:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <updatescreen+0x460>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	b29b      	uxth	r3, r3
 8000a3e:	490b      	ldr	r1, [pc, #44]	; (8000a6c <updatescreen+0x464>)
 8000a40:	4618      	mov	r0, r3
 8000a42:	f7ff fd87 	bl	8000554 <displayint>
}
 8000a46:	bf00      	nop
 8000a48:	3768      	adds	r7, #104	; 0x68
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	2000047c 	.word	0x2000047c
 8000a54:	200004b8 	.word	0x200004b8
 8000a58:	200004a0 	.word	0x200004a0
 8000a5c:	200004f0 	.word	0x200004f0
 8000a60:	20000524 	.word	0x20000524
 8000a64:	200000c0 	.word	0x200000c0
 8000a68:	2000027c 	.word	0x2000027c
 8000a6c:	20020418 	.word	0x20020418

08000a70 <updatePlayerMissileStatus>:

void updatePlayerMissileStatus(int missile_index)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b097      	sub	sp, #92	; 0x5c
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
	int pos_x = player_missile_prev_xpos[missile_index];
 8000a78:	4a80      	ldr	r2, [pc, #512]	; (8000c7c <updatePlayerMissileStatus+0x20c>)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a80:	61bb      	str	r3, [r7, #24]
	int pos_y = player_missile_prev_ypos[missile_index];
 8000a82:	4a7f      	ldr	r2, [pc, #508]	; (8000c80 <updatePlayerMissileStatus+0x210>)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a8a:	617b      	str	r3, [r7, #20]

	// Check if missile is out of bounds
	if (player_missile_ypos[missile_index] <= 0) {
 8000a8c:	4a7d      	ldr	r2, [pc, #500]	; (8000c84 <updatePlayerMissileStatus+0x214>)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	dc2c      	bgt.n	8000af2 <updatePlayerMissileStatus+0x82>
		player_missile_status[missile_index] = 0;
 8000a98:	4a7b      	ldr	r2, [pc, #492]	; (8000c88 <updatePlayerMissileStatus+0x218>)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		uint8_t* ptrscreen = (uint8_t*)(0x20020000 + pos_y*320 + pos_x);
 8000aa2:	697a      	ldr	r2, [r7, #20]
 8000aa4:	4613      	mov	r3, r2
 8000aa6:	009b      	lsls	r3, r3, #2
 8000aa8:	4413      	add	r3, r2
 8000aaa:	019b      	lsls	r3, r3, #6
 8000aac:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8000ab0:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000ab4:	69ba      	ldr	r2, [r7, #24]
 8000ab6:	4413      	add	r3, r2
 8000ab8:	657b      	str	r3, [r7, #84]	; 0x54
		for (int i = 0; i < 4; i++) {
 8000aba:	2300      	movs	r3, #0
 8000abc:	653b      	str	r3, [r7, #80]	; 0x50
 8000abe:	e014      	b.n	8000aea <updatePlayerMissileStatus+0x7a>
			for (int j = 0; j < 1; j++) {
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000ac4:	e007      	b.n	8000ad6 <updatePlayerMissileStatus+0x66>
				*ptrscreen++ = 0;
 8000ac6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ac8:	1c5a      	adds	r2, r3, #1
 8000aca:	657a      	str	r2, [r7, #84]	; 0x54
 8000acc:	2200      	movs	r2, #0
 8000ace:	701a      	strb	r2, [r3, #0]
			for (int j = 0; j < 1; j++) {
 8000ad0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ad2:	3301      	adds	r3, #1
 8000ad4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000ad6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	ddf4      	ble.n	8000ac6 <updatePlayerMissileStatus+0x56>
			}
			ptrscreen += 319;
 8000adc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ade:	f203 133f 	addw	r3, r3, #319	; 0x13f
 8000ae2:	657b      	str	r3, [r7, #84]	; 0x54
		for (int i = 0; i < 4; i++) {
 8000ae4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	653b      	str	r3, [r7, #80]	; 0x50
 8000aea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000aec:	2b03      	cmp	r3, #3
 8000aee:	dde7      	ble.n	8000ac0 <updatePlayerMissileStatus+0x50>
		}
		return;
 8000af0:	e0be      	b.n	8000c70 <updatePlayerMissileStatus+0x200>

	/// Check for player missile and enemy collision
	// Loop through enemy positions to check if one is hit
	int inv_pos_x;
	int inv_pos_y;
	int inv_w = 12;
 8000af2:	230c      	movs	r3, #12
 8000af4:	613b      	str	r3, [r7, #16]
	int inv_h = 8;
 8000af6:	2308      	movs	r3, #8
 8000af8:	60fb      	str	r3, [r7, #12]
	int inv_r, inv_c, inv_hit = 0;
 8000afa:	2300      	movs	r3, #0
 8000afc:	63bb      	str	r3, [r7, #56]	; 0x38
	for (int row = 0; row < 4; ++row) {
 8000afe:	2300      	movs	r3, #0
 8000b00:	637b      	str	r3, [r7, #52]	; 0x34
 8000b02:	e04a      	b.n	8000b9a <updatePlayerMissileStatus+0x12a>
		for (int col = 0; col < 6; ++col) {
 8000b04:	2300      	movs	r3, #0
 8000b06:	633b      	str	r3, [r7, #48]	; 0x30
 8000b08:	e041      	b.n	8000b8e <updatePlayerMissileStatus+0x11e>
			if (invader1_status[row][col] == 0) {
 8000b0a:	4960      	ldr	r1, [pc, #384]	; (8000c8c <updatePlayerMissileStatus+0x21c>)
 8000b0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000b0e:	4613      	mov	r3, r2
 8000b10:	005b      	lsls	r3, r3, #1
 8000b12:	4413      	add	r3, r2
 8000b14:	005b      	lsls	r3, r3, #1
 8000b16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000b18:	4413      	add	r3, r2
 8000b1a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d031      	beq.n	8000b86 <updatePlayerMissileStatus+0x116>
				continue;
			}
			inv_pos_x = invader1_prev_xpos[row][col];
 8000b22:	495b      	ldr	r1, [pc, #364]	; (8000c90 <updatePlayerMissileStatus+0x220>)
 8000b24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000b26:	4613      	mov	r3, r2
 8000b28:	005b      	lsls	r3, r3, #1
 8000b2a:	4413      	add	r3, r2
 8000b2c:	005b      	lsls	r3, r3, #1
 8000b2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000b30:	4413      	add	r3, r2
 8000b32:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b36:	64bb      	str	r3, [r7, #72]	; 0x48
			inv_pos_y = invader1_prev_ypos[row][col];
 8000b38:	4956      	ldr	r1, [pc, #344]	; (8000c94 <updatePlayerMissileStatus+0x224>)
 8000b3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000b3c:	4613      	mov	r3, r2
 8000b3e:	005b      	lsls	r3, r3, #1
 8000b40:	4413      	add	r3, r2
 8000b42:	005b      	lsls	r3, r3, #1
 8000b44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000b46:	4413      	add	r3, r2
 8000b48:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b4c:	647b      	str	r3, [r7, #68]	; 0x44

			if ( ((inv_pos_x + inv_w) >= pos_x) && (inv_pos_x <= pos_x + 2) && ((inv_pos_y + inv_h) >= pos_y) && (inv_pos_y <= pos_y) ) {
 8000b4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000b50:	693b      	ldr	r3, [r7, #16]
 8000b52:	4413      	add	r3, r2
 8000b54:	69ba      	ldr	r2, [r7, #24]
 8000b56:	429a      	cmp	r2, r3
 8000b58:	dc16      	bgt.n	8000b88 <updatePlayerMissileStatus+0x118>
 8000b5a:	69bb      	ldr	r3, [r7, #24]
 8000b5c:	3302      	adds	r3, #2
 8000b5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000b60:	429a      	cmp	r2, r3
 8000b62:	dc11      	bgt.n	8000b88 <updatePlayerMissileStatus+0x118>
 8000b64:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	4413      	add	r3, r2
 8000b6a:	697a      	ldr	r2, [r7, #20]
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	dc0b      	bgt.n	8000b88 <updatePlayerMissileStatus+0x118>
 8000b70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	429a      	cmp	r2, r3
 8000b76:	dc07      	bgt.n	8000b88 <updatePlayerMissileStatus+0x118>
				inv_hit = 1;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	63bb      	str	r3, [r7, #56]	; 0x38
				inv_r = row;
 8000b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b7e:	643b      	str	r3, [r7, #64]	; 0x40
				inv_c = col;
 8000b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b82:	63fb      	str	r3, [r7, #60]	; 0x3c
				break;
 8000b84:	e006      	b.n	8000b94 <updatePlayerMissileStatus+0x124>
				continue;
 8000b86:	bf00      	nop
		for (int col = 0; col < 6; ++col) {
 8000b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	633b      	str	r3, [r7, #48]	; 0x30
 8000b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b90:	2b05      	cmp	r3, #5
 8000b92:	ddba      	ble.n	8000b0a <updatePlayerMissileStatus+0x9a>
	for (int row = 0; row < 4; ++row) {
 8000b94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b96:	3301      	adds	r3, #1
 8000b98:	637b      	str	r3, [r7, #52]	; 0x34
 8000b9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b9c:	2b03      	cmp	r3, #3
 8000b9e:	ddb1      	ble.n	8000b04 <updatePlayerMissileStatus+0x94>


		}
	}

	if (inv_hit == 1) {
 8000ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	d163      	bne.n	8000c6e <updatePlayerMissileStatus+0x1fe>
		playerScore += 10;
 8000ba6:	4b3c      	ldr	r3, [pc, #240]	; (8000c98 <updatePlayerMissileStatus+0x228>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	330a      	adds	r3, #10
 8000bac:	4a3a      	ldr	r2, [pc, #232]	; (8000c98 <updatePlayerMissileStatus+0x228>)
 8000bae:	6013      	str	r3, [r2, #0]
		player_missile_status[missile_index] = 0;
 8000bb0:	4a35      	ldr	r2, [pc, #212]	; (8000c88 <updatePlayerMissileStatus+0x218>)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		invader1_status[inv_r][inv_c] = 0;
 8000bba:	4934      	ldr	r1, [pc, #208]	; (8000c8c <updatePlayerMissileStatus+0x21c>)
 8000bbc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000bbe:	4613      	mov	r3, r2
 8000bc0:	005b      	lsls	r3, r3, #1
 8000bc2:	4413      	add	r3, r2
 8000bc4:	005b      	lsls	r3, r3, #1
 8000bc6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000bc8:	4413      	add	r3, r2
 8000bca:	2200      	movs	r2, #0
 8000bcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		// Erase missile and enemy
		uint8_t* ptrscreen = (uint8_t*)(0x20020000 + pos_y*320 + pos_x);
 8000bd0:	697a      	ldr	r2, [r7, #20]
 8000bd2:	4613      	mov	r3, r2
 8000bd4:	009b      	lsls	r3, r3, #2
 8000bd6:	4413      	add	r3, r2
 8000bd8:	019b      	lsls	r3, r3, #6
 8000bda:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8000bde:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000be2:	69ba      	ldr	r2, [r7, #24]
 8000be4:	4413      	add	r3, r2
 8000be6:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i = 0; i < 4; i++) {
 8000be8:	2300      	movs	r3, #0
 8000bea:	62bb      	str	r3, [r7, #40]	; 0x28
 8000bec:	e014      	b.n	8000c18 <updatePlayerMissileStatus+0x1a8>
			for (int j = 0; j < 1; j++) {
 8000bee:	2300      	movs	r3, #0
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
 8000bf2:	e007      	b.n	8000c04 <updatePlayerMissileStatus+0x194>
				*ptrscreen++ = 0;
 8000bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bf6:	1c5a      	adds	r2, r3, #1
 8000bf8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	701a      	strb	r2, [r3, #0]
			for (int j = 0; j < 1; j++) {
 8000bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c00:	3301      	adds	r3, #1
 8000c02:	627b      	str	r3, [r7, #36]	; 0x24
 8000c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	ddf4      	ble.n	8000bf4 <updatePlayerMissileStatus+0x184>
			}
			ptrscreen += 319;
 8000c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c0c:	f203 133f 	addw	r3, r3, #319	; 0x13f
 8000c10:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i = 0; i < 4; i++) {
 8000c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c14:	3301      	adds	r3, #1
 8000c16:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c1a:	2b03      	cmp	r3, #3
 8000c1c:	dde7      	ble.n	8000bee <updatePlayerMissileStatus+0x17e>
		}

		ptrscreen = (uint8_t*)(0x20020000 + inv_pos_y*320 + inv_pos_x);
 8000c1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000c20:	4613      	mov	r3, r2
 8000c22:	009b      	lsls	r3, r3, #2
 8000c24:	4413      	add	r3, r2
 8000c26:	019b      	lsls	r3, r3, #6
 8000c28:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8000c2c:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000c30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000c32:	4413      	add	r3, r2
 8000c34:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i = 0; i < 8; i++) {
 8000c36:	2300      	movs	r3, #0
 8000c38:	623b      	str	r3, [r7, #32]
 8000c3a:	e014      	b.n	8000c66 <updatePlayerMissileStatus+0x1f6>
			for (int j = 0; j < 12; j++) {
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	61fb      	str	r3, [r7, #28]
 8000c40:	e007      	b.n	8000c52 <updatePlayerMissileStatus+0x1e2>
				*ptrscreen++ = 0;
 8000c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c44:	1c5a      	adds	r2, r3, #1
 8000c46:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000c48:	2200      	movs	r2, #0
 8000c4a:	701a      	strb	r2, [r3, #0]
			for (int j = 0; j < 12; j++) {
 8000c4c:	69fb      	ldr	r3, [r7, #28]
 8000c4e:	3301      	adds	r3, #1
 8000c50:	61fb      	str	r3, [r7, #28]
 8000c52:	69fb      	ldr	r3, [r7, #28]
 8000c54:	2b0b      	cmp	r3, #11
 8000c56:	ddf4      	ble.n	8000c42 <updatePlayerMissileStatus+0x1d2>
			}
			ptrscreen += 308;
 8000c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c5a:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8000c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i = 0; i < 8; i++) {
 8000c60:	6a3b      	ldr	r3, [r7, #32]
 8000c62:	3301      	adds	r3, #1
 8000c64:	623b      	str	r3, [r7, #32]
 8000c66:	6a3b      	ldr	r3, [r7, #32]
 8000c68:	2b07      	cmp	r3, #7
 8000c6a:	dde7      	ble.n	8000c3c <updatePlayerMissileStatus+0x1cc>
		}
	}


	return;
 8000c6c:	bf00      	nop
 8000c6e:	bf00      	nop
}
 8000c70:	375c      	adds	r7, #92	; 0x5c
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	200004dc 	.word	0x200004dc
 8000c80:	20000508 	.word	0x20000508
 8000c84:	200004d0 	.word	0x200004d0
 8000c88:	2000028c 	.word	0x2000028c
 8000c8c:	20000418 	.word	0x20000418
 8000c90:	20000358 	.word	0x20000358
 8000c94:	200003b8 	.word	0x200003b8
 8000c98:	2000027c 	.word	0x2000027c

08000c9c <updateEnemyMissileStatus>:

void updateEnemyMissileStatus(int missile_index)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b089      	sub	sp, #36	; 0x24
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]

	int pos_x = invader1_missile_prev_xpos[missile_index];
 8000ca4:	4a22      	ldr	r2, [pc, #136]	; (8000d30 <updateEnemyMissileStatus+0x94>)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cac:	613b      	str	r3, [r7, #16]
	int pos_y = invader1_missile_prev_ypos[missile_index];
 8000cae:	4a21      	ldr	r2, [pc, #132]	; (8000d34 <updateEnemyMissileStatus+0x98>)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cb6:	60fb      	str	r3, [r7, #12]

	if (pos_y >= 195) { // out of bounds and erase
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	2bc2      	cmp	r3, #194	; 0xc2
 8000cbc:	dd32      	ble.n	8000d24 <updateEnemyMissileStatus+0x88>
		invader1_missile_status[missile_index] = 0;
 8000cbe:	4a1e      	ldr	r2, [pc, #120]	; (8000d38 <updateEnemyMissileStatus+0x9c>)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		uint8_t* ptrscreen = (uint8_t*)(0x20020000 + invader1_missile_prev_ypos[missile_index]*320 + invader1_missile_prev_xpos[missile_index]);
 8000cc8:	4a1a      	ldr	r2, [pc, #104]	; (8000d34 <updateEnemyMissileStatus+0x98>)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000cd0:	4613      	mov	r3, r2
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	4413      	add	r3, r2
 8000cd6:	019b      	lsls	r3, r3, #6
 8000cd8:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8000cdc:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000ce0:	4913      	ldr	r1, [pc, #76]	; (8000d30 <updateEnemyMissileStatus+0x94>)
 8000ce2:	687a      	ldr	r2, [r7, #4]
 8000ce4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000ce8:	4413      	add	r3, r2
 8000cea:	61fb      	str	r3, [r7, #28]
		for (int i = 0; i < 4; ++i) {
 8000cec:	2300      	movs	r3, #0
 8000cee:	61bb      	str	r3, [r7, #24]
 8000cf0:	e014      	b.n	8000d1c <updateEnemyMissileStatus+0x80>
			for (int j = 0; j < 1; ++j) {
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	617b      	str	r3, [r7, #20]
 8000cf6:	e007      	b.n	8000d08 <updateEnemyMissileStatus+0x6c>
				*ptrscreen++ = 0;
 8000cf8:	69fb      	ldr	r3, [r7, #28]
 8000cfa:	1c5a      	adds	r2, r3, #1
 8000cfc:	61fa      	str	r2, [r7, #28]
 8000cfe:	2200      	movs	r2, #0
 8000d00:	701a      	strb	r2, [r3, #0]
			for (int j = 0; j < 1; ++j) {
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	3301      	adds	r3, #1
 8000d06:	617b      	str	r3, [r7, #20]
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	ddf4      	ble.n	8000cf8 <updateEnemyMissileStatus+0x5c>
			}
			ptrscreen += 319;
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	f203 133f 	addw	r3, r3, #319	; 0x13f
 8000d14:	61fb      	str	r3, [r7, #28]
		for (int i = 0; i < 4; ++i) {
 8000d16:	69bb      	ldr	r3, [r7, #24]
 8000d18:	3301      	adds	r3, #1
 8000d1a:	61bb      	str	r3, [r7, #24]
 8000d1c:	69bb      	ldr	r3, [r7, #24]
 8000d1e:	2b03      	cmp	r3, #3
 8000d20:	dde7      	ble.n	8000cf2 <updateEnemyMissileStatus+0x56>
		}
		return;
 8000d22:	e000      	b.n	8000d26 <updateEnemyMissileStatus+0x8a>
	}


	return;
 8000d24:	bf00      	nop
}
 8000d26:	3724      	adds	r7, #36	; 0x24
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr
 8000d30:	200004a0 	.word	0x200004a0
 8000d34:	200004b8 	.word	0x200004b8
 8000d38:	2000047c 	.word	0x2000047c

08000d3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b098      	sub	sp, #96	; 0x60
 8000d40:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d42:	f000 fd8b 	bl	800185c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d46:	f000 fbfd 	bl	8001544 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d4a:	f000 fc59 	bl	8001600 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  ship_x = 154;
 8000d4e:	4bb3      	ldr	r3, [pc, #716]	; (800101c <main+0x2e0>)
 8000d50:	229a      	movs	r2, #154	; 0x9a
 8000d52:	601a      	str	r2, [r3, #0]
  ship_y = 192;
 8000d54:	4bb2      	ldr	r3, [pc, #712]	; (8001020 <main+0x2e4>)
 8000d56:	22c0      	movs	r2, #192	; 0xc0
 8000d58:	601a      	str	r2, [r3, #0]
  ship_px = ship_x;
 8000d5a:	4bb0      	ldr	r3, [pc, #704]	; (800101c <main+0x2e0>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4ab1      	ldr	r2, [pc, #708]	; (8001024 <main+0x2e8>)
 8000d60:	6013      	str	r3, [r2, #0]
  ship_py = ship_y;
 8000d62:	4baf      	ldr	r3, [pc, #700]	; (8001020 <main+0x2e4>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4ab0      	ldr	r2, [pc, #704]	; (8001028 <main+0x2ec>)
 8000d68:	6013      	str	r3, [r2, #0]

  // Initialize Invader 1 position and status
  for (int r = 0; r < 4; r++) {
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000d6e:	e060      	b.n	8000e32 <main+0xf6>
	  for (int c = 0; c < 6; c++) {
 8000d70:	2300      	movs	r3, #0
 8000d72:	65bb      	str	r3, [r7, #88]	; 0x58
 8000d74:	e057      	b.n	8000e26 <main+0xea>
		  invader1_status[r][c] = 1;
 8000d76:	49ad      	ldr	r1, [pc, #692]	; (800102c <main+0x2f0>)
 8000d78:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000d7a:	4613      	mov	r3, r2
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	4413      	add	r3, r2
 8000d80:	005b      	lsls	r3, r3, #1
 8000d82:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000d84:	4413      	add	r3, r2
 8000d86:	2201      	movs	r2, #1
 8000d88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		  invader1_xpos[r][c] = 80 + c*30;
 8000d8c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000d8e:	4613      	mov	r3, r2
 8000d90:	011b      	lsls	r3, r3, #4
 8000d92:	1a9b      	subs	r3, r3, r2
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8000d9a:	48a5      	ldr	r0, [pc, #660]	; (8001030 <main+0x2f4>)
 8000d9c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000d9e:	4613      	mov	r3, r2
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	4413      	add	r3, r2
 8000da4:	005b      	lsls	r3, r3, #1
 8000da6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000da8:	4413      	add	r3, r2
 8000daa:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
		  invader1_ypos[r][c] = 50 + r*20;
 8000dae:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000db0:	4613      	mov	r3, r2
 8000db2:	009b      	lsls	r3, r3, #2
 8000db4:	4413      	add	r3, r2
 8000db6:	009b      	lsls	r3, r3, #2
 8000db8:	f103 0132 	add.w	r1, r3, #50	; 0x32
 8000dbc:	489d      	ldr	r0, [pc, #628]	; (8001034 <main+0x2f8>)
 8000dbe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000dc0:	4613      	mov	r3, r2
 8000dc2:	005b      	lsls	r3, r3, #1
 8000dc4:	4413      	add	r3, r2
 8000dc6:	005b      	lsls	r3, r3, #1
 8000dc8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000dca:	4413      	add	r3, r2
 8000dcc:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
		  invader1_prev_xpos[r][c] = invader1_xpos[r][c];
 8000dd0:	4997      	ldr	r1, [pc, #604]	; (8001030 <main+0x2f4>)
 8000dd2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000dd4:	4613      	mov	r3, r2
 8000dd6:	005b      	lsls	r3, r3, #1
 8000dd8:	4413      	add	r3, r2
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000dde:	4413      	add	r3, r2
 8000de0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8000de4:	4894      	ldr	r0, [pc, #592]	; (8001038 <main+0x2fc>)
 8000de6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000de8:	4613      	mov	r3, r2
 8000dea:	005b      	lsls	r3, r3, #1
 8000dec:	4413      	add	r3, r2
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000df2:	4413      	add	r3, r2
 8000df4:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
		  invader1_prev_ypos[r][c] = invader1_ypos[r][c];
 8000df8:	498e      	ldr	r1, [pc, #568]	; (8001034 <main+0x2f8>)
 8000dfa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000dfc:	4613      	mov	r3, r2
 8000dfe:	005b      	lsls	r3, r3, #1
 8000e00:	4413      	add	r3, r2
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000e06:	4413      	add	r3, r2
 8000e08:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8000e0c:	488b      	ldr	r0, [pc, #556]	; (800103c <main+0x300>)
 8000e0e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000e10:	4613      	mov	r3, r2
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	4413      	add	r3, r2
 8000e16:	005b      	lsls	r3, r3, #1
 8000e18:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000e1a:	4413      	add	r3, r2
 8000e1c:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
	  for (int c = 0; c < 6; c++) {
 8000e20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000e22:	3301      	adds	r3, #1
 8000e24:	65bb      	str	r3, [r7, #88]	; 0x58
 8000e26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000e28:	2b05      	cmp	r3, #5
 8000e2a:	dda4      	ble.n	8000d76 <main+0x3a>
  for (int r = 0; r < 4; r++) {
 8000e2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e2e:	3301      	adds	r3, #1
 8000e30:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000e32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e34:	2b03      	cmp	r3, #3
 8000e36:	dd9b      	ble.n	8000d70 <main+0x34>
  }




  clearscreen();
 8000e38:	f7ff fb4e 	bl	80004d8 <clearscreen>

  gameStatus = LEVEL_1;
 8000e3c:	4b80      	ldr	r3, [pc, #512]	; (8001040 <main+0x304>)
 8000e3e:	2201      	movs	r2, #1
 8000e40:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /// Reset Game
	  if (gameStatus == RESET_LEVEL1) {
 8000e42:	4b7f      	ldr	r3, [pc, #508]	; (8001040 <main+0x304>)
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	f040 8095 	bne.w	8000f76 <main+0x23a>
		  highScore += playerScore;
 8000e4c:	4b7d      	ldr	r3, [pc, #500]	; (8001044 <main+0x308>)
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	4b7d      	ldr	r3, [pc, #500]	; (8001048 <main+0x30c>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4413      	add	r3, r2
 8000e56:	4a7b      	ldr	r2, [pc, #492]	; (8001044 <main+0x308>)
 8000e58:	6013      	str	r3, [r2, #0]
		  playerScore = 0;
 8000e5a:	4b7b      	ldr	r3, [pc, #492]	; (8001048 <main+0x30c>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]

		  // Initialize Invader 1 position and status
		  all_invader1_alive = 1;
 8000e60:	4b7a      	ldr	r3, [pc, #488]	; (800104c <main+0x310>)
 8000e62:	2201      	movs	r2, #1
 8000e64:	601a      	str	r2, [r3, #0]
		  for (int r = 0; r < 4; r++) {
 8000e66:	2300      	movs	r3, #0
 8000e68:	657b      	str	r3, [r7, #84]	; 0x54
 8000e6a:	e060      	b.n	8000f2e <main+0x1f2>
			  for (int c = 0; c < 6; c++) {
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	653b      	str	r3, [r7, #80]	; 0x50
 8000e70:	e057      	b.n	8000f22 <main+0x1e6>
				  invader1_status[r][c] = 1;
 8000e72:	496e      	ldr	r1, [pc, #440]	; (800102c <main+0x2f0>)
 8000e74:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000e76:	4613      	mov	r3, r2
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	4413      	add	r3, r2
 8000e7c:	005b      	lsls	r3, r3, #1
 8000e7e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000e80:	4413      	add	r3, r2
 8000e82:	2201      	movs	r2, #1
 8000e84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				  invader1_xpos[r][c] = 80 + c*30;
 8000e88:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000e8a:	4613      	mov	r3, r2
 8000e8c:	011b      	lsls	r3, r3, #4
 8000e8e:	1a9b      	subs	r3, r3, r2
 8000e90:	005b      	lsls	r3, r3, #1
 8000e92:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8000e96:	4866      	ldr	r0, [pc, #408]	; (8001030 <main+0x2f4>)
 8000e98:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000e9a:	4613      	mov	r3, r2
 8000e9c:	005b      	lsls	r3, r3, #1
 8000e9e:	4413      	add	r3, r2
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000ea4:	4413      	add	r3, r2
 8000ea6:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
				  invader1_ypos[r][c] = 50 + r*20;
 8000eaa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000eac:	4613      	mov	r3, r2
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	4413      	add	r3, r2
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	f103 0132 	add.w	r1, r3, #50	; 0x32
 8000eb8:	485e      	ldr	r0, [pc, #376]	; (8001034 <main+0x2f8>)
 8000eba:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000ebc:	4613      	mov	r3, r2
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	4413      	add	r3, r2
 8000ec2:	005b      	lsls	r3, r3, #1
 8000ec4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000ec6:	4413      	add	r3, r2
 8000ec8:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
				  invader1_prev_xpos[r][c] = invader1_xpos[r][c];
 8000ecc:	4958      	ldr	r1, [pc, #352]	; (8001030 <main+0x2f4>)
 8000ece:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000ed0:	4613      	mov	r3, r2
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	4413      	add	r3, r2
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000eda:	4413      	add	r3, r2
 8000edc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8000ee0:	4855      	ldr	r0, [pc, #340]	; (8001038 <main+0x2fc>)
 8000ee2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000ee4:	4613      	mov	r3, r2
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	4413      	add	r3, r2
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000eee:	4413      	add	r3, r2
 8000ef0:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
				  invader1_prev_ypos[r][c] = invader1_ypos[r][c];
 8000ef4:	494f      	ldr	r1, [pc, #316]	; (8001034 <main+0x2f8>)
 8000ef6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000ef8:	4613      	mov	r3, r2
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	4413      	add	r3, r2
 8000efe:	005b      	lsls	r3, r3, #1
 8000f00:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000f02:	4413      	add	r3, r2
 8000f04:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8000f08:	484c      	ldr	r0, [pc, #304]	; (800103c <main+0x300>)
 8000f0a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000f0c:	4613      	mov	r3, r2
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	4413      	add	r3, r2
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000f16:	4413      	add	r3, r2
 8000f18:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
			  for (int c = 0; c < 6; c++) {
 8000f1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000f1e:	3301      	adds	r3, #1
 8000f20:	653b      	str	r3, [r7, #80]	; 0x50
 8000f22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000f24:	2b05      	cmp	r3, #5
 8000f26:	dda4      	ble.n	8000e72 <main+0x136>
		  for (int r = 0; r < 4; r++) {
 8000f28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	657b      	str	r3, [r7, #84]	; 0x54
 8000f2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f30:	2b03      	cmp	r3, #3
 8000f32:	dd9b      	ble.n	8000e6c <main+0x130>
			  }
		  }

		  // Reset Player Missiles
		  for (int missile_index = 0; missile_index < 3; ++missile_index) {
 8000f34:	2300      	movs	r3, #0
 8000f36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000f38:	e007      	b.n	8000f4a <main+0x20e>
			player_missile_status[missile_index] = 0;
 8000f3a:	4a45      	ldr	r2, [pc, #276]	; (8001050 <main+0x314>)
 8000f3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f3e:	2100      	movs	r1, #0
 8000f40:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  for (int missile_index = 0; missile_index < 3; ++missile_index) {
 8000f44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f46:	3301      	adds	r3, #1
 8000f48:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000f4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f4c:	2b02      	cmp	r3, #2
 8000f4e:	ddf4      	ble.n	8000f3a <main+0x1fe>
		  }
		  // Reset Invader 1 Missiles
		  for (int missile_index = 0; missile_index < 6; ++missile_index) {
 8000f50:	2300      	movs	r3, #0
 8000f52:	64bb      	str	r3, [r7, #72]	; 0x48
 8000f54:	e007      	b.n	8000f66 <main+0x22a>
			invader1_missile_status[missile_index] = 0;
 8000f56:	4a3f      	ldr	r2, [pc, #252]	; (8001054 <main+0x318>)
 8000f58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  for (int missile_index = 0; missile_index < 6; ++missile_index) {
 8000f60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000f62:	3301      	adds	r3, #1
 8000f64:	64bb      	str	r3, [r7, #72]	; 0x48
 8000f66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000f68:	2b05      	cmp	r3, #5
 8000f6a:	ddf4      	ble.n	8000f56 <main+0x21a>
		  }

		  gameStatus = LEVEL_1;
 8000f6c:	4b34      	ldr	r3, [pc, #208]	; (8001040 <main+0x304>)
 8000f6e:	2201      	movs	r2, #1
 8000f70:	701a      	strb	r2, [r3, #0]
		  clearscreen();
 8000f72:	f7ff fab1 	bl	80004d8 <clearscreen>
	  }

	  /// Level 1
	  if (gameStatus == LEVEL_1) {
 8000f76:	4b32      	ldr	r3, [pc, #200]	; (8001040 <main+0x304>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	f47f af61 	bne.w	8000e42 <main+0x106>
		if (refresh==1) { // refresh interrupt was triggered
 8000f80:	4b35      	ldr	r3, [pc, #212]	; (8001058 <main+0x31c>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	f040 80a6 	bne.w	80010d8 <main+0x39c>
		  updatescreen();
 8000f8c:	f7ff fb3c 	bl	8000608 <updatescreen>

		  // Save player previous position
		  ship_px = ship_x;
 8000f90:	4b22      	ldr	r3, [pc, #136]	; (800101c <main+0x2e0>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a23      	ldr	r2, [pc, #140]	; (8001024 <main+0x2e8>)
 8000f96:	6013      	str	r3, [r2, #0]
		  ship_py = ship_y;
 8000f98:	4b21      	ldr	r3, [pc, #132]	; (8001020 <main+0x2e4>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a22      	ldr	r2, [pc, #136]	; (8001028 <main+0x2ec>)
 8000f9e:	6013      	str	r3, [r2, #0]

		  // Save enemy invader 1 previous position
		  for (int r = 0; r < 4; r++) {
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	647b      	str	r3, [r7, #68]	; 0x44
 8000fa4:	e033      	b.n	800100e <main+0x2d2>
			  for (int c = 0; c < 6; c++) {
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	643b      	str	r3, [r7, #64]	; 0x40
 8000faa:	e02a      	b.n	8001002 <main+0x2c6>
				  invader1_prev_xpos[r][c] = invader1_xpos[r][c];
 8000fac:	4920      	ldr	r1, [pc, #128]	; (8001030 <main+0x2f4>)
 8000fae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	4413      	add	r3, r2
 8000fb6:	005b      	lsls	r3, r3, #1
 8000fb8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000fba:	4413      	add	r3, r2
 8000fbc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8000fc0:	481d      	ldr	r0, [pc, #116]	; (8001038 <main+0x2fc>)
 8000fc2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	4413      	add	r3, r2
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000fce:	4413      	add	r3, r2
 8000fd0:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
				  invader1_prev_ypos[r][c] = invader1_ypos[r][c];
 8000fd4:	4917      	ldr	r1, [pc, #92]	; (8001034 <main+0x2f8>)
 8000fd6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000fd8:	4613      	mov	r3, r2
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	4413      	add	r3, r2
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000fe2:	4413      	add	r3, r2
 8000fe4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8000fe8:	4814      	ldr	r0, [pc, #80]	; (800103c <main+0x300>)
 8000fea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000fec:	4613      	mov	r3, r2
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	4413      	add	r3, r2
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000ff6:	4413      	add	r3, r2
 8000ff8:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
			  for (int c = 0; c < 6; c++) {
 8000ffc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000ffe:	3301      	adds	r3, #1
 8001000:	643b      	str	r3, [r7, #64]	; 0x40
 8001002:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001004:	2b05      	cmp	r3, #5
 8001006:	ddd1      	ble.n	8000fac <main+0x270>
		  for (int r = 0; r < 4; r++) {
 8001008:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800100a:	3301      	adds	r3, #1
 800100c:	647b      	str	r3, [r7, #68]	; 0x44
 800100e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001010:	2b03      	cmp	r3, #3
 8001012:	ddc8      	ble.n	8000fa6 <main+0x26a>
			  }
		  }

		  // Save player missiles previous position
		  for (int missile_index = 0; missile_index < 3; ++missile_index) {
 8001014:	2300      	movs	r3, #0
 8001016:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001018:	e039      	b.n	800108e <main+0x352>
 800101a:	bf00      	nop
 800101c:	200004e8 	.word	0x200004e8
 8001020:	20000284 	.word	0x20000284
 8001024:	200004ec 	.word	0x200004ec
 8001028:	20000288 	.word	0x20000288
 800102c:	20000418 	.word	0x20000418
 8001030:	20000298 	.word	0x20000298
 8001034:	200002f8 	.word	0x200002f8
 8001038:	20000358 	.word	0x20000358
 800103c:	200003b8 	.word	0x200003b8
 8001040:	20000514 	.word	0x20000514
 8001044:	20000278 	.word	0x20000278
 8001048:	2000027c 	.word	0x2000027c
 800104c:	200000cc 	.word	0x200000cc
 8001050:	2000028c 	.word	0x2000028c
 8001054:	2000047c 	.word	0x2000047c
 8001058:	20000280 	.word	0x20000280
			if (player_missile_status[missile_index] == 1) {
 800105c:	4a9b      	ldr	r2, [pc, #620]	; (80012cc <main+0x590>)
 800105e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001060:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001064:	2b01      	cmp	r3, #1
 8001066:	d10f      	bne.n	8001088 <main+0x34c>
				player_missile_prev_xpos[missile_index] = player_missile_xpos[missile_index];
 8001068:	4a99      	ldr	r2, [pc, #612]	; (80012d0 <main+0x594>)
 800106a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800106c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001070:	4998      	ldr	r1, [pc, #608]	; (80012d4 <main+0x598>)
 8001072:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001074:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				player_missile_prev_ypos[missile_index] = player_missile_ypos[missile_index];
 8001078:	4a97      	ldr	r2, [pc, #604]	; (80012d8 <main+0x59c>)
 800107a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800107c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001080:	4996      	ldr	r1, [pc, #600]	; (80012dc <main+0x5a0>)
 8001082:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001084:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		  for (int missile_index = 0; missile_index < 3; ++missile_index) {
 8001088:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800108a:	3301      	adds	r3, #1
 800108c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800108e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001090:	2b02      	cmp	r3, #2
 8001092:	dde3      	ble.n	800105c <main+0x320>
			}
		  }

		  // Save enemy missiles previous position
		  for (int missile_index = 0; missile_index < 6; ++missile_index) {
 8001094:	2300      	movs	r3, #0
 8001096:	63bb      	str	r3, [r7, #56]	; 0x38
 8001098:	e018      	b.n	80010cc <main+0x390>
			if (invader1_missile_status[missile_index] == 1) {
 800109a:	4a91      	ldr	r2, [pc, #580]	; (80012e0 <main+0x5a4>)
 800109c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800109e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d10f      	bne.n	80010c6 <main+0x38a>
				invader1_missile_prev_xpos[missile_index] = invader1_missile_xpos[missile_index];
 80010a6:	4a8f      	ldr	r2, [pc, #572]	; (80012e4 <main+0x5a8>)
 80010a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010aa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80010ae:	498e      	ldr	r1, [pc, #568]	; (80012e8 <main+0x5ac>)
 80010b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				invader1_missile_prev_ypos[missile_index] = invader1_missile_ypos[missile_index];
 80010b6:	4a8d      	ldr	r2, [pc, #564]	; (80012ec <main+0x5b0>)
 80010b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010ba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80010be:	498c      	ldr	r1, [pc, #560]	; (80012f0 <main+0x5b4>)
 80010c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		  for (int missile_index = 0; missile_index < 6; ++missile_index) {
 80010c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010c8:	3301      	adds	r3, #1
 80010ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80010cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010ce:	2b05      	cmp	r3, #5
 80010d0:	dde3      	ble.n	800109a <main+0x35e>
			}
		}

		  refresh = 0;
 80010d2:	4b88      	ldr	r3, [pc, #544]	; (80012f4 <main+0x5b8>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	701a      	strb	r2, [r3, #0]
		}



		// Move player ship, player missiles and enemy missiles
		if (HAL_GetTick() - ctr_lastcheck >= 1) {
 80010d8:	f000 fc26 	bl	8001928 <HAL_GetTick>
 80010dc:	4602      	mov	r2, r0
 80010de:	4b86      	ldr	r3, [pc, #536]	; (80012f8 <main+0x5bc>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	429a      	cmp	r2, r3
 80010e4:	d05e      	beq.n	80011a4 <main+0x468>
			if ((ship_x < 308) && HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_9)) { // Right
 80010e6:	4b85      	ldr	r3, [pc, #532]	; (80012fc <main+0x5c0>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 80010ee:	da0d      	bge.n	800110c <main+0x3d0>
 80010f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010f4:	4882      	ldr	r0, [pc, #520]	; (8001300 <main+0x5c4>)
 80010f6:	f000 feb7 	bl	8001e68 <HAL_GPIO_ReadPin>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d005      	beq.n	800110c <main+0x3d0>
				ship_x++;
 8001100:	4b7e      	ldr	r3, [pc, #504]	; (80012fc <main+0x5c0>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	3301      	adds	r3, #1
 8001106:	4a7d      	ldr	r2, [pc, #500]	; (80012fc <main+0x5c0>)
 8001108:	6013      	str	r3, [r2, #0]
 800110a:	e010      	b.n	800112e <main+0x3f2>
			}
			else if ((ship_x > 0) && HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_10)) { // Left
 800110c:	4b7b      	ldr	r3, [pc, #492]	; (80012fc <main+0x5c0>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2b00      	cmp	r3, #0
 8001112:	dd0c      	ble.n	800112e <main+0x3f2>
 8001114:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001118:	4879      	ldr	r0, [pc, #484]	; (8001300 <main+0x5c4>)
 800111a:	f000 fea5 	bl	8001e68 <HAL_GPIO_ReadPin>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d004      	beq.n	800112e <main+0x3f2>
				ship_x--;
 8001124:	4b75      	ldr	r3, [pc, #468]	; (80012fc <main+0x5c0>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	3b01      	subs	r3, #1
 800112a:	4a74      	ldr	r2, [pc, #464]	; (80012fc <main+0x5c0>)
 800112c:	6013      	str	r3, [r2, #0]
			}

			// Move the fired player missiles
			for (int missile_index = 0; missile_index < 3; ++missile_index) {
 800112e:	2300      	movs	r3, #0
 8001130:	637b      	str	r3, [r7, #52]	; 0x34
 8001132:	e014      	b.n	800115e <main+0x422>
				if (player_missile_status[missile_index] == 1) {
 8001134:	4a65      	ldr	r2, [pc, #404]	; (80012cc <main+0x590>)
 8001136:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001138:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800113c:	2b01      	cmp	r3, #1
 800113e:	d10b      	bne.n	8001158 <main+0x41c>
					player_missile_ypos[missile_index]--;
 8001140:	4a65      	ldr	r2, [pc, #404]	; (80012d8 <main+0x59c>)
 8001142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001144:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001148:	1e5a      	subs	r2, r3, #1
 800114a:	4963      	ldr	r1, [pc, #396]	; (80012d8 <main+0x59c>)
 800114c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800114e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					updatePlayerMissileStatus(missile_index);
 8001152:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001154:	f7ff fc8c 	bl	8000a70 <updatePlayerMissileStatus>
			for (int missile_index = 0; missile_index < 3; ++missile_index) {
 8001158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800115a:	3301      	adds	r3, #1
 800115c:	637b      	str	r3, [r7, #52]	; 0x34
 800115e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001160:	2b02      	cmp	r3, #2
 8001162:	dde7      	ble.n	8001134 <main+0x3f8>
				}
			}

			// Move fired enemy missiles
			for (int missile_index = 0; missile_index < 6; ++missile_index) {
 8001164:	2300      	movs	r3, #0
 8001166:	633b      	str	r3, [r7, #48]	; 0x30
 8001168:	e014      	b.n	8001194 <main+0x458>
				if (invader1_missile_status[missile_index] == 1) {
 800116a:	4a5d      	ldr	r2, [pc, #372]	; (80012e0 <main+0x5a4>)
 800116c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800116e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001172:	2b01      	cmp	r3, #1
 8001174:	d10b      	bne.n	800118e <main+0x452>
					invader1_missile_ypos[missile_index]++;
 8001176:	4a5d      	ldr	r2, [pc, #372]	; (80012ec <main+0x5b0>)
 8001178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800117a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800117e:	1c5a      	adds	r2, r3, #1
 8001180:	495a      	ldr	r1, [pc, #360]	; (80012ec <main+0x5b0>)
 8001182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001184:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					updateEnemyMissileStatus(missile_index);
 8001188:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800118a:	f7ff fd87 	bl	8000c9c <updateEnemyMissileStatus>
			for (int missile_index = 0; missile_index < 6; ++missile_index) {
 800118e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001190:	3301      	adds	r3, #1
 8001192:	633b      	str	r3, [r7, #48]	; 0x30
 8001194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001196:	2b05      	cmp	r3, #5
 8001198:	dde7      	ble.n	800116a <main+0x42e>
				}
			}

			ctr_lastcheck = HAL_GetTick();
 800119a:	f000 fbc5 	bl	8001928 <HAL_GetTick>
 800119e:	4602      	mov	r2, r0
 80011a0:	4b55      	ldr	r3, [pc, #340]	; (80012f8 <main+0x5bc>)
 80011a2:	601a      	str	r2, [r3, #0]
		}

		// Move Invader 1
		if (HAL_GetTick() - ctr_invader1_lastcheck >= 6) {
 80011a4:	f000 fbc0 	bl	8001928 <HAL_GetTick>
 80011a8:	4602      	mov	r2, r0
 80011aa:	4b56      	ldr	r3, [pc, #344]	; (8001304 <main+0x5c8>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	2b05      	cmp	r3, #5
 80011b2:	f240 80d5 	bls.w	8001360 <main+0x624>

			if (row_to_move < 0) {
 80011b6:	4b54      	ldr	r3, [pc, #336]	; (8001308 <main+0x5cc>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	da02      	bge.n	80011c4 <main+0x488>
				row_to_move = 3;
 80011be:	4b52      	ldr	r3, [pc, #328]	; (8001308 <main+0x5cc>)
 80011c0:	2203      	movs	r2, #3
 80011c2:	601a      	str	r2, [r3, #0]
			}
			for (int col = 0; col < 6; col++) {
 80011c4:	2300      	movs	r3, #0
 80011c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011c8:	e039      	b.n	800123e <main+0x502>
				if (inv1_direction == 1) {
 80011ca:	4b50      	ldr	r3, [pc, #320]	; (800130c <main+0x5d0>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d117      	bne.n	8001202 <main+0x4c6>
					invader1_xpos[row_to_move][col] += 2;
 80011d2:	4b4d      	ldr	r3, [pc, #308]	; (8001308 <main+0x5cc>)
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	494e      	ldr	r1, [pc, #312]	; (8001310 <main+0x5d4>)
 80011d8:	4613      	mov	r3, r2
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	4413      	add	r3, r2
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80011e2:	4413      	add	r3, r2
 80011e4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80011e8:	4a47      	ldr	r2, [pc, #284]	; (8001308 <main+0x5cc>)
 80011ea:	6812      	ldr	r2, [r2, #0]
 80011ec:	1c99      	adds	r1, r3, #2
 80011ee:	4848      	ldr	r0, [pc, #288]	; (8001310 <main+0x5d4>)
 80011f0:	4613      	mov	r3, r2
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	4413      	add	r3, r2
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80011fa:	4413      	add	r3, r2
 80011fc:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 8001200:	e01a      	b.n	8001238 <main+0x4fc>
				}
				else if (inv1_direction == 0) {
 8001202:	4b42      	ldr	r3, [pc, #264]	; (800130c <main+0x5d0>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d116      	bne.n	8001238 <main+0x4fc>
					invader1_xpos[row_to_move][col] -= 2;
 800120a:	4b3f      	ldr	r3, [pc, #252]	; (8001308 <main+0x5cc>)
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	4940      	ldr	r1, [pc, #256]	; (8001310 <main+0x5d4>)
 8001210:	4613      	mov	r3, r2
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	4413      	add	r3, r2
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800121a:	4413      	add	r3, r2
 800121c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001220:	4a39      	ldr	r2, [pc, #228]	; (8001308 <main+0x5cc>)
 8001222:	6812      	ldr	r2, [r2, #0]
 8001224:	1e99      	subs	r1, r3, #2
 8001226:	483a      	ldr	r0, [pc, #232]	; (8001310 <main+0x5d4>)
 8001228:	4613      	mov	r3, r2
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	4413      	add	r3, r2
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001232:	4413      	add	r3, r2
 8001234:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
			for (int col = 0; col < 6; col++) {
 8001238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800123a:	3301      	adds	r3, #1
 800123c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800123e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001240:	2b05      	cmp	r3, #5
 8001242:	ddc2      	ble.n	80011ca <main+0x48e>
				}
			}
			row_to_move--;
 8001244:	4b30      	ldr	r3, [pc, #192]	; (8001308 <main+0x5cc>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	3b01      	subs	r3, #1
 800124a:	4a2f      	ldr	r2, [pc, #188]	; (8001308 <main+0x5cc>)
 800124c:	6013      	str	r3, [r2, #0]


			ctr_invader1_lastcheck = HAL_GetTick();
 800124e:	f000 fb6b 	bl	8001928 <HAL_GetTick>
 8001252:	4602      	mov	r2, r0
 8001254:	4b2b      	ldr	r3, [pc, #172]	; (8001304 <main+0x5c8>)
 8001256:	601a      	str	r2, [r3, #0]


			if (invader1_xpos[0][5] > 305) { // move down at right side
 8001258:	4b2d      	ldr	r3, [pc, #180]	; (8001310 <main+0x5d4>)
 800125a:	695b      	ldr	r3, [r3, #20]
 800125c:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8001260:	db2a      	blt.n	80012b8 <main+0x57c>
				for (int row = 0; row < 4; row++) {
 8001262:	2300      	movs	r3, #0
 8001264:	62bb      	str	r3, [r7, #40]	; 0x28
 8001266:	e020      	b.n	80012aa <main+0x56e>
					for (int col = 0; col < 6; col++) {
 8001268:	2300      	movs	r3, #0
 800126a:	627b      	str	r3, [r7, #36]	; 0x24
 800126c:	e017      	b.n	800129e <main+0x562>
						invader1_ypos[row][col] += 2;
 800126e:	4929      	ldr	r1, [pc, #164]	; (8001314 <main+0x5d8>)
 8001270:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001272:	4613      	mov	r3, r2
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	4413      	add	r3, r2
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800127c:	4413      	add	r3, r2
 800127e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001282:	1c99      	adds	r1, r3, #2
 8001284:	4823      	ldr	r0, [pc, #140]	; (8001314 <main+0x5d8>)
 8001286:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001288:	4613      	mov	r3, r2
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	4413      	add	r3, r2
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001292:	4413      	add	r3, r2
 8001294:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
					for (int col = 0; col < 6; col++) {
 8001298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129a:	3301      	adds	r3, #1
 800129c:	627b      	str	r3, [r7, #36]	; 0x24
 800129e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a0:	2b05      	cmp	r3, #5
 80012a2:	dde4      	ble.n	800126e <main+0x532>
				for (int row = 0; row < 4; row++) {
 80012a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012a6:	3301      	adds	r3, #1
 80012a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80012aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012ac:	2b03      	cmp	r3, #3
 80012ae:	dddb      	ble.n	8001268 <main+0x52c>
					}
				}
				inv1_direction = 0;
 80012b0:	4b16      	ldr	r3, [pc, #88]	; (800130c <main+0x5d0>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	e053      	b.n	8001360 <main+0x624>
			}
			else if (invader1_xpos[0][0] < 3) { // down at left side
 80012b8:	4b15      	ldr	r3, [pc, #84]	; (8001310 <main+0x5d4>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2b02      	cmp	r3, #2
 80012be:	dc4f      	bgt.n	8001360 <main+0x624>
				for (int row = 0; row < 4; ++row) {
 80012c0:	2300      	movs	r3, #0
 80012c2:	623b      	str	r3, [r7, #32]
 80012c4:	e046      	b.n	8001354 <main+0x618>
					for (int col = 0; col < 6; ++col) {
 80012c6:	2300      	movs	r3, #0
 80012c8:	61fb      	str	r3, [r7, #28]
 80012ca:	e03d      	b.n	8001348 <main+0x60c>
 80012cc:	2000028c 	.word	0x2000028c
 80012d0:	20000518 	.word	0x20000518
 80012d4:	200004dc 	.word	0x200004dc
 80012d8:	200004d0 	.word	0x200004d0
 80012dc:	20000508 	.word	0x20000508
 80012e0:	2000047c 	.word	0x2000047c
 80012e4:	20000524 	.word	0x20000524
 80012e8:	200004a0 	.word	0x200004a0
 80012ec:	200004f0 	.word	0x200004f0
 80012f0:	200004b8 	.word	0x200004b8
 80012f4:	20000280 	.word	0x20000280
 80012f8:	20000494 	.word	0x20000494
 80012fc:	200004e8 	.word	0x200004e8
 8001300:	40020c00 	.word	0x40020c00
 8001304:	20000498 	.word	0x20000498
 8001308:	200000c4 	.word	0x200000c4
 800130c:	200000c8 	.word	0x200000c8
 8001310:	20000298 	.word	0x20000298
 8001314:	200002f8 	.word	0x200002f8
						invader1_ypos[row][col] += 2;
 8001318:	4977      	ldr	r1, [pc, #476]	; (80014f8 <main+0x7bc>)
 800131a:	6a3a      	ldr	r2, [r7, #32]
 800131c:	4613      	mov	r3, r2
 800131e:	005b      	lsls	r3, r3, #1
 8001320:	4413      	add	r3, r2
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	69fa      	ldr	r2, [r7, #28]
 8001326:	4413      	add	r3, r2
 8001328:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800132c:	1c99      	adds	r1, r3, #2
 800132e:	4872      	ldr	r0, [pc, #456]	; (80014f8 <main+0x7bc>)
 8001330:	6a3a      	ldr	r2, [r7, #32]
 8001332:	4613      	mov	r3, r2
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	4413      	add	r3, r2
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	69fa      	ldr	r2, [r7, #28]
 800133c:	4413      	add	r3, r2
 800133e:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
					for (int col = 0; col < 6; ++col) {
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	3301      	adds	r3, #1
 8001346:	61fb      	str	r3, [r7, #28]
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	2b05      	cmp	r3, #5
 800134c:	dde4      	ble.n	8001318 <main+0x5dc>
				for (int row = 0; row < 4; ++row) {
 800134e:	6a3b      	ldr	r3, [r7, #32]
 8001350:	3301      	adds	r3, #1
 8001352:	623b      	str	r3, [r7, #32]
 8001354:	6a3b      	ldr	r3, [r7, #32]
 8001356:	2b03      	cmp	r3, #3
 8001358:	ddb5      	ble.n	80012c6 <main+0x58a>
					}
				}
				inv1_direction = 1;
 800135a:	4b68      	ldr	r3, [pc, #416]	; (80014fc <main+0x7c0>)
 800135c:	2201      	movs	r2, #1
 800135e:	601a      	str	r2, [r3, #0]
			}
		}


		// Player ship fired missile
		if (player_fire == 1) {
 8001360:	4b67      	ldr	r3, [pc, #412]	; (8001500 <main+0x7c4>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	b2db      	uxtb	r3, r3
 8001366:	2b01      	cmp	r3, #1
 8001368:	d125      	bne.n	80013b6 <main+0x67a>
			// loop to find available missile
			for (int missile_index = 0; missile_index < 3; ++missile_index) {
 800136a:	2300      	movs	r3, #0
 800136c:	61bb      	str	r3, [r7, #24]
 800136e:	e01c      	b.n	80013aa <main+0x66e>
				if (player_missile_status[missile_index] == 0) {
 8001370:	4a64      	ldr	r2, [pc, #400]	; (8001504 <main+0x7c8>)
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d113      	bne.n	80013a4 <main+0x668>

					player_missile_status[missile_index] = 1;
 800137c:	4a61      	ldr	r2, [pc, #388]	; (8001504 <main+0x7c8>)
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	2101      	movs	r1, #1
 8001382:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					player_missile_xpos[missile_index] = ship_x + 5;
 8001386:	4b60      	ldr	r3, [pc, #384]	; (8001508 <main+0x7cc>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	1d5a      	adds	r2, r3, #5
 800138c:	495f      	ldr	r1, [pc, #380]	; (800150c <main+0x7d0>)
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					player_missile_ypos[missile_index] = ship_y - 4;
 8001394:	4b5e      	ldr	r3, [pc, #376]	; (8001510 <main+0x7d4>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	1f1a      	subs	r2, r3, #4
 800139a:	495e      	ldr	r1, [pc, #376]	; (8001514 <main+0x7d8>)
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					break;
 80013a2:	e005      	b.n	80013b0 <main+0x674>
			for (int missile_index = 0; missile_index < 3; ++missile_index) {
 80013a4:	69bb      	ldr	r3, [r7, #24]
 80013a6:	3301      	adds	r3, #1
 80013a8:	61bb      	str	r3, [r7, #24]
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	dddf      	ble.n	8001370 <main+0x634>
				}
			}
			player_fire = 0;
 80013b0:	4b53      	ldr	r3, [pc, #332]	; (8001500 <main+0x7c4>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	701a      	strb	r2, [r3, #0]
		}

		// Fire invader 1 missile
		if (HAL_GetTick() - ctr_invader1_fire >= 2) {
 80013b6:	f000 fab7 	bl	8001928 <HAL_GetTick>
 80013ba:	4602      	mov	r2, r0
 80013bc:	4b56      	ldr	r3, [pc, #344]	; (8001518 <main+0x7dc>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d964      	bls.n	8001490 <main+0x754>
			for (int missile_index = 0; missile_index < 6; ++missile_index) {
 80013c6:	2300      	movs	r3, #0
 80013c8:	60fb      	str	r3, [r7, #12]
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	2b05      	cmp	r3, #5
 80013ce:	dc5a      	bgt.n	8001486 <main+0x74a>

				if (invader1_missile_status[missile_index] == 0) {
 80013d0:	4a52      	ldr	r2, [pc, #328]	; (800151c <main+0x7e0>)
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d153      	bne.n	8001484 <main+0x748>
					if (invader1_fire_index > 95) {
 80013dc:	4b50      	ldr	r3, [pc, #320]	; (8001520 <main+0x7e4>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2b5f      	cmp	r3, #95	; 0x5f
 80013e2:	dd02      	ble.n	80013ea <main+0x6ae>
						invader1_fire_index = 0;
 80013e4:	4b4e      	ldr	r3, [pc, #312]	; (8001520 <main+0x7e4>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
					}
					int row = invader1_fire_sequence[invader1_fire_index] / 6;
 80013ea:	4b4d      	ldr	r3, [pc, #308]	; (8001520 <main+0x7e4>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a4d      	ldr	r2, [pc, #308]	; (8001524 <main+0x7e8>)
 80013f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013f4:	4a4c      	ldr	r2, [pc, #304]	; (8001528 <main+0x7ec>)
 80013f6:	fb82 1203 	smull	r1, r2, r2, r3
 80013fa:	17db      	asrs	r3, r3, #31
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	60bb      	str	r3, [r7, #8]
					int col = invader1_fire_sequence[invader1_fire_index] % 6;
 8001400:	4b47      	ldr	r3, [pc, #284]	; (8001520 <main+0x7e4>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a47      	ldr	r2, [pc, #284]	; (8001524 <main+0x7e8>)
 8001406:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800140a:	4b47      	ldr	r3, [pc, #284]	; (8001528 <main+0x7ec>)
 800140c:	fb83 3102 	smull	r3, r1, r3, r2
 8001410:	17d3      	asrs	r3, r2, #31
 8001412:	1ac9      	subs	r1, r1, r3
 8001414:	460b      	mov	r3, r1
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	440b      	add	r3, r1
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	607b      	str	r3, [r7, #4]
					invader1_fire_index++;
 8001420:	4b3f      	ldr	r3, [pc, #252]	; (8001520 <main+0x7e4>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	3301      	adds	r3, #1
 8001426:	4a3e      	ldr	r2, [pc, #248]	; (8001520 <main+0x7e4>)
 8001428:	6013      	str	r3, [r2, #0]
					if (invader1_status[row][col] == 1) {
 800142a:	4940      	ldr	r1, [pc, #256]	; (800152c <main+0x7f0>)
 800142c:	68ba      	ldr	r2, [r7, #8]
 800142e:	4613      	mov	r3, r2
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	4413      	add	r3, r2
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	687a      	ldr	r2, [r7, #4]
 8001438:	4413      	add	r3, r2
 800143a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800143e:	2b01      	cmp	r3, #1
 8001440:	d120      	bne.n	8001484 <main+0x748>
						invader1_missile_status[missile_index] = 1;
 8001442:	4a36      	ldr	r2, [pc, #216]	; (800151c <main+0x7e0>)
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	2101      	movs	r1, #1
 8001448:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						invader1_missile_xpos[missile_index] = invader1_xpos[row][col];
 800144c:	4938      	ldr	r1, [pc, #224]	; (8001530 <main+0x7f4>)
 800144e:	68ba      	ldr	r2, [r7, #8]
 8001450:	4613      	mov	r3, r2
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	4413      	add	r3, r2
 8001456:	005b      	lsls	r3, r3, #1
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	4413      	add	r3, r2
 800145c:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8001460:	4934      	ldr	r1, [pc, #208]	; (8001534 <main+0x7f8>)
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						invader1_missile_ypos[missile_index] = invader1_ypos[row][col];
 8001468:	4923      	ldr	r1, [pc, #140]	; (80014f8 <main+0x7bc>)
 800146a:	68ba      	ldr	r2, [r7, #8]
 800146c:	4613      	mov	r3, r2
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	4413      	add	r3, r2
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	687a      	ldr	r2, [r7, #4]
 8001476:	4413      	add	r3, r2
 8001478:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 800147c:	492e      	ldr	r1, [pc, #184]	; (8001538 <main+0x7fc>)
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					}
				}
				break;
 8001484:	bf00      	nop
			}

			ctr_invader1_fire = HAL_GetTick();
 8001486:	f000 fa4f 	bl	8001928 <HAL_GetTick>
 800148a:	4602      	mov	r2, r0
 800148c:	4b22      	ldr	r3, [pc, #136]	; (8001518 <main+0x7dc>)
 800148e:	601a      	str	r2, [r3, #0]
		}

		// Check if all Invader1 are dead
		all_invader1_alive = 0;
 8001490:	4b2a      	ldr	r3, [pc, #168]	; (800153c <main+0x800>)
 8001492:	2200      	movs	r2, #0
 8001494:	601a      	str	r2, [r3, #0]
		for (int row = 0; row < 4; ++row) {
 8001496:	2300      	movs	r3, #0
 8001498:	617b      	str	r3, [r7, #20]
 800149a:	e01e      	b.n	80014da <main+0x79e>
			for (int col = 0; col < 6; ++col) {
 800149c:	2300      	movs	r3, #0
 800149e:	613b      	str	r3, [r7, #16]
 80014a0:	e011      	b.n	80014c6 <main+0x78a>
				if (invader1_status[row][col] == 1) {
 80014a2:	4922      	ldr	r1, [pc, #136]	; (800152c <main+0x7f0>)
 80014a4:	697a      	ldr	r2, [r7, #20]
 80014a6:	4613      	mov	r3, r2
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	4413      	add	r3, r2
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	4413      	add	r3, r2
 80014b2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d102      	bne.n	80014c0 <main+0x784>
					all_invader1_alive = 1;
 80014ba:	4b20      	ldr	r3, [pc, #128]	; (800153c <main+0x800>)
 80014bc:	2201      	movs	r2, #1
 80014be:	601a      	str	r2, [r3, #0]
			for (int col = 0; col < 6; ++col) {
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	3301      	adds	r3, #1
 80014c4:	613b      	str	r3, [r7, #16]
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	2b05      	cmp	r3, #5
 80014ca:	ddea      	ble.n	80014a2 <main+0x766>
				}
			}
			if (all_invader1_alive) {
 80014cc:	4b1b      	ldr	r3, [pc, #108]	; (800153c <main+0x800>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d106      	bne.n	80014e2 <main+0x7a6>
		for (int row = 0; row < 4; ++row) {
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	3301      	adds	r3, #1
 80014d8:	617b      	str	r3, [r7, #20]
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	2b03      	cmp	r3, #3
 80014de:	dddd      	ble.n	800149c <main+0x760>
 80014e0:	e000      	b.n	80014e4 <main+0x7a8>
				break;
 80014e2:	bf00      	nop
			}
		}
		if (all_invader1_alive == 0) {
 80014e4:	4b15      	ldr	r3, [pc, #84]	; (800153c <main+0x800>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	f47f acaa 	bne.w	8000e42 <main+0x106>
			gameStatus = RESET_LEVEL1;
 80014ee:	4b14      	ldr	r3, [pc, #80]	; (8001540 <main+0x804>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	701a      	strb	r2, [r3, #0]
	  if (gameStatus == RESET_LEVEL1) {
 80014f4:	e4a5      	b.n	8000e42 <main+0x106>
 80014f6:	bf00      	nop
 80014f8:	200002f8 	.word	0x200002f8
 80014fc:	200000c8 	.word	0x200000c8
 8001500:	20000281 	.word	0x20000281
 8001504:	2000028c 	.word	0x2000028c
 8001508:	200004e8 	.word	0x200004e8
 800150c:	20000518 	.word	0x20000518
 8001510:	20000284 	.word	0x20000284
 8001514:	200004d0 	.word	0x200004d0
 8001518:	2000049c 	.word	0x2000049c
 800151c:	2000047c 	.word	0x2000047c
 8001520:	20000478 	.word	0x20000478
 8001524:	200000d0 	.word	0x200000d0
 8001528:	2aaaaaab 	.word	0x2aaaaaab
 800152c:	20000418 	.word	0x20000418
 8001530:	20000298 	.word	0x20000298
 8001534:	20000524 	.word	0x20000524
 8001538:	200004f0 	.word	0x200004f0
 800153c:	200000cc 	.word	0x200000cc
 8001540:	20000514 	.word	0x20000514

08001544 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b094      	sub	sp, #80	; 0x50
 8001548:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800154a:	f107 0320 	add.w	r3, r7, #32
 800154e:	2230      	movs	r2, #48	; 0x30
 8001550:	2100      	movs	r1, #0
 8001552:	4618      	mov	r0, r3
 8001554:	f001 f8f0 	bl	8002738 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001558:	f107 030c 	add.w	r3, r7, #12
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	609a      	str	r2, [r3, #8]
 8001564:	60da      	str	r2, [r3, #12]
 8001566:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001568:	2300      	movs	r3, #0
 800156a:	60bb      	str	r3, [r7, #8]
 800156c:	4b22      	ldr	r3, [pc, #136]	; (80015f8 <SystemClock_Config+0xb4>)
 800156e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001570:	4a21      	ldr	r2, [pc, #132]	; (80015f8 <SystemClock_Config+0xb4>)
 8001572:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001576:	6413      	str	r3, [r2, #64]	; 0x40
 8001578:	4b1f      	ldr	r3, [pc, #124]	; (80015f8 <SystemClock_Config+0xb4>)
 800157a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001580:	60bb      	str	r3, [r7, #8]
 8001582:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001584:	2300      	movs	r3, #0
 8001586:	607b      	str	r3, [r7, #4]
 8001588:	4b1c      	ldr	r3, [pc, #112]	; (80015fc <SystemClock_Config+0xb8>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a1b      	ldr	r2, [pc, #108]	; (80015fc <SystemClock_Config+0xb8>)
 800158e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001592:	6013      	str	r3, [r2, #0]
 8001594:	4b19      	ldr	r3, [pc, #100]	; (80015fc <SystemClock_Config+0xb8>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800159c:	607b      	str	r3, [r7, #4]
 800159e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015a0:	2302      	movs	r3, #2
 80015a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015a4:	2301      	movs	r3, #1
 80015a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015a8:	2310      	movs	r3, #16
 80015aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80015ac:	2300      	movs	r3, #0
 80015ae:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015b0:	f107 0320 	add.w	r3, r7, #32
 80015b4:	4618      	mov	r0, r3
 80015b6:	f000 fc93 	bl	8001ee0 <HAL_RCC_OscConfig>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80015c0:	f000 f896 	bl	80016f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015c4:	230f      	movs	r3, #15
 80015c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80015c8:	2300      	movs	r3, #0
 80015ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015cc:	2300      	movs	r3, #0
 80015ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015d0:	2300      	movs	r3, #0
 80015d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015d4:	2300      	movs	r3, #0
 80015d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80015d8:	f107 030c 	add.w	r3, r7, #12
 80015dc:	2100      	movs	r1, #0
 80015de:	4618      	mov	r0, r3
 80015e0:	f000 feee 	bl	80023c0 <HAL_RCC_ClockConfig>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80015ea:	f000 f881 	bl	80016f0 <Error_Handler>
  }
}
 80015ee:	bf00      	nop
 80015f0:	3750      	adds	r7, #80	; 0x50
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40023800 	.word	0x40023800
 80015fc:	40007000 	.word	0x40007000

08001600 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b088      	sub	sp, #32
 8001604:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001606:	f107 030c 	add.w	r3, r7, #12
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	605a      	str	r2, [r3, #4]
 8001610:	609a      	str	r2, [r3, #8]
 8001612:	60da      	str	r2, [r3, #12]
 8001614:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	60bb      	str	r3, [r7, #8]
 800161a:	4b30      	ldr	r3, [pc, #192]	; (80016dc <MX_GPIO_Init+0xdc>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	4a2f      	ldr	r2, [pc, #188]	; (80016dc <MX_GPIO_Init+0xdc>)
 8001620:	f043 0301 	orr.w	r3, r3, #1
 8001624:	6313      	str	r3, [r2, #48]	; 0x30
 8001626:	4b2d      	ldr	r3, [pc, #180]	; (80016dc <MX_GPIO_Init+0xdc>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	60bb      	str	r3, [r7, #8]
 8001630:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	607b      	str	r3, [r7, #4]
 8001636:	4b29      	ldr	r3, [pc, #164]	; (80016dc <MX_GPIO_Init+0xdc>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	4a28      	ldr	r2, [pc, #160]	; (80016dc <MX_GPIO_Init+0xdc>)
 800163c:	f043 0308 	orr.w	r3, r3, #8
 8001640:	6313      	str	r3, [r2, #48]	; 0x30
 8001642:	4b26      	ldr	r3, [pc, #152]	; (80016dc <MX_GPIO_Init+0xdc>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	f003 0308 	and.w	r3, r3, #8
 800164a:	607b      	str	r3, [r7, #4]
 800164c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	603b      	str	r3, [r7, #0]
 8001652:	4b22      	ldr	r3, [pc, #136]	; (80016dc <MX_GPIO_Init+0xdc>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	4a21      	ldr	r2, [pc, #132]	; (80016dc <MX_GPIO_Init+0xdc>)
 8001658:	f043 0302 	orr.w	r3, r3, #2
 800165c:	6313      	str	r3, [r2, #48]	; 0x30
 800165e:	4b1f      	ldr	r3, [pc, #124]	; (80016dc <MX_GPIO_Init+0xdc>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	603b      	str	r3, [r7, #0]
 8001668:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800166a:	2301      	movs	r3, #1
 800166c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800166e:	4b1c      	ldr	r3, [pc, #112]	; (80016e0 <MX_GPIO_Init+0xe0>)
 8001670:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001672:	2300      	movs	r3, #0
 8001674:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001676:	f107 030c 	add.w	r3, r7, #12
 800167a:	4619      	mov	r1, r3
 800167c:	4819      	ldr	r0, [pc, #100]	; (80016e4 <MX_GPIO_Init+0xe4>)
 800167e:	f000 fa71 	bl	8001b64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001682:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001686:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001688:	2300      	movs	r3, #0
 800168a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168c:	2300      	movs	r3, #0
 800168e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001690:	f107 030c 	add.w	r3, r7, #12
 8001694:	4619      	mov	r1, r3
 8001696:	4814      	ldr	r0, [pc, #80]	; (80016e8 <MX_GPIO_Init+0xe8>)
 8001698:	f000 fa64 	bl	8001b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800169c:	2310      	movs	r3, #16
 800169e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016a0:	4b0f      	ldr	r3, [pc, #60]	; (80016e0 <MX_GPIO_Init+0xe0>)
 80016a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a4:	2300      	movs	r3, #0
 80016a6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016a8:	f107 030c 	add.w	r3, r7, #12
 80016ac:	4619      	mov	r1, r3
 80016ae:	480f      	ldr	r0, [pc, #60]	; (80016ec <MX_GPIO_Init+0xec>)
 80016b0:	f000 fa58 	bl	8001b64 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80016b4:	2200      	movs	r2, #0
 80016b6:	2100      	movs	r1, #0
 80016b8:	2006      	movs	r0, #6
 80016ba:	f000 fa1c 	bl	8001af6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80016be:	2006      	movs	r0, #6
 80016c0:	f000 fa35 	bl	8001b2e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80016c4:	2200      	movs	r2, #0
 80016c6:	2100      	movs	r1, #0
 80016c8:	200a      	movs	r0, #10
 80016ca:	f000 fa14 	bl	8001af6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80016ce:	200a      	movs	r0, #10
 80016d0:	f000 fa2d 	bl	8001b2e <HAL_NVIC_EnableIRQ>

}
 80016d4:	bf00      	nop
 80016d6:	3720      	adds	r7, #32
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	40023800 	.word	0x40023800
 80016e0:	10110000 	.word	0x10110000
 80016e4:	40020000 	.word	0x40020000
 80016e8:	40020c00 	.word	0x40020c00
 80016ec:	40020400 	.word	0x40020400

080016f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80016f4:	bf00      	nop
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
	...

08001700 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	607b      	str	r3, [r7, #4]
 800170a:	4b10      	ldr	r3, [pc, #64]	; (800174c <HAL_MspInit+0x4c>)
 800170c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170e:	4a0f      	ldr	r2, [pc, #60]	; (800174c <HAL_MspInit+0x4c>)
 8001710:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001714:	6453      	str	r3, [r2, #68]	; 0x44
 8001716:	4b0d      	ldr	r3, [pc, #52]	; (800174c <HAL_MspInit+0x4c>)
 8001718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800171e:	607b      	str	r3, [r7, #4]
 8001720:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	603b      	str	r3, [r7, #0]
 8001726:	4b09      	ldr	r3, [pc, #36]	; (800174c <HAL_MspInit+0x4c>)
 8001728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172a:	4a08      	ldr	r2, [pc, #32]	; (800174c <HAL_MspInit+0x4c>)
 800172c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001730:	6413      	str	r3, [r2, #64]	; 0x40
 8001732:	4b06      	ldr	r3, [pc, #24]	; (800174c <HAL_MspInit+0x4c>)
 8001734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800173a:	603b      	str	r3, [r7, #0]
 800173c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800173e:	bf00      	nop
 8001740:	370c      	adds	r7, #12
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	40023800 	.word	0x40023800

08001750 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001754:	bf00      	nop
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr

0800175e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800175e:	b480      	push	{r7}
 8001760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001762:	e7fe      	b.n	8001762 <HardFault_Handler+0x4>

08001764 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001768:	e7fe      	b.n	8001768 <MemManage_Handler+0x4>

0800176a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800176a:	b480      	push	{r7}
 800176c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800176e:	e7fe      	b.n	800176e <BusFault_Handler+0x4>

08001770 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001774:	e7fe      	b.n	8001774 <UsageFault_Handler+0x4>

08001776 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001776:	b480      	push	{r7}
 8001778:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800177a:	bf00      	nop
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001788:	bf00      	nop
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001792:	b480      	push	{r7}
 8001794:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001796:	bf00      	nop
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017a4:	f000 f8ac 	bl	8001900 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017a8:	bf00      	nop
 80017aa:	bd80      	pop	{r7, pc}

080017ac <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	player_fire = 1;
 80017b0:	4b03      	ldr	r3, [pc, #12]	; (80017c0 <EXTI0_IRQHandler+0x14>)
 80017b2:	2201      	movs	r2, #1
 80017b4:	701a      	strb	r2, [r3, #0]

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80017b6:	2001      	movs	r0, #1
 80017b8:	f000 fb6e 	bl	8001e98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80017bc:	bf00      	nop
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	20000281 	.word	0x20000281

080017c4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	refresh = 1;
 80017c8:	4b03      	ldr	r3, [pc, #12]	; (80017d8 <EXTI4_IRQHandler+0x14>)
 80017ca:	2201      	movs	r2, #1
 80017cc:	701a      	strb	r2, [r3, #0]

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80017ce:	2010      	movs	r0, #16
 80017d0:	f000 fb62 	bl	8001e98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80017d4:	bf00      	nop
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	20000280 	.word	0x20000280

080017dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017e0:	4b08      	ldr	r3, [pc, #32]	; (8001804 <SystemInit+0x28>)
 80017e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017e6:	4a07      	ldr	r2, [pc, #28]	; (8001804 <SystemInit+0x28>)
 80017e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80017f0:	4b04      	ldr	r3, [pc, #16]	; (8001804 <SystemInit+0x28>)
 80017f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017f6:	609a      	str	r2, [r3, #8]
#endif
}
 80017f8:	bf00      	nop
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	e000ed00 	.word	0xe000ed00

08001808 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001808:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001840 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800180c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800180e:	e003      	b.n	8001818 <LoopCopyDataInit>

08001810 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001810:	4b0c      	ldr	r3, [pc, #48]	; (8001844 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001812:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001814:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001816:	3104      	adds	r1, #4

08001818 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001818:	480b      	ldr	r0, [pc, #44]	; (8001848 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800181a:	4b0c      	ldr	r3, [pc, #48]	; (800184c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800181c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800181e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001820:	d3f6      	bcc.n	8001810 <CopyDataInit>
  ldr  r2, =_sbss
 8001822:	4a0b      	ldr	r2, [pc, #44]	; (8001850 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001824:	e002      	b.n	800182c <LoopFillZerobss>

08001826 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001826:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001828:	f842 3b04 	str.w	r3, [r2], #4

0800182c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800182c:	4b09      	ldr	r3, [pc, #36]	; (8001854 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800182e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001830:	d3f9      	bcc.n	8001826 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001832:	f7ff ffd3 	bl	80017dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001836:	f000 ff5b 	bl	80026f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800183a:	f7ff fa7f 	bl	8000d3c <main>
  bx  lr    
 800183e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001840:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001844:	08004350 	.word	0x08004350
  ldr  r0, =_sdata
 8001848:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800184c:	2000025c 	.word	0x2000025c
  ldr  r2, =_sbss
 8001850:	2000025c 	.word	0x2000025c
  ldr  r3, = _ebss
 8001854:	20000540 	.word	0x20000540

08001858 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001858:	e7fe      	b.n	8001858 <ADC_IRQHandler>
	...

0800185c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001860:	4b0e      	ldr	r3, [pc, #56]	; (800189c <HAL_Init+0x40>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a0d      	ldr	r2, [pc, #52]	; (800189c <HAL_Init+0x40>)
 8001866:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800186a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800186c:	4b0b      	ldr	r3, [pc, #44]	; (800189c <HAL_Init+0x40>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a0a      	ldr	r2, [pc, #40]	; (800189c <HAL_Init+0x40>)
 8001872:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001876:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001878:	4b08      	ldr	r3, [pc, #32]	; (800189c <HAL_Init+0x40>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a07      	ldr	r2, [pc, #28]	; (800189c <HAL_Init+0x40>)
 800187e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001882:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001884:	2003      	movs	r0, #3
 8001886:	f000 f92b 	bl	8001ae0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800188a:	2000      	movs	r0, #0
 800188c:	f000 f808 	bl	80018a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001890:	f7ff ff36 	bl	8001700 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001894:	2300      	movs	r3, #0
}
 8001896:	4618      	mov	r0, r3
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	40023c00 	.word	0x40023c00

080018a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018a8:	4b12      	ldr	r3, [pc, #72]	; (80018f4 <HAL_InitTick+0x54>)
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	4b12      	ldr	r3, [pc, #72]	; (80018f8 <HAL_InitTick+0x58>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	4619      	mov	r1, r3
 80018b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80018ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80018be:	4618      	mov	r0, r3
 80018c0:	f000 f943 	bl	8001b4a <HAL_SYSTICK_Config>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e00e      	b.n	80018ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2b0f      	cmp	r3, #15
 80018d2:	d80a      	bhi.n	80018ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018d4:	2200      	movs	r2, #0
 80018d6:	6879      	ldr	r1, [r7, #4]
 80018d8:	f04f 30ff 	mov.w	r0, #4294967295
 80018dc:	f000 f90b 	bl	8001af6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018e0:	4a06      	ldr	r2, [pc, #24]	; (80018fc <HAL_InitTick+0x5c>)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018e6:	2300      	movs	r3, #0
 80018e8:	e000      	b.n	80018ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3708      	adds	r7, #8
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	20000250 	.word	0x20000250
 80018f8:	20000258 	.word	0x20000258
 80018fc:	20000254 	.word	0x20000254

08001900 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001904:	4b06      	ldr	r3, [pc, #24]	; (8001920 <HAL_IncTick+0x20>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	461a      	mov	r2, r3
 800190a:	4b06      	ldr	r3, [pc, #24]	; (8001924 <HAL_IncTick+0x24>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4413      	add	r3, r2
 8001910:	4a04      	ldr	r2, [pc, #16]	; (8001924 <HAL_IncTick+0x24>)
 8001912:	6013      	str	r3, [r2, #0]
}
 8001914:	bf00      	nop
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	20000258 	.word	0x20000258
 8001924:	2000053c 	.word	0x2000053c

08001928 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  return uwTick;
 800192c:	4b03      	ldr	r3, [pc, #12]	; (800193c <HAL_GetTick+0x14>)
 800192e:	681b      	ldr	r3, [r3, #0]
}
 8001930:	4618      	mov	r0, r3
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	2000053c 	.word	0x2000053c

08001940 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001940:	b480      	push	{r7}
 8001942:	b085      	sub	sp, #20
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f003 0307 	and.w	r3, r3, #7
 800194e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001950:	4b0c      	ldr	r3, [pc, #48]	; (8001984 <__NVIC_SetPriorityGrouping+0x44>)
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001956:	68ba      	ldr	r2, [r7, #8]
 8001958:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800195c:	4013      	ands	r3, r2
 800195e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001968:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800196c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001970:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001972:	4a04      	ldr	r2, [pc, #16]	; (8001984 <__NVIC_SetPriorityGrouping+0x44>)
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	60d3      	str	r3, [r2, #12]
}
 8001978:	bf00      	nop
 800197a:	3714      	adds	r7, #20
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr
 8001984:	e000ed00 	.word	0xe000ed00

08001988 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800198c:	4b04      	ldr	r3, [pc, #16]	; (80019a0 <__NVIC_GetPriorityGrouping+0x18>)
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	0a1b      	lsrs	r3, r3, #8
 8001992:	f003 0307 	and.w	r3, r3, #7
}
 8001996:	4618      	mov	r0, r3
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	e000ed00 	.word	0xe000ed00

080019a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	4603      	mov	r3, r0
 80019ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	db0b      	blt.n	80019ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019b6:	79fb      	ldrb	r3, [r7, #7]
 80019b8:	f003 021f 	and.w	r2, r3, #31
 80019bc:	4907      	ldr	r1, [pc, #28]	; (80019dc <__NVIC_EnableIRQ+0x38>)
 80019be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c2:	095b      	lsrs	r3, r3, #5
 80019c4:	2001      	movs	r0, #1
 80019c6:	fa00 f202 	lsl.w	r2, r0, r2
 80019ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019ce:	bf00      	nop
 80019d0:	370c      	adds	r7, #12
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	e000e100 	.word	0xe000e100

080019e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	4603      	mov	r3, r0
 80019e8:	6039      	str	r1, [r7, #0]
 80019ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	db0a      	blt.n	8001a0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	b2da      	uxtb	r2, r3
 80019f8:	490c      	ldr	r1, [pc, #48]	; (8001a2c <__NVIC_SetPriority+0x4c>)
 80019fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fe:	0112      	lsls	r2, r2, #4
 8001a00:	b2d2      	uxtb	r2, r2
 8001a02:	440b      	add	r3, r1
 8001a04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a08:	e00a      	b.n	8001a20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	b2da      	uxtb	r2, r3
 8001a0e:	4908      	ldr	r1, [pc, #32]	; (8001a30 <__NVIC_SetPriority+0x50>)
 8001a10:	79fb      	ldrb	r3, [r7, #7]
 8001a12:	f003 030f 	and.w	r3, r3, #15
 8001a16:	3b04      	subs	r3, #4
 8001a18:	0112      	lsls	r2, r2, #4
 8001a1a:	b2d2      	uxtb	r2, r2
 8001a1c:	440b      	add	r3, r1
 8001a1e:	761a      	strb	r2, [r3, #24]
}
 8001a20:	bf00      	nop
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr
 8001a2c:	e000e100 	.word	0xe000e100
 8001a30:	e000ed00 	.word	0xe000ed00

08001a34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b089      	sub	sp, #36	; 0x24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	60f8      	str	r0, [r7, #12]
 8001a3c:	60b9      	str	r1, [r7, #8]
 8001a3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	f003 0307 	and.w	r3, r3, #7
 8001a46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	f1c3 0307 	rsb	r3, r3, #7
 8001a4e:	2b04      	cmp	r3, #4
 8001a50:	bf28      	it	cs
 8001a52:	2304      	movcs	r3, #4
 8001a54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	3304      	adds	r3, #4
 8001a5a:	2b06      	cmp	r3, #6
 8001a5c:	d902      	bls.n	8001a64 <NVIC_EncodePriority+0x30>
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	3b03      	subs	r3, #3
 8001a62:	e000      	b.n	8001a66 <NVIC_EncodePriority+0x32>
 8001a64:	2300      	movs	r3, #0
 8001a66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a68:	f04f 32ff 	mov.w	r2, #4294967295
 8001a6c:	69bb      	ldr	r3, [r7, #24]
 8001a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a72:	43da      	mvns	r2, r3
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	401a      	ands	r2, r3
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	fa01 f303 	lsl.w	r3, r1, r3
 8001a86:	43d9      	mvns	r1, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a8c:	4313      	orrs	r3, r2
         );
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3724      	adds	r7, #36	; 0x24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
	...

08001a9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	3b01      	subs	r3, #1
 8001aa8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001aac:	d301      	bcc.n	8001ab2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e00f      	b.n	8001ad2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ab2:	4a0a      	ldr	r2, [pc, #40]	; (8001adc <SysTick_Config+0x40>)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	3b01      	subs	r3, #1
 8001ab8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aba:	210f      	movs	r1, #15
 8001abc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ac0:	f7ff ff8e 	bl	80019e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ac4:	4b05      	ldr	r3, [pc, #20]	; (8001adc <SysTick_Config+0x40>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aca:	4b04      	ldr	r3, [pc, #16]	; (8001adc <SysTick_Config+0x40>)
 8001acc:	2207      	movs	r2, #7
 8001ace:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	e000e010 	.word	0xe000e010

08001ae0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f7ff ff29 	bl	8001940 <__NVIC_SetPriorityGrouping>
}
 8001aee:	bf00      	nop
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b086      	sub	sp, #24
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	4603      	mov	r3, r0
 8001afe:	60b9      	str	r1, [r7, #8]
 8001b00:	607a      	str	r2, [r7, #4]
 8001b02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b04:	2300      	movs	r3, #0
 8001b06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b08:	f7ff ff3e 	bl	8001988 <__NVIC_GetPriorityGrouping>
 8001b0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	68b9      	ldr	r1, [r7, #8]
 8001b12:	6978      	ldr	r0, [r7, #20]
 8001b14:	f7ff ff8e 	bl	8001a34 <NVIC_EncodePriority>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b1e:	4611      	mov	r1, r2
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff ff5d 	bl	80019e0 <__NVIC_SetPriority>
}
 8001b26:	bf00      	nop
 8001b28:	3718      	adds	r7, #24
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b082      	sub	sp, #8
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	4603      	mov	r3, r0
 8001b36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7ff ff31 	bl	80019a4 <__NVIC_EnableIRQ>
}
 8001b42:	bf00      	nop
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b082      	sub	sp, #8
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f7ff ffa2 	bl	8001a9c <SysTick_Config>
 8001b58:	4603      	mov	r3, r0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
	...

08001b64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b089      	sub	sp, #36	; 0x24
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b72:	2300      	movs	r3, #0
 8001b74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b76:	2300      	movs	r3, #0
 8001b78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	61fb      	str	r3, [r7, #28]
 8001b7e:	e159      	b.n	8001e34 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b80:	2201      	movs	r2, #1
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	697a      	ldr	r2, [r7, #20]
 8001b90:	4013      	ands	r3, r2
 8001b92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b94:	693a      	ldr	r2, [r7, #16]
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	f040 8148 	bne.w	8001e2e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d00b      	beq.n	8001bbe <HAL_GPIO_Init+0x5a>
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d007      	beq.n	8001bbe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bb2:	2b11      	cmp	r3, #17
 8001bb4:	d003      	beq.n	8001bbe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	2b12      	cmp	r3, #18
 8001bbc:	d130      	bne.n	8001c20 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	2203      	movs	r2, #3
 8001bca:	fa02 f303 	lsl.w	r3, r2, r3
 8001bce:	43db      	mvns	r3, r3
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	68da      	ldr	r2, [r3, #12]
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	fa02 f303 	lsl.w	r3, r2, r3
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	69ba      	ldr	r2, [r7, #24]
 8001bec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	4013      	ands	r3, r2
 8001c02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	091b      	lsrs	r3, r3, #4
 8001c0a:	f003 0201 	and.w	r2, r3, #1
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	2203      	movs	r2, #3
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	43db      	mvns	r3, r3
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	4013      	ands	r3, r2
 8001c36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	689a      	ldr	r2, [r3, #8]
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	005b      	lsls	r3, r3, #1
 8001c40:	fa02 f303 	lsl.w	r3, r2, r3
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d003      	beq.n	8001c60 <HAL_GPIO_Init+0xfc>
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	2b12      	cmp	r3, #18
 8001c5e:	d123      	bne.n	8001ca8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	08da      	lsrs	r2, r3, #3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	3208      	adds	r2, #8
 8001c68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	f003 0307 	and.w	r3, r3, #7
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	220f      	movs	r2, #15
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	4013      	ands	r3, r2
 8001c82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	691a      	ldr	r2, [r3, #16]
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	f003 0307 	and.w	r3, r3, #7
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	08da      	lsrs	r2, r3, #3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	3208      	adds	r2, #8
 8001ca2:	69b9      	ldr	r1, [r7, #24]
 8001ca4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	2203      	movs	r2, #3
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f003 0203 	and.w	r2, r3, #3
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	f000 80a2 	beq.w	8001e2e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cea:	2300      	movs	r3, #0
 8001cec:	60fb      	str	r3, [r7, #12]
 8001cee:	4b56      	ldr	r3, [pc, #344]	; (8001e48 <HAL_GPIO_Init+0x2e4>)
 8001cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf2:	4a55      	ldr	r2, [pc, #340]	; (8001e48 <HAL_GPIO_Init+0x2e4>)
 8001cf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cf8:	6453      	str	r3, [r2, #68]	; 0x44
 8001cfa:	4b53      	ldr	r3, [pc, #332]	; (8001e48 <HAL_GPIO_Init+0x2e4>)
 8001cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d02:	60fb      	str	r3, [r7, #12]
 8001d04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d06:	4a51      	ldr	r2, [pc, #324]	; (8001e4c <HAL_GPIO_Init+0x2e8>)
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	089b      	lsrs	r3, r3, #2
 8001d0c:	3302      	adds	r3, #2
 8001d0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	f003 0303 	and.w	r3, r3, #3
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	220f      	movs	r2, #15
 8001d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d22:	43db      	mvns	r3, r3
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	4013      	ands	r3, r2
 8001d28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a48      	ldr	r2, [pc, #288]	; (8001e50 <HAL_GPIO_Init+0x2ec>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d019      	beq.n	8001d66 <HAL_GPIO_Init+0x202>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a47      	ldr	r2, [pc, #284]	; (8001e54 <HAL_GPIO_Init+0x2f0>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d013      	beq.n	8001d62 <HAL_GPIO_Init+0x1fe>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a46      	ldr	r2, [pc, #280]	; (8001e58 <HAL_GPIO_Init+0x2f4>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d00d      	beq.n	8001d5e <HAL_GPIO_Init+0x1fa>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a45      	ldr	r2, [pc, #276]	; (8001e5c <HAL_GPIO_Init+0x2f8>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d007      	beq.n	8001d5a <HAL_GPIO_Init+0x1f6>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a44      	ldr	r2, [pc, #272]	; (8001e60 <HAL_GPIO_Init+0x2fc>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d101      	bne.n	8001d56 <HAL_GPIO_Init+0x1f2>
 8001d52:	2304      	movs	r3, #4
 8001d54:	e008      	b.n	8001d68 <HAL_GPIO_Init+0x204>
 8001d56:	2307      	movs	r3, #7
 8001d58:	e006      	b.n	8001d68 <HAL_GPIO_Init+0x204>
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e004      	b.n	8001d68 <HAL_GPIO_Init+0x204>
 8001d5e:	2302      	movs	r3, #2
 8001d60:	e002      	b.n	8001d68 <HAL_GPIO_Init+0x204>
 8001d62:	2301      	movs	r3, #1
 8001d64:	e000      	b.n	8001d68 <HAL_GPIO_Init+0x204>
 8001d66:	2300      	movs	r3, #0
 8001d68:	69fa      	ldr	r2, [r7, #28]
 8001d6a:	f002 0203 	and.w	r2, r2, #3
 8001d6e:	0092      	lsls	r2, r2, #2
 8001d70:	4093      	lsls	r3, r2
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d78:	4934      	ldr	r1, [pc, #208]	; (8001e4c <HAL_GPIO_Init+0x2e8>)
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	089b      	lsrs	r3, r3, #2
 8001d7e:	3302      	adds	r3, #2
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d86:	4b37      	ldr	r3, [pc, #220]	; (8001e64 <HAL_GPIO_Init+0x300>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	43db      	mvns	r3, r3
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	4013      	ands	r3, r2
 8001d94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d003      	beq.n	8001daa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001da2:	69ba      	ldr	r2, [r7, #24]
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001daa:	4a2e      	ldr	r2, [pc, #184]	; (8001e64 <HAL_GPIO_Init+0x300>)
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001db0:	4b2c      	ldr	r3, [pc, #176]	; (8001e64 <HAL_GPIO_Init+0x300>)
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	43db      	mvns	r3, r3
 8001dba:	69ba      	ldr	r2, [r7, #24]
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d003      	beq.n	8001dd4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dd4:	4a23      	ldr	r2, [pc, #140]	; (8001e64 <HAL_GPIO_Init+0x300>)
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dda:	4b22      	ldr	r3, [pc, #136]	; (8001e64 <HAL_GPIO_Init+0x300>)
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	43db      	mvns	r3, r3
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	4013      	ands	r3, r2
 8001de8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d003      	beq.n	8001dfe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001df6:	69ba      	ldr	r2, [r7, #24]
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001dfe:	4a19      	ldr	r2, [pc, #100]	; (8001e64 <HAL_GPIO_Init+0x300>)
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e04:	4b17      	ldr	r3, [pc, #92]	; (8001e64 <HAL_GPIO_Init+0x300>)
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	43db      	mvns	r3, r3
 8001e0e:	69ba      	ldr	r2, [r7, #24]
 8001e10:	4013      	ands	r3, r2
 8001e12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d003      	beq.n	8001e28 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e28:	4a0e      	ldr	r2, [pc, #56]	; (8001e64 <HAL_GPIO_Init+0x300>)
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	3301      	adds	r3, #1
 8001e32:	61fb      	str	r3, [r7, #28]
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	2b0f      	cmp	r3, #15
 8001e38:	f67f aea2 	bls.w	8001b80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e3c:	bf00      	nop
 8001e3e:	3724      	adds	r7, #36	; 0x24
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr
 8001e48:	40023800 	.word	0x40023800
 8001e4c:	40013800 	.word	0x40013800
 8001e50:	40020000 	.word	0x40020000
 8001e54:	40020400 	.word	0x40020400
 8001e58:	40020800 	.word	0x40020800
 8001e5c:	40020c00 	.word	0x40020c00
 8001e60:	40021000 	.word	0x40021000
 8001e64:	40013c00 	.word	0x40013c00

08001e68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b085      	sub	sp, #20
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	460b      	mov	r3, r1
 8001e72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	691a      	ldr	r2, [r3, #16]
 8001e78:	887b      	ldrh	r3, [r7, #2]
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d002      	beq.n	8001e86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e80:	2301      	movs	r3, #1
 8001e82:	73fb      	strb	r3, [r7, #15]
 8001e84:	e001      	b.n	8001e8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e86:	2300      	movs	r3, #0
 8001e88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3714      	adds	r7, #20
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001ea2:	4b08      	ldr	r3, [pc, #32]	; (8001ec4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ea4:	695a      	ldr	r2, [r3, #20]
 8001ea6:	88fb      	ldrh	r3, [r7, #6]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d006      	beq.n	8001ebc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001eae:	4a05      	ldr	r2, [pc, #20]	; (8001ec4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001eb0:	88fb      	ldrh	r3, [r7, #6]
 8001eb2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001eb4:	88fb      	ldrh	r3, [r7, #6]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f000 f806 	bl	8001ec8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001ebc:	bf00      	nop
 8001ebe:	3708      	adds	r7, #8
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	40013c00 	.word	0x40013c00

08001ec8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	4603      	mov	r3, r0
 8001ed0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001ed2:	bf00      	nop
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
	...

08001ee0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b086      	sub	sp, #24
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d101      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e25b      	b.n	80023aa <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0301 	and.w	r3, r3, #1
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d075      	beq.n	8001fea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001efe:	4ba3      	ldr	r3, [pc, #652]	; (800218c <HAL_RCC_OscConfig+0x2ac>)
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	f003 030c 	and.w	r3, r3, #12
 8001f06:	2b04      	cmp	r3, #4
 8001f08:	d00c      	beq.n	8001f24 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f0a:	4ba0      	ldr	r3, [pc, #640]	; (800218c <HAL_RCC_OscConfig+0x2ac>)
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f12:	2b08      	cmp	r3, #8
 8001f14:	d112      	bne.n	8001f3c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f16:	4b9d      	ldr	r3, [pc, #628]	; (800218c <HAL_RCC_OscConfig+0x2ac>)
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f22:	d10b      	bne.n	8001f3c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f24:	4b99      	ldr	r3, [pc, #612]	; (800218c <HAL_RCC_OscConfig+0x2ac>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d05b      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x108>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d157      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e236      	b.n	80023aa <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f44:	d106      	bne.n	8001f54 <HAL_RCC_OscConfig+0x74>
 8001f46:	4b91      	ldr	r3, [pc, #580]	; (800218c <HAL_RCC_OscConfig+0x2ac>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a90      	ldr	r2, [pc, #576]	; (800218c <HAL_RCC_OscConfig+0x2ac>)
 8001f4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f50:	6013      	str	r3, [r2, #0]
 8001f52:	e01d      	b.n	8001f90 <HAL_RCC_OscConfig+0xb0>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f5c:	d10c      	bne.n	8001f78 <HAL_RCC_OscConfig+0x98>
 8001f5e:	4b8b      	ldr	r3, [pc, #556]	; (800218c <HAL_RCC_OscConfig+0x2ac>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a8a      	ldr	r2, [pc, #552]	; (800218c <HAL_RCC_OscConfig+0x2ac>)
 8001f64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f68:	6013      	str	r3, [r2, #0]
 8001f6a:	4b88      	ldr	r3, [pc, #544]	; (800218c <HAL_RCC_OscConfig+0x2ac>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a87      	ldr	r2, [pc, #540]	; (800218c <HAL_RCC_OscConfig+0x2ac>)
 8001f70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f74:	6013      	str	r3, [r2, #0]
 8001f76:	e00b      	b.n	8001f90 <HAL_RCC_OscConfig+0xb0>
 8001f78:	4b84      	ldr	r3, [pc, #528]	; (800218c <HAL_RCC_OscConfig+0x2ac>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a83      	ldr	r2, [pc, #524]	; (800218c <HAL_RCC_OscConfig+0x2ac>)
 8001f7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f82:	6013      	str	r3, [r2, #0]
 8001f84:	4b81      	ldr	r3, [pc, #516]	; (800218c <HAL_RCC_OscConfig+0x2ac>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a80      	ldr	r2, [pc, #512]	; (800218c <HAL_RCC_OscConfig+0x2ac>)
 8001f8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d013      	beq.n	8001fc0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f98:	f7ff fcc6 	bl	8001928 <HAL_GetTick>
 8001f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f9e:	e008      	b.n	8001fb2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fa0:	f7ff fcc2 	bl	8001928 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	2b64      	cmp	r3, #100	; 0x64
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e1fb      	b.n	80023aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fb2:	4b76      	ldr	r3, [pc, #472]	; (800218c <HAL_RCC_OscConfig+0x2ac>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d0f0      	beq.n	8001fa0 <HAL_RCC_OscConfig+0xc0>
 8001fbe:	e014      	b.n	8001fea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc0:	f7ff fcb2 	bl	8001928 <HAL_GetTick>
 8001fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fc6:	e008      	b.n	8001fda <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fc8:	f7ff fcae 	bl	8001928 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b64      	cmp	r3, #100	; 0x64
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e1e7      	b.n	80023aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fda:	4b6c      	ldr	r3, [pc, #432]	; (800218c <HAL_RCC_OscConfig+0x2ac>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d1f0      	bne.n	8001fc8 <HAL_RCC_OscConfig+0xe8>
 8001fe6:	e000      	b.n	8001fea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fe8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0302 	and.w	r3, r3, #2
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d063      	beq.n	80020be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ff6:	4b65      	ldr	r3, [pc, #404]	; (800218c <HAL_RCC_OscConfig+0x2ac>)
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f003 030c 	and.w	r3, r3, #12
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d00b      	beq.n	800201a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002002:	4b62      	ldr	r3, [pc, #392]	; (800218c <HAL_RCC_OscConfig+0x2ac>)
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800200a:	2b08      	cmp	r3, #8
 800200c:	d11c      	bne.n	8002048 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800200e:	4b5f      	ldr	r3, [pc, #380]	; (800218c <HAL_RCC_OscConfig+0x2ac>)
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d116      	bne.n	8002048 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800201a:	4b5c      	ldr	r3, [pc, #368]	; (800218c <HAL_RCC_OscConfig+0x2ac>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	2b00      	cmp	r3, #0
 8002024:	d005      	beq.n	8002032 <HAL_RCC_OscConfig+0x152>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	2b01      	cmp	r3, #1
 800202c:	d001      	beq.n	8002032 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e1bb      	b.n	80023aa <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002032:	4b56      	ldr	r3, [pc, #344]	; (800218c <HAL_RCC_OscConfig+0x2ac>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	691b      	ldr	r3, [r3, #16]
 800203e:	00db      	lsls	r3, r3, #3
 8002040:	4952      	ldr	r1, [pc, #328]	; (800218c <HAL_RCC_OscConfig+0x2ac>)
 8002042:	4313      	orrs	r3, r2
 8002044:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002046:	e03a      	b.n	80020be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d020      	beq.n	8002092 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002050:	4b4f      	ldr	r3, [pc, #316]	; (8002190 <HAL_RCC_OscConfig+0x2b0>)
 8002052:	2201      	movs	r2, #1
 8002054:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002056:	f7ff fc67 	bl	8001928 <HAL_GetTick>
 800205a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800205c:	e008      	b.n	8002070 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800205e:	f7ff fc63 	bl	8001928 <HAL_GetTick>
 8002062:	4602      	mov	r2, r0
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	2b02      	cmp	r3, #2
 800206a:	d901      	bls.n	8002070 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800206c:	2303      	movs	r3, #3
 800206e:	e19c      	b.n	80023aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002070:	4b46      	ldr	r3, [pc, #280]	; (800218c <HAL_RCC_OscConfig+0x2ac>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0302 	and.w	r3, r3, #2
 8002078:	2b00      	cmp	r3, #0
 800207a:	d0f0      	beq.n	800205e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800207c:	4b43      	ldr	r3, [pc, #268]	; (800218c <HAL_RCC_OscConfig+0x2ac>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	691b      	ldr	r3, [r3, #16]
 8002088:	00db      	lsls	r3, r3, #3
 800208a:	4940      	ldr	r1, [pc, #256]	; (800218c <HAL_RCC_OscConfig+0x2ac>)
 800208c:	4313      	orrs	r3, r2
 800208e:	600b      	str	r3, [r1, #0]
 8002090:	e015      	b.n	80020be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002092:	4b3f      	ldr	r3, [pc, #252]	; (8002190 <HAL_RCC_OscConfig+0x2b0>)
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002098:	f7ff fc46 	bl	8001928 <HAL_GetTick>
 800209c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800209e:	e008      	b.n	80020b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020a0:	f7ff fc42 	bl	8001928 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e17b      	b.n	80023aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020b2:	4b36      	ldr	r3, [pc, #216]	; (800218c <HAL_RCC_OscConfig+0x2ac>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0302 	and.w	r3, r3, #2
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d1f0      	bne.n	80020a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0308 	and.w	r3, r3, #8
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d030      	beq.n	800212c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	695b      	ldr	r3, [r3, #20]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d016      	beq.n	8002100 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020d2:	4b30      	ldr	r3, [pc, #192]	; (8002194 <HAL_RCC_OscConfig+0x2b4>)
 80020d4:	2201      	movs	r2, #1
 80020d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020d8:	f7ff fc26 	bl	8001928 <HAL_GetTick>
 80020dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020de:	e008      	b.n	80020f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020e0:	f7ff fc22 	bl	8001928 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e15b      	b.n	80023aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020f2:	4b26      	ldr	r3, [pc, #152]	; (800218c <HAL_RCC_OscConfig+0x2ac>)
 80020f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d0f0      	beq.n	80020e0 <HAL_RCC_OscConfig+0x200>
 80020fe:	e015      	b.n	800212c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002100:	4b24      	ldr	r3, [pc, #144]	; (8002194 <HAL_RCC_OscConfig+0x2b4>)
 8002102:	2200      	movs	r2, #0
 8002104:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002106:	f7ff fc0f 	bl	8001928 <HAL_GetTick>
 800210a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800210c:	e008      	b.n	8002120 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800210e:	f7ff fc0b 	bl	8001928 <HAL_GetTick>
 8002112:	4602      	mov	r2, r0
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	2b02      	cmp	r3, #2
 800211a:	d901      	bls.n	8002120 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	e144      	b.n	80023aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002120:	4b1a      	ldr	r3, [pc, #104]	; (800218c <HAL_RCC_OscConfig+0x2ac>)
 8002122:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002124:	f003 0302 	and.w	r3, r3, #2
 8002128:	2b00      	cmp	r3, #0
 800212a:	d1f0      	bne.n	800210e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0304 	and.w	r3, r3, #4
 8002134:	2b00      	cmp	r3, #0
 8002136:	f000 80a0 	beq.w	800227a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800213a:	2300      	movs	r3, #0
 800213c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800213e:	4b13      	ldr	r3, [pc, #76]	; (800218c <HAL_RCC_OscConfig+0x2ac>)
 8002140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d10f      	bne.n	800216a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800214a:	2300      	movs	r3, #0
 800214c:	60bb      	str	r3, [r7, #8]
 800214e:	4b0f      	ldr	r3, [pc, #60]	; (800218c <HAL_RCC_OscConfig+0x2ac>)
 8002150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002152:	4a0e      	ldr	r2, [pc, #56]	; (800218c <HAL_RCC_OscConfig+0x2ac>)
 8002154:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002158:	6413      	str	r3, [r2, #64]	; 0x40
 800215a:	4b0c      	ldr	r3, [pc, #48]	; (800218c <HAL_RCC_OscConfig+0x2ac>)
 800215c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002162:	60bb      	str	r3, [r7, #8]
 8002164:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002166:	2301      	movs	r3, #1
 8002168:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800216a:	4b0b      	ldr	r3, [pc, #44]	; (8002198 <HAL_RCC_OscConfig+0x2b8>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002172:	2b00      	cmp	r3, #0
 8002174:	d121      	bne.n	80021ba <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002176:	4b08      	ldr	r3, [pc, #32]	; (8002198 <HAL_RCC_OscConfig+0x2b8>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a07      	ldr	r2, [pc, #28]	; (8002198 <HAL_RCC_OscConfig+0x2b8>)
 800217c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002180:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002182:	f7ff fbd1 	bl	8001928 <HAL_GetTick>
 8002186:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002188:	e011      	b.n	80021ae <HAL_RCC_OscConfig+0x2ce>
 800218a:	bf00      	nop
 800218c:	40023800 	.word	0x40023800
 8002190:	42470000 	.word	0x42470000
 8002194:	42470e80 	.word	0x42470e80
 8002198:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800219c:	f7ff fbc4 	bl	8001928 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e0fd      	b.n	80023aa <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ae:	4b81      	ldr	r3, [pc, #516]	; (80023b4 <HAL_RCC_OscConfig+0x4d4>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d0f0      	beq.n	800219c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d106      	bne.n	80021d0 <HAL_RCC_OscConfig+0x2f0>
 80021c2:	4b7d      	ldr	r3, [pc, #500]	; (80023b8 <HAL_RCC_OscConfig+0x4d8>)
 80021c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021c6:	4a7c      	ldr	r2, [pc, #496]	; (80023b8 <HAL_RCC_OscConfig+0x4d8>)
 80021c8:	f043 0301 	orr.w	r3, r3, #1
 80021cc:	6713      	str	r3, [r2, #112]	; 0x70
 80021ce:	e01c      	b.n	800220a <HAL_RCC_OscConfig+0x32a>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	2b05      	cmp	r3, #5
 80021d6:	d10c      	bne.n	80021f2 <HAL_RCC_OscConfig+0x312>
 80021d8:	4b77      	ldr	r3, [pc, #476]	; (80023b8 <HAL_RCC_OscConfig+0x4d8>)
 80021da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021dc:	4a76      	ldr	r2, [pc, #472]	; (80023b8 <HAL_RCC_OscConfig+0x4d8>)
 80021de:	f043 0304 	orr.w	r3, r3, #4
 80021e2:	6713      	str	r3, [r2, #112]	; 0x70
 80021e4:	4b74      	ldr	r3, [pc, #464]	; (80023b8 <HAL_RCC_OscConfig+0x4d8>)
 80021e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021e8:	4a73      	ldr	r2, [pc, #460]	; (80023b8 <HAL_RCC_OscConfig+0x4d8>)
 80021ea:	f043 0301 	orr.w	r3, r3, #1
 80021ee:	6713      	str	r3, [r2, #112]	; 0x70
 80021f0:	e00b      	b.n	800220a <HAL_RCC_OscConfig+0x32a>
 80021f2:	4b71      	ldr	r3, [pc, #452]	; (80023b8 <HAL_RCC_OscConfig+0x4d8>)
 80021f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f6:	4a70      	ldr	r2, [pc, #448]	; (80023b8 <HAL_RCC_OscConfig+0x4d8>)
 80021f8:	f023 0301 	bic.w	r3, r3, #1
 80021fc:	6713      	str	r3, [r2, #112]	; 0x70
 80021fe:	4b6e      	ldr	r3, [pc, #440]	; (80023b8 <HAL_RCC_OscConfig+0x4d8>)
 8002200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002202:	4a6d      	ldr	r2, [pc, #436]	; (80023b8 <HAL_RCC_OscConfig+0x4d8>)
 8002204:	f023 0304 	bic.w	r3, r3, #4
 8002208:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d015      	beq.n	800223e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002212:	f7ff fb89 	bl	8001928 <HAL_GetTick>
 8002216:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002218:	e00a      	b.n	8002230 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800221a:	f7ff fb85 	bl	8001928 <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	f241 3288 	movw	r2, #5000	; 0x1388
 8002228:	4293      	cmp	r3, r2
 800222a:	d901      	bls.n	8002230 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e0bc      	b.n	80023aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002230:	4b61      	ldr	r3, [pc, #388]	; (80023b8 <HAL_RCC_OscConfig+0x4d8>)
 8002232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002234:	f003 0302 	and.w	r3, r3, #2
 8002238:	2b00      	cmp	r3, #0
 800223a:	d0ee      	beq.n	800221a <HAL_RCC_OscConfig+0x33a>
 800223c:	e014      	b.n	8002268 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800223e:	f7ff fb73 	bl	8001928 <HAL_GetTick>
 8002242:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002244:	e00a      	b.n	800225c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002246:	f7ff fb6f 	bl	8001928 <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	f241 3288 	movw	r2, #5000	; 0x1388
 8002254:	4293      	cmp	r3, r2
 8002256:	d901      	bls.n	800225c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	e0a6      	b.n	80023aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800225c:	4b56      	ldr	r3, [pc, #344]	; (80023b8 <HAL_RCC_OscConfig+0x4d8>)
 800225e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002260:	f003 0302 	and.w	r3, r3, #2
 8002264:	2b00      	cmp	r3, #0
 8002266:	d1ee      	bne.n	8002246 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002268:	7dfb      	ldrb	r3, [r7, #23]
 800226a:	2b01      	cmp	r3, #1
 800226c:	d105      	bne.n	800227a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800226e:	4b52      	ldr	r3, [pc, #328]	; (80023b8 <HAL_RCC_OscConfig+0x4d8>)
 8002270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002272:	4a51      	ldr	r2, [pc, #324]	; (80023b8 <HAL_RCC_OscConfig+0x4d8>)
 8002274:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002278:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	699b      	ldr	r3, [r3, #24]
 800227e:	2b00      	cmp	r3, #0
 8002280:	f000 8092 	beq.w	80023a8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002284:	4b4c      	ldr	r3, [pc, #304]	; (80023b8 <HAL_RCC_OscConfig+0x4d8>)
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f003 030c 	and.w	r3, r3, #12
 800228c:	2b08      	cmp	r3, #8
 800228e:	d05c      	beq.n	800234a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	699b      	ldr	r3, [r3, #24]
 8002294:	2b02      	cmp	r3, #2
 8002296:	d141      	bne.n	800231c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002298:	4b48      	ldr	r3, [pc, #288]	; (80023bc <HAL_RCC_OscConfig+0x4dc>)
 800229a:	2200      	movs	r2, #0
 800229c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800229e:	f7ff fb43 	bl	8001928 <HAL_GetTick>
 80022a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022a4:	e008      	b.n	80022b8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022a6:	f7ff fb3f 	bl	8001928 <HAL_GetTick>
 80022aa:	4602      	mov	r2, r0
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d901      	bls.n	80022b8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80022b4:	2303      	movs	r3, #3
 80022b6:	e078      	b.n	80023aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022b8:	4b3f      	ldr	r3, [pc, #252]	; (80023b8 <HAL_RCC_OscConfig+0x4d8>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d1f0      	bne.n	80022a6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	69da      	ldr	r2, [r3, #28]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6a1b      	ldr	r3, [r3, #32]
 80022cc:	431a      	orrs	r2, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d2:	019b      	lsls	r3, r3, #6
 80022d4:	431a      	orrs	r2, r3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022da:	085b      	lsrs	r3, r3, #1
 80022dc:	3b01      	subs	r3, #1
 80022de:	041b      	lsls	r3, r3, #16
 80022e0:	431a      	orrs	r2, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e6:	061b      	lsls	r3, r3, #24
 80022e8:	4933      	ldr	r1, [pc, #204]	; (80023b8 <HAL_RCC_OscConfig+0x4d8>)
 80022ea:	4313      	orrs	r3, r2
 80022ec:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022ee:	4b33      	ldr	r3, [pc, #204]	; (80023bc <HAL_RCC_OscConfig+0x4dc>)
 80022f0:	2201      	movs	r2, #1
 80022f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f4:	f7ff fb18 	bl	8001928 <HAL_GetTick>
 80022f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022fa:	e008      	b.n	800230e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022fc:	f7ff fb14 	bl	8001928 <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	2b02      	cmp	r3, #2
 8002308:	d901      	bls.n	800230e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e04d      	b.n	80023aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800230e:	4b2a      	ldr	r3, [pc, #168]	; (80023b8 <HAL_RCC_OscConfig+0x4d8>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d0f0      	beq.n	80022fc <HAL_RCC_OscConfig+0x41c>
 800231a:	e045      	b.n	80023a8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800231c:	4b27      	ldr	r3, [pc, #156]	; (80023bc <HAL_RCC_OscConfig+0x4dc>)
 800231e:	2200      	movs	r2, #0
 8002320:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002322:	f7ff fb01 	bl	8001928 <HAL_GetTick>
 8002326:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002328:	e008      	b.n	800233c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800232a:	f7ff fafd 	bl	8001928 <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	2b02      	cmp	r3, #2
 8002336:	d901      	bls.n	800233c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	e036      	b.n	80023aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800233c:	4b1e      	ldr	r3, [pc, #120]	; (80023b8 <HAL_RCC_OscConfig+0x4d8>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d1f0      	bne.n	800232a <HAL_RCC_OscConfig+0x44a>
 8002348:	e02e      	b.n	80023a8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	699b      	ldr	r3, [r3, #24]
 800234e:	2b01      	cmp	r3, #1
 8002350:	d101      	bne.n	8002356 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e029      	b.n	80023aa <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002356:	4b18      	ldr	r3, [pc, #96]	; (80023b8 <HAL_RCC_OscConfig+0x4d8>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	69db      	ldr	r3, [r3, #28]
 8002366:	429a      	cmp	r2, r3
 8002368:	d11c      	bne.n	80023a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002374:	429a      	cmp	r2, r3
 8002376:	d115      	bne.n	80023a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002378:	68fa      	ldr	r2, [r7, #12]
 800237a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800237e:	4013      	ands	r3, r2
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002384:	4293      	cmp	r3, r2
 8002386:	d10d      	bne.n	80023a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002392:	429a      	cmp	r2, r3
 8002394:	d106      	bne.n	80023a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d001      	beq.n	80023a8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e000      	b.n	80023aa <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3718      	adds	r7, #24
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	40007000 	.word	0x40007000
 80023b8:	40023800 	.word	0x40023800
 80023bc:	42470060 	.word	0x42470060

080023c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d101      	bne.n	80023d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e0cc      	b.n	800256e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023d4:	4b68      	ldr	r3, [pc, #416]	; (8002578 <HAL_RCC_ClockConfig+0x1b8>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 030f 	and.w	r3, r3, #15
 80023dc:	683a      	ldr	r2, [r7, #0]
 80023de:	429a      	cmp	r2, r3
 80023e0:	d90c      	bls.n	80023fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023e2:	4b65      	ldr	r3, [pc, #404]	; (8002578 <HAL_RCC_ClockConfig+0x1b8>)
 80023e4:	683a      	ldr	r2, [r7, #0]
 80023e6:	b2d2      	uxtb	r2, r2
 80023e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ea:	4b63      	ldr	r3, [pc, #396]	; (8002578 <HAL_RCC_ClockConfig+0x1b8>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 030f 	and.w	r3, r3, #15
 80023f2:	683a      	ldr	r2, [r7, #0]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d001      	beq.n	80023fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e0b8      	b.n	800256e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0302 	and.w	r3, r3, #2
 8002404:	2b00      	cmp	r3, #0
 8002406:	d020      	beq.n	800244a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0304 	and.w	r3, r3, #4
 8002410:	2b00      	cmp	r3, #0
 8002412:	d005      	beq.n	8002420 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002414:	4b59      	ldr	r3, [pc, #356]	; (800257c <HAL_RCC_ClockConfig+0x1bc>)
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	4a58      	ldr	r2, [pc, #352]	; (800257c <HAL_RCC_ClockConfig+0x1bc>)
 800241a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800241e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0308 	and.w	r3, r3, #8
 8002428:	2b00      	cmp	r3, #0
 800242a:	d005      	beq.n	8002438 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800242c:	4b53      	ldr	r3, [pc, #332]	; (800257c <HAL_RCC_ClockConfig+0x1bc>)
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	4a52      	ldr	r2, [pc, #328]	; (800257c <HAL_RCC_ClockConfig+0x1bc>)
 8002432:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002436:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002438:	4b50      	ldr	r3, [pc, #320]	; (800257c <HAL_RCC_ClockConfig+0x1bc>)
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	494d      	ldr	r1, [pc, #308]	; (800257c <HAL_RCC_ClockConfig+0x1bc>)
 8002446:	4313      	orrs	r3, r2
 8002448:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0301 	and.w	r3, r3, #1
 8002452:	2b00      	cmp	r3, #0
 8002454:	d044      	beq.n	80024e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	2b01      	cmp	r3, #1
 800245c:	d107      	bne.n	800246e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800245e:	4b47      	ldr	r3, [pc, #284]	; (800257c <HAL_RCC_ClockConfig+0x1bc>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d119      	bne.n	800249e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e07f      	b.n	800256e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	2b02      	cmp	r3, #2
 8002474:	d003      	beq.n	800247e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800247a:	2b03      	cmp	r3, #3
 800247c:	d107      	bne.n	800248e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800247e:	4b3f      	ldr	r3, [pc, #252]	; (800257c <HAL_RCC_ClockConfig+0x1bc>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d109      	bne.n	800249e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e06f      	b.n	800256e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800248e:	4b3b      	ldr	r3, [pc, #236]	; (800257c <HAL_RCC_ClockConfig+0x1bc>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	2b00      	cmp	r3, #0
 8002498:	d101      	bne.n	800249e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e067      	b.n	800256e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800249e:	4b37      	ldr	r3, [pc, #220]	; (800257c <HAL_RCC_ClockConfig+0x1bc>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f023 0203 	bic.w	r2, r3, #3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	4934      	ldr	r1, [pc, #208]	; (800257c <HAL_RCC_ClockConfig+0x1bc>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024b0:	f7ff fa3a 	bl	8001928 <HAL_GetTick>
 80024b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024b6:	e00a      	b.n	80024ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024b8:	f7ff fa36 	bl	8001928 <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d901      	bls.n	80024ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e04f      	b.n	800256e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ce:	4b2b      	ldr	r3, [pc, #172]	; (800257c <HAL_RCC_ClockConfig+0x1bc>)
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f003 020c 	and.w	r2, r3, #12
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	429a      	cmp	r2, r3
 80024de:	d1eb      	bne.n	80024b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024e0:	4b25      	ldr	r3, [pc, #148]	; (8002578 <HAL_RCC_ClockConfig+0x1b8>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 030f 	and.w	r3, r3, #15
 80024e8:	683a      	ldr	r2, [r7, #0]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d20c      	bcs.n	8002508 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ee:	4b22      	ldr	r3, [pc, #136]	; (8002578 <HAL_RCC_ClockConfig+0x1b8>)
 80024f0:	683a      	ldr	r2, [r7, #0]
 80024f2:	b2d2      	uxtb	r2, r2
 80024f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024f6:	4b20      	ldr	r3, [pc, #128]	; (8002578 <HAL_RCC_ClockConfig+0x1b8>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 030f 	and.w	r3, r3, #15
 80024fe:	683a      	ldr	r2, [r7, #0]
 8002500:	429a      	cmp	r2, r3
 8002502:	d001      	beq.n	8002508 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e032      	b.n	800256e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0304 	and.w	r3, r3, #4
 8002510:	2b00      	cmp	r3, #0
 8002512:	d008      	beq.n	8002526 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002514:	4b19      	ldr	r3, [pc, #100]	; (800257c <HAL_RCC_ClockConfig+0x1bc>)
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	4916      	ldr	r1, [pc, #88]	; (800257c <HAL_RCC_ClockConfig+0x1bc>)
 8002522:	4313      	orrs	r3, r2
 8002524:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0308 	and.w	r3, r3, #8
 800252e:	2b00      	cmp	r3, #0
 8002530:	d009      	beq.n	8002546 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002532:	4b12      	ldr	r3, [pc, #72]	; (800257c <HAL_RCC_ClockConfig+0x1bc>)
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	00db      	lsls	r3, r3, #3
 8002540:	490e      	ldr	r1, [pc, #56]	; (800257c <HAL_RCC_ClockConfig+0x1bc>)
 8002542:	4313      	orrs	r3, r2
 8002544:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002546:	f000 f821 	bl	800258c <HAL_RCC_GetSysClockFreq>
 800254a:	4601      	mov	r1, r0
 800254c:	4b0b      	ldr	r3, [pc, #44]	; (800257c <HAL_RCC_ClockConfig+0x1bc>)
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	091b      	lsrs	r3, r3, #4
 8002552:	f003 030f 	and.w	r3, r3, #15
 8002556:	4a0a      	ldr	r2, [pc, #40]	; (8002580 <HAL_RCC_ClockConfig+0x1c0>)
 8002558:	5cd3      	ldrb	r3, [r2, r3]
 800255a:	fa21 f303 	lsr.w	r3, r1, r3
 800255e:	4a09      	ldr	r2, [pc, #36]	; (8002584 <HAL_RCC_ClockConfig+0x1c4>)
 8002560:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002562:	4b09      	ldr	r3, [pc, #36]	; (8002588 <HAL_RCC_ClockConfig+0x1c8>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4618      	mov	r0, r3
 8002568:	f7ff f99a 	bl	80018a0 <HAL_InitTick>

  return HAL_OK;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3710      	adds	r7, #16
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	40023c00 	.word	0x40023c00
 800257c:	40023800 	.word	0x40023800
 8002580:	08004330 	.word	0x08004330
 8002584:	20000250 	.word	0x20000250
 8002588:	20000254 	.word	0x20000254

0800258c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800258c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800258e:	b085      	sub	sp, #20
 8002590:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002592:	2300      	movs	r3, #0
 8002594:	607b      	str	r3, [r7, #4]
 8002596:	2300      	movs	r3, #0
 8002598:	60fb      	str	r3, [r7, #12]
 800259a:	2300      	movs	r3, #0
 800259c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800259e:	2300      	movs	r3, #0
 80025a0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025a2:	4b50      	ldr	r3, [pc, #320]	; (80026e4 <HAL_RCC_GetSysClockFreq+0x158>)
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f003 030c 	and.w	r3, r3, #12
 80025aa:	2b04      	cmp	r3, #4
 80025ac:	d007      	beq.n	80025be <HAL_RCC_GetSysClockFreq+0x32>
 80025ae:	2b08      	cmp	r3, #8
 80025b0:	d008      	beq.n	80025c4 <HAL_RCC_GetSysClockFreq+0x38>
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	f040 808d 	bne.w	80026d2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025b8:	4b4b      	ldr	r3, [pc, #300]	; (80026e8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80025ba:	60bb      	str	r3, [r7, #8]
       break;
 80025bc:	e08c      	b.n	80026d8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025be:	4b4b      	ldr	r3, [pc, #300]	; (80026ec <HAL_RCC_GetSysClockFreq+0x160>)
 80025c0:	60bb      	str	r3, [r7, #8]
      break;
 80025c2:	e089      	b.n	80026d8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025c4:	4b47      	ldr	r3, [pc, #284]	; (80026e4 <HAL_RCC_GetSysClockFreq+0x158>)
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025cc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025ce:	4b45      	ldr	r3, [pc, #276]	; (80026e4 <HAL_RCC_GetSysClockFreq+0x158>)
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d023      	beq.n	8002622 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025da:	4b42      	ldr	r3, [pc, #264]	; (80026e4 <HAL_RCC_GetSysClockFreq+0x158>)
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	099b      	lsrs	r3, r3, #6
 80025e0:	f04f 0400 	mov.w	r4, #0
 80025e4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80025e8:	f04f 0200 	mov.w	r2, #0
 80025ec:	ea03 0501 	and.w	r5, r3, r1
 80025f0:	ea04 0602 	and.w	r6, r4, r2
 80025f4:	4a3d      	ldr	r2, [pc, #244]	; (80026ec <HAL_RCC_GetSysClockFreq+0x160>)
 80025f6:	fb02 f106 	mul.w	r1, r2, r6
 80025fa:	2200      	movs	r2, #0
 80025fc:	fb02 f205 	mul.w	r2, r2, r5
 8002600:	440a      	add	r2, r1
 8002602:	493a      	ldr	r1, [pc, #232]	; (80026ec <HAL_RCC_GetSysClockFreq+0x160>)
 8002604:	fba5 0101 	umull	r0, r1, r5, r1
 8002608:	1853      	adds	r3, r2, r1
 800260a:	4619      	mov	r1, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f04f 0400 	mov.w	r4, #0
 8002612:	461a      	mov	r2, r3
 8002614:	4623      	mov	r3, r4
 8002616:	f7fd fddf 	bl	80001d8 <__aeabi_uldivmod>
 800261a:	4603      	mov	r3, r0
 800261c:	460c      	mov	r4, r1
 800261e:	60fb      	str	r3, [r7, #12]
 8002620:	e049      	b.n	80026b6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002622:	4b30      	ldr	r3, [pc, #192]	; (80026e4 <HAL_RCC_GetSysClockFreq+0x158>)
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	099b      	lsrs	r3, r3, #6
 8002628:	f04f 0400 	mov.w	r4, #0
 800262c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002630:	f04f 0200 	mov.w	r2, #0
 8002634:	ea03 0501 	and.w	r5, r3, r1
 8002638:	ea04 0602 	and.w	r6, r4, r2
 800263c:	4629      	mov	r1, r5
 800263e:	4632      	mov	r2, r6
 8002640:	f04f 0300 	mov.w	r3, #0
 8002644:	f04f 0400 	mov.w	r4, #0
 8002648:	0154      	lsls	r4, r2, #5
 800264a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800264e:	014b      	lsls	r3, r1, #5
 8002650:	4619      	mov	r1, r3
 8002652:	4622      	mov	r2, r4
 8002654:	1b49      	subs	r1, r1, r5
 8002656:	eb62 0206 	sbc.w	r2, r2, r6
 800265a:	f04f 0300 	mov.w	r3, #0
 800265e:	f04f 0400 	mov.w	r4, #0
 8002662:	0194      	lsls	r4, r2, #6
 8002664:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002668:	018b      	lsls	r3, r1, #6
 800266a:	1a5b      	subs	r3, r3, r1
 800266c:	eb64 0402 	sbc.w	r4, r4, r2
 8002670:	f04f 0100 	mov.w	r1, #0
 8002674:	f04f 0200 	mov.w	r2, #0
 8002678:	00e2      	lsls	r2, r4, #3
 800267a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800267e:	00d9      	lsls	r1, r3, #3
 8002680:	460b      	mov	r3, r1
 8002682:	4614      	mov	r4, r2
 8002684:	195b      	adds	r3, r3, r5
 8002686:	eb44 0406 	adc.w	r4, r4, r6
 800268a:	f04f 0100 	mov.w	r1, #0
 800268e:	f04f 0200 	mov.w	r2, #0
 8002692:	02a2      	lsls	r2, r4, #10
 8002694:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002698:	0299      	lsls	r1, r3, #10
 800269a:	460b      	mov	r3, r1
 800269c:	4614      	mov	r4, r2
 800269e:	4618      	mov	r0, r3
 80026a0:	4621      	mov	r1, r4
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f04f 0400 	mov.w	r4, #0
 80026a8:	461a      	mov	r2, r3
 80026aa:	4623      	mov	r3, r4
 80026ac:	f7fd fd94 	bl	80001d8 <__aeabi_uldivmod>
 80026b0:	4603      	mov	r3, r0
 80026b2:	460c      	mov	r4, r1
 80026b4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80026b6:	4b0b      	ldr	r3, [pc, #44]	; (80026e4 <HAL_RCC_GetSysClockFreq+0x158>)
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	0c1b      	lsrs	r3, r3, #16
 80026bc:	f003 0303 	and.w	r3, r3, #3
 80026c0:	3301      	adds	r3, #1
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80026c6:	68fa      	ldr	r2, [r7, #12]
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ce:	60bb      	str	r3, [r7, #8]
      break;
 80026d0:	e002      	b.n	80026d8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026d2:	4b05      	ldr	r3, [pc, #20]	; (80026e8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80026d4:	60bb      	str	r3, [r7, #8]
      break;
 80026d6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026d8:	68bb      	ldr	r3, [r7, #8]
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3714      	adds	r7, #20
 80026de:	46bd      	mov	sp, r7
 80026e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026e2:	bf00      	nop
 80026e4:	40023800 	.word	0x40023800
 80026e8:	00f42400 	.word	0x00f42400
 80026ec:	017d7840 	.word	0x017d7840

080026f0 <__libc_init_array>:
 80026f0:	b570      	push	{r4, r5, r6, lr}
 80026f2:	4e0d      	ldr	r6, [pc, #52]	; (8002728 <__libc_init_array+0x38>)
 80026f4:	4c0d      	ldr	r4, [pc, #52]	; (800272c <__libc_init_array+0x3c>)
 80026f6:	1ba4      	subs	r4, r4, r6
 80026f8:	10a4      	asrs	r4, r4, #2
 80026fa:	2500      	movs	r5, #0
 80026fc:	42a5      	cmp	r5, r4
 80026fe:	d109      	bne.n	8002714 <__libc_init_array+0x24>
 8002700:	4e0b      	ldr	r6, [pc, #44]	; (8002730 <__libc_init_array+0x40>)
 8002702:	4c0c      	ldr	r4, [pc, #48]	; (8002734 <__libc_init_array+0x44>)
 8002704:	f000 f820 	bl	8002748 <_init>
 8002708:	1ba4      	subs	r4, r4, r6
 800270a:	10a4      	asrs	r4, r4, #2
 800270c:	2500      	movs	r5, #0
 800270e:	42a5      	cmp	r5, r4
 8002710:	d105      	bne.n	800271e <__libc_init_array+0x2e>
 8002712:	bd70      	pop	{r4, r5, r6, pc}
 8002714:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002718:	4798      	blx	r3
 800271a:	3501      	adds	r5, #1
 800271c:	e7ee      	b.n	80026fc <__libc_init_array+0xc>
 800271e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002722:	4798      	blx	r3
 8002724:	3501      	adds	r5, #1
 8002726:	e7f2      	b.n	800270e <__libc_init_array+0x1e>
 8002728:	08004348 	.word	0x08004348
 800272c:	08004348 	.word	0x08004348
 8002730:	08004348 	.word	0x08004348
 8002734:	0800434c 	.word	0x0800434c

08002738 <memset>:
 8002738:	4402      	add	r2, r0
 800273a:	4603      	mov	r3, r0
 800273c:	4293      	cmp	r3, r2
 800273e:	d100      	bne.n	8002742 <memset+0xa>
 8002740:	4770      	bx	lr
 8002742:	f803 1b01 	strb.w	r1, [r3], #1
 8002746:	e7f9      	b.n	800273c <memset+0x4>

08002748 <_init>:
 8002748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800274a:	bf00      	nop
 800274c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800274e:	bc08      	pop	{r3}
 8002750:	469e      	mov	lr, r3
 8002752:	4770      	bx	lr

08002754 <_fini>:
 8002754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002756:	bf00      	nop
 8002758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800275a:	bc08      	pop	{r3}
 800275c:	469e      	mov	lr, r3
 800275e:	4770      	bx	lr
