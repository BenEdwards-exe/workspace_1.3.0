
Space Invaders.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bec  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00008dc4  08002d84  08002d84  00012d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bb48  0800bb48  00020260  2**0
                  CONTENTS
  4 .ARM          00000008  0800bb48  0800bb48  0001bb48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bb50  0800bb50  00020260  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bb50  0800bb50  0001bb50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bb54  0800bb54  0001bb54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000260  20000000  0800bb58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000032c  20000260  0800bdb8  00020260  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000058c  0800bdb8  0002058c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020260  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005005  00000000  00000000  00020290  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001011  00000000  00000000  00025295  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000478  00000000  00000000  000262a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000003e0  00000000  00000000  00026720  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001431c  00000000  00000000  00026b00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00004d34  00000000  00000000  0003ae1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007e77d  00000000  00000000  0003fb50  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000be2cd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001034  00000000  00000000  000be348  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000260 	.word	0x20000260
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002d6c 	.word	0x08002d6c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000264 	.word	0x20000264
 80001d4:	08002d6c 	.word	0x08002d6c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <displayIntroScreen>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void displayIntroScreen()
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b088      	sub	sp, #32
 80004dc:	af00      	add	r7, sp, #0

	// Intro Screen
	uint8_t* title_screen = (uint8_t*) Title_Screen;
 80004de:	4b2a      	ldr	r3, [pc, #168]	; (8000588 <displayIntroScreen+0xb0>)
 80004e0:	61fb      	str	r3, [r7, #28]
	uint8_t* screenptr = (uint8_t*) (0x20020000 + 40*320 + 37);
 80004e2:	4b2a      	ldr	r3, [pc, #168]	; (800058c <displayIntroScreen+0xb4>)
 80004e4:	61bb      	str	r3, [r7, #24]
	for (int i = 0; i < 31; ++i) {
 80004e6:	2300      	movs	r3, #0
 80004e8:	617b      	str	r3, [r7, #20]
 80004ea:	e016      	b.n	800051a <displayIntroScreen+0x42>
		for (int j = 0; j < 245; ++j) {
 80004ec:	2300      	movs	r3, #0
 80004ee:	613b      	str	r3, [r7, #16]
 80004f0:	e00a      	b.n	8000508 <displayIntroScreen+0x30>
			*screenptr++ = *title_screen++;
 80004f2:	69fa      	ldr	r2, [r7, #28]
 80004f4:	1c53      	adds	r3, r2, #1
 80004f6:	61fb      	str	r3, [r7, #28]
 80004f8:	69bb      	ldr	r3, [r7, #24]
 80004fa:	1c59      	adds	r1, r3, #1
 80004fc:	61b9      	str	r1, [r7, #24]
 80004fe:	7812      	ldrb	r2, [r2, #0]
 8000500:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 245; ++j) {
 8000502:	693b      	ldr	r3, [r7, #16]
 8000504:	3301      	adds	r3, #1
 8000506:	613b      	str	r3, [r7, #16]
 8000508:	693b      	ldr	r3, [r7, #16]
 800050a:	2bf4      	cmp	r3, #244	; 0xf4
 800050c:	ddf1      	ble.n	80004f2 <displayIntroScreen+0x1a>
		}
		screenptr += 75;
 800050e:	69bb      	ldr	r3, [r7, #24]
 8000510:	334b      	adds	r3, #75	; 0x4b
 8000512:	61bb      	str	r3, [r7, #24]
	for (int i = 0; i < 31; ++i) {
 8000514:	697b      	ldr	r3, [r7, #20]
 8000516:	3301      	adds	r3, #1
 8000518:	617b      	str	r3, [r7, #20]
 800051a:	697b      	ldr	r3, [r7, #20]
 800051c:	2b1e      	cmp	r3, #30
 800051e:	dde5      	ble.n	80004ec <displayIntroScreen+0x14>
	}
	uint8_t* title_instuction = (uint8_t*) Title_Instruction;
 8000520:	4b1b      	ldr	r3, [pc, #108]	; (8000590 <displayIntroScreen+0xb8>)
 8000522:	60fb      	str	r3, [r7, #12]
	screenptr = (uint8_t*) (0x20020000 + 100*320 + 64);
 8000524:	4b1b      	ldr	r3, [pc, #108]	; (8000594 <displayIntroScreen+0xbc>)
 8000526:	61bb      	str	r3, [r7, #24]
	for (int i = 0; i < 16; ++i) {
 8000528:	2300      	movs	r3, #0
 800052a:	60bb      	str	r3, [r7, #8]
 800052c:	e016      	b.n	800055c <displayIntroScreen+0x84>
		for (int j = 0; j < 191; ++j) {
 800052e:	2300      	movs	r3, #0
 8000530:	607b      	str	r3, [r7, #4]
 8000532:	e00a      	b.n	800054a <displayIntroScreen+0x72>
			*screenptr++ = *title_instuction++;
 8000534:	68fa      	ldr	r2, [r7, #12]
 8000536:	1c53      	adds	r3, r2, #1
 8000538:	60fb      	str	r3, [r7, #12]
 800053a:	69bb      	ldr	r3, [r7, #24]
 800053c:	1c59      	adds	r1, r3, #1
 800053e:	61b9      	str	r1, [r7, #24]
 8000540:	7812      	ldrb	r2, [r2, #0]
 8000542:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 191; ++j) {
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	3301      	adds	r3, #1
 8000548:	607b      	str	r3, [r7, #4]
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	2bbe      	cmp	r3, #190	; 0xbe
 800054e:	ddf1      	ble.n	8000534 <displayIntroScreen+0x5c>
		}
		screenptr += 129;
 8000550:	69bb      	ldr	r3, [r7, #24]
 8000552:	3381      	adds	r3, #129	; 0x81
 8000554:	61bb      	str	r3, [r7, #24]
	for (int i = 0; i < 16; ++i) {
 8000556:	68bb      	ldr	r3, [r7, #8]
 8000558:	3301      	adds	r3, #1
 800055a:	60bb      	str	r3, [r7, #8]
 800055c:	68bb      	ldr	r3, [r7, #8]
 800055e:	2b0f      	cmp	r3, #15
 8000560:	dde5      	ble.n	800052e <displayIntroScreen+0x56>
	}

	while (continue_input != 1);
 8000562:	bf00      	nop
 8000564:	4b0c      	ldr	r3, [pc, #48]	; (8000598 <displayIntroScreen+0xc0>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	b2db      	uxtb	r3, r3
 800056a:	2b01      	cmp	r3, #1
 800056c:	d1fa      	bne.n	8000564 <displayIntroScreen+0x8c>
	continue_input = 0;
 800056e:	4b0a      	ldr	r3, [pc, #40]	; (8000598 <displayIntroScreen+0xc0>)
 8000570:	2200      	movs	r2, #0
 8000572:	701a      	strb	r2, [r3, #0]

	gameStatus = RESET_LEVEL1;
 8000574:	4b09      	ldr	r3, [pc, #36]	; (800059c <displayIntroScreen+0xc4>)
 8000576:	2201      	movs	r2, #1
 8000578:	701a      	strb	r2, [r3, #0]
	clearscreen();
 800057a:	f000 f877 	bl	800066c <clearscreen>

	return;
 800057e:	bf00      	nop
}
 8000580:	3720      	adds	r7, #32
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	080065c4 	.word	0x080065c4
 800058c:	20023225 	.word	0x20023225
 8000590:	08008370 	.word	0x08008370
 8000594:	20027d40 	.word	0x20027d40
 8000598:	20000286 	.word	0x20000286
 800059c:	20000560 	.word	0x20000560

080005a0 <displayGameOver>:

void displayGameOver()
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b088      	sub	sp, #32
 80005a4:	af00      	add	r7, sp, #0
	clearscreen();
 80005a6:	f000 f861 	bl	800066c <clearscreen>

	uint8_t* screenptr = (uint8_t*) (0x20020000 + 40*320 + 38);
 80005aa:	4b2a      	ldr	r3, [pc, #168]	; (8000654 <displayGameOver+0xb4>)
 80005ac:	61fb      	str	r3, [r7, #28]
	uint8_t* game_over = (uint8_t*) Game_Over;
 80005ae:	4b2a      	ldr	r3, [pc, #168]	; (8000658 <displayGameOver+0xb8>)
 80005b0:	61bb      	str	r3, [r7, #24]


	for (int i = 0; i < 46; ++i) {
 80005b2:	2300      	movs	r3, #0
 80005b4:	617b      	str	r3, [r7, #20]
 80005b6:	e016      	b.n	80005e6 <displayGameOver+0x46>
		for (int j = 0; j < 244; ++j) {
 80005b8:	2300      	movs	r3, #0
 80005ba:	613b      	str	r3, [r7, #16]
 80005bc:	e00a      	b.n	80005d4 <displayGameOver+0x34>
			*screenptr++ = *game_over++;
 80005be:	69ba      	ldr	r2, [r7, #24]
 80005c0:	1c53      	adds	r3, r2, #1
 80005c2:	61bb      	str	r3, [r7, #24]
 80005c4:	69fb      	ldr	r3, [r7, #28]
 80005c6:	1c59      	adds	r1, r3, #1
 80005c8:	61f9      	str	r1, [r7, #28]
 80005ca:	7812      	ldrb	r2, [r2, #0]
 80005cc:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 244; ++j) {
 80005ce:	693b      	ldr	r3, [r7, #16]
 80005d0:	3301      	adds	r3, #1
 80005d2:	613b      	str	r3, [r7, #16]
 80005d4:	693b      	ldr	r3, [r7, #16]
 80005d6:	2bf3      	cmp	r3, #243	; 0xf3
 80005d8:	ddf1      	ble.n	80005be <displayGameOver+0x1e>
		}
		screenptr += 76;
 80005da:	69fb      	ldr	r3, [r7, #28]
 80005dc:	334c      	adds	r3, #76	; 0x4c
 80005de:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < 46; ++i) {
 80005e0:	697b      	ldr	r3, [r7, #20]
 80005e2:	3301      	adds	r3, #1
 80005e4:	617b      	str	r3, [r7, #20]
 80005e6:	697b      	ldr	r3, [r7, #20]
 80005e8:	2b2d      	cmp	r3, #45	; 0x2d
 80005ea:	dde5      	ble.n	80005b8 <displayGameOver+0x18>
	}

	uint8_t* title_instuction = (uint8_t*) Title_Instruction;
 80005ec:	4b1b      	ldr	r3, [pc, #108]	; (800065c <displayGameOver+0xbc>)
 80005ee:	60fb      	str	r3, [r7, #12]
	screenptr = (uint8_t*) (0x20020000 + 150*320 + 64);
 80005f0:	4b1b      	ldr	r3, [pc, #108]	; (8000660 <displayGameOver+0xc0>)
 80005f2:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < 16; ++i) {
 80005f4:	2300      	movs	r3, #0
 80005f6:	60bb      	str	r3, [r7, #8]
 80005f8:	e016      	b.n	8000628 <displayGameOver+0x88>
		for (int j = 0; j < 191; ++j) {
 80005fa:	2300      	movs	r3, #0
 80005fc:	607b      	str	r3, [r7, #4]
 80005fe:	e00a      	b.n	8000616 <displayGameOver+0x76>
			*screenptr++ = *title_instuction++;
 8000600:	68fa      	ldr	r2, [r7, #12]
 8000602:	1c53      	adds	r3, r2, #1
 8000604:	60fb      	str	r3, [r7, #12]
 8000606:	69fb      	ldr	r3, [r7, #28]
 8000608:	1c59      	adds	r1, r3, #1
 800060a:	61f9      	str	r1, [r7, #28]
 800060c:	7812      	ldrb	r2, [r2, #0]
 800060e:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 191; ++j) {
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	3301      	adds	r3, #1
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	2bbe      	cmp	r3, #190	; 0xbe
 800061a:	ddf1      	ble.n	8000600 <displayGameOver+0x60>
		}
		screenptr += 129;
 800061c:	69fb      	ldr	r3, [r7, #28]
 800061e:	3381      	adds	r3, #129	; 0x81
 8000620:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < 16; ++i) {
 8000622:	68bb      	ldr	r3, [r7, #8]
 8000624:	3301      	adds	r3, #1
 8000626:	60bb      	str	r3, [r7, #8]
 8000628:	68bb      	ldr	r3, [r7, #8]
 800062a:	2b0f      	cmp	r3, #15
 800062c:	dde5      	ble.n	80005fa <displayGameOver+0x5a>
	}

	while (continue_input != 1);
 800062e:	bf00      	nop
 8000630:	4b0c      	ldr	r3, [pc, #48]	; (8000664 <displayGameOver+0xc4>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	b2db      	uxtb	r3, r3
 8000636:	2b01      	cmp	r3, #1
 8000638:	d1fa      	bne.n	8000630 <displayGameOver+0x90>
	continue_input = 0;
 800063a:	4b0a      	ldr	r3, [pc, #40]	; (8000664 <displayGameOver+0xc4>)
 800063c:	2200      	movs	r2, #0
 800063e:	701a      	strb	r2, [r3, #0]

	gameStatus = RESET_LEVEL1;
 8000640:	4b09      	ldr	r3, [pc, #36]	; (8000668 <displayGameOver+0xc8>)
 8000642:	2201      	movs	r2, #1
 8000644:	701a      	strb	r2, [r3, #0]
	clearscreen();
 8000646:	f000 f811 	bl	800066c <clearscreen>

	return;
 800064a:	bf00      	nop
}
 800064c:	3720      	adds	r7, #32
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	20023226 	.word	0x20023226
 8000658:	08008f60 	.word	0x08008f60
 800065c:	08008370 	.word	0x08008370
 8000660:	2002bbc0 	.word	0x2002bbc0
 8000664:	20000286 	.word	0x20000286
 8000668:	20000560 	.word	0x20000560

0800066c <clearscreen>:

void clearscreen()
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b084      	sub	sp, #16
 8000670:	af00      	add	r7, sp, #0
	uint32_t* ptrscreen = (uint32_t*)0x20020000;
 8000672:	4b1c      	ldr	r3, [pc, #112]	; (80006e4 <clearscreen+0x78>)
 8000674:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 16000; ++i) {
 8000676:	2300      	movs	r3, #0
 8000678:	60bb      	str	r3, [r7, #8]
 800067a:	e007      	b.n	800068c <clearscreen+0x20>
		*ptrscreen++ = 0;
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	1d1a      	adds	r2, r3, #4
 8000680:	60fa      	str	r2, [r7, #12]
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 16000; ++i) {
 8000686:	68bb      	ldr	r3, [r7, #8]
 8000688:	3301      	adds	r3, #1
 800068a:	60bb      	str	r3, [r7, #8]
 800068c:	68bb      	ldr	r3, [r7, #8]
 800068e:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8000692:	dbf3      	blt.n	800067c <clearscreen+0x10>
	}


	// copy title sprite
	uint32_t* titleptr = (uint32_t*)title;
 8000694:	4b14      	ldr	r3, [pc, #80]	; (80006e8 <clearscreen+0x7c>)
 8000696:	607b      	str	r3, [r7, #4]
	ptrscreen = (uint32_t*)0x20020000;
 8000698:	4b12      	ldr	r3, [pc, #72]	; (80006e4 <clearscreen+0x78>)
 800069a:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 1600; i++)
 800069c:	2300      	movs	r3, #0
 800069e:	603b      	str	r3, [r7, #0]
 80006a0:	e00a      	b.n	80006b8 <clearscreen+0x4c>
	{
		*ptrscreen++ = *titleptr++;
 80006a2:	687a      	ldr	r2, [r7, #4]
 80006a4:	1d13      	adds	r3, r2, #4
 80006a6:	607b      	str	r3, [r7, #4]
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	1d19      	adds	r1, r3, #4
 80006ac:	60f9      	str	r1, [r7, #12]
 80006ae:	6812      	ldr	r2, [r2, #0]
 80006b0:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 1600; i++)
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	3301      	adds	r3, #1
 80006b6:	603b      	str	r3, [r7, #0]
 80006b8:	683b      	ldr	r3, [r7, #0]
 80006ba:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80006be:	dbf0      	blt.n	80006a2 <clearscreen+0x36>
	}

	displayint(highScore, (uint32_t*)(0x200204E0));
 80006c0:	4b0a      	ldr	r3, [pc, #40]	; (80006ec <clearscreen+0x80>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	b29b      	uxth	r3, r3
 80006c6:	490a      	ldr	r1, [pc, #40]	; (80006f0 <clearscreen+0x84>)
 80006c8:	4618      	mov	r0, r3
 80006ca:	f000 f817 	bl	80006fc <displayint>
	displayint(playerScore, (uint32_t*)(0x20020418));
 80006ce:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <clearscreen+0x88>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	b29b      	uxth	r3, r3
 80006d4:	4908      	ldr	r1, [pc, #32]	; (80006f8 <clearscreen+0x8c>)
 80006d6:	4618      	mov	r0, r3
 80006d8:	f000 f810 	bl	80006fc <displayint>

	return;
 80006dc:	bf00      	nop
}
 80006de:	3710      	adds	r7, #16
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	20020000 	.word	0x20020000
 80006e8:	08002df4 	.word	0x08002df4
 80006ec:	2000027c 	.word	0x2000027c
 80006f0:	200204e0 	.word	0x200204e0
 80006f4:	20000280 	.word	0x20000280
 80006f8:	20020418 	.word	0x20020418

080006fc <displayint>:

void displayint(uint16_t val, uint32_t* screenptr)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b089      	sub	sp, #36	; 0x24
 8000700:	af00      	add	r7, sp, #0
 8000702:	4603      	mov	r3, r0
 8000704:	6039      	str	r1, [r7, #0]
 8000706:	80fb      	strh	r3, [r7, #6]
	uint8_t digit = 0;
 8000708:	2300      	movs	r3, #0
 800070a:	72fb      	strb	r3, [r7, #11]
	uint32_t* digitptr;
	uint32_t* scrcopyptr;
	for (int i = 0; i < 5; i++)
 800070c:	2300      	movs	r3, #0
 800070e:	617b      	str	r3, [r7, #20]
 8000710:	e040      	b.n	8000794 <displayint+0x98>
	{
		digit = val % 10;
 8000712:	88fa      	ldrh	r2, [r7, #6]
 8000714:	4b24      	ldr	r3, [pc, #144]	; (80007a8 <displayint+0xac>)
 8000716:	fba3 1302 	umull	r1, r3, r3, r2
 800071a:	08d9      	lsrs	r1, r3, #3
 800071c:	460b      	mov	r3, r1
 800071e:	009b      	lsls	r3, r3, #2
 8000720:	440b      	add	r3, r1
 8000722:	005b      	lsls	r3, r3, #1
 8000724:	1ad3      	subs	r3, r2, r3
 8000726:	b29b      	uxth	r3, r3
 8000728:	72fb      	strb	r3, [r7, #11]
		val /= 10;
 800072a:	88fb      	ldrh	r3, [r7, #6]
 800072c:	4a1e      	ldr	r2, [pc, #120]	; (80007a8 <displayint+0xac>)
 800072e:	fba2 2303 	umull	r2, r3, r2, r3
 8000732:	08db      	lsrs	r3, r3, #3
 8000734:	80fb      	strh	r3, [r7, #6]

		scrcopyptr = screenptr;
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	61bb      	str	r3, [r7, #24]
		digitptr = (uint32_t*)(digits + (digit << 3));
 800073a:	7afb      	ldrb	r3, [r7, #11]
 800073c:	00db      	lsls	r3, r3, #3
 800073e:	461a      	mov	r2, r3
 8000740:	4b1a      	ldr	r3, [pc, #104]	; (80007ac <displayint+0xb0>)
 8000742:	4413      	add	r3, r2
 8000744:	61fb      	str	r3, [r7, #28]
		for (int i = 0; i < 9; i++)
 8000746:	2300      	movs	r3, #0
 8000748:	613b      	str	r3, [r7, #16]
 800074a:	e01a      	b.n	8000782 <displayint+0x86>
		{
			for (int j = 0; j < 2; j++)
 800074c:	2300      	movs	r3, #0
 800074e:	60fb      	str	r3, [r7, #12]
 8000750:	e00a      	b.n	8000768 <displayint+0x6c>
			{
				*scrcopyptr++ = *digitptr++;
 8000752:	69fa      	ldr	r2, [r7, #28]
 8000754:	1d13      	adds	r3, r2, #4
 8000756:	61fb      	str	r3, [r7, #28]
 8000758:	69bb      	ldr	r3, [r7, #24]
 800075a:	1d19      	adds	r1, r3, #4
 800075c:	61b9      	str	r1, [r7, #24]
 800075e:	6812      	ldr	r2, [r2, #0]
 8000760:	601a      	str	r2, [r3, #0]
			for (int j = 0; j < 2; j++)
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	3301      	adds	r3, #1
 8000766:	60fb      	str	r3, [r7, #12]
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	2b01      	cmp	r3, #1
 800076c:	ddf1      	ble.n	8000752 <displayint+0x56>
			}
			digitptr += 18;
 800076e:	69fb      	ldr	r3, [r7, #28]
 8000770:	3348      	adds	r3, #72	; 0x48
 8000772:	61fb      	str	r3, [r7, #28]
			scrcopyptr += 78;
 8000774:	69bb      	ldr	r3, [r7, #24]
 8000776:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800077a:	61bb      	str	r3, [r7, #24]
		for (int i = 0; i < 9; i++)
 800077c:	693b      	ldr	r3, [r7, #16]
 800077e:	3301      	adds	r3, #1
 8000780:	613b      	str	r3, [r7, #16]
 8000782:	693b      	ldr	r3, [r7, #16]
 8000784:	2b08      	cmp	r3, #8
 8000786:	dde1      	ble.n	800074c <displayint+0x50>

		}
		screenptr -= 2;
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	3b08      	subs	r3, #8
 800078c:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < 5; i++)
 800078e:	697b      	ldr	r3, [r7, #20]
 8000790:	3301      	adds	r3, #1
 8000792:	617b      	str	r3, [r7, #20]
 8000794:	697b      	ldr	r3, [r7, #20]
 8000796:	2b04      	cmp	r3, #4
 8000798:	ddbb      	ble.n	8000712 <displayint+0x16>
	}
}
 800079a:	bf00      	nop
 800079c:	3724      	adds	r7, #36	; 0x24
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	cccccccd 	.word	0xcccccccd
 80007ac:	080046f4 	.word	0x080046f4

080007b0 <updatescreen>:

void updatescreen()
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b0a0      	sub	sp, #128	; 0x80
 80007b4:	af00      	add	r7, sp, #0
	uint8_t* ptrscreen;

	// Erase Previous Ship
	ptrscreen = (uint8_t*)(0x20020000 + ship_py*320 + ship_px);
 80007b6:	4baa      	ldr	r3, [pc, #680]	; (8000a60 <updatescreen+0x2b0>)
 80007b8:	681a      	ldr	r2, [r3, #0]
 80007ba:	4613      	mov	r3, r2
 80007bc:	009b      	lsls	r3, r3, #2
 80007be:	4413      	add	r3, r2
 80007c0:	019b      	lsls	r3, r3, #6
 80007c2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80007c6:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80007ca:	4aa6      	ldr	r2, [pc, #664]	; (8000a64 <updatescreen+0x2b4>)
 80007cc:	6812      	ldr	r2, [r2, #0]
 80007ce:	4413      	add	r3, r2
 80007d0:	67fb      	str	r3, [r7, #124]	; 0x7c
	for (int i = 0; i < 8; i++) {
 80007d2:	2300      	movs	r3, #0
 80007d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80007d6:	e014      	b.n	8000802 <updatescreen+0x52>
		for (int j = 0; j < 12; j++) {
 80007d8:	2300      	movs	r3, #0
 80007da:	677b      	str	r3, [r7, #116]	; 0x74
 80007dc:	e007      	b.n	80007ee <updatescreen+0x3e>
			*ptrscreen++ = 0;
 80007de:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80007e0:	1c5a      	adds	r2, r3, #1
 80007e2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80007e4:	2200      	movs	r2, #0
 80007e6:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 12; j++) {
 80007e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80007ea:	3301      	adds	r3, #1
 80007ec:	677b      	str	r3, [r7, #116]	; 0x74
 80007ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80007f0:	2b0b      	cmp	r3, #11
 80007f2:	ddf4      	ble.n	80007de <updatescreen+0x2e>
		}
		ptrscreen += 308;
 80007f4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80007f6:	f503 739a 	add.w	r3, r3, #308	; 0x134
 80007fa:	67fb      	str	r3, [r7, #124]	; 0x7c
	for (int i = 0; i < 8; i++) {
 80007fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80007fe:	3301      	adds	r3, #1
 8000800:	67bb      	str	r3, [r7, #120]	; 0x78
 8000802:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000804:	2b07      	cmp	r3, #7
 8000806:	dde7      	ble.n	80007d8 <updatescreen+0x28>
	}

	// Draw New Ship
	ptrscreen = (uint8_t*)(0x20020000 + ship_y*320 + ship_x);
 8000808:	4b97      	ldr	r3, [pc, #604]	; (8000a68 <updatescreen+0x2b8>)
 800080a:	681a      	ldr	r2, [r3, #0]
 800080c:	4613      	mov	r3, r2
 800080e:	009b      	lsls	r3, r3, #2
 8000810:	4413      	add	r3, r2
 8000812:	019b      	lsls	r3, r3, #6
 8000814:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8000818:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800081c:	4a93      	ldr	r2, [pc, #588]	; (8000a6c <updatescreen+0x2bc>)
 800081e:	6812      	ldr	r2, [r2, #0]
 8000820:	4413      	add	r3, r2
 8000822:	67fb      	str	r3, [r7, #124]	; 0x7c
	uint8_t* ptrsrc = Ship;
 8000824:	4b92      	ldr	r3, [pc, #584]	; (8000a70 <updatescreen+0x2c0>)
 8000826:	673b      	str	r3, [r7, #112]	; 0x70
	for (int i = 0; i < 8; i++) {
 8000828:	2300      	movs	r3, #0
 800082a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800082c:	e017      	b.n	800085e <updatescreen+0xae>
		for (int j = 0; j < 12; j++) {
 800082e:	2300      	movs	r3, #0
 8000830:	66bb      	str	r3, [r7, #104]	; 0x68
 8000832:	e00a      	b.n	800084a <updatescreen+0x9a>
			*ptrscreen++ = *ptrsrc++;
 8000834:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000836:	1c53      	adds	r3, r2, #1
 8000838:	673b      	str	r3, [r7, #112]	; 0x70
 800083a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800083c:	1c59      	adds	r1, r3, #1
 800083e:	67f9      	str	r1, [r7, #124]	; 0x7c
 8000840:	7812      	ldrb	r2, [r2, #0]
 8000842:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 12; j++) {
 8000844:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000846:	3301      	adds	r3, #1
 8000848:	66bb      	str	r3, [r7, #104]	; 0x68
 800084a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800084c:	2b0b      	cmp	r3, #11
 800084e:	ddf1      	ble.n	8000834 <updatescreen+0x84>
		}
		ptrscreen += 308;
 8000850:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000852:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8000856:	67fb      	str	r3, [r7, #124]	; 0x7c
	for (int i = 0; i < 8; i++) {
 8000858:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800085a:	3301      	adds	r3, #1
 800085c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800085e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000860:	2b07      	cmp	r3, #7
 8000862:	dde4      	ble.n	800082e <updatescreen+0x7e>
	}

	// Erase broken barriers
	for (int barrier_index = 0; barrier_index < 3; ++barrier_index) {
 8000864:	2300      	movs	r3, #0
 8000866:	667b      	str	r3, [r7, #100]	; 0x64
 8000868:	e035      	b.n	80008d6 <updatescreen+0x126>
		if (barrier_health[barrier_index] == 0) {
 800086a:	4a82      	ldr	r2, [pc, #520]	; (8000a74 <updatescreen+0x2c4>)
 800086c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800086e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d12c      	bne.n	80008d0 <updatescreen+0x120>
			ptrscreen = (uint8_t*) (0x20020000 + barrier_y_pos[barrier_index]*320 + barrier_x_pos[barrier_index]);
 8000876:	4a80      	ldr	r2, [pc, #512]	; (8000a78 <updatescreen+0x2c8>)
 8000878:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800087a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800087e:	4613      	mov	r3, r2
 8000880:	009b      	lsls	r3, r3, #2
 8000882:	4413      	add	r3, r2
 8000884:	019b      	lsls	r3, r3, #6
 8000886:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800088a:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800088e:	497b      	ldr	r1, [pc, #492]	; (8000a7c <updatescreen+0x2cc>)
 8000890:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000892:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000896:	4413      	add	r3, r2
 8000898:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (int i = 0; i < 5; ++i) {
 800089a:	2300      	movs	r3, #0
 800089c:	663b      	str	r3, [r7, #96]	; 0x60
 800089e:	e014      	b.n	80008ca <updatescreen+0x11a>
				for (int j = 0; j < 12; ++j) {
 80008a0:	2300      	movs	r3, #0
 80008a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80008a4:	e007      	b.n	80008b6 <updatescreen+0x106>
					*ptrscreen++ = 0;
 80008a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80008a8:	1c5a      	adds	r2, r3, #1
 80008aa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80008ac:	2200      	movs	r2, #0
 80008ae:	701a      	strb	r2, [r3, #0]
				for (int j = 0; j < 12; ++j) {
 80008b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80008b2:	3301      	adds	r3, #1
 80008b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80008b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80008b8:	2b0b      	cmp	r3, #11
 80008ba:	ddf4      	ble.n	80008a6 <updatescreen+0xf6>
				}
				ptrscreen += 308;
 80008bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80008be:	f503 739a 	add.w	r3, r3, #308	; 0x134
 80008c2:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (int i = 0; i < 5; ++i) {
 80008c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80008c6:	3301      	adds	r3, #1
 80008c8:	663b      	str	r3, [r7, #96]	; 0x60
 80008ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80008cc:	2b04      	cmp	r3, #4
 80008ce:	dde7      	ble.n	80008a0 <updatescreen+0xf0>
	for (int barrier_index = 0; barrier_index < 3; ++barrier_index) {
 80008d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80008d2:	3301      	adds	r3, #1
 80008d4:	667b      	str	r3, [r7, #100]	; 0x64
 80008d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80008d8:	2b02      	cmp	r3, #2
 80008da:	ddc6      	ble.n	800086a <updatescreen+0xba>
		}

	}

	// Draw Barriers
	for (int barrier_index = 0; barrier_index < 3; ++barrier_index) {
 80008dc:	2300      	movs	r3, #0
 80008de:	65bb      	str	r3, [r7, #88]	; 0x58
 80008e0:	e03a      	b.n	8000958 <updatescreen+0x1a8>
		if (barrier_health[barrier_index] > 0) {
 80008e2:	4a64      	ldr	r2, [pc, #400]	; (8000a74 <updatescreen+0x2c4>)
 80008e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80008e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	dd31      	ble.n	8000952 <updatescreen+0x1a2>
			ptrscreen = (uint8_t*) (0x20020000 + barrier_y_pos[barrier_index]*320 + barrier_x_pos[barrier_index]);
 80008ee:	4a62      	ldr	r2, [pc, #392]	; (8000a78 <updatescreen+0x2c8>)
 80008f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80008f2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80008f6:	4613      	mov	r3, r2
 80008f8:	009b      	lsls	r3, r3, #2
 80008fa:	4413      	add	r3, r2
 80008fc:	019b      	lsls	r3, r3, #6
 80008fe:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8000902:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000906:	495d      	ldr	r1, [pc, #372]	; (8000a7c <updatescreen+0x2cc>)
 8000908:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800090a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800090e:	4413      	add	r3, r2
 8000910:	67fb      	str	r3, [r7, #124]	; 0x7c
			ptrsrc = (uint8_t*) Barrier;
 8000912:	4b5b      	ldr	r3, [pc, #364]	; (8000a80 <updatescreen+0x2d0>)
 8000914:	673b      	str	r3, [r7, #112]	; 0x70
			for (int i = 0; i < 5; ++i) {
 8000916:	2300      	movs	r3, #0
 8000918:	657b      	str	r3, [r7, #84]	; 0x54
 800091a:	e017      	b.n	800094c <updatescreen+0x19c>
				for (int j = 0; j < 22; ++j) {
 800091c:	2300      	movs	r3, #0
 800091e:	653b      	str	r3, [r7, #80]	; 0x50
 8000920:	e00a      	b.n	8000938 <updatescreen+0x188>
					*ptrscreen++ = *ptrsrc++;
 8000922:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000924:	1c53      	adds	r3, r2, #1
 8000926:	673b      	str	r3, [r7, #112]	; 0x70
 8000928:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800092a:	1c59      	adds	r1, r3, #1
 800092c:	67f9      	str	r1, [r7, #124]	; 0x7c
 800092e:	7812      	ldrb	r2, [r2, #0]
 8000930:	701a      	strb	r2, [r3, #0]
				for (int j = 0; j < 22; ++j) {
 8000932:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000934:	3301      	adds	r3, #1
 8000936:	653b      	str	r3, [r7, #80]	; 0x50
 8000938:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800093a:	2b15      	cmp	r3, #21
 800093c:	ddf1      	ble.n	8000922 <updatescreen+0x172>
				}
				ptrscreen += 298;
 800093e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000940:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8000944:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (int i = 0; i < 5; ++i) {
 8000946:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000948:	3301      	adds	r3, #1
 800094a:	657b      	str	r3, [r7, #84]	; 0x54
 800094c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800094e:	2b04      	cmp	r3, #4
 8000950:	dde4      	ble.n	800091c <updatescreen+0x16c>
	for (int barrier_index = 0; barrier_index < 3; ++barrier_index) {
 8000952:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000954:	3301      	adds	r3, #1
 8000956:	65bb      	str	r3, [r7, #88]	; 0x58
 8000958:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800095a:	2b02      	cmp	r3, #2
 800095c:	ddc1      	ble.n	80008e2 <updatescreen+0x132>

	}


	// Erase Previous Invader 1 Positions
	for (int row = 0; row < 4; row++) {
 800095e:	2300      	movs	r3, #0
 8000960:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000962:	e044      	b.n	80009ee <updatescreen+0x23e>
		for (int col = 0; col < 6; col++) {
 8000964:	2300      	movs	r3, #0
 8000966:	64bb      	str	r3, [r7, #72]	; 0x48
 8000968:	e03b      	b.n	80009e2 <updatescreen+0x232>
				ptrscreen = (uint8_t*)(0x20020000 +invader1_prev_ypos[row][col]*320 + invader1_prev_xpos[row][col]);
 800096a:	4946      	ldr	r1, [pc, #280]	; (8000a84 <updatescreen+0x2d4>)
 800096c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800096e:	4613      	mov	r3, r2
 8000970:	005b      	lsls	r3, r3, #1
 8000972:	4413      	add	r3, r2
 8000974:	005b      	lsls	r3, r3, #1
 8000976:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000978:	4413      	add	r3, r2
 800097a:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 800097e:	4613      	mov	r3, r2
 8000980:	009b      	lsls	r3, r3, #2
 8000982:	4413      	add	r3, r2
 8000984:	019b      	lsls	r3, r3, #6
 8000986:	f103 5200 	add.w	r2, r3, #536870912	; 0x20000000
 800098a:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
 800098e:	483e      	ldr	r0, [pc, #248]	; (8000a88 <updatescreen+0x2d8>)
 8000990:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8000992:	460b      	mov	r3, r1
 8000994:	005b      	lsls	r3, r3, #1
 8000996:	440b      	add	r3, r1
 8000998:	005b      	lsls	r3, r3, #1
 800099a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800099c:	440b      	add	r3, r1
 800099e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80009a2:	4413      	add	r3, r2
 80009a4:	67fb      	str	r3, [r7, #124]	; 0x7c
				for (int i = 0; i < 8; i++) {
 80009a6:	2300      	movs	r3, #0
 80009a8:	647b      	str	r3, [r7, #68]	; 0x44
 80009aa:	e014      	b.n	80009d6 <updatescreen+0x226>
					for (int j = 0; j < 22; j++) {
 80009ac:	2300      	movs	r3, #0
 80009ae:	643b      	str	r3, [r7, #64]	; 0x40
 80009b0:	e007      	b.n	80009c2 <updatescreen+0x212>
						*ptrscreen++ = 0;
 80009b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80009b4:	1c5a      	adds	r2, r3, #1
 80009b6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80009b8:	2200      	movs	r2, #0
 80009ba:	701a      	strb	r2, [r3, #0]
					for (int j = 0; j < 22; j++) {
 80009bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80009be:	3301      	adds	r3, #1
 80009c0:	643b      	str	r3, [r7, #64]	; 0x40
 80009c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80009c4:	2b15      	cmp	r3, #21
 80009c6:	ddf4      	ble.n	80009b2 <updatescreen+0x202>
					}
					ptrscreen += 298;
 80009c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80009ca:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 80009ce:	67fb      	str	r3, [r7, #124]	; 0x7c
				for (int i = 0; i < 8; i++) {
 80009d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80009d2:	3301      	adds	r3, #1
 80009d4:	647b      	str	r3, [r7, #68]	; 0x44
 80009d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80009d8:	2b07      	cmp	r3, #7
 80009da:	dde7      	ble.n	80009ac <updatescreen+0x1fc>
		for (int col = 0; col < 6; col++) {
 80009dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80009de:	3301      	adds	r3, #1
 80009e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80009e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80009e4:	2b05      	cmp	r3, #5
 80009e6:	ddc0      	ble.n	800096a <updatescreen+0x1ba>
	for (int row = 0; row < 4; row++) {
 80009e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80009ea:	3301      	adds	r3, #1
 80009ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80009ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80009f0:	2b03      	cmp	r3, #3
 80009f2:	ddb7      	ble.n	8000964 <updatescreen+0x1b4>
		}
	}


	// Draw New Invader 1 Positions
	for (int row = 0; row < 4; row++) {
 80009f4:	2300      	movs	r3, #0
 80009f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80009f8:	e074      	b.n	8000ae4 <updatescreen+0x334>
		for (int col = 0; col < 6; col++) {
 80009fa:	2300      	movs	r3, #0
 80009fc:	63bb      	str	r3, [r7, #56]	; 0x38
 80009fe:	e06b      	b.n	8000ad8 <updatescreen+0x328>
			if (invader1_status[row][col] == 1) {
 8000a00:	4922      	ldr	r1, [pc, #136]	; (8000a8c <updatescreen+0x2dc>)
 8000a02:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000a04:	4613      	mov	r3, r2
 8000a06:	005b      	lsls	r3, r3, #1
 8000a08:	4413      	add	r3, r2
 8000a0a:	005b      	lsls	r3, r3, #1
 8000a0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000a0e:	4413      	add	r3, r2
 8000a10:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a14:	2b01      	cmp	r3, #1
 8000a16:	d15c      	bne.n	8000ad2 <updatescreen+0x322>
				ptrscreen = (uint8_t*)(0x20020000 +invader1_ypos[row][col]*320 + invader1_xpos[row][col]);
 8000a18:	491d      	ldr	r1, [pc, #116]	; (8000a90 <updatescreen+0x2e0>)
 8000a1a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000a1c:	4613      	mov	r3, r2
 8000a1e:	005b      	lsls	r3, r3, #1
 8000a20:	4413      	add	r3, r2
 8000a22:	005b      	lsls	r3, r3, #1
 8000a24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000a26:	4413      	add	r3, r2
 8000a28:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8000a2c:	4613      	mov	r3, r2
 8000a2e:	009b      	lsls	r3, r3, #2
 8000a30:	4413      	add	r3, r2
 8000a32:	019b      	lsls	r3, r3, #6
 8000a34:	f103 5200 	add.w	r2, r3, #536870912	; 0x20000000
 8000a38:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
 8000a3c:	4815      	ldr	r0, [pc, #84]	; (8000a94 <updatescreen+0x2e4>)
 8000a3e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000a40:	460b      	mov	r3, r1
 8000a42:	005b      	lsls	r3, r3, #1
 8000a44:	440b      	add	r3, r1
 8000a46:	005b      	lsls	r3, r3, #1
 8000a48:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000a4a:	440b      	add	r3, r1
 8000a4c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000a50:	4413      	add	r3, r2
 8000a52:	67fb      	str	r3, [r7, #124]	; 0x7c
				ptrsrc = Invader1;
 8000a54:	4b10      	ldr	r3, [pc, #64]	; (8000a98 <updatescreen+0x2e8>)
 8000a56:	673b      	str	r3, [r7, #112]	; 0x70
				for (int i = 0; i < 8; i++) {
 8000a58:	2300      	movs	r3, #0
 8000a5a:	637b      	str	r3, [r7, #52]	; 0x34
 8000a5c:	e036      	b.n	8000acc <updatescreen+0x31c>
 8000a5e:	bf00      	nop
 8000a60:	2000028c 	.word	0x2000028c
 8000a64:	20000538 	.word	0x20000538
 8000a68:	20000288 	.word	0x20000288
 8000a6c:	20000534 	.word	0x20000534
 8000a70:	20000060 	.word	0x20000060
 8000a74:	200002b4 	.word	0x200002b4
 8000a78:	200002a8 	.word	0x200002a8
 8000a7c:	2000029c 	.word	0x2000029c
 8000a80:	08002d84 	.word	0x08002d84
 8000a84:	200003e0 	.word	0x200003e0
 8000a88:	20000380 	.word	0x20000380
 8000a8c:	20000440 	.word	0x20000440
 8000a90:	20000320 	.word	0x20000320
 8000a94:	200002c0 	.word	0x200002c0
 8000a98:	20000000 	.word	0x20000000
					for (int j = 0; j < 12; j++) {
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	633b      	str	r3, [r7, #48]	; 0x30
 8000aa0:	e00a      	b.n	8000ab8 <updatescreen+0x308>
						*ptrscreen++ = *ptrsrc++;
 8000aa2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000aa4:	1c53      	adds	r3, r2, #1
 8000aa6:	673b      	str	r3, [r7, #112]	; 0x70
 8000aa8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000aaa:	1c59      	adds	r1, r3, #1
 8000aac:	67f9      	str	r1, [r7, #124]	; 0x7c
 8000aae:	7812      	ldrb	r2, [r2, #0]
 8000ab0:	701a      	strb	r2, [r3, #0]
					for (int j = 0; j < 12; j++) {
 8000ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	633b      	str	r3, [r7, #48]	; 0x30
 8000ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000aba:	2b0b      	cmp	r3, #11
 8000abc:	ddf1      	ble.n	8000aa2 <updatescreen+0x2f2>
					}
					ptrscreen += 308;
 8000abe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000ac0:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8000ac4:	67fb      	str	r3, [r7, #124]	; 0x7c
				for (int i = 0; i < 8; i++) {
 8000ac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ac8:	3301      	adds	r3, #1
 8000aca:	637b      	str	r3, [r7, #52]	; 0x34
 8000acc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ace:	2b07      	cmp	r3, #7
 8000ad0:	dde4      	ble.n	8000a9c <updatescreen+0x2ec>
		for (int col = 0; col < 6; col++) {
 8000ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	63bb      	str	r3, [r7, #56]	; 0x38
 8000ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ada:	2b05      	cmp	r3, #5
 8000adc:	dd90      	ble.n	8000a00 <updatescreen+0x250>
	for (int row = 0; row < 4; row++) {
 8000ade:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000ae4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ae6:	2b03      	cmp	r3, #3
 8000ae8:	dd87      	ble.n	80009fa <updatescreen+0x24a>
			}
		}
	}

	// Erase Previous Player Missile Positions
	for (int missile_index = 0; missile_index < 3; ++missile_index) {
 8000aea:	2300      	movs	r3, #0
 8000aec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000aee:	e02f      	b.n	8000b50 <updatescreen+0x3a0>
		ptrscreen = (uint8_t*)(0x20020000 + player_missile_prev_ypos[missile_index]*320 + player_missile_prev_xpos[missile_index]);
 8000af0:	4a7e      	ldr	r2, [pc, #504]	; (8000cec <updatescreen+0x53c>)
 8000af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000af4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000af8:	4613      	mov	r3, r2
 8000afa:	009b      	lsls	r3, r3, #2
 8000afc:	4413      	add	r3, r2
 8000afe:	019b      	lsls	r3, r3, #6
 8000b00:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8000b04:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000b08:	4979      	ldr	r1, [pc, #484]	; (8000cf0 <updatescreen+0x540>)
 8000b0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000b0c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000b10:	4413      	add	r3, r2
 8000b12:	67fb      	str	r3, [r7, #124]	; 0x7c
		for (int i = 0; i < 4; i++) {
 8000b14:	2300      	movs	r3, #0
 8000b16:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b18:	e014      	b.n	8000b44 <updatescreen+0x394>
			for (int j = 0; j < 1; j++) {
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	627b      	str	r3, [r7, #36]	; 0x24
 8000b1e:	e007      	b.n	8000b30 <updatescreen+0x380>
				*ptrscreen++ = 0;
 8000b20:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000b22:	1c5a      	adds	r2, r3, #1
 8000b24:	67fa      	str	r2, [r7, #124]	; 0x7c
 8000b26:	2200      	movs	r2, #0
 8000b28:	701a      	strb	r2, [r3, #0]
			for (int j = 0; j < 1; j++) {
 8000b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	627b      	str	r3, [r7, #36]	; 0x24
 8000b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	ddf4      	ble.n	8000b20 <updatescreen+0x370>
			}
			ptrscreen += 319;
 8000b36:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000b38:	f203 133f 	addw	r3, r3, #319	; 0x13f
 8000b3c:	67fb      	str	r3, [r7, #124]	; 0x7c
		for (int i = 0; i < 4; i++) {
 8000b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b40:	3301      	adds	r3, #1
 8000b42:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b46:	2b03      	cmp	r3, #3
 8000b48:	dde7      	ble.n	8000b1a <updatescreen+0x36a>
	for (int missile_index = 0; missile_index < 3; ++missile_index) {
 8000b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b52:	2b02      	cmp	r3, #2
 8000b54:	ddcc      	ble.n	8000af0 <updatescreen+0x340>
		}
	}

	// Display Player Missile
	for (int m = 0; m < 3; ++m) {
 8000b56:	2300      	movs	r3, #0
 8000b58:	623b      	str	r3, [r7, #32]
 8000b5a:	e03a      	b.n	8000bd2 <updatescreen+0x422>
		if (player_missile_status[m] == 1) {
 8000b5c:	4a65      	ldr	r2, [pc, #404]	; (8000cf4 <updatescreen+0x544>)
 8000b5e:	6a3b      	ldr	r3, [r7, #32]
 8000b60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b64:	2b01      	cmp	r3, #1
 8000b66:	d131      	bne.n	8000bcc <updatescreen+0x41c>
			ptrscreen = (uint8_t*)(0x20020000 + player_missile_ypos[m]*320 + player_missile_xpos[m]);
 8000b68:	4a63      	ldr	r2, [pc, #396]	; (8000cf8 <updatescreen+0x548>)
 8000b6a:	6a3b      	ldr	r3, [r7, #32]
 8000b6c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b70:	4613      	mov	r3, r2
 8000b72:	009b      	lsls	r3, r3, #2
 8000b74:	4413      	add	r3, r2
 8000b76:	019b      	lsls	r3, r3, #6
 8000b78:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8000b7c:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000b80:	495e      	ldr	r1, [pc, #376]	; (8000cfc <updatescreen+0x54c>)
 8000b82:	6a3a      	ldr	r2, [r7, #32]
 8000b84:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000b88:	4413      	add	r3, r2
 8000b8a:	67fb      	str	r3, [r7, #124]	; 0x7c
			ptrsrc = Missile;
 8000b8c:	4b5c      	ldr	r3, [pc, #368]	; (8000d00 <updatescreen+0x550>)
 8000b8e:	673b      	str	r3, [r7, #112]	; 0x70
			for (int i = 0; i < 4; ++i) {
 8000b90:	2300      	movs	r3, #0
 8000b92:	61fb      	str	r3, [r7, #28]
 8000b94:	e017      	b.n	8000bc6 <updatescreen+0x416>
				for (int j = 0; j < 1; ++j) {
 8000b96:	2300      	movs	r3, #0
 8000b98:	61bb      	str	r3, [r7, #24]
 8000b9a:	e00a      	b.n	8000bb2 <updatescreen+0x402>
					*ptrscreen++ = *ptrsrc++;
 8000b9c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000b9e:	1c53      	adds	r3, r2, #1
 8000ba0:	673b      	str	r3, [r7, #112]	; 0x70
 8000ba2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000ba4:	1c59      	adds	r1, r3, #1
 8000ba6:	67f9      	str	r1, [r7, #124]	; 0x7c
 8000ba8:	7812      	ldrb	r2, [r2, #0]
 8000baa:	701a      	strb	r2, [r3, #0]
				for (int j = 0; j < 1; ++j) {
 8000bac:	69bb      	ldr	r3, [r7, #24]
 8000bae:	3301      	adds	r3, #1
 8000bb0:	61bb      	str	r3, [r7, #24]
 8000bb2:	69bb      	ldr	r3, [r7, #24]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	ddf1      	ble.n	8000b9c <updatescreen+0x3ec>
				}
				ptrscreen += 319;
 8000bb8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000bba:	f203 133f 	addw	r3, r3, #319	; 0x13f
 8000bbe:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (int i = 0; i < 4; ++i) {
 8000bc0:	69fb      	ldr	r3, [r7, #28]
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	61fb      	str	r3, [r7, #28]
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	2b03      	cmp	r3, #3
 8000bca:	dde4      	ble.n	8000b96 <updatescreen+0x3e6>
	for (int m = 0; m < 3; ++m) {
 8000bcc:	6a3b      	ldr	r3, [r7, #32]
 8000bce:	3301      	adds	r3, #1
 8000bd0:	623b      	str	r3, [r7, #32]
 8000bd2:	6a3b      	ldr	r3, [r7, #32]
 8000bd4:	2b02      	cmp	r3, #2
 8000bd6:	ddc1      	ble.n	8000b5c <updatescreen+0x3ac>
			}
		}
	}

	// Erase Previous Invader 1 Missile Positions
	for (int missile_index = 0; missile_index < 6; ++missile_index) {
 8000bd8:	2300      	movs	r3, #0
 8000bda:	617b      	str	r3, [r7, #20]
 8000bdc:	e035      	b.n	8000c4a <updatescreen+0x49a>
		if (invader1_missile_status[missile_index] == 1) {
 8000bde:	4a49      	ldr	r2, [pc, #292]	; (8000d04 <updatescreen+0x554>)
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	d12c      	bne.n	8000c44 <updatescreen+0x494>
			ptrscreen = (uint8_t*)(0x20020000 + invader1_missile_prev_ypos[missile_index]*320 + invader1_missile_prev_xpos[missile_index]);
 8000bea:	4a47      	ldr	r2, [pc, #284]	; (8000d08 <updatescreen+0x558>)
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000bf2:	4613      	mov	r3, r2
 8000bf4:	009b      	lsls	r3, r3, #2
 8000bf6:	4413      	add	r3, r2
 8000bf8:	019b      	lsls	r3, r3, #6
 8000bfa:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8000bfe:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000c02:	4942      	ldr	r1, [pc, #264]	; (8000d0c <updatescreen+0x55c>)
 8000c04:	697a      	ldr	r2, [r7, #20]
 8000c06:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000c0a:	4413      	add	r3, r2
 8000c0c:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (int i = 0; i < 4; ++i) {
 8000c0e:	2300      	movs	r3, #0
 8000c10:	613b      	str	r3, [r7, #16]
 8000c12:	e014      	b.n	8000c3e <updatescreen+0x48e>
				for (int j = 0; j < 1; ++j) {
 8000c14:	2300      	movs	r3, #0
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	e007      	b.n	8000c2a <updatescreen+0x47a>
					*ptrscreen++ = 0;
 8000c1a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000c1c:	1c5a      	adds	r2, r3, #1
 8000c1e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8000c20:	2200      	movs	r2, #0
 8000c22:	701a      	strb	r2, [r3, #0]
				for (int j = 0; j < 1; ++j) {
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	3301      	adds	r3, #1
 8000c28:	60fb      	str	r3, [r7, #12]
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	ddf4      	ble.n	8000c1a <updatescreen+0x46a>
				}
				ptrscreen += 319;
 8000c30:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000c32:	f203 133f 	addw	r3, r3, #319	; 0x13f
 8000c36:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (int i = 0; i < 4; ++i) {
 8000c38:	693b      	ldr	r3, [r7, #16]
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	613b      	str	r3, [r7, #16]
 8000c3e:	693b      	ldr	r3, [r7, #16]
 8000c40:	2b03      	cmp	r3, #3
 8000c42:	dde7      	ble.n	8000c14 <updatescreen+0x464>
	for (int missile_index = 0; missile_index < 6; ++missile_index) {
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	3301      	adds	r3, #1
 8000c48:	617b      	str	r3, [r7, #20]
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	2b05      	cmp	r3, #5
 8000c4e:	ddc6      	ble.n	8000bde <updatescreen+0x42e>
			}
		}
	}

	// Display Invader 1 Missile
	for (int missile_index = 0; missile_index < 6; ++missile_index) {
 8000c50:	2300      	movs	r3, #0
 8000c52:	60bb      	str	r3, [r7, #8]
 8000c54:	e03a      	b.n	8000ccc <updatescreen+0x51c>
		if (invader1_missile_status[missile_index] == 1) {
 8000c56:	4a2b      	ldr	r2, [pc, #172]	; (8000d04 <updatescreen+0x554>)
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c5e:	2b01      	cmp	r3, #1
 8000c60:	d131      	bne.n	8000cc6 <updatescreen+0x516>
			ptrscreen = (uint8_t*)(0x20020000 + invader1_missile_ypos[missile_index]*320 + invader1_missile_xpos[missile_index]);
 8000c62:	4a2b      	ldr	r2, [pc, #172]	; (8000d10 <updatescreen+0x560>)
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000c6a:	4613      	mov	r3, r2
 8000c6c:	009b      	lsls	r3, r3, #2
 8000c6e:	4413      	add	r3, r2
 8000c70:	019b      	lsls	r3, r3, #6
 8000c72:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8000c76:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000c7a:	4926      	ldr	r1, [pc, #152]	; (8000d14 <updatescreen+0x564>)
 8000c7c:	68ba      	ldr	r2, [r7, #8]
 8000c7e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000c82:	4413      	add	r3, r2
 8000c84:	67fb      	str	r3, [r7, #124]	; 0x7c
			ptrsrc = Missile;
 8000c86:	4b1e      	ldr	r3, [pc, #120]	; (8000d00 <updatescreen+0x550>)
 8000c88:	673b      	str	r3, [r7, #112]	; 0x70
			for (int i = 0; i < 4; ++i) {
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	607b      	str	r3, [r7, #4]
 8000c8e:	e017      	b.n	8000cc0 <updatescreen+0x510>
				for (int j = 0; j < 1; ++j) {
 8000c90:	2300      	movs	r3, #0
 8000c92:	603b      	str	r3, [r7, #0]
 8000c94:	e00a      	b.n	8000cac <updatescreen+0x4fc>
					*ptrscreen++ = *ptrsrc++;
 8000c96:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000c98:	1c53      	adds	r3, r2, #1
 8000c9a:	673b      	str	r3, [r7, #112]	; 0x70
 8000c9c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000c9e:	1c59      	adds	r1, r3, #1
 8000ca0:	67f9      	str	r1, [r7, #124]	; 0x7c
 8000ca2:	7812      	ldrb	r2, [r2, #0]
 8000ca4:	701a      	strb	r2, [r3, #0]
				for (int j = 0; j < 1; ++j) {
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	3301      	adds	r3, #1
 8000caa:	603b      	str	r3, [r7, #0]
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	ddf1      	ble.n	8000c96 <updatescreen+0x4e6>
				}
				ptrscreen += 319;
 8000cb2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000cb4:	f203 133f 	addw	r3, r3, #319	; 0x13f
 8000cb8:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (int i = 0; i < 4; ++i) {
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	607b      	str	r3, [r7, #4]
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2b03      	cmp	r3, #3
 8000cc4:	dde4      	ble.n	8000c90 <updatescreen+0x4e0>
	for (int missile_index = 0; missile_index < 6; ++missile_index) {
 8000cc6:	68bb      	ldr	r3, [r7, #8]
 8000cc8:	3301      	adds	r3, #1
 8000cca:	60bb      	str	r3, [r7, #8]
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	2b05      	cmp	r3, #5
 8000cd0:	ddc1      	ble.n	8000c56 <updatescreen+0x4a6>
			}
		}
	}

	// Display explosions
	explodeInvader1();
 8000cd2:	f000 fa17 	bl	8001104 <explodeInvader1>


	displayint(playerScore, (uint32_t*)(0x20020418));
 8000cd6:	4b10      	ldr	r3, [pc, #64]	; (8000d18 <updatescreen+0x568>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	b29b      	uxth	r3, r3
 8000cdc:	490f      	ldr	r1, [pc, #60]	; (8000d1c <updatescreen+0x56c>)
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f7ff fd0c 	bl	80006fc <displayint>
}
 8000ce4:	bf00      	nop
 8000ce6:	3780      	adds	r7, #128	; 0x80
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	20000554 	.word	0x20000554
 8000cf0:	20000528 	.word	0x20000528
 8000cf4:	20000290 	.word	0x20000290
 8000cf8:	2000051c 	.word	0x2000051c
 8000cfc:	20000564 	.word	0x20000564
 8000d00:	200000c0 	.word	0x200000c0
 8000d04:	200004a4 	.word	0x200004a4
 8000d08:	20000504 	.word	0x20000504
 8000d0c:	200004ec 	.word	0x200004ec
 8000d10:	2000053c 	.word	0x2000053c
 8000d14:	20000570 	.word	0x20000570
 8000d18:	20000280 	.word	0x20000280
 8000d1c:	20020418 	.word	0x20020418

08000d20 <updatePlayerMissileStatus>:

void updatePlayerMissileStatus(int missile_index)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b099      	sub	sp, #100	; 0x64
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
	int pos_x = player_missile_prev_xpos[missile_index];
 8000d28:	4aa9      	ldr	r2, [pc, #676]	; (8000fd0 <updatePlayerMissileStatus+0x2b0>)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d30:	61fb      	str	r3, [r7, #28]
	int pos_y = player_missile_prev_ypos[missile_index];
 8000d32:	4aa8      	ldr	r2, [pc, #672]	; (8000fd4 <updatePlayerMissileStatus+0x2b4>)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d3a:	61bb      	str	r3, [r7, #24]

	// Check if missile is out of bounds
	if (player_missile_ypos[missile_index] <= 15) {
 8000d3c:	4aa6      	ldr	r2, [pc, #664]	; (8000fd8 <updatePlayerMissileStatus+0x2b8>)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d44:	2b0f      	cmp	r3, #15
 8000d46:	dc2c      	bgt.n	8000da2 <updatePlayerMissileStatus+0x82>
		player_missile_status[missile_index] = 0;
 8000d48:	4aa4      	ldr	r2, [pc, #656]	; (8000fdc <updatePlayerMissileStatus+0x2bc>)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		uint8_t* ptrscreen = (uint8_t*)(0x20020000 + pos_y*320 + pos_x);
 8000d52:	69ba      	ldr	r2, [r7, #24]
 8000d54:	4613      	mov	r3, r2
 8000d56:	009b      	lsls	r3, r3, #2
 8000d58:	4413      	add	r3, r2
 8000d5a:	019b      	lsls	r3, r3, #6
 8000d5c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8000d60:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000d64:	69fa      	ldr	r2, [r7, #28]
 8000d66:	4413      	add	r3, r2
 8000d68:	65fb      	str	r3, [r7, #92]	; 0x5c
		for (int i = 0; i < 4; i++) {
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	65bb      	str	r3, [r7, #88]	; 0x58
 8000d6e:	e014      	b.n	8000d9a <updatePlayerMissileStatus+0x7a>
			for (int j = 0; j < 1; j++) {
 8000d70:	2300      	movs	r3, #0
 8000d72:	657b      	str	r3, [r7, #84]	; 0x54
 8000d74:	e007      	b.n	8000d86 <updatePlayerMissileStatus+0x66>
				*ptrscreen++ = 0;
 8000d76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d78:	1c5a      	adds	r2, r3, #1
 8000d7a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	701a      	strb	r2, [r3, #0]
			for (int j = 0; j < 1; j++) {
 8000d80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000d82:	3301      	adds	r3, #1
 8000d84:	657b      	str	r3, [r7, #84]	; 0x54
 8000d86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	ddf4      	ble.n	8000d76 <updatePlayerMissileStatus+0x56>
			}
			ptrscreen += 319;
 8000d8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d8e:	f203 133f 	addw	r3, r3, #319	; 0x13f
 8000d92:	65fb      	str	r3, [r7, #92]	; 0x5c
		for (int i = 0; i < 4; i++) {
 8000d94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000d96:	3301      	adds	r3, #1
 8000d98:	65bb      	str	r3, [r7, #88]	; 0x58
 8000d9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000d9c:	2b03      	cmp	r3, #3
 8000d9e:	dde7      	ble.n	8000d70 <updatePlayerMissileStatus+0x50>
		}
		return;
 8000da0:	e110      	b.n	8000fc4 <updatePlayerMissileStatus+0x2a4>

	/// Check for player missile and enemy collision
	// Loop through enemy positions to check if one is hit
	int inv_pos_x;
	int inv_pos_y;
	int inv_w = 12;
 8000da2:	230c      	movs	r3, #12
 8000da4:	617b      	str	r3, [r7, #20]
	int inv_h = 8;
 8000da6:	2308      	movs	r3, #8
 8000da8:	613b      	str	r3, [r7, #16]
	int inv_r, inv_c, inv_hit = 0;
 8000daa:	2300      	movs	r3, #0
 8000dac:	64bb      	str	r3, [r7, #72]	; 0x48
	for (int row = 0; row < 4; ++row) {
 8000dae:	2300      	movs	r3, #0
 8000db0:	647b      	str	r3, [r7, #68]	; 0x44
 8000db2:	e04a      	b.n	8000e4a <updatePlayerMissileStatus+0x12a>
		for (int col = 0; col < 6; ++col) {
 8000db4:	2300      	movs	r3, #0
 8000db6:	643b      	str	r3, [r7, #64]	; 0x40
 8000db8:	e041      	b.n	8000e3e <updatePlayerMissileStatus+0x11e>
			if (invader1_status[row][col] == 0) {
 8000dba:	4989      	ldr	r1, [pc, #548]	; (8000fe0 <updatePlayerMissileStatus+0x2c0>)
 8000dbc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000dbe:	4613      	mov	r3, r2
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	4413      	add	r3, r2
 8000dc4:	005b      	lsls	r3, r3, #1
 8000dc6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000dc8:	4413      	add	r3, r2
 8000dca:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d031      	beq.n	8000e36 <updatePlayerMissileStatus+0x116>
				continue;
			}
			inv_pos_x = invader1_prev_xpos[row][col];
 8000dd2:	4984      	ldr	r1, [pc, #528]	; (8000fe4 <updatePlayerMissileStatus+0x2c4>)
 8000dd4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000dd6:	4613      	mov	r3, r2
 8000dd8:	005b      	lsls	r3, r3, #1
 8000dda:	4413      	add	r3, r2
 8000ddc:	005b      	lsls	r3, r3, #1
 8000dde:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000de0:	4413      	add	r3, r2
 8000de2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000de6:	60fb      	str	r3, [r7, #12]
			inv_pos_y = invader1_prev_ypos[row][col];
 8000de8:	497f      	ldr	r1, [pc, #508]	; (8000fe8 <updatePlayerMissileStatus+0x2c8>)
 8000dea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000dec:	4613      	mov	r3, r2
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	4413      	add	r3, r2
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000df6:	4413      	add	r3, r2
 8000df8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000dfc:	60bb      	str	r3, [r7, #8]

			if ( ((inv_pos_x + inv_w) >= pos_x) && (inv_pos_x <= pos_x + 2) && ((inv_pos_y + inv_h) >= pos_y) && (inv_pos_y <= pos_y) ) {
 8000dfe:	68fa      	ldr	r2, [r7, #12]
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	4413      	add	r3, r2
 8000e04:	69fa      	ldr	r2, [r7, #28]
 8000e06:	429a      	cmp	r2, r3
 8000e08:	dc16      	bgt.n	8000e38 <updatePlayerMissileStatus+0x118>
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	3302      	adds	r3, #2
 8000e0e:	68fa      	ldr	r2, [r7, #12]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	dc11      	bgt.n	8000e38 <updatePlayerMissileStatus+0x118>
 8000e14:	68ba      	ldr	r2, [r7, #8]
 8000e16:	693b      	ldr	r3, [r7, #16]
 8000e18:	4413      	add	r3, r2
 8000e1a:	69ba      	ldr	r2, [r7, #24]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	dc0b      	bgt.n	8000e38 <updatePlayerMissileStatus+0x118>
 8000e20:	68ba      	ldr	r2, [r7, #8]
 8000e22:	69bb      	ldr	r3, [r7, #24]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	dc07      	bgt.n	8000e38 <updatePlayerMissileStatus+0x118>
				inv_hit = 1;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	64bb      	str	r3, [r7, #72]	; 0x48
				inv_r = row;
 8000e2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e2e:	653b      	str	r3, [r7, #80]	; 0x50
				inv_c = col;
 8000e30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000e32:	64fb      	str	r3, [r7, #76]	; 0x4c
				break;
 8000e34:	e006      	b.n	8000e44 <updatePlayerMissileStatus+0x124>
				continue;
 8000e36:	bf00      	nop
		for (int col = 0; col < 6; ++col) {
 8000e38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	643b      	str	r3, [r7, #64]	; 0x40
 8000e3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000e40:	2b05      	cmp	r3, #5
 8000e42:	ddba      	ble.n	8000dba <updatePlayerMissileStatus+0x9a>
	for (int row = 0; row < 4; ++row) {
 8000e44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e46:	3301      	adds	r3, #1
 8000e48:	647b      	str	r3, [r7, #68]	; 0x44
 8000e4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e4c:	2b03      	cmp	r3, #3
 8000e4e:	ddb1      	ble.n	8000db4 <updatePlayerMissileStatus+0x94>


		}
	}

	if (inv_hit == 1) {
 8000e50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000e52:	2b01      	cmp	r3, #1
 8000e54:	f040 80b5 	bne.w	8000fc2 <updatePlayerMissileStatus+0x2a2>
		playerScore += 10;
 8000e58:	4b64      	ldr	r3, [pc, #400]	; (8000fec <updatePlayerMissileStatus+0x2cc>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	330a      	adds	r3, #10
 8000e5e:	4a63      	ldr	r2, [pc, #396]	; (8000fec <updatePlayerMissileStatus+0x2cc>)
 8000e60:	6013      	str	r3, [r2, #0]
		player_missile_status[missile_index] = 0;
 8000e62:	4a5e      	ldr	r2, [pc, #376]	; (8000fdc <updatePlayerMissileStatus+0x2bc>)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2100      	movs	r1, #0
 8000e68:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		invader1_status[inv_r][inv_c] = 0;
 8000e6c:	495c      	ldr	r1, [pc, #368]	; (8000fe0 <updatePlayerMissileStatus+0x2c0>)
 8000e6e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000e70:	4613      	mov	r3, r2
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	4413      	add	r3, r2
 8000e76:	005b      	lsls	r3, r3, #1
 8000e78:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000e7a:	4413      	add	r3, r2
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		inv_pos_x = invader1_prev_xpos[inv_r][inv_c];
 8000e82:	4958      	ldr	r1, [pc, #352]	; (8000fe4 <updatePlayerMissileStatus+0x2c4>)
 8000e84:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000e86:	4613      	mov	r3, r2
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	4413      	add	r3, r2
 8000e8c:	005b      	lsls	r3, r3, #1
 8000e8e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000e90:	4413      	add	r3, r2
 8000e92:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e96:	60fb      	str	r3, [r7, #12]
		inv_pos_y = invader1_prev_ypos[inv_r][inv_c];
 8000e98:	4953      	ldr	r1, [pc, #332]	; (8000fe8 <updatePlayerMissileStatus+0x2c8>)
 8000e9a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000e9c:	4613      	mov	r3, r2
 8000e9e:	005b      	lsls	r3, r3, #1
 8000ea0:	4413      	add	r3, r2
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000ea6:	4413      	add	r3, r2
 8000ea8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000eac:	60bb      	str	r3, [r7, #8]

		// Erase missile and enemy
		uint8_t* ptrscreen = (uint8_t*)(0x20020000 + pos_y*320 + pos_x);
 8000eae:	69ba      	ldr	r2, [r7, #24]
 8000eb0:	4613      	mov	r3, r2
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	4413      	add	r3, r2
 8000eb6:	019b      	lsls	r3, r3, #6
 8000eb8:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8000ebc:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000ec0:	69fa      	ldr	r2, [r7, #28]
 8000ec2:	4413      	add	r3, r2
 8000ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
		for (int i = 0; i < 4; i++) {
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	63bb      	str	r3, [r7, #56]	; 0x38
 8000eca:	e014      	b.n	8000ef6 <updatePlayerMissileStatus+0x1d6>
			for (int j = 0; j < 1; j++) {
 8000ecc:	2300      	movs	r3, #0
 8000ece:	637b      	str	r3, [r7, #52]	; 0x34
 8000ed0:	e007      	b.n	8000ee2 <updatePlayerMissileStatus+0x1c2>
				*ptrscreen++ = 0;
 8000ed2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ed4:	1c5a      	adds	r2, r3, #1
 8000ed6:	63fa      	str	r2, [r7, #60]	; 0x3c
 8000ed8:	2200      	movs	r2, #0
 8000eda:	701a      	strb	r2, [r3, #0]
			for (int j = 0; j < 1; j++) {
 8000edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ede:	3301      	adds	r3, #1
 8000ee0:	637b      	str	r3, [r7, #52]	; 0x34
 8000ee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	ddf4      	ble.n	8000ed2 <updatePlayerMissileStatus+0x1b2>
			}
			ptrscreen += 319;
 8000ee8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000eea:	f203 133f 	addw	r3, r3, #319	; 0x13f
 8000eee:	63fb      	str	r3, [r7, #60]	; 0x3c
		for (int i = 0; i < 4; i++) {
 8000ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	63bb      	str	r3, [r7, #56]	; 0x38
 8000ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ef8:	2b03      	cmp	r3, #3
 8000efa:	dde7      	ble.n	8000ecc <updatePlayerMissileStatus+0x1ac>
		}

		ptrscreen = (uint8_t*)(0x20020000 + inv_pos_y*320 + inv_pos_x);
 8000efc:	68ba      	ldr	r2, [r7, #8]
 8000efe:	4613      	mov	r3, r2
 8000f00:	009b      	lsls	r3, r3, #2
 8000f02:	4413      	add	r3, r2
 8000f04:	019b      	lsls	r3, r3, #6
 8000f06:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8000f0a:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000f0e:	68fa      	ldr	r2, [r7, #12]
 8000f10:	4413      	add	r3, r2
 8000f12:	63fb      	str	r3, [r7, #60]	; 0x3c
		for (int i = 0; i < 8; i++) {
 8000f14:	2300      	movs	r3, #0
 8000f16:	633b      	str	r3, [r7, #48]	; 0x30
 8000f18:	e014      	b.n	8000f44 <updatePlayerMissileStatus+0x224>
			for (int j = 0; j < 12; j++) {
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f1e:	e007      	b.n	8000f30 <updatePlayerMissileStatus+0x210>
				*ptrscreen++ = 0;
 8000f20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f22:	1c5a      	adds	r2, r3, #1
 8000f24:	63fa      	str	r2, [r7, #60]	; 0x3c
 8000f26:	2200      	movs	r2, #0
 8000f28:	701a      	strb	r2, [r3, #0]
			for (int j = 0; j < 12; j++) {
 8000f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f32:	2b0b      	cmp	r3, #11
 8000f34:	ddf4      	ble.n	8000f20 <updatePlayerMissileStatus+0x200>
			}
			ptrscreen += 308;
 8000f36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f38:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8000f3c:	63fb      	str	r3, [r7, #60]	; 0x3c
		for (int i = 0; i < 8; i++) {
 8000f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f40:	3301      	adds	r3, #1
 8000f42:	633b      	str	r3, [r7, #48]	; 0x30
 8000f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f46:	2b07      	cmp	r3, #7
 8000f48:	dde7      	ble.n	8000f1a <updatePlayerMissileStatus+0x1fa>
		}

		// Find an open explosion index and assign explode coordinates
		for (int explode_index = 0; explode_index < 3; ++explode_index) {
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f4e:	e034      	b.n	8000fba <updatePlayerMissileStatus+0x29a>
			if (inv1_explode_phase[explode_index] == 0){
 8000f50:	4a27      	ldr	r2, [pc, #156]	; (8000ff0 <updatePlayerMissileStatus+0x2d0>)
 8000f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d12b      	bne.n	8000fb4 <updatePlayerMissileStatus+0x294>
				inv1_explode_phase[explode_index] = 1;
 8000f5c:	4a24      	ldr	r2, [pc, #144]	; (8000ff0 <updatePlayerMissileStatus+0x2d0>)
 8000f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f60:	2101      	movs	r1, #1
 8000f62:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

				int explode_x_pos = inv_pos_x - 10;
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	3b0a      	subs	r3, #10
 8000f6a:	627b      	str	r3, [r7, #36]	; 0x24
				int explode_y_pos = inv_pos_y - 12;
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	3b0c      	subs	r3, #12
 8000f70:	623b      	str	r3, [r7, #32]

				// Cap explosion coordinates to the screen
				if (explode_x_pos <= 0) explode_x_pos = 0;
 8000f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	dc01      	bgt.n	8000f7c <updatePlayerMissileStatus+0x25c>
 8000f78:	2300      	movs	r3, #0
 8000f7a:	627b      	str	r3, [r7, #36]	; 0x24
				if (explode_x_pos >= 288) explode_x_pos = 288;
 8000f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f7e:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 8000f82:	db02      	blt.n	8000f8a <updatePlayerMissileStatus+0x26a>
 8000f84:	f44f 7390 	mov.w	r3, #288	; 0x120
 8000f88:	627b      	str	r3, [r7, #36]	; 0x24
				if (explode_y_pos >= 167) explode_y_pos = 167;
 8000f8a:	6a3b      	ldr	r3, [r7, #32]
 8000f8c:	2ba6      	cmp	r3, #166	; 0xa6
 8000f8e:	dd01      	ble.n	8000f94 <updatePlayerMissileStatus+0x274>
 8000f90:	23a7      	movs	r3, #167	; 0xa7
 8000f92:	623b      	str	r3, [r7, #32]
				if (explode_y_pos <= 0) explode_y_pos = 0;
 8000f94:	6a3b      	ldr	r3, [r7, #32]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	dc01      	bgt.n	8000f9e <updatePlayerMissileStatus+0x27e>
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	623b      	str	r3, [r7, #32]

				inv1_x_pos_to_explode[explode_index] = explode_x_pos;
 8000f9e:	4915      	ldr	r1, [pc, #84]	; (8000ff4 <updatePlayerMissileStatus+0x2d4>)
 8000fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				inv1_y_pos_to_explode[explode_index] = explode_y_pos;
 8000fa8:	4913      	ldr	r1, [pc, #76]	; (8000ff8 <updatePlayerMissileStatus+0x2d8>)
 8000faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fac:	6a3a      	ldr	r2, [r7, #32]
 8000fae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				break;
 8000fb2:	e005      	b.n	8000fc0 <updatePlayerMissileStatus+0x2a0>
		for (int explode_index = 0; explode_index < 3; ++explode_index) {
 8000fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8000fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fbc:	2b02      	cmp	r3, #2
 8000fbe:	ddc7      	ble.n	8000f50 <updatePlayerMissileStatus+0x230>
		}

	}


	return;
 8000fc0:	bf00      	nop
 8000fc2:	bf00      	nop
}
 8000fc4:	3764      	adds	r7, #100	; 0x64
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	20000528 	.word	0x20000528
 8000fd4:	20000554 	.word	0x20000554
 8000fd8:	2000051c 	.word	0x2000051c
 8000fdc:	20000290 	.word	0x20000290
 8000fe0:	20000440 	.word	0x20000440
 8000fe4:	20000380 	.word	0x20000380
 8000fe8:	200003e0 	.word	0x200003e0
 8000fec:	20000280 	.word	0x20000280
 8000ff0:	200004e0 	.word	0x200004e0
 8000ff4:	200004c8 	.word	0x200004c8
 8000ff8:	200004d4 	.word	0x200004d4

08000ffc <updateEnemyMissileStatus>:


void updateEnemyMissileStatus(int missile_index)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b089      	sub	sp, #36	; 0x24
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]

	int pos_x = invader1_missile_xpos[missile_index];
 8001004:	4a36      	ldr	r2, [pc, #216]	; (80010e0 <updateEnemyMissileStatus+0xe4>)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800100c:	613b      	str	r3, [r7, #16]
	int pos_y = invader1_missile_ypos[missile_index];
 800100e:	4a35      	ldr	r2, [pc, #212]	; (80010e4 <updateEnemyMissileStatus+0xe8>)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001016:	60fb      	str	r3, [r7, #12]

	if (pos_y >= 200) { // out of bounds and erase
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	2bc7      	cmp	r3, #199	; 0xc7
 800101c:	dd32      	ble.n	8001084 <updateEnemyMissileStatus+0x88>
		invader1_missile_status[missile_index] = 0;
 800101e:	4a32      	ldr	r2, [pc, #200]	; (80010e8 <updateEnemyMissileStatus+0xec>)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2100      	movs	r1, #0
 8001024:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		uint8_t* ptrscreen = (uint8_t*)(0x20020000 + invader1_missile_prev_ypos[missile_index]*320 + invader1_missile_prev_xpos[missile_index]);
 8001028:	4a30      	ldr	r2, [pc, #192]	; (80010ec <updateEnemyMissileStatus+0xf0>)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001030:	4613      	mov	r3, r2
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	4413      	add	r3, r2
 8001036:	019b      	lsls	r3, r3, #6
 8001038:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800103c:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8001040:	492b      	ldr	r1, [pc, #172]	; (80010f0 <updateEnemyMissileStatus+0xf4>)
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001048:	4413      	add	r3, r2
 800104a:	61fb      	str	r3, [r7, #28]
		for (int i = 0; i < 4; ++i) {
 800104c:	2300      	movs	r3, #0
 800104e:	61bb      	str	r3, [r7, #24]
 8001050:	e014      	b.n	800107c <updateEnemyMissileStatus+0x80>
			for (int j = 0; j < 1; ++j) {
 8001052:	2300      	movs	r3, #0
 8001054:	617b      	str	r3, [r7, #20]
 8001056:	e007      	b.n	8001068 <updateEnemyMissileStatus+0x6c>
				*ptrscreen++ = 0;
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	1c5a      	adds	r2, r3, #1
 800105c:	61fa      	str	r2, [r7, #28]
 800105e:	2200      	movs	r2, #0
 8001060:	701a      	strb	r2, [r3, #0]
			for (int j = 0; j < 1; ++j) {
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	3301      	adds	r3, #1
 8001066:	617b      	str	r3, [r7, #20]
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	2b00      	cmp	r3, #0
 800106c:	ddf4      	ble.n	8001058 <updateEnemyMissileStatus+0x5c>
			}
			ptrscreen += 319;
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	f203 133f 	addw	r3, r3, #319	; 0x13f
 8001074:	61fb      	str	r3, [r7, #28]
		for (int i = 0; i < 4; ++i) {
 8001076:	69bb      	ldr	r3, [r7, #24]
 8001078:	3301      	adds	r3, #1
 800107a:	61bb      	str	r3, [r7, #24]
 800107c:	69bb      	ldr	r3, [r7, #24]
 800107e:	2b03      	cmp	r3, #3
 8001080:	dde7      	ble.n	8001052 <updateEnemyMissileStatus+0x56>
		}
		return;
 8001082:	e027      	b.n	80010d4 <updateEnemyMissileStatus+0xd8>
	}

	// Check if missile hit player ship
	if ((ship_x + 12 >= pos_x) && (ship_x <= pos_x + 1) && (ship_y + 8 >= pos_y) && (ship_y <= pos_y + 1)) { // Player Ship Hit
 8001084:	4b1b      	ldr	r3, [pc, #108]	; (80010f4 <updateEnemyMissileStatus+0xf8>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	330c      	adds	r3, #12
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	429a      	cmp	r2, r3
 800108e:	dc1e      	bgt.n	80010ce <updateEnemyMissileStatus+0xd2>
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	1c5a      	adds	r2, r3, #1
 8001094:	4b17      	ldr	r3, [pc, #92]	; (80010f4 <updateEnemyMissileStatus+0xf8>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	429a      	cmp	r2, r3
 800109a:	db18      	blt.n	80010ce <updateEnemyMissileStatus+0xd2>
 800109c:	4b16      	ldr	r3, [pc, #88]	; (80010f8 <updateEnemyMissileStatus+0xfc>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	3308      	adds	r3, #8
 80010a2:	68fa      	ldr	r2, [r7, #12]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	dc12      	bgt.n	80010ce <updateEnemyMissileStatus+0xd2>
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	1c5a      	adds	r2, r3, #1
 80010ac:	4b12      	ldr	r3, [pc, #72]	; (80010f8 <updateEnemyMissileStatus+0xfc>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	db0c      	blt.n	80010ce <updateEnemyMissileStatus+0xd2>
		--ship_health;
 80010b4:	4b11      	ldr	r3, [pc, #68]	; (80010fc <updateEnemyMissileStatus+0x100>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	3b01      	subs	r3, #1
 80010ba:	4a10      	ldr	r2, [pc, #64]	; (80010fc <updateEnemyMissileStatus+0x100>)
 80010bc:	6013      	str	r3, [r2, #0]
		if (ship_health <= 0) {
 80010be:	4b0f      	ldr	r3, [pc, #60]	; (80010fc <updateEnemyMissileStatus+0x100>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	dc05      	bgt.n	80010d2 <updateEnemyMissileStatus+0xd6>
			gameStatus = LOSE;
 80010c6:	4b0e      	ldr	r3, [pc, #56]	; (8001100 <updateEnemyMissileStatus+0x104>)
 80010c8:	2204      	movs	r2, #4
 80010ca:	701a      	strb	r2, [r3, #0]
		}
		return;
 80010cc:	e001      	b.n	80010d2 <updateEnemyMissileStatus+0xd6>
	}


	return;
 80010ce:	bf00      	nop
 80010d0:	e000      	b.n	80010d4 <updateEnemyMissileStatus+0xd8>
		return;
 80010d2:	bf00      	nop
}
 80010d4:	3724      	adds	r7, #36	; 0x24
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	20000570 	.word	0x20000570
 80010e4:	2000053c 	.word	0x2000053c
 80010e8:	200004a4 	.word	0x200004a4
 80010ec:	20000504 	.word	0x20000504
 80010f0:	200004ec 	.word	0x200004ec
 80010f4:	20000534 	.word	0x20000534
 80010f8:	20000288 	.word	0x20000288
 80010fc:	200000c4 	.word	0x200000c4
 8001100:	20000560 	.word	0x20000560

08001104 <explodeInvader1>:

void explodeInvader1()
{
 8001104:	b480      	push	{r7}
 8001106:	b089      	sub	sp, #36	; 0x24
 8001108:	af00      	add	r7, sp, #0
	for (int explode_index = 0; explode_index < 3; ++explode_index) {
 800110a:	2300      	movs	r3, #0
 800110c:	61fb      	str	r3, [r7, #28]
 800110e:	e0a0      	b.n	8001252 <explodeInvader1+0x14e>

		//if (inv1_explode_phase[explode_index] != 0) {

			uint8_t* screenptr = (uint8_t*) (0x20020000 + inv1_y_pos_to_explode[explode_index]*320 + inv1_x_pos_to_explode[explode_index]);
 8001110:	4a55      	ldr	r2, [pc, #340]	; (8001268 <explodeInvader1+0x164>)
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001118:	4613      	mov	r3, r2
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	4413      	add	r3, r2
 800111e:	019b      	lsls	r3, r3, #6
 8001120:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8001124:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8001128:	4950      	ldr	r1, [pc, #320]	; (800126c <explodeInvader1+0x168>)
 800112a:	69fa      	ldr	r2, [r7, #28]
 800112c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001130:	4413      	add	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
			uint8_t* explode_sprite = 0;
 8001134:	2300      	movs	r3, #0
 8001136:	617b      	str	r3, [r7, #20]

			// Erase explosion if sequence was complete and set explode_phase to 0
			if (inv1_explode_phase[explode_index] == 8) {
 8001138:	4a4d      	ldr	r2, [pc, #308]	; (8001270 <explodeInvader1+0x16c>)
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001140:	2b08      	cmp	r3, #8
 8001142:	d129      	bne.n	8001198 <explodeInvader1+0x94>

				for (int i = 0; i < 32; ++i) {
 8001144:	2300      	movs	r3, #0
 8001146:	613b      	str	r3, [r7, #16]
 8001148:	e014      	b.n	8001174 <explodeInvader1+0x70>
					for (int j = 0; j < 32; ++j) {
 800114a:	2300      	movs	r3, #0
 800114c:	60fb      	str	r3, [r7, #12]
 800114e:	e007      	b.n	8001160 <explodeInvader1+0x5c>
						*screenptr++ = 0;
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	1c5a      	adds	r2, r3, #1
 8001154:	61ba      	str	r2, [r7, #24]
 8001156:	2200      	movs	r2, #0
 8001158:	701a      	strb	r2, [r3, #0]
					for (int j = 0; j < 32; ++j) {
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	3301      	adds	r3, #1
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	2b1f      	cmp	r3, #31
 8001164:	ddf4      	ble.n	8001150 <explodeInvader1+0x4c>
					}
					screenptr += 288;
 8001166:	69bb      	ldr	r3, [r7, #24]
 8001168:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800116c:	61bb      	str	r3, [r7, #24]
				for (int i = 0; i < 32; ++i) {
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	3301      	adds	r3, #1
 8001172:	613b      	str	r3, [r7, #16]
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	2b1f      	cmp	r3, #31
 8001178:	dde7      	ble.n	800114a <explodeInvader1+0x46>
				}
				inv1_explode_phase[explode_index] = 0;
 800117a:	4a3d      	ldr	r2, [pc, #244]	; (8001270 <explodeInvader1+0x16c>)
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	2100      	movs	r1, #0
 8001180:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				inv1_x_pos_to_explode[explode_index] = 0;
 8001184:	4a39      	ldr	r2, [pc, #228]	; (800126c <explodeInvader1+0x168>)
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	2100      	movs	r1, #0
 800118a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				inv1_y_pos_to_explode[explode_index] = 0;
 800118e:	4a36      	ldr	r2, [pc, #216]	; (8001268 <explodeInvader1+0x164>)
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	2100      	movs	r1, #0
 8001194:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			}

			// Find the right explode sprite
			switch (inv1_explode_phase[explode_index]) {
 8001198:	4a35      	ldr	r2, [pc, #212]	; (8001270 <explodeInvader1+0x16c>)
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011a0:	3b01      	subs	r3, #1
 80011a2:	2b06      	cmp	r3, #6
 80011a4:	d825      	bhi.n	80011f2 <explodeInvader1+0xee>
 80011a6:	a201      	add	r2, pc, #4	; (adr r2, 80011ac <explodeInvader1+0xa8>)
 80011a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ac:	080011c9 	.word	0x080011c9
 80011b0:	080011cf 	.word	0x080011cf
 80011b4:	080011d5 	.word	0x080011d5
 80011b8:	080011db 	.word	0x080011db
 80011bc:	080011e1 	.word	0x080011e1
 80011c0:	080011e7 	.word	0x080011e7
 80011c4:	080011ed 	.word	0x080011ed
				case 1:
					explode_sprite = (uint8_t*) explode1;
 80011c8:	4b2a      	ldr	r3, [pc, #168]	; (8001274 <explodeInvader1+0x170>)
 80011ca:	617b      	str	r3, [r7, #20]
					break;
 80011cc:	e011      	b.n	80011f2 <explodeInvader1+0xee>
				case 2:
					explode_sprite = (uint8_t*) explode2;
 80011ce:	4b2a      	ldr	r3, [pc, #168]	; (8001278 <explodeInvader1+0x174>)
 80011d0:	617b      	str	r3, [r7, #20]
					break;
 80011d2:	e00e      	b.n	80011f2 <explodeInvader1+0xee>
				case 3:
					explode_sprite = (uint8_t*) explode3;
 80011d4:	4b29      	ldr	r3, [pc, #164]	; (800127c <explodeInvader1+0x178>)
 80011d6:	617b      	str	r3, [r7, #20]
					break;
 80011d8:	e00b      	b.n	80011f2 <explodeInvader1+0xee>
				case 4:
					explode_sprite = (uint8_t*) explode4;
 80011da:	4b29      	ldr	r3, [pc, #164]	; (8001280 <explodeInvader1+0x17c>)
 80011dc:	617b      	str	r3, [r7, #20]
					break;
 80011de:	e008      	b.n	80011f2 <explodeInvader1+0xee>
				case 5:
					explode_sprite = (uint8_t*) explode5;
 80011e0:	4b28      	ldr	r3, [pc, #160]	; (8001284 <explodeInvader1+0x180>)
 80011e2:	617b      	str	r3, [r7, #20]
					break;
 80011e4:	e005      	b.n	80011f2 <explodeInvader1+0xee>
				case 6:
					explode_sprite = (uint8_t*) explode6;
 80011e6:	4b28      	ldr	r3, [pc, #160]	; (8001288 <explodeInvader1+0x184>)
 80011e8:	617b      	str	r3, [r7, #20]
					break;
 80011ea:	e002      	b.n	80011f2 <explodeInvader1+0xee>
				case 7:
					explode_sprite = (uint8_t*) explode7;
 80011ec:	4b27      	ldr	r3, [pc, #156]	; (800128c <explodeInvader1+0x188>)
 80011ee:	617b      	str	r3, [r7, #20]
					break;
 80011f0:	bf00      	nop
			}
			if (inv1_explode_phase[explode_index] != 0) {
 80011f2:	4a1f      	ldr	r2, [pc, #124]	; (8001270 <explodeInvader1+0x16c>)
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d026      	beq.n	800124c <explodeInvader1+0x148>
				for (int i = 0; i < 32; ++i) {
 80011fe:	2300      	movs	r3, #0
 8001200:	60bb      	str	r3, [r7, #8]
 8001202:	e017      	b.n	8001234 <explodeInvader1+0x130>
					for (int j = 0; j < 32; ++j) {
 8001204:	2300      	movs	r3, #0
 8001206:	607b      	str	r3, [r7, #4]
 8001208:	e00a      	b.n	8001220 <explodeInvader1+0x11c>
						*screenptr++ = *explode_sprite++;
 800120a:	697a      	ldr	r2, [r7, #20]
 800120c:	1c53      	adds	r3, r2, #1
 800120e:	617b      	str	r3, [r7, #20]
 8001210:	69bb      	ldr	r3, [r7, #24]
 8001212:	1c59      	adds	r1, r3, #1
 8001214:	61b9      	str	r1, [r7, #24]
 8001216:	7812      	ldrb	r2, [r2, #0]
 8001218:	701a      	strb	r2, [r3, #0]
					for (int j = 0; j < 32; ++j) {
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	3301      	adds	r3, #1
 800121e:	607b      	str	r3, [r7, #4]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2b1f      	cmp	r3, #31
 8001224:	ddf1      	ble.n	800120a <explodeInvader1+0x106>
					}
					screenptr += 288;
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800122c:	61bb      	str	r3, [r7, #24]
				for (int i = 0; i < 32; ++i) {
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	3301      	adds	r3, #1
 8001232:	60bb      	str	r3, [r7, #8]
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	2b1f      	cmp	r3, #31
 8001238:	dde4      	ble.n	8001204 <explodeInvader1+0x100>
				}
				inv1_explode_phase[explode_index]++;
 800123a:	4a0d      	ldr	r2, [pc, #52]	; (8001270 <explodeInvader1+0x16c>)
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001242:	1c5a      	adds	r2, r3, #1
 8001244:	490a      	ldr	r1, [pc, #40]	; (8001270 <explodeInvader1+0x16c>)
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int explode_index = 0; explode_index < 3; ++explode_index) {
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	3301      	adds	r3, #1
 8001250:	61fb      	str	r3, [r7, #28]
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	2b02      	cmp	r3, #2
 8001256:	f77f af5b 	ble.w	8001110 <explodeInvader1+0xc>


		//}

	}
	return;
 800125a:	bf00      	nop
}
 800125c:	3724      	adds	r7, #36	; 0x24
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	200004d4 	.word	0x200004d4
 800126c:	200004c8 	.word	0x200004c8
 8001270:	200004e0 	.word	0x200004e0
 8001274:	080049c4 	.word	0x080049c4
 8001278:	08004dc4 	.word	0x08004dc4
 800127c:	080051c4 	.word	0x080051c4
 8001280:	080055c4 	.word	0x080055c4
 8001284:	080059c4 	.word	0x080059c4
 8001288:	08005dc4 	.word	0x08005dc4
 800128c:	080061c4 	.word	0x080061c4

08001290 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b098      	sub	sp, #96	; 0x60
 8001294:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001296:	f000 fdf3 	bl	8001e80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800129a:	f000 fc41 	bl	8001b20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800129e:	f000 fc9d 	bl	8001bdc <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  ship_x = 154;
 80012a2:	4bb1      	ldr	r3, [pc, #708]	; (8001568 <main+0x2d8>)
 80012a4:	229a      	movs	r2, #154	; 0x9a
 80012a6:	601a      	str	r2, [r3, #0]
  ship_y = 192;
 80012a8:	4bb0      	ldr	r3, [pc, #704]	; (800156c <main+0x2dc>)
 80012aa:	22c0      	movs	r2, #192	; 0xc0
 80012ac:	601a      	str	r2, [r3, #0]
  ship_px = ship_x;
 80012ae:	4bae      	ldr	r3, [pc, #696]	; (8001568 <main+0x2d8>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4aaf      	ldr	r2, [pc, #700]	; (8001570 <main+0x2e0>)
 80012b4:	6013      	str	r3, [r2, #0]
  ship_py = ship_y;
 80012b6:	4bad      	ldr	r3, [pc, #692]	; (800156c <main+0x2dc>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4aae      	ldr	r2, [pc, #696]	; (8001574 <main+0x2e4>)
 80012bc:	6013      	str	r3, [r2, #0]

  // Initialize Invader 1 position and status
  for (int r = 0; r < 4; r++) {
 80012be:	2300      	movs	r3, #0
 80012c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80012c2:	e060      	b.n	8001386 <main+0xf6>
	  for (int c = 0; c < 6; c++) {
 80012c4:	2300      	movs	r3, #0
 80012c6:	65bb      	str	r3, [r7, #88]	; 0x58
 80012c8:	e057      	b.n	800137a <main+0xea>
		  invader1_status[r][c] = 1;
 80012ca:	49ab      	ldr	r1, [pc, #684]	; (8001578 <main+0x2e8>)
 80012cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80012ce:	4613      	mov	r3, r2
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	4413      	add	r3, r2
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80012d8:	4413      	add	r3, r2
 80012da:	2201      	movs	r2, #1
 80012dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		  invader1_xpos[r][c] = 80 + c*30;
 80012e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80012e2:	4613      	mov	r3, r2
 80012e4:	011b      	lsls	r3, r3, #4
 80012e6:	1a9b      	subs	r3, r3, r2
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	f103 0150 	add.w	r1, r3, #80	; 0x50
 80012ee:	48a3      	ldr	r0, [pc, #652]	; (800157c <main+0x2ec>)
 80012f0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80012f2:	4613      	mov	r3, r2
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	4413      	add	r3, r2
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80012fc:	4413      	add	r3, r2
 80012fe:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
		  invader1_ypos[r][c] = 50 + r*20;
 8001302:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001304:	4613      	mov	r3, r2
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	4413      	add	r3, r2
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	f103 0132 	add.w	r1, r3, #50	; 0x32
 8001310:	489b      	ldr	r0, [pc, #620]	; (8001580 <main+0x2f0>)
 8001312:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001314:	4613      	mov	r3, r2
 8001316:	005b      	lsls	r3, r3, #1
 8001318:	4413      	add	r3, r2
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800131e:	4413      	add	r3, r2
 8001320:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
		  invader1_prev_xpos[r][c] = invader1_xpos[r][c];
 8001324:	4995      	ldr	r1, [pc, #596]	; (800157c <main+0x2ec>)
 8001326:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001328:	4613      	mov	r3, r2
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	4413      	add	r3, r2
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001332:	4413      	add	r3, r2
 8001334:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8001338:	4892      	ldr	r0, [pc, #584]	; (8001584 <main+0x2f4>)
 800133a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800133c:	4613      	mov	r3, r2
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	4413      	add	r3, r2
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001346:	4413      	add	r3, r2
 8001348:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
		  invader1_prev_ypos[r][c] = invader1_ypos[r][c];
 800134c:	498c      	ldr	r1, [pc, #560]	; (8001580 <main+0x2f0>)
 800134e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001350:	4613      	mov	r3, r2
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	4413      	add	r3, r2
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800135a:	4413      	add	r3, r2
 800135c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8001360:	4889      	ldr	r0, [pc, #548]	; (8001588 <main+0x2f8>)
 8001362:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001364:	4613      	mov	r3, r2
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	4413      	add	r3, r2
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800136e:	4413      	add	r3, r2
 8001370:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
	  for (int c = 0; c < 6; c++) {
 8001374:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001376:	3301      	adds	r3, #1
 8001378:	65bb      	str	r3, [r7, #88]	; 0x58
 800137a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800137c:	2b05      	cmp	r3, #5
 800137e:	dda4      	ble.n	80012ca <main+0x3a>
  for (int r = 0; r < 4; r++) {
 8001380:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001382:	3301      	adds	r3, #1
 8001384:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001386:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001388:	2b03      	cmp	r3, #3
 800138a:	dd9b      	ble.n	80012c4 <main+0x34>
	  }
  }

  gameStatus = INTRO_SCREEN;
 800138c:	4b7f      	ldr	r3, [pc, #508]	; (800158c <main+0x2fc>)
 800138e:	2200      	movs	r2, #0
 8001390:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /// Display Intro Screen
	  if (gameStatus == INTRO_SCREEN) {
 8001392:	4b7e      	ldr	r3, [pc, #504]	; (800158c <main+0x2fc>)
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d101      	bne.n	800139e <main+0x10e>
		  displayIntroScreen();
 800139a:	f7ff f89d 	bl	80004d8 <displayIntroScreen>
	  }

	  /// Lost Game
	  if (gameStatus == LOSE) {
 800139e:	4b7b      	ldr	r3, [pc, #492]	; (800158c <main+0x2fc>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	2b04      	cmp	r3, #4
 80013a4:	d111      	bne.n	80013ca <main+0x13a>
		  if (playerScore >= highScore) {
 80013a6:	4b7a      	ldr	r3, [pc, #488]	; (8001590 <main+0x300>)
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	4b7a      	ldr	r3, [pc, #488]	; (8001594 <main+0x304>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	db03      	blt.n	80013ba <main+0x12a>
			  highScore = playerScore;
 80013b2:	4b77      	ldr	r3, [pc, #476]	; (8001590 <main+0x300>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a77      	ldr	r2, [pc, #476]	; (8001594 <main+0x304>)
 80013b8:	6013      	str	r3, [r2, #0]
		  }
		  playerScore = 0;
 80013ba:	4b75      	ldr	r3, [pc, #468]	; (8001590 <main+0x300>)
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]

		  displayGameOver();
 80013c0:	f7ff f8ee 	bl	80005a0 <displayGameOver>
		  gameStatus = RESET_LEVEL1;
 80013c4:	4b71      	ldr	r3, [pc, #452]	; (800158c <main+0x2fc>)
 80013c6:	2201      	movs	r2, #1
 80013c8:	701a      	strb	r2, [r3, #0]
	  }

	  /// Reset Game
	  if (gameStatus == RESET_LEVEL1) {
 80013ca:	4b70      	ldr	r3, [pc, #448]	; (800158c <main+0x2fc>)
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	f040 80a9 	bne.w	8001526 <main+0x296>

		  // Initialize Invader 1 position and status
		  all_invader1_alive = 1;
 80013d4:	4b70      	ldr	r3, [pc, #448]	; (8001598 <main+0x308>)
 80013d6:	2201      	movs	r2, #1
 80013d8:	601a      	str	r2, [r3, #0]
		  for (int r = 0; r < 4; r++) {
 80013da:	2300      	movs	r3, #0
 80013dc:	657b      	str	r3, [r7, #84]	; 0x54
 80013de:	e060      	b.n	80014a2 <main+0x212>
			  for (int c = 0; c < 6; c++) {
 80013e0:	2300      	movs	r3, #0
 80013e2:	653b      	str	r3, [r7, #80]	; 0x50
 80013e4:	e057      	b.n	8001496 <main+0x206>
				  invader1_status[r][c] = 1;
 80013e6:	4964      	ldr	r1, [pc, #400]	; (8001578 <main+0x2e8>)
 80013e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80013ea:	4613      	mov	r3, r2
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	4413      	add	r3, r2
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80013f4:	4413      	add	r3, r2
 80013f6:	2201      	movs	r2, #1
 80013f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				  invader1_xpos[r][c] = 80 + c*30;
 80013fc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80013fe:	4613      	mov	r3, r2
 8001400:	011b      	lsls	r3, r3, #4
 8001402:	1a9b      	subs	r3, r3, r2
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	f103 0150 	add.w	r1, r3, #80	; 0x50
 800140a:	485c      	ldr	r0, [pc, #368]	; (800157c <main+0x2ec>)
 800140c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800140e:	4613      	mov	r3, r2
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	4413      	add	r3, r2
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001418:	4413      	add	r3, r2
 800141a:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
				  invader1_ypos[r][c] = 50 + r*20;
 800141e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001420:	4613      	mov	r3, r2
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	4413      	add	r3, r2
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	f103 0132 	add.w	r1, r3, #50	; 0x32
 800142c:	4854      	ldr	r0, [pc, #336]	; (8001580 <main+0x2f0>)
 800142e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001430:	4613      	mov	r3, r2
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	4413      	add	r3, r2
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800143a:	4413      	add	r3, r2
 800143c:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
				  invader1_prev_xpos[r][c] = invader1_xpos[r][c];
 8001440:	494e      	ldr	r1, [pc, #312]	; (800157c <main+0x2ec>)
 8001442:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001444:	4613      	mov	r3, r2
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	4413      	add	r3, r2
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800144e:	4413      	add	r3, r2
 8001450:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8001454:	484b      	ldr	r0, [pc, #300]	; (8001584 <main+0x2f4>)
 8001456:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001458:	4613      	mov	r3, r2
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	4413      	add	r3, r2
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001462:	4413      	add	r3, r2
 8001464:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
				  invader1_prev_ypos[r][c] = invader1_ypos[r][c];
 8001468:	4945      	ldr	r1, [pc, #276]	; (8001580 <main+0x2f0>)
 800146a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800146c:	4613      	mov	r3, r2
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	4413      	add	r3, r2
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001476:	4413      	add	r3, r2
 8001478:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800147c:	4842      	ldr	r0, [pc, #264]	; (8001588 <main+0x2f8>)
 800147e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001480:	4613      	mov	r3, r2
 8001482:	005b      	lsls	r3, r3, #1
 8001484:	4413      	add	r3, r2
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800148a:	4413      	add	r3, r2
 800148c:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
			  for (int c = 0; c < 6; c++) {
 8001490:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001492:	3301      	adds	r3, #1
 8001494:	653b      	str	r3, [r7, #80]	; 0x50
 8001496:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001498:	2b05      	cmp	r3, #5
 800149a:	dda4      	ble.n	80013e6 <main+0x156>
		  for (int r = 0; r < 4; r++) {
 800149c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800149e:	3301      	adds	r3, #1
 80014a0:	657b      	str	r3, [r7, #84]	; 0x54
 80014a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014a4:	2b03      	cmp	r3, #3
 80014a6:	dd9b      	ble.n	80013e0 <main+0x150>
			  }
		  }

		  // Reset Player Missiles
		  for (int missile_index = 0; missile_index < 3; ++missile_index) {
 80014a8:	2300      	movs	r3, #0
 80014aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80014ac:	e007      	b.n	80014be <main+0x22e>
			player_missile_status[missile_index] = 0;
 80014ae:	4a3b      	ldr	r2, [pc, #236]	; (800159c <main+0x30c>)
 80014b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014b2:	2100      	movs	r1, #0
 80014b4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  for (int missile_index = 0; missile_index < 3; ++missile_index) {
 80014b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014ba:	3301      	adds	r3, #1
 80014bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80014be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	ddf4      	ble.n	80014ae <main+0x21e>
		  }
		  // Reset Invader 1 Missiles
		  for (int missile_index = 0; missile_index < 6; ++missile_index) {
 80014c4:	2300      	movs	r3, #0
 80014c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80014c8:	e007      	b.n	80014da <main+0x24a>
			invader1_missile_status[missile_index] = 0;
 80014ca:	4a35      	ldr	r2, [pc, #212]	; (80015a0 <main+0x310>)
 80014cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80014ce:	2100      	movs	r1, #0
 80014d0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  for (int missile_index = 0; missile_index < 6; ++missile_index) {
 80014d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80014d6:	3301      	adds	r3, #1
 80014d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80014da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80014dc:	2b05      	cmp	r3, #5
 80014de:	ddf4      	ble.n	80014ca <main+0x23a>
		  }

		  // Reset and initialize barriers
		  for (int barrier_index = 0; barrier_index < 3; ++barrier_index) {
 80014e0:	2300      	movs	r3, #0
 80014e2:	647b      	str	r3, [r7, #68]	; 0x44
 80014e4:	e017      	b.n	8001516 <main+0x286>
			barrier_health[barrier_index] = 4;
 80014e6:	4a2f      	ldr	r2, [pc, #188]	; (80015a4 <main+0x314>)
 80014e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014ea:	2104      	movs	r1, #4
 80014ec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			barrier_x_pos[barrier_index] = 60 + barrier_index*80;
 80014f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80014f2:	4613      	mov	r3, r2
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	4413      	add	r3, r2
 80014f8:	011b      	lsls	r3, r3, #4
 80014fa:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80014fe:	492a      	ldr	r1, [pc, #168]	; (80015a8 <main+0x318>)
 8001500:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			barrier_y_pos[barrier_index] = 160;
 8001506:	4a29      	ldr	r2, [pc, #164]	; (80015ac <main+0x31c>)
 8001508:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800150a:	21a0      	movs	r1, #160	; 0xa0
 800150c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  for (int barrier_index = 0; barrier_index < 3; ++barrier_index) {
 8001510:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001512:	3301      	adds	r3, #1
 8001514:	647b      	str	r3, [r7, #68]	; 0x44
 8001516:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001518:	2b02      	cmp	r3, #2
 800151a:	dde4      	ble.n	80014e6 <main+0x256>
		  }

		  gameStatus = LEVEL_1;
 800151c:	4b1b      	ldr	r3, [pc, #108]	; (800158c <main+0x2fc>)
 800151e:	2202      	movs	r2, #2
 8001520:	701a      	strb	r2, [r3, #0]
		  clearscreen();
 8001522:	f7ff f8a3 	bl	800066c <clearscreen>
	  }

	  /// Level 1
	  if (gameStatus == LEVEL_1) {
 8001526:	4b19      	ldr	r3, [pc, #100]	; (800158c <main+0x2fc>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	2b02      	cmp	r3, #2
 800152c:	f47f af31 	bne.w	8001392 <main+0x102>
		if (continue_input != 0) continue_input = 0; // In case continue input was accidentally set.
 8001530:	4b1f      	ldr	r3, [pc, #124]	; (80015b0 <main+0x320>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	b2db      	uxtb	r3, r3
 8001536:	2b00      	cmp	r3, #0
 8001538:	d002      	beq.n	8001540 <main+0x2b0>
 800153a:	4b1d      	ldr	r3, [pc, #116]	; (80015b0 <main+0x320>)
 800153c:	2200      	movs	r2, #0
 800153e:	701a      	strb	r2, [r3, #0]

		if (refresh==1) { // refresh interrupt was triggered
 8001540:	4b1c      	ldr	r3, [pc, #112]	; (80015b4 <main+0x324>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	b2db      	uxtb	r3, r3
 8001546:	2b01      	cmp	r3, #1
 8001548:	f040 80ae 	bne.w	80016a8 <main+0x418>
		  updatescreen();
 800154c:	f7ff f930 	bl	80007b0 <updatescreen>

		  // Save player previous position
		  ship_px = ship_x;
 8001550:	4b05      	ldr	r3, [pc, #20]	; (8001568 <main+0x2d8>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a06      	ldr	r2, [pc, #24]	; (8001570 <main+0x2e0>)
 8001556:	6013      	str	r3, [r2, #0]
		  ship_py = ship_y;
 8001558:	4b04      	ldr	r3, [pc, #16]	; (800156c <main+0x2dc>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a05      	ldr	r2, [pc, #20]	; (8001574 <main+0x2e4>)
 800155e:	6013      	str	r3, [r2, #0]

		  // Save enemy invader 1 previous position
		  for (int r = 0; r < 4; r++) {
 8001560:	2300      	movs	r3, #0
 8001562:	643b      	str	r3, [r7, #64]	; 0x40
 8001564:	e05c      	b.n	8001620 <main+0x390>
 8001566:	bf00      	nop
 8001568:	20000534 	.word	0x20000534
 800156c:	20000288 	.word	0x20000288
 8001570:	20000538 	.word	0x20000538
 8001574:	2000028c 	.word	0x2000028c
 8001578:	20000440 	.word	0x20000440
 800157c:	200002c0 	.word	0x200002c0
 8001580:	20000320 	.word	0x20000320
 8001584:	20000380 	.word	0x20000380
 8001588:	200003e0 	.word	0x200003e0
 800158c:	20000560 	.word	0x20000560
 8001590:	20000280 	.word	0x20000280
 8001594:	2000027c 	.word	0x2000027c
 8001598:	200000d0 	.word	0x200000d0
 800159c:	20000290 	.word	0x20000290
 80015a0:	200004a4 	.word	0x200004a4
 80015a4:	200002b4 	.word	0x200002b4
 80015a8:	2000029c 	.word	0x2000029c
 80015ac:	200002a8 	.word	0x200002a8
 80015b0:	20000286 	.word	0x20000286
 80015b4:	20000284 	.word	0x20000284
			  for (int c = 0; c < 6; c++) {
 80015b8:	2300      	movs	r3, #0
 80015ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80015bc:	e02a      	b.n	8001614 <main+0x384>
				  invader1_prev_xpos[r][c] = invader1_xpos[r][c];
 80015be:	499d      	ldr	r1, [pc, #628]	; (8001834 <main+0x5a4>)
 80015c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80015c2:	4613      	mov	r3, r2
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	4413      	add	r3, r2
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80015cc:	4413      	add	r3, r2
 80015ce:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80015d2:	4899      	ldr	r0, [pc, #612]	; (8001838 <main+0x5a8>)
 80015d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80015d6:	4613      	mov	r3, r2
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	4413      	add	r3, r2
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80015e0:	4413      	add	r3, r2
 80015e2:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
				  invader1_prev_ypos[r][c] = invader1_ypos[r][c];
 80015e6:	4995      	ldr	r1, [pc, #596]	; (800183c <main+0x5ac>)
 80015e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80015ea:	4613      	mov	r3, r2
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	4413      	add	r3, r2
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80015f4:	4413      	add	r3, r2
 80015f6:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80015fa:	4891      	ldr	r0, [pc, #580]	; (8001840 <main+0x5b0>)
 80015fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80015fe:	4613      	mov	r3, r2
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	4413      	add	r3, r2
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001608:	4413      	add	r3, r2
 800160a:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
			  for (int c = 0; c < 6; c++) {
 800160e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001610:	3301      	adds	r3, #1
 8001612:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001616:	2b05      	cmp	r3, #5
 8001618:	ddd1      	ble.n	80015be <main+0x32e>
		  for (int r = 0; r < 4; r++) {
 800161a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800161c:	3301      	adds	r3, #1
 800161e:	643b      	str	r3, [r7, #64]	; 0x40
 8001620:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001622:	2b03      	cmp	r3, #3
 8001624:	ddc8      	ble.n	80015b8 <main+0x328>
			  }
		  }

		  // Save player missiles previous position
		  for (int missile_index = 0; missile_index < 3; ++missile_index) {
 8001626:	2300      	movs	r3, #0
 8001628:	63bb      	str	r3, [r7, #56]	; 0x38
 800162a:	e018      	b.n	800165e <main+0x3ce>
			if (player_missile_status[missile_index] == 1) {
 800162c:	4a85      	ldr	r2, [pc, #532]	; (8001844 <main+0x5b4>)
 800162e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001630:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001634:	2b01      	cmp	r3, #1
 8001636:	d10f      	bne.n	8001658 <main+0x3c8>
				player_missile_prev_xpos[missile_index] = player_missile_xpos[missile_index];
 8001638:	4a83      	ldr	r2, [pc, #524]	; (8001848 <main+0x5b8>)
 800163a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800163c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001640:	4982      	ldr	r1, [pc, #520]	; (800184c <main+0x5bc>)
 8001642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001644:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				player_missile_prev_ypos[missile_index] = player_missile_ypos[missile_index];
 8001648:	4a81      	ldr	r2, [pc, #516]	; (8001850 <main+0x5c0>)
 800164a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800164c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001650:	4980      	ldr	r1, [pc, #512]	; (8001854 <main+0x5c4>)
 8001652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001654:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		  for (int missile_index = 0; missile_index < 3; ++missile_index) {
 8001658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800165a:	3301      	adds	r3, #1
 800165c:	63bb      	str	r3, [r7, #56]	; 0x38
 800165e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001660:	2b02      	cmp	r3, #2
 8001662:	dde3      	ble.n	800162c <main+0x39c>
			}
		  }

		  // Save enemy missiles previous position
		  for (int missile_index = 0; missile_index < 6; ++missile_index) {
 8001664:	2300      	movs	r3, #0
 8001666:	637b      	str	r3, [r7, #52]	; 0x34
 8001668:	e018      	b.n	800169c <main+0x40c>
			if (invader1_missile_status[missile_index] == 1) {
 800166a:	4a7b      	ldr	r2, [pc, #492]	; (8001858 <main+0x5c8>)
 800166c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800166e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001672:	2b01      	cmp	r3, #1
 8001674:	d10f      	bne.n	8001696 <main+0x406>
				invader1_missile_prev_xpos[missile_index] = invader1_missile_xpos[missile_index];
 8001676:	4a79      	ldr	r2, [pc, #484]	; (800185c <main+0x5cc>)
 8001678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800167a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800167e:	4978      	ldr	r1, [pc, #480]	; (8001860 <main+0x5d0>)
 8001680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001682:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				invader1_missile_prev_ypos[missile_index] = invader1_missile_ypos[missile_index];
 8001686:	4a77      	ldr	r2, [pc, #476]	; (8001864 <main+0x5d4>)
 8001688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800168a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800168e:	4976      	ldr	r1, [pc, #472]	; (8001868 <main+0x5d8>)
 8001690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		  for (int missile_index = 0; missile_index < 6; ++missile_index) {
 8001696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001698:	3301      	adds	r3, #1
 800169a:	637b      	str	r3, [r7, #52]	; 0x34
 800169c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800169e:	2b05      	cmp	r3, #5
 80016a0:	dde3      	ble.n	800166a <main+0x3da>
			}
		  }

		  refresh = 0;
 80016a2:	4b72      	ldr	r3, [pc, #456]	; (800186c <main+0x5dc>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	701a      	strb	r2, [r3, #0]
		} // Refresh triggered


		// Move player ship, player missiles and enemy missiles
		if (HAL_GetTick() - ctr_lastcheck >= 1) {
 80016a8:	f000 fc50 	bl	8001f4c <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	4b70      	ldr	r3, [pc, #448]	; (8001870 <main+0x5e0>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	429a      	cmp	r2, r3
 80016b4:	d05e      	beq.n	8001774 <main+0x4e4>
			if ((ship_x < 308) && HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_9)) { // Right
 80016b6:	4b6f      	ldr	r3, [pc, #444]	; (8001874 <main+0x5e4>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 80016be:	da0d      	bge.n	80016dc <main+0x44c>
 80016c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016c4:	486c      	ldr	r0, [pc, #432]	; (8001878 <main+0x5e8>)
 80016c6:	f000 fee1 	bl	800248c <HAL_GPIO_ReadPin>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d005      	beq.n	80016dc <main+0x44c>
				ship_x++;
 80016d0:	4b68      	ldr	r3, [pc, #416]	; (8001874 <main+0x5e4>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	3301      	adds	r3, #1
 80016d6:	4a67      	ldr	r2, [pc, #412]	; (8001874 <main+0x5e4>)
 80016d8:	6013      	str	r3, [r2, #0]
 80016da:	e010      	b.n	80016fe <main+0x46e>
			}
			else if ((ship_x > 0) && HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_10)) { // Left
 80016dc:	4b65      	ldr	r3, [pc, #404]	; (8001874 <main+0x5e4>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	dd0c      	ble.n	80016fe <main+0x46e>
 80016e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016e8:	4863      	ldr	r0, [pc, #396]	; (8001878 <main+0x5e8>)
 80016ea:	f000 fecf 	bl	800248c <HAL_GPIO_ReadPin>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d004      	beq.n	80016fe <main+0x46e>
				ship_x--;
 80016f4:	4b5f      	ldr	r3, [pc, #380]	; (8001874 <main+0x5e4>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	3b01      	subs	r3, #1
 80016fa:	4a5e      	ldr	r2, [pc, #376]	; (8001874 <main+0x5e4>)
 80016fc:	6013      	str	r3, [r2, #0]
			}

			// Move the fired player missiles
			for (int missile_index = 0; missile_index < 3; ++missile_index) {
 80016fe:	2300      	movs	r3, #0
 8001700:	633b      	str	r3, [r7, #48]	; 0x30
 8001702:	e014      	b.n	800172e <main+0x49e>
				if (player_missile_status[missile_index] == 1) {
 8001704:	4a4f      	ldr	r2, [pc, #316]	; (8001844 <main+0x5b4>)
 8001706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001708:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800170c:	2b01      	cmp	r3, #1
 800170e:	d10b      	bne.n	8001728 <main+0x498>
					player_missile_ypos[missile_index]--;
 8001710:	4a4f      	ldr	r2, [pc, #316]	; (8001850 <main+0x5c0>)
 8001712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001714:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001718:	1e5a      	subs	r2, r3, #1
 800171a:	494d      	ldr	r1, [pc, #308]	; (8001850 <main+0x5c0>)
 800171c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800171e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					updatePlayerMissileStatus(missile_index);
 8001722:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001724:	f7ff fafc 	bl	8000d20 <updatePlayerMissileStatus>
			for (int missile_index = 0; missile_index < 3; ++missile_index) {
 8001728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800172a:	3301      	adds	r3, #1
 800172c:	633b      	str	r3, [r7, #48]	; 0x30
 800172e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001730:	2b02      	cmp	r3, #2
 8001732:	dde7      	ble.n	8001704 <main+0x474>
				}
			}

			// Move fired enemy missiles
			for (int missile_index = 0; missile_index < 6; ++missile_index) {
 8001734:	2300      	movs	r3, #0
 8001736:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001738:	e014      	b.n	8001764 <main+0x4d4>
				if (invader1_missile_status[missile_index] == 1) {
 800173a:	4a47      	ldr	r2, [pc, #284]	; (8001858 <main+0x5c8>)
 800173c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800173e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001742:	2b01      	cmp	r3, #1
 8001744:	d10b      	bne.n	800175e <main+0x4ce>
					invader1_missile_ypos[missile_index]++;
 8001746:	4a47      	ldr	r2, [pc, #284]	; (8001864 <main+0x5d4>)
 8001748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800174a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800174e:	1c5a      	adds	r2, r3, #1
 8001750:	4944      	ldr	r1, [pc, #272]	; (8001864 <main+0x5d4>)
 8001752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001754:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					updateEnemyMissileStatus(missile_index);
 8001758:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800175a:	f7ff fc4f 	bl	8000ffc <updateEnemyMissileStatus>
			for (int missile_index = 0; missile_index < 6; ++missile_index) {
 800175e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001760:	3301      	adds	r3, #1
 8001762:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001766:	2b05      	cmp	r3, #5
 8001768:	dde7      	ble.n	800173a <main+0x4aa>
				}
			}

			ctr_lastcheck = HAL_GetTick();
 800176a:	f000 fbef 	bl	8001f4c <HAL_GetTick>
 800176e:	4602      	mov	r2, r0
 8001770:	4b3f      	ldr	r3, [pc, #252]	; (8001870 <main+0x5e0>)
 8001772:	601a      	str	r2, [r3, #0]
		}

		// Move Invader 1
		if (HAL_GetTick() - ctr_invader1_lastcheck >= 16) {
 8001774:	f000 fbea 	bl	8001f4c <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	4b40      	ldr	r3, [pc, #256]	; (800187c <main+0x5ec>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	2b0f      	cmp	r3, #15
 8001782:	f240 80d9 	bls.w	8001938 <main+0x6a8>

			if (row_to_move < 0) {
 8001786:	4b3e      	ldr	r3, [pc, #248]	; (8001880 <main+0x5f0>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	2b00      	cmp	r3, #0
 800178c:	da02      	bge.n	8001794 <main+0x504>
				row_to_move = 3;
 800178e:	4b3c      	ldr	r3, [pc, #240]	; (8001880 <main+0x5f0>)
 8001790:	2203      	movs	r2, #3
 8001792:	601a      	str	r2, [r3, #0]
			}
			for (int col = 0; col < 6; col++) {
 8001794:	2300      	movs	r3, #0
 8001796:	62bb      	str	r3, [r7, #40]	; 0x28
 8001798:	e039      	b.n	800180e <main+0x57e>
				if (inv1_direction == 1) {
 800179a:	4b3a      	ldr	r3, [pc, #232]	; (8001884 <main+0x5f4>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d117      	bne.n	80017d2 <main+0x542>
					invader1_xpos[row_to_move][col] += 4;
 80017a2:	4b37      	ldr	r3, [pc, #220]	; (8001880 <main+0x5f0>)
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	4923      	ldr	r1, [pc, #140]	; (8001834 <main+0x5a4>)
 80017a8:	4613      	mov	r3, r2
 80017aa:	005b      	lsls	r3, r3, #1
 80017ac:	4413      	add	r3, r2
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80017b2:	4413      	add	r3, r2
 80017b4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80017b8:	4a31      	ldr	r2, [pc, #196]	; (8001880 <main+0x5f0>)
 80017ba:	6812      	ldr	r2, [r2, #0]
 80017bc:	1d19      	adds	r1, r3, #4
 80017be:	481d      	ldr	r0, [pc, #116]	; (8001834 <main+0x5a4>)
 80017c0:	4613      	mov	r3, r2
 80017c2:	005b      	lsls	r3, r3, #1
 80017c4:	4413      	add	r3, r2
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80017ca:	4413      	add	r3, r2
 80017cc:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 80017d0:	e01a      	b.n	8001808 <main+0x578>
				}
				else if (inv1_direction == 0) {
 80017d2:	4b2c      	ldr	r3, [pc, #176]	; (8001884 <main+0x5f4>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d116      	bne.n	8001808 <main+0x578>
					invader1_xpos[row_to_move][col] -= 4;
 80017da:	4b29      	ldr	r3, [pc, #164]	; (8001880 <main+0x5f0>)
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	4915      	ldr	r1, [pc, #84]	; (8001834 <main+0x5a4>)
 80017e0:	4613      	mov	r3, r2
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	4413      	add	r3, r2
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80017ea:	4413      	add	r3, r2
 80017ec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80017f0:	4a23      	ldr	r2, [pc, #140]	; (8001880 <main+0x5f0>)
 80017f2:	6812      	ldr	r2, [r2, #0]
 80017f4:	1f19      	subs	r1, r3, #4
 80017f6:	480f      	ldr	r0, [pc, #60]	; (8001834 <main+0x5a4>)
 80017f8:	4613      	mov	r3, r2
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	4413      	add	r3, r2
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001802:	4413      	add	r3, r2
 8001804:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
			for (int col = 0; col < 6; col++) {
 8001808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800180a:	3301      	adds	r3, #1
 800180c:	62bb      	str	r3, [r7, #40]	; 0x28
 800180e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001810:	2b05      	cmp	r3, #5
 8001812:	ddc2      	ble.n	800179a <main+0x50a>
				}
			}
			row_to_move--;
 8001814:	4b1a      	ldr	r3, [pc, #104]	; (8001880 <main+0x5f0>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	3b01      	subs	r3, #1
 800181a:	4a19      	ldr	r2, [pc, #100]	; (8001880 <main+0x5f0>)
 800181c:	6013      	str	r3, [r2, #0]

			if (invader1_xpos[0][5] > 304) { // move down at right side
 800181e:	4b05      	ldr	r3, [pc, #20]	; (8001834 <main+0x5a4>)
 8001820:	695b      	ldr	r3, [r3, #20]
 8001822:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8001826:	dd54      	ble.n	80018d2 <main+0x642>
				for (int row = 0; row < 4; row++) {
 8001828:	2300      	movs	r3, #0
 800182a:	627b      	str	r3, [r7, #36]	; 0x24
 800182c:	e04a      	b.n	80018c4 <main+0x634>
					for (int col = 0; col < 6; col++) {
 800182e:	2300      	movs	r3, #0
 8001830:	623b      	str	r3, [r7, #32]
 8001832:	e041      	b.n	80018b8 <main+0x628>
 8001834:	200002c0 	.word	0x200002c0
 8001838:	20000380 	.word	0x20000380
 800183c:	20000320 	.word	0x20000320
 8001840:	200003e0 	.word	0x200003e0
 8001844:	20000290 	.word	0x20000290
 8001848:	20000564 	.word	0x20000564
 800184c:	20000528 	.word	0x20000528
 8001850:	2000051c 	.word	0x2000051c
 8001854:	20000554 	.word	0x20000554
 8001858:	200004a4 	.word	0x200004a4
 800185c:	20000570 	.word	0x20000570
 8001860:	200004ec 	.word	0x200004ec
 8001864:	2000053c 	.word	0x2000053c
 8001868:	20000504 	.word	0x20000504
 800186c:	20000284 	.word	0x20000284
 8001870:	200004bc 	.word	0x200004bc
 8001874:	20000534 	.word	0x20000534
 8001878:	40020c00 	.word	0x40020c00
 800187c:	200004c0 	.word	0x200004c0
 8001880:	200000c8 	.word	0x200000c8
 8001884:	200000cc 	.word	0x200000cc
						invader1_ypos[row][col] += 2;
 8001888:	4991      	ldr	r1, [pc, #580]	; (8001ad0 <main+0x840>)
 800188a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800188c:	4613      	mov	r3, r2
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	4413      	add	r3, r2
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	6a3a      	ldr	r2, [r7, #32]
 8001896:	4413      	add	r3, r2
 8001898:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800189c:	1c99      	adds	r1, r3, #2
 800189e:	488c      	ldr	r0, [pc, #560]	; (8001ad0 <main+0x840>)
 80018a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018a2:	4613      	mov	r3, r2
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	4413      	add	r3, r2
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	6a3a      	ldr	r2, [r7, #32]
 80018ac:	4413      	add	r3, r2
 80018ae:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
					for (int col = 0; col < 6; col++) {
 80018b2:	6a3b      	ldr	r3, [r7, #32]
 80018b4:	3301      	adds	r3, #1
 80018b6:	623b      	str	r3, [r7, #32]
 80018b8:	6a3b      	ldr	r3, [r7, #32]
 80018ba:	2b05      	cmp	r3, #5
 80018bc:	dde4      	ble.n	8001888 <main+0x5f8>
				for (int row = 0; row < 4; row++) {
 80018be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c0:	3301      	adds	r3, #1
 80018c2:	627b      	str	r3, [r7, #36]	; 0x24
 80018c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c6:	2b03      	cmp	r3, #3
 80018c8:	ddb1      	ble.n	800182e <main+0x59e>
					}
				}
				inv1_direction = 0;
 80018ca:	4b82      	ldr	r3, [pc, #520]	; (8001ad4 <main+0x844>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	e02d      	b.n	800192e <main+0x69e>
			}
			else if (invader1_xpos[0][0] < 4) { // down at left side
 80018d2:	4b81      	ldr	r3, [pc, #516]	; (8001ad8 <main+0x848>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	2b03      	cmp	r3, #3
 80018d8:	dc29      	bgt.n	800192e <main+0x69e>
				for (int row = 0; row < 4; ++row) {
 80018da:	2300      	movs	r3, #0
 80018dc:	61fb      	str	r3, [r7, #28]
 80018de:	e020      	b.n	8001922 <main+0x692>
					for (int col = 0; col < 6; ++col) {
 80018e0:	2300      	movs	r3, #0
 80018e2:	61bb      	str	r3, [r7, #24]
 80018e4:	e017      	b.n	8001916 <main+0x686>
						invader1_ypos[row][col] += 2;
 80018e6:	497a      	ldr	r1, [pc, #488]	; (8001ad0 <main+0x840>)
 80018e8:	69fa      	ldr	r2, [r7, #28]
 80018ea:	4613      	mov	r3, r2
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	4413      	add	r3, r2
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	69ba      	ldr	r2, [r7, #24]
 80018f4:	4413      	add	r3, r2
 80018f6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80018fa:	1c99      	adds	r1, r3, #2
 80018fc:	4874      	ldr	r0, [pc, #464]	; (8001ad0 <main+0x840>)
 80018fe:	69fa      	ldr	r2, [r7, #28]
 8001900:	4613      	mov	r3, r2
 8001902:	005b      	lsls	r3, r3, #1
 8001904:	4413      	add	r3, r2
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	4413      	add	r3, r2
 800190c:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
					for (int col = 0; col < 6; ++col) {
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	3301      	adds	r3, #1
 8001914:	61bb      	str	r3, [r7, #24]
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	2b05      	cmp	r3, #5
 800191a:	dde4      	ble.n	80018e6 <main+0x656>
				for (int row = 0; row < 4; ++row) {
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	3301      	adds	r3, #1
 8001920:	61fb      	str	r3, [r7, #28]
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	2b03      	cmp	r3, #3
 8001926:	dddb      	ble.n	80018e0 <main+0x650>
					}
				}
				inv1_direction = 1;
 8001928:	4b6a      	ldr	r3, [pc, #424]	; (8001ad4 <main+0x844>)
 800192a:	2201      	movs	r2, #1
 800192c:	601a      	str	r2, [r3, #0]
			}

			ctr_invader1_lastcheck = HAL_GetTick();
 800192e:	f000 fb0d 	bl	8001f4c <HAL_GetTick>
 8001932:	4602      	mov	r2, r0
 8001934:	4b69      	ldr	r3, [pc, #420]	; (8001adc <main+0x84c>)
 8001936:	601a      	str	r2, [r3, #0]
		}


		// Player ship fired missile
		if (player_fire == 1) {
 8001938:	4b69      	ldr	r3, [pc, #420]	; (8001ae0 <main+0x850>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	b2db      	uxtb	r3, r3
 800193e:	2b01      	cmp	r3, #1
 8001940:	d125      	bne.n	800198e <main+0x6fe>
			// loop to find available missile
			for (int missile_index = 0; missile_index < 3; ++missile_index) {
 8001942:	2300      	movs	r3, #0
 8001944:	617b      	str	r3, [r7, #20]
 8001946:	e01c      	b.n	8001982 <main+0x6f2>
				if (player_missile_status[missile_index] == 0) {
 8001948:	4a66      	ldr	r2, [pc, #408]	; (8001ae4 <main+0x854>)
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d113      	bne.n	800197c <main+0x6ec>

					player_missile_status[missile_index] = 1;
 8001954:	4a63      	ldr	r2, [pc, #396]	; (8001ae4 <main+0x854>)
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	2101      	movs	r1, #1
 800195a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					player_missile_xpos[missile_index] = ship_x + 5;
 800195e:	4b62      	ldr	r3, [pc, #392]	; (8001ae8 <main+0x858>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	1d5a      	adds	r2, r3, #5
 8001964:	4961      	ldr	r1, [pc, #388]	; (8001aec <main+0x85c>)
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					player_missile_ypos[missile_index] = ship_y - 4;
 800196c:	4b60      	ldr	r3, [pc, #384]	; (8001af0 <main+0x860>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	1f1a      	subs	r2, r3, #4
 8001972:	4960      	ldr	r1, [pc, #384]	; (8001af4 <main+0x864>)
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					break;
 800197a:	e005      	b.n	8001988 <main+0x6f8>
			for (int missile_index = 0; missile_index < 3; ++missile_index) {
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	3301      	adds	r3, #1
 8001980:	617b      	str	r3, [r7, #20]
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	2b02      	cmp	r3, #2
 8001986:	dddf      	ble.n	8001948 <main+0x6b8>
				}
			}
			player_fire = 0;
 8001988:	4b55      	ldr	r3, [pc, #340]	; (8001ae0 <main+0x850>)
 800198a:	2200      	movs	r2, #0
 800198c:	701a      	strb	r2, [r3, #0]
		}

		// Fire invader 1 missile
		if (HAL_GetTick() - ctr_invader1_fire >= 2) {
 800198e:	f000 fadd 	bl	8001f4c <HAL_GetTick>
 8001992:	4602      	mov	r2, r0
 8001994:	4b58      	ldr	r3, [pc, #352]	; (8001af8 <main+0x868>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	2b01      	cmp	r3, #1
 800199c:	d964      	bls.n	8001a68 <main+0x7d8>
			for (int missile_index = 0; missile_index < 6; ++missile_index) {
 800199e:	2300      	movs	r3, #0
 80019a0:	60bb      	str	r3, [r7, #8]
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	2b05      	cmp	r3, #5
 80019a6:	dc5a      	bgt.n	8001a5e <main+0x7ce>

				if (invader1_missile_status[missile_index] == 0) {
 80019a8:	4a54      	ldr	r2, [pc, #336]	; (8001afc <main+0x86c>)
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d153      	bne.n	8001a5c <main+0x7cc>
					if (invader1_fire_index > 95) {
 80019b4:	4b52      	ldr	r3, [pc, #328]	; (8001b00 <main+0x870>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2b5f      	cmp	r3, #95	; 0x5f
 80019ba:	dd02      	ble.n	80019c2 <main+0x732>
						invader1_fire_index = 0;
 80019bc:	4b50      	ldr	r3, [pc, #320]	; (8001b00 <main+0x870>)
 80019be:	2200      	movs	r2, #0
 80019c0:	601a      	str	r2, [r3, #0]
					}
					int row = invader1_fire_sequence[invader1_fire_index] / 6;
 80019c2:	4b4f      	ldr	r3, [pc, #316]	; (8001b00 <main+0x870>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a4f      	ldr	r2, [pc, #316]	; (8001b04 <main+0x874>)
 80019c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019cc:	4a4e      	ldr	r2, [pc, #312]	; (8001b08 <main+0x878>)
 80019ce:	fb82 1203 	smull	r1, r2, r2, r3
 80019d2:	17db      	asrs	r3, r3, #31
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	607b      	str	r3, [r7, #4]
					int col = invader1_fire_sequence[invader1_fire_index] % 6;
 80019d8:	4b49      	ldr	r3, [pc, #292]	; (8001b00 <main+0x870>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a49      	ldr	r2, [pc, #292]	; (8001b04 <main+0x874>)
 80019de:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80019e2:	4b49      	ldr	r3, [pc, #292]	; (8001b08 <main+0x878>)
 80019e4:	fb83 3102 	smull	r3, r1, r3, r2
 80019e8:	17d3      	asrs	r3, r2, #31
 80019ea:	1ac9      	subs	r1, r1, r3
 80019ec:	460b      	mov	r3, r1
 80019ee:	005b      	lsls	r3, r3, #1
 80019f0:	440b      	add	r3, r1
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	603b      	str	r3, [r7, #0]
					invader1_fire_index++;
 80019f8:	4b41      	ldr	r3, [pc, #260]	; (8001b00 <main+0x870>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	3301      	adds	r3, #1
 80019fe:	4a40      	ldr	r2, [pc, #256]	; (8001b00 <main+0x870>)
 8001a00:	6013      	str	r3, [r2, #0]
					if (invader1_status[row][col] == 1) {
 8001a02:	4942      	ldr	r1, [pc, #264]	; (8001b0c <main+0x87c>)
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	4613      	mov	r3, r2
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	4413      	add	r3, r2
 8001a0c:	005b      	lsls	r3, r3, #1
 8001a0e:	683a      	ldr	r2, [r7, #0]
 8001a10:	4413      	add	r3, r2
 8001a12:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d120      	bne.n	8001a5c <main+0x7cc>
						invader1_missile_status[missile_index] = 1;
 8001a1a:	4a38      	ldr	r2, [pc, #224]	; (8001afc <main+0x86c>)
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	2101      	movs	r1, #1
 8001a20:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						invader1_missile_xpos[missile_index] = invader1_xpos[row][col];
 8001a24:	492c      	ldr	r1, [pc, #176]	; (8001ad8 <main+0x848>)
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	4613      	mov	r3, r2
 8001a2a:	005b      	lsls	r3, r3, #1
 8001a2c:	4413      	add	r3, r2
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	683a      	ldr	r2, [r7, #0]
 8001a32:	4413      	add	r3, r2
 8001a34:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8001a38:	4935      	ldr	r1, [pc, #212]	; (8001b10 <main+0x880>)
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						invader1_missile_ypos[missile_index] = invader1_ypos[row][col];
 8001a40:	4923      	ldr	r1, [pc, #140]	; (8001ad0 <main+0x840>)
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	4613      	mov	r3, r2
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	4413      	add	r3, r2
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	683a      	ldr	r2, [r7, #0]
 8001a4e:	4413      	add	r3, r2
 8001a50:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8001a54:	492f      	ldr	r1, [pc, #188]	; (8001b14 <main+0x884>)
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					}
				}
				break;
 8001a5c:	bf00      	nop
			}

			ctr_invader1_fire = HAL_GetTick();
 8001a5e:	f000 fa75 	bl	8001f4c <HAL_GetTick>
 8001a62:	4602      	mov	r2, r0
 8001a64:	4b24      	ldr	r3, [pc, #144]	; (8001af8 <main+0x868>)
 8001a66:	601a      	str	r2, [r3, #0]
		}

		// Check if all Invader1 are dead
		all_invader1_alive = 0;
 8001a68:	4b2b      	ldr	r3, [pc, #172]	; (8001b18 <main+0x888>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	601a      	str	r2, [r3, #0]
		for (int row = 0; row < 4; ++row) {
 8001a6e:	2300      	movs	r3, #0
 8001a70:	613b      	str	r3, [r7, #16]
 8001a72:	e01e      	b.n	8001ab2 <main+0x822>
			for (int col = 0; col < 6; ++col) {
 8001a74:	2300      	movs	r3, #0
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	e011      	b.n	8001a9e <main+0x80e>
				if (invader1_status[row][col] == 1) {
 8001a7a:	4924      	ldr	r1, [pc, #144]	; (8001b0c <main+0x87c>)
 8001a7c:	693a      	ldr	r2, [r7, #16]
 8001a7e:	4613      	mov	r3, r2
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	4413      	add	r3, r2
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	68fa      	ldr	r2, [r7, #12]
 8001a88:	4413      	add	r3, r2
 8001a8a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d102      	bne.n	8001a98 <main+0x808>
					all_invader1_alive = 1;
 8001a92:	4b21      	ldr	r3, [pc, #132]	; (8001b18 <main+0x888>)
 8001a94:	2201      	movs	r2, #1
 8001a96:	601a      	str	r2, [r3, #0]
			for (int col = 0; col < 6; ++col) {
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	60fb      	str	r3, [r7, #12]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2b05      	cmp	r3, #5
 8001aa2:	ddea      	ble.n	8001a7a <main+0x7ea>
				}
			}
			if (all_invader1_alive) {
 8001aa4:	4b1c      	ldr	r3, [pc, #112]	; (8001b18 <main+0x888>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d106      	bne.n	8001aba <main+0x82a>
		for (int row = 0; row < 4; ++row) {
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	3301      	adds	r3, #1
 8001ab0:	613b      	str	r3, [r7, #16]
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	2b03      	cmp	r3, #3
 8001ab6:	dddd      	ble.n	8001a74 <main+0x7e4>
 8001ab8:	e000      	b.n	8001abc <main+0x82c>
				break;
 8001aba:	bf00      	nop
			}
		}
		if (all_invader1_alive == 0) {
 8001abc:	4b16      	ldr	r3, [pc, #88]	; (8001b18 <main+0x888>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	f47f ac66 	bne.w	8001392 <main+0x102>
			gameStatus = RESET_LEVEL1;
 8001ac6:	4b15      	ldr	r3, [pc, #84]	; (8001b1c <main+0x88c>)
 8001ac8:	2201      	movs	r2, #1
 8001aca:	701a      	strb	r2, [r3, #0]
	  if (gameStatus == INTRO_SCREEN) {
 8001acc:	e461      	b.n	8001392 <main+0x102>
 8001ace:	bf00      	nop
 8001ad0:	20000320 	.word	0x20000320
 8001ad4:	200000cc 	.word	0x200000cc
 8001ad8:	200002c0 	.word	0x200002c0
 8001adc:	200004c0 	.word	0x200004c0
 8001ae0:	20000285 	.word	0x20000285
 8001ae4:	20000290 	.word	0x20000290
 8001ae8:	20000534 	.word	0x20000534
 8001aec:	20000564 	.word	0x20000564
 8001af0:	20000288 	.word	0x20000288
 8001af4:	2000051c 	.word	0x2000051c
 8001af8:	200004c4 	.word	0x200004c4
 8001afc:	200004a4 	.word	0x200004a4
 8001b00:	200004a0 	.word	0x200004a0
 8001b04:	200000d4 	.word	0x200000d4
 8001b08:	2aaaaaab 	.word	0x2aaaaaab
 8001b0c:	20000440 	.word	0x20000440
 8001b10:	20000570 	.word	0x20000570
 8001b14:	2000053c 	.word	0x2000053c
 8001b18:	200000d0 	.word	0x200000d0
 8001b1c:	20000560 	.word	0x20000560

08001b20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b094      	sub	sp, #80	; 0x50
 8001b24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b26:	f107 0320 	add.w	r3, r7, #32
 8001b2a:	2230      	movs	r2, #48	; 0x30
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f001 f914 	bl	8002d5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b34:	f107 030c 	add.w	r3, r7, #12
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]
 8001b3c:	605a      	str	r2, [r3, #4]
 8001b3e:	609a      	str	r2, [r3, #8]
 8001b40:	60da      	str	r2, [r3, #12]
 8001b42:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b44:	2300      	movs	r3, #0
 8001b46:	60bb      	str	r3, [r7, #8]
 8001b48:	4b22      	ldr	r3, [pc, #136]	; (8001bd4 <SystemClock_Config+0xb4>)
 8001b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4c:	4a21      	ldr	r2, [pc, #132]	; (8001bd4 <SystemClock_Config+0xb4>)
 8001b4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b52:	6413      	str	r3, [r2, #64]	; 0x40
 8001b54:	4b1f      	ldr	r3, [pc, #124]	; (8001bd4 <SystemClock_Config+0xb4>)
 8001b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b5c:	60bb      	str	r3, [r7, #8]
 8001b5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b60:	2300      	movs	r3, #0
 8001b62:	607b      	str	r3, [r7, #4]
 8001b64:	4b1c      	ldr	r3, [pc, #112]	; (8001bd8 <SystemClock_Config+0xb8>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a1b      	ldr	r2, [pc, #108]	; (8001bd8 <SystemClock_Config+0xb8>)
 8001b6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b6e:	6013      	str	r3, [r2, #0]
 8001b70:	4b19      	ldr	r3, [pc, #100]	; (8001bd8 <SystemClock_Config+0xb8>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b78:	607b      	str	r3, [r7, #4]
 8001b7a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b80:	2301      	movs	r3, #1
 8001b82:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b84:	2310      	movs	r3, #16
 8001b86:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b8c:	f107 0320 	add.w	r3, r7, #32
 8001b90:	4618      	mov	r0, r3
 8001b92:	f000 fcb7 	bl	8002504 <HAL_RCC_OscConfig>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001b9c:	f000 f8ac 	bl	8001cf8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ba0:	230f      	movs	r3, #15
 8001ba2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001bac:	2300      	movs	r3, #0
 8001bae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001bb4:	f107 030c 	add.w	r3, r7, #12
 8001bb8:	2100      	movs	r1, #0
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f000 ff12 	bl	80029e4 <HAL_RCC_ClockConfig>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001bc6:	f000 f897 	bl	8001cf8 <Error_Handler>
  }
}
 8001bca:	bf00      	nop
 8001bcc:	3750      	adds	r7, #80	; 0x50
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	40023800 	.word	0x40023800
 8001bd8:	40007000 	.word	0x40007000

08001bdc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b088      	sub	sp, #32
 8001be0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be2:	f107 030c 	add.w	r3, r7, #12
 8001be6:	2200      	movs	r2, #0
 8001be8:	601a      	str	r2, [r3, #0]
 8001bea:	605a      	str	r2, [r3, #4]
 8001bec:	609a      	str	r2, [r3, #8]
 8001bee:	60da      	str	r2, [r3, #12]
 8001bf0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	60bb      	str	r3, [r7, #8]
 8001bf6:	4b3b      	ldr	r3, [pc, #236]	; (8001ce4 <MX_GPIO_Init+0x108>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfa:	4a3a      	ldr	r2, [pc, #232]	; (8001ce4 <MX_GPIO_Init+0x108>)
 8001bfc:	f043 0301 	orr.w	r3, r3, #1
 8001c00:	6313      	str	r3, [r2, #48]	; 0x30
 8001c02:	4b38      	ldr	r3, [pc, #224]	; (8001ce4 <MX_GPIO_Init+0x108>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	f003 0301 	and.w	r3, r3, #1
 8001c0a:	60bb      	str	r3, [r7, #8]
 8001c0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c0e:	2300      	movs	r3, #0
 8001c10:	607b      	str	r3, [r7, #4]
 8001c12:	4b34      	ldr	r3, [pc, #208]	; (8001ce4 <MX_GPIO_Init+0x108>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c16:	4a33      	ldr	r2, [pc, #204]	; (8001ce4 <MX_GPIO_Init+0x108>)
 8001c18:	f043 0308 	orr.w	r3, r3, #8
 8001c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c1e:	4b31      	ldr	r3, [pc, #196]	; (8001ce4 <MX_GPIO_Init+0x108>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c22:	f003 0308 	and.w	r3, r3, #8
 8001c26:	607b      	str	r3, [r7, #4]
 8001c28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	603b      	str	r3, [r7, #0]
 8001c2e:	4b2d      	ldr	r3, [pc, #180]	; (8001ce4 <MX_GPIO_Init+0x108>)
 8001c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c32:	4a2c      	ldr	r2, [pc, #176]	; (8001ce4 <MX_GPIO_Init+0x108>)
 8001c34:	f043 0302 	orr.w	r3, r3, #2
 8001c38:	6313      	str	r3, [r2, #48]	; 0x30
 8001c3a:	4b2a      	ldr	r3, [pc, #168]	; (8001ce4 <MX_GPIO_Init+0x108>)
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	603b      	str	r3, [r7, #0]
 8001c44:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c46:	2301      	movs	r3, #1
 8001c48:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c4a:	4b27      	ldr	r3, [pc, #156]	; (8001ce8 <MX_GPIO_Init+0x10c>)
 8001c4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c52:	f107 030c 	add.w	r3, r7, #12
 8001c56:	4619      	mov	r1, r3
 8001c58:	4824      	ldr	r0, [pc, #144]	; (8001cec <MX_GPIO_Init+0x110>)
 8001c5a:	f000 fa95 	bl	8002188 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001c5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c64:	4b20      	ldr	r3, [pc, #128]	; (8001ce8 <MX_GPIO_Init+0x10c>)
 8001c66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c6c:	f107 030c 	add.w	r3, r7, #12
 8001c70:	4619      	mov	r1, r3
 8001c72:	481f      	ldr	r0, [pc, #124]	; (8001cf0 <MX_GPIO_Init+0x114>)
 8001c74:	f000 fa88 	bl	8002188 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001c78:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001c7c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c82:	2300      	movs	r3, #0
 8001c84:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c86:	f107 030c 	add.w	r3, r7, #12
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	4818      	ldr	r0, [pc, #96]	; (8001cf0 <MX_GPIO_Init+0x114>)
 8001c8e:	f000 fa7b 	bl	8002188 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001c92:	2310      	movs	r3, #16
 8001c94:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c96:	4b14      	ldr	r3, [pc, #80]	; (8001ce8 <MX_GPIO_Init+0x10c>)
 8001c98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c9e:	f107 030c 	add.w	r3, r7, #12
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	4813      	ldr	r0, [pc, #76]	; (8001cf4 <MX_GPIO_Init+0x118>)
 8001ca6:	f000 fa6f 	bl	8002188 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001caa:	2200      	movs	r2, #0
 8001cac:	2100      	movs	r1, #0
 8001cae:	2006      	movs	r0, #6
 8001cb0:	f000 fa33 	bl	800211a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001cb4:	2006      	movs	r0, #6
 8001cb6:	f000 fa4c 	bl	8002152 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001cba:	2200      	movs	r2, #0
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	200a      	movs	r0, #10
 8001cc0:	f000 fa2b 	bl	800211a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001cc4:	200a      	movs	r0, #10
 8001cc6:	f000 fa44 	bl	8002152 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001cca:	2200      	movs	r2, #0
 8001ccc:	2100      	movs	r1, #0
 8001cce:	2017      	movs	r0, #23
 8001cd0:	f000 fa23 	bl	800211a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001cd4:	2017      	movs	r0, #23
 8001cd6:	f000 fa3c 	bl	8002152 <HAL_NVIC_EnableIRQ>

}
 8001cda:	bf00      	nop
 8001cdc:	3720      	adds	r7, #32
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	40023800 	.word	0x40023800
 8001ce8:	10110000 	.word	0x10110000
 8001cec:	40020000 	.word	0x40020000
 8001cf0:	40020c00 	.word	0x40020c00
 8001cf4:	40020400 	.word	0x40020400

08001cf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001cfc:	bf00      	nop
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
	...

08001d08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d0e:	2300      	movs	r3, #0
 8001d10:	607b      	str	r3, [r7, #4]
 8001d12:	4b10      	ldr	r3, [pc, #64]	; (8001d54 <HAL_MspInit+0x4c>)
 8001d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d16:	4a0f      	ldr	r2, [pc, #60]	; (8001d54 <HAL_MspInit+0x4c>)
 8001d18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d1e:	4b0d      	ldr	r3, [pc, #52]	; (8001d54 <HAL_MspInit+0x4c>)
 8001d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d26:	607b      	str	r3, [r7, #4]
 8001d28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	603b      	str	r3, [r7, #0]
 8001d2e:	4b09      	ldr	r3, [pc, #36]	; (8001d54 <HAL_MspInit+0x4c>)
 8001d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d32:	4a08      	ldr	r2, [pc, #32]	; (8001d54 <HAL_MspInit+0x4c>)
 8001d34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d38:	6413      	str	r3, [r2, #64]	; 0x40
 8001d3a:	4b06      	ldr	r3, [pc, #24]	; (8001d54 <HAL_MspInit+0x4c>)
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d42:	603b      	str	r3, [r7, #0]
 8001d44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d46:	bf00      	nop
 8001d48:	370c      	adds	r7, #12
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	40023800 	.word	0x40023800

08001d58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001d5c:	bf00      	nop
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr

08001d66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d66:	b480      	push	{r7}
 8001d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d6a:	e7fe      	b.n	8001d6a <HardFault_Handler+0x4>

08001d6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d70:	e7fe      	b.n	8001d70 <MemManage_Handler+0x4>

08001d72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d72:	b480      	push	{r7}
 8001d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d76:	e7fe      	b.n	8001d76 <BusFault_Handler+0x4>

08001d78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d7c:	e7fe      	b.n	8001d7c <UsageFault_Handler+0x4>

08001d7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d82:	bf00      	nop
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d90:	bf00      	nop
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr

08001d9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d9e:	bf00      	nop
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dac:	f000 f8ba 	bl	8001f24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001db0:	bf00      	nop
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	player_fire = 1;
 8001db8:	4b03      	ldr	r3, [pc, #12]	; (8001dc8 <EXTI0_IRQHandler+0x14>)
 8001dba:	2201      	movs	r2, #1
 8001dbc:	701a      	strb	r2, [r3, #0]

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001dbe:	2001      	movs	r0, #1
 8001dc0:	f000 fb7c 	bl	80024bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001dc4:	bf00      	nop
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	20000285 	.word	0x20000285

08001dcc <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	refresh = 1;
 8001dd0:	4b03      	ldr	r3, [pc, #12]	; (8001de0 <EXTI4_IRQHandler+0x14>)
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	701a      	strb	r2, [r3, #0]

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001dd6:	2010      	movs	r0, #16
 8001dd8:	f000 fb70 	bl	80024bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001ddc:	bf00      	nop
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	20000284 	.word	0x20000284

08001de4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	continue_input = 1;
 8001de8:	4b04      	ldr	r3, [pc, #16]	; (8001dfc <EXTI9_5_IRQHandler+0x18>)
 8001dea:	2201      	movs	r2, #1
 8001dec:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001dee:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001df2:	f000 fb63 	bl	80024bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001df6:	bf00      	nop
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	20000286 	.word	0x20000286

08001e00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e04:	4b08      	ldr	r3, [pc, #32]	; (8001e28 <SystemInit+0x28>)
 8001e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e0a:	4a07      	ldr	r2, [pc, #28]	; (8001e28 <SystemInit+0x28>)
 8001e0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001e14:	4b04      	ldr	r3, [pc, #16]	; (8001e28 <SystemInit+0x28>)
 8001e16:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e1a:	609a      	str	r2, [r3, #8]
#endif
}
 8001e1c:	bf00      	nop
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	e000ed00 	.word	0xe000ed00

08001e2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e64 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001e30:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001e32:	e003      	b.n	8001e3c <LoopCopyDataInit>

08001e34 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001e34:	4b0c      	ldr	r3, [pc, #48]	; (8001e68 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001e36:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001e38:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001e3a:	3104      	adds	r1, #4

08001e3c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001e3c:	480b      	ldr	r0, [pc, #44]	; (8001e6c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001e3e:	4b0c      	ldr	r3, [pc, #48]	; (8001e70 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001e40:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001e42:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001e44:	d3f6      	bcc.n	8001e34 <CopyDataInit>
  ldr  r2, =_sbss
 8001e46:	4a0b      	ldr	r2, [pc, #44]	; (8001e74 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001e48:	e002      	b.n	8001e50 <LoopFillZerobss>

08001e4a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001e4a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001e4c:	f842 3b04 	str.w	r3, [r2], #4

08001e50 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001e50:	4b09      	ldr	r3, [pc, #36]	; (8001e78 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001e52:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001e54:	d3f9      	bcc.n	8001e4a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001e56:	f7ff ffd3 	bl	8001e00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e5a:	f000 ff5b 	bl	8002d14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e5e:	f7ff fa17 	bl	8001290 <main>
  bx  lr    
 8001e62:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e64:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001e68:	0800bb58 	.word	0x0800bb58
  ldr  r0, =_sdata
 8001e6c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001e70:	20000260 	.word	0x20000260
  ldr  r2, =_sbss
 8001e74:	20000260 	.word	0x20000260
  ldr  r3, = _ebss
 8001e78:	2000058c 	.word	0x2000058c

08001e7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e7c:	e7fe      	b.n	8001e7c <ADC_IRQHandler>
	...

08001e80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e84:	4b0e      	ldr	r3, [pc, #56]	; (8001ec0 <HAL_Init+0x40>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a0d      	ldr	r2, [pc, #52]	; (8001ec0 <HAL_Init+0x40>)
 8001e8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e90:	4b0b      	ldr	r3, [pc, #44]	; (8001ec0 <HAL_Init+0x40>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a0a      	ldr	r2, [pc, #40]	; (8001ec0 <HAL_Init+0x40>)
 8001e96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e9c:	4b08      	ldr	r3, [pc, #32]	; (8001ec0 <HAL_Init+0x40>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a07      	ldr	r2, [pc, #28]	; (8001ec0 <HAL_Init+0x40>)
 8001ea2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ea6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ea8:	2003      	movs	r0, #3
 8001eaa:	f000 f92b 	bl	8002104 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001eae:	2000      	movs	r0, #0
 8001eb0:	f000 f808 	bl	8001ec4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001eb4:	f7ff ff28 	bl	8001d08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	40023c00 	.word	0x40023c00

08001ec4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ecc:	4b12      	ldr	r3, [pc, #72]	; (8001f18 <HAL_InitTick+0x54>)
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	4b12      	ldr	r3, [pc, #72]	; (8001f1c <HAL_InitTick+0x58>)
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eda:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f000 f943 	bl	800216e <HAL_SYSTICK_Config>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e00e      	b.n	8001f10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2b0f      	cmp	r3, #15
 8001ef6:	d80a      	bhi.n	8001f0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ef8:	2200      	movs	r2, #0
 8001efa:	6879      	ldr	r1, [r7, #4]
 8001efc:	f04f 30ff 	mov.w	r0, #4294967295
 8001f00:	f000 f90b 	bl	800211a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f04:	4a06      	ldr	r2, [pc, #24]	; (8001f20 <HAL_InitTick+0x5c>)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	e000      	b.n	8001f10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3708      	adds	r7, #8
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	20000254 	.word	0x20000254
 8001f1c:	2000025c 	.word	0x2000025c
 8001f20:	20000258 	.word	0x20000258

08001f24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f28:	4b06      	ldr	r3, [pc, #24]	; (8001f44 <HAL_IncTick+0x20>)
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	4b06      	ldr	r3, [pc, #24]	; (8001f48 <HAL_IncTick+0x24>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4413      	add	r3, r2
 8001f34:	4a04      	ldr	r2, [pc, #16]	; (8001f48 <HAL_IncTick+0x24>)
 8001f36:	6013      	str	r3, [r2, #0]
}
 8001f38:	bf00      	nop
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	2000025c 	.word	0x2000025c
 8001f48:	20000588 	.word	0x20000588

08001f4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f50:	4b03      	ldr	r3, [pc, #12]	; (8001f60 <HAL_GetTick+0x14>)
 8001f52:	681b      	ldr	r3, [r3, #0]
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	20000588 	.word	0x20000588

08001f64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b085      	sub	sp, #20
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	f003 0307 	and.w	r3, r3, #7
 8001f72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f74:	4b0c      	ldr	r3, [pc, #48]	; (8001fa8 <__NVIC_SetPriorityGrouping+0x44>)
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f7a:	68ba      	ldr	r2, [r7, #8]
 8001f7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f80:	4013      	ands	r3, r2
 8001f82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f96:	4a04      	ldr	r2, [pc, #16]	; (8001fa8 <__NVIC_SetPriorityGrouping+0x44>)
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	60d3      	str	r3, [r2, #12]
}
 8001f9c:	bf00      	nop
 8001f9e:	3714      	adds	r7, #20
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr
 8001fa8:	e000ed00 	.word	0xe000ed00

08001fac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fb0:	4b04      	ldr	r3, [pc, #16]	; (8001fc4 <__NVIC_GetPriorityGrouping+0x18>)
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	0a1b      	lsrs	r3, r3, #8
 8001fb6:	f003 0307 	and.w	r3, r3, #7
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr
 8001fc4:	e000ed00 	.word	0xe000ed00

08001fc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	4603      	mov	r3, r0
 8001fd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	db0b      	blt.n	8001ff2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fda:	79fb      	ldrb	r3, [r7, #7]
 8001fdc:	f003 021f 	and.w	r2, r3, #31
 8001fe0:	4907      	ldr	r1, [pc, #28]	; (8002000 <__NVIC_EnableIRQ+0x38>)
 8001fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe6:	095b      	lsrs	r3, r3, #5
 8001fe8:	2001      	movs	r0, #1
 8001fea:	fa00 f202 	lsl.w	r2, r0, r2
 8001fee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ff2:	bf00      	nop
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	e000e100 	.word	0xe000e100

08002004 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	4603      	mov	r3, r0
 800200c:	6039      	str	r1, [r7, #0]
 800200e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002010:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002014:	2b00      	cmp	r3, #0
 8002016:	db0a      	blt.n	800202e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	b2da      	uxtb	r2, r3
 800201c:	490c      	ldr	r1, [pc, #48]	; (8002050 <__NVIC_SetPriority+0x4c>)
 800201e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002022:	0112      	lsls	r2, r2, #4
 8002024:	b2d2      	uxtb	r2, r2
 8002026:	440b      	add	r3, r1
 8002028:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800202c:	e00a      	b.n	8002044 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	b2da      	uxtb	r2, r3
 8002032:	4908      	ldr	r1, [pc, #32]	; (8002054 <__NVIC_SetPriority+0x50>)
 8002034:	79fb      	ldrb	r3, [r7, #7]
 8002036:	f003 030f 	and.w	r3, r3, #15
 800203a:	3b04      	subs	r3, #4
 800203c:	0112      	lsls	r2, r2, #4
 800203e:	b2d2      	uxtb	r2, r2
 8002040:	440b      	add	r3, r1
 8002042:	761a      	strb	r2, [r3, #24]
}
 8002044:	bf00      	nop
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr
 8002050:	e000e100 	.word	0xe000e100
 8002054:	e000ed00 	.word	0xe000ed00

08002058 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002058:	b480      	push	{r7}
 800205a:	b089      	sub	sp, #36	; 0x24
 800205c:	af00      	add	r7, sp, #0
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	60b9      	str	r1, [r7, #8]
 8002062:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f003 0307 	and.w	r3, r3, #7
 800206a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	f1c3 0307 	rsb	r3, r3, #7
 8002072:	2b04      	cmp	r3, #4
 8002074:	bf28      	it	cs
 8002076:	2304      	movcs	r3, #4
 8002078:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	3304      	adds	r3, #4
 800207e:	2b06      	cmp	r3, #6
 8002080:	d902      	bls.n	8002088 <NVIC_EncodePriority+0x30>
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	3b03      	subs	r3, #3
 8002086:	e000      	b.n	800208a <NVIC_EncodePriority+0x32>
 8002088:	2300      	movs	r3, #0
 800208a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800208c:	f04f 32ff 	mov.w	r2, #4294967295
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	fa02 f303 	lsl.w	r3, r2, r3
 8002096:	43da      	mvns	r2, r3
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	401a      	ands	r2, r3
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020a0:	f04f 31ff 	mov.w	r1, #4294967295
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	fa01 f303 	lsl.w	r3, r1, r3
 80020aa:	43d9      	mvns	r1, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020b0:	4313      	orrs	r3, r2
         );
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3724      	adds	r7, #36	; 0x24
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
	...

080020c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	3b01      	subs	r3, #1
 80020cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020d0:	d301      	bcc.n	80020d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020d2:	2301      	movs	r3, #1
 80020d4:	e00f      	b.n	80020f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020d6:	4a0a      	ldr	r2, [pc, #40]	; (8002100 <SysTick_Config+0x40>)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	3b01      	subs	r3, #1
 80020dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020de:	210f      	movs	r1, #15
 80020e0:	f04f 30ff 	mov.w	r0, #4294967295
 80020e4:	f7ff ff8e 	bl	8002004 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020e8:	4b05      	ldr	r3, [pc, #20]	; (8002100 <SysTick_Config+0x40>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020ee:	4b04      	ldr	r3, [pc, #16]	; (8002100 <SysTick_Config+0x40>)
 80020f0:	2207      	movs	r2, #7
 80020f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3708      	adds	r7, #8
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	e000e010 	.word	0xe000e010

08002104 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f7ff ff29 	bl	8001f64 <__NVIC_SetPriorityGrouping>
}
 8002112:	bf00      	nop
 8002114:	3708      	adds	r7, #8
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}

0800211a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800211a:	b580      	push	{r7, lr}
 800211c:	b086      	sub	sp, #24
 800211e:	af00      	add	r7, sp, #0
 8002120:	4603      	mov	r3, r0
 8002122:	60b9      	str	r1, [r7, #8]
 8002124:	607a      	str	r2, [r7, #4]
 8002126:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002128:	2300      	movs	r3, #0
 800212a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800212c:	f7ff ff3e 	bl	8001fac <__NVIC_GetPriorityGrouping>
 8002130:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	68b9      	ldr	r1, [r7, #8]
 8002136:	6978      	ldr	r0, [r7, #20]
 8002138:	f7ff ff8e 	bl	8002058 <NVIC_EncodePriority>
 800213c:	4602      	mov	r2, r0
 800213e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002142:	4611      	mov	r1, r2
 8002144:	4618      	mov	r0, r3
 8002146:	f7ff ff5d 	bl	8002004 <__NVIC_SetPriority>
}
 800214a:	bf00      	nop
 800214c:	3718      	adds	r7, #24
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}

08002152 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002152:	b580      	push	{r7, lr}
 8002154:	b082      	sub	sp, #8
 8002156:	af00      	add	r7, sp, #0
 8002158:	4603      	mov	r3, r0
 800215a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800215c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002160:	4618      	mov	r0, r3
 8002162:	f7ff ff31 	bl	8001fc8 <__NVIC_EnableIRQ>
}
 8002166:	bf00      	nop
 8002168:	3708      	adds	r7, #8
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800216e:	b580      	push	{r7, lr}
 8002170:	b082      	sub	sp, #8
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f7ff ffa2 	bl	80020c0 <SysTick_Config>
 800217c:	4603      	mov	r3, r0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
	...

08002188 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002188:	b480      	push	{r7}
 800218a:	b089      	sub	sp, #36	; 0x24
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002192:	2300      	movs	r3, #0
 8002194:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002196:	2300      	movs	r3, #0
 8002198:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800219a:	2300      	movs	r3, #0
 800219c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800219e:	2300      	movs	r3, #0
 80021a0:	61fb      	str	r3, [r7, #28]
 80021a2:	e159      	b.n	8002458 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021a4:	2201      	movs	r2, #1
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	697a      	ldr	r2, [r7, #20]
 80021b4:	4013      	ands	r3, r2
 80021b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021b8:	693a      	ldr	r2, [r7, #16]
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	429a      	cmp	r2, r3
 80021be:	f040 8148 	bne.w	8002452 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d00b      	beq.n	80021e2 <HAL_GPIO_Init+0x5a>
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d007      	beq.n	80021e2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021d6:	2b11      	cmp	r3, #17
 80021d8:	d003      	beq.n	80021e2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	2b12      	cmp	r3, #18
 80021e0:	d130      	bne.n	8002244 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	005b      	lsls	r3, r3, #1
 80021ec:	2203      	movs	r2, #3
 80021ee:	fa02 f303 	lsl.w	r3, r2, r3
 80021f2:	43db      	mvns	r3, r3
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	4013      	ands	r3, r2
 80021f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	68da      	ldr	r2, [r3, #12]
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	fa02 f303 	lsl.w	r3, r2, r3
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	4313      	orrs	r3, r2
 800220a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002218:	2201      	movs	r2, #1
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	43db      	mvns	r3, r3
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	4013      	ands	r3, r2
 8002226:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	091b      	lsrs	r3, r3, #4
 800222e:	f003 0201 	and.w	r2, r3, #1
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	4313      	orrs	r3, r2
 800223c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	2203      	movs	r2, #3
 8002250:	fa02 f303 	lsl.w	r3, r2, r3
 8002254:	43db      	mvns	r3, r3
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	4013      	ands	r3, r2
 800225a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	689a      	ldr	r2, [r3, #8]
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	005b      	lsls	r3, r3, #1
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	4313      	orrs	r3, r2
 800226c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	2b02      	cmp	r3, #2
 800227a:	d003      	beq.n	8002284 <HAL_GPIO_Init+0xfc>
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	2b12      	cmp	r3, #18
 8002282:	d123      	bne.n	80022cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	08da      	lsrs	r2, r3, #3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	3208      	adds	r2, #8
 800228c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002290:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	f003 0307 	and.w	r3, r3, #7
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	220f      	movs	r2, #15
 800229c:	fa02 f303 	lsl.w	r3, r2, r3
 80022a0:	43db      	mvns	r3, r3
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	4013      	ands	r3, r2
 80022a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	691a      	ldr	r2, [r3, #16]
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	f003 0307 	and.w	r3, r3, #7
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	08da      	lsrs	r2, r3, #3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	3208      	adds	r2, #8
 80022c6:	69b9      	ldr	r1, [r7, #24]
 80022c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	2203      	movs	r2, #3
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	43db      	mvns	r3, r3
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	4013      	ands	r3, r2
 80022e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f003 0203 	and.w	r2, r3, #3
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002308:	2b00      	cmp	r3, #0
 800230a:	f000 80a2 	beq.w	8002452 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800230e:	2300      	movs	r3, #0
 8002310:	60fb      	str	r3, [r7, #12]
 8002312:	4b56      	ldr	r3, [pc, #344]	; (800246c <HAL_GPIO_Init+0x2e4>)
 8002314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002316:	4a55      	ldr	r2, [pc, #340]	; (800246c <HAL_GPIO_Init+0x2e4>)
 8002318:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800231c:	6453      	str	r3, [r2, #68]	; 0x44
 800231e:	4b53      	ldr	r3, [pc, #332]	; (800246c <HAL_GPIO_Init+0x2e4>)
 8002320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002322:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002326:	60fb      	str	r3, [r7, #12]
 8002328:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800232a:	4a51      	ldr	r2, [pc, #324]	; (8002470 <HAL_GPIO_Init+0x2e8>)
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	089b      	lsrs	r3, r3, #2
 8002330:	3302      	adds	r3, #2
 8002332:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002336:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	f003 0303 	and.w	r3, r3, #3
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	220f      	movs	r2, #15
 8002342:	fa02 f303 	lsl.w	r3, r2, r3
 8002346:	43db      	mvns	r3, r3
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	4013      	ands	r3, r2
 800234c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a48      	ldr	r2, [pc, #288]	; (8002474 <HAL_GPIO_Init+0x2ec>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d019      	beq.n	800238a <HAL_GPIO_Init+0x202>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a47      	ldr	r2, [pc, #284]	; (8002478 <HAL_GPIO_Init+0x2f0>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d013      	beq.n	8002386 <HAL_GPIO_Init+0x1fe>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a46      	ldr	r2, [pc, #280]	; (800247c <HAL_GPIO_Init+0x2f4>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d00d      	beq.n	8002382 <HAL_GPIO_Init+0x1fa>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a45      	ldr	r2, [pc, #276]	; (8002480 <HAL_GPIO_Init+0x2f8>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d007      	beq.n	800237e <HAL_GPIO_Init+0x1f6>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a44      	ldr	r2, [pc, #272]	; (8002484 <HAL_GPIO_Init+0x2fc>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d101      	bne.n	800237a <HAL_GPIO_Init+0x1f2>
 8002376:	2304      	movs	r3, #4
 8002378:	e008      	b.n	800238c <HAL_GPIO_Init+0x204>
 800237a:	2307      	movs	r3, #7
 800237c:	e006      	b.n	800238c <HAL_GPIO_Init+0x204>
 800237e:	2303      	movs	r3, #3
 8002380:	e004      	b.n	800238c <HAL_GPIO_Init+0x204>
 8002382:	2302      	movs	r3, #2
 8002384:	e002      	b.n	800238c <HAL_GPIO_Init+0x204>
 8002386:	2301      	movs	r3, #1
 8002388:	e000      	b.n	800238c <HAL_GPIO_Init+0x204>
 800238a:	2300      	movs	r3, #0
 800238c:	69fa      	ldr	r2, [r7, #28]
 800238e:	f002 0203 	and.w	r2, r2, #3
 8002392:	0092      	lsls	r2, r2, #2
 8002394:	4093      	lsls	r3, r2
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	4313      	orrs	r3, r2
 800239a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800239c:	4934      	ldr	r1, [pc, #208]	; (8002470 <HAL_GPIO_Init+0x2e8>)
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	089b      	lsrs	r3, r3, #2
 80023a2:	3302      	adds	r3, #2
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023aa:	4b37      	ldr	r3, [pc, #220]	; (8002488 <HAL_GPIO_Init+0x300>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	43db      	mvns	r3, r3
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	4013      	ands	r3, r2
 80023b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d003      	beq.n	80023ce <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80023c6:	69ba      	ldr	r2, [r7, #24]
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023ce:	4a2e      	ldr	r2, [pc, #184]	; (8002488 <HAL_GPIO_Init+0x300>)
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80023d4:	4b2c      	ldr	r3, [pc, #176]	; (8002488 <HAL_GPIO_Init+0x300>)
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	43db      	mvns	r3, r3
 80023de:	69ba      	ldr	r2, [r7, #24]
 80023e0:	4013      	ands	r3, r2
 80023e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d003      	beq.n	80023f8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023f8:	4a23      	ldr	r2, [pc, #140]	; (8002488 <HAL_GPIO_Init+0x300>)
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023fe:	4b22      	ldr	r3, [pc, #136]	; (8002488 <HAL_GPIO_Init+0x300>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	43db      	mvns	r3, r3
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	4013      	ands	r3, r2
 800240c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d003      	beq.n	8002422 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	4313      	orrs	r3, r2
 8002420:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002422:	4a19      	ldr	r2, [pc, #100]	; (8002488 <HAL_GPIO_Init+0x300>)
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002428:	4b17      	ldr	r3, [pc, #92]	; (8002488 <HAL_GPIO_Init+0x300>)
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	43db      	mvns	r3, r3
 8002432:	69ba      	ldr	r2, [r7, #24]
 8002434:	4013      	ands	r3, r2
 8002436:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d003      	beq.n	800244c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	4313      	orrs	r3, r2
 800244a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800244c:	4a0e      	ldr	r2, [pc, #56]	; (8002488 <HAL_GPIO_Init+0x300>)
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	3301      	adds	r3, #1
 8002456:	61fb      	str	r3, [r7, #28]
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	2b0f      	cmp	r3, #15
 800245c:	f67f aea2 	bls.w	80021a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002460:	bf00      	nop
 8002462:	3724      	adds	r7, #36	; 0x24
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr
 800246c:	40023800 	.word	0x40023800
 8002470:	40013800 	.word	0x40013800
 8002474:	40020000 	.word	0x40020000
 8002478:	40020400 	.word	0x40020400
 800247c:	40020800 	.word	0x40020800
 8002480:	40020c00 	.word	0x40020c00
 8002484:	40021000 	.word	0x40021000
 8002488:	40013c00 	.word	0x40013c00

0800248c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800248c:	b480      	push	{r7}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	460b      	mov	r3, r1
 8002496:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	691a      	ldr	r2, [r3, #16]
 800249c:	887b      	ldrh	r3, [r7, #2]
 800249e:	4013      	ands	r3, r2
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d002      	beq.n	80024aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80024a4:	2301      	movs	r3, #1
 80024a6:	73fb      	strb	r3, [r7, #15]
 80024a8:	e001      	b.n	80024ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80024aa:	2300      	movs	r3, #0
 80024ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80024ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3714      	adds	r7, #20
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	4603      	mov	r3, r0
 80024c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80024c6:	4b08      	ldr	r3, [pc, #32]	; (80024e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024c8:	695a      	ldr	r2, [r3, #20]
 80024ca:	88fb      	ldrh	r3, [r7, #6]
 80024cc:	4013      	ands	r3, r2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d006      	beq.n	80024e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80024d2:	4a05      	ldr	r2, [pc, #20]	; (80024e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024d4:	88fb      	ldrh	r3, [r7, #6]
 80024d6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80024d8:	88fb      	ldrh	r3, [r7, #6]
 80024da:	4618      	mov	r0, r3
 80024dc:	f000 f806 	bl	80024ec <HAL_GPIO_EXTI_Callback>
  }
}
 80024e0:	bf00      	nop
 80024e2:	3708      	adds	r7, #8
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	40013c00 	.word	0x40013c00

080024ec <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	4603      	mov	r3, r0
 80024f4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80024f6:	bf00      	nop
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
	...

08002504 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b086      	sub	sp, #24
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d101      	bne.n	8002516 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e25b      	b.n	80029ce <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	2b00      	cmp	r3, #0
 8002520:	d075      	beq.n	800260e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002522:	4ba3      	ldr	r3, [pc, #652]	; (80027b0 <HAL_RCC_OscConfig+0x2ac>)
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	f003 030c 	and.w	r3, r3, #12
 800252a:	2b04      	cmp	r3, #4
 800252c:	d00c      	beq.n	8002548 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800252e:	4ba0      	ldr	r3, [pc, #640]	; (80027b0 <HAL_RCC_OscConfig+0x2ac>)
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002536:	2b08      	cmp	r3, #8
 8002538:	d112      	bne.n	8002560 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800253a:	4b9d      	ldr	r3, [pc, #628]	; (80027b0 <HAL_RCC_OscConfig+0x2ac>)
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002542:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002546:	d10b      	bne.n	8002560 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002548:	4b99      	ldr	r3, [pc, #612]	; (80027b0 <HAL_RCC_OscConfig+0x2ac>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d05b      	beq.n	800260c <HAL_RCC_OscConfig+0x108>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d157      	bne.n	800260c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e236      	b.n	80029ce <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002568:	d106      	bne.n	8002578 <HAL_RCC_OscConfig+0x74>
 800256a:	4b91      	ldr	r3, [pc, #580]	; (80027b0 <HAL_RCC_OscConfig+0x2ac>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a90      	ldr	r2, [pc, #576]	; (80027b0 <HAL_RCC_OscConfig+0x2ac>)
 8002570:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002574:	6013      	str	r3, [r2, #0]
 8002576:	e01d      	b.n	80025b4 <HAL_RCC_OscConfig+0xb0>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002580:	d10c      	bne.n	800259c <HAL_RCC_OscConfig+0x98>
 8002582:	4b8b      	ldr	r3, [pc, #556]	; (80027b0 <HAL_RCC_OscConfig+0x2ac>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a8a      	ldr	r2, [pc, #552]	; (80027b0 <HAL_RCC_OscConfig+0x2ac>)
 8002588:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800258c:	6013      	str	r3, [r2, #0]
 800258e:	4b88      	ldr	r3, [pc, #544]	; (80027b0 <HAL_RCC_OscConfig+0x2ac>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a87      	ldr	r2, [pc, #540]	; (80027b0 <HAL_RCC_OscConfig+0x2ac>)
 8002594:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002598:	6013      	str	r3, [r2, #0]
 800259a:	e00b      	b.n	80025b4 <HAL_RCC_OscConfig+0xb0>
 800259c:	4b84      	ldr	r3, [pc, #528]	; (80027b0 <HAL_RCC_OscConfig+0x2ac>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a83      	ldr	r2, [pc, #524]	; (80027b0 <HAL_RCC_OscConfig+0x2ac>)
 80025a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025a6:	6013      	str	r3, [r2, #0]
 80025a8:	4b81      	ldr	r3, [pc, #516]	; (80027b0 <HAL_RCC_OscConfig+0x2ac>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a80      	ldr	r2, [pc, #512]	; (80027b0 <HAL_RCC_OscConfig+0x2ac>)
 80025ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d013      	beq.n	80025e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025bc:	f7ff fcc6 	bl	8001f4c <HAL_GetTick>
 80025c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025c2:	e008      	b.n	80025d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025c4:	f7ff fcc2 	bl	8001f4c <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	2b64      	cmp	r3, #100	; 0x64
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e1fb      	b.n	80029ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025d6:	4b76      	ldr	r3, [pc, #472]	; (80027b0 <HAL_RCC_OscConfig+0x2ac>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d0f0      	beq.n	80025c4 <HAL_RCC_OscConfig+0xc0>
 80025e2:	e014      	b.n	800260e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e4:	f7ff fcb2 	bl	8001f4c <HAL_GetTick>
 80025e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ea:	e008      	b.n	80025fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025ec:	f7ff fcae 	bl	8001f4c <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b64      	cmp	r3, #100	; 0x64
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e1e7      	b.n	80029ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025fe:	4b6c      	ldr	r3, [pc, #432]	; (80027b0 <HAL_RCC_OscConfig+0x2ac>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d1f0      	bne.n	80025ec <HAL_RCC_OscConfig+0xe8>
 800260a:	e000      	b.n	800260e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800260c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	2b00      	cmp	r3, #0
 8002618:	d063      	beq.n	80026e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800261a:	4b65      	ldr	r3, [pc, #404]	; (80027b0 <HAL_RCC_OscConfig+0x2ac>)
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	f003 030c 	and.w	r3, r3, #12
 8002622:	2b00      	cmp	r3, #0
 8002624:	d00b      	beq.n	800263e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002626:	4b62      	ldr	r3, [pc, #392]	; (80027b0 <HAL_RCC_OscConfig+0x2ac>)
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800262e:	2b08      	cmp	r3, #8
 8002630:	d11c      	bne.n	800266c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002632:	4b5f      	ldr	r3, [pc, #380]	; (80027b0 <HAL_RCC_OscConfig+0x2ac>)
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d116      	bne.n	800266c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800263e:	4b5c      	ldr	r3, [pc, #368]	; (80027b0 <HAL_RCC_OscConfig+0x2ac>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0302 	and.w	r3, r3, #2
 8002646:	2b00      	cmp	r3, #0
 8002648:	d005      	beq.n	8002656 <HAL_RCC_OscConfig+0x152>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	2b01      	cmp	r3, #1
 8002650:	d001      	beq.n	8002656 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e1bb      	b.n	80029ce <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002656:	4b56      	ldr	r3, [pc, #344]	; (80027b0 <HAL_RCC_OscConfig+0x2ac>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	00db      	lsls	r3, r3, #3
 8002664:	4952      	ldr	r1, [pc, #328]	; (80027b0 <HAL_RCC_OscConfig+0x2ac>)
 8002666:	4313      	orrs	r3, r2
 8002668:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800266a:	e03a      	b.n	80026e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d020      	beq.n	80026b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002674:	4b4f      	ldr	r3, [pc, #316]	; (80027b4 <HAL_RCC_OscConfig+0x2b0>)
 8002676:	2201      	movs	r2, #1
 8002678:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800267a:	f7ff fc67 	bl	8001f4c <HAL_GetTick>
 800267e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002680:	e008      	b.n	8002694 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002682:	f7ff fc63 	bl	8001f4c <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	2b02      	cmp	r3, #2
 800268e:	d901      	bls.n	8002694 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	e19c      	b.n	80029ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002694:	4b46      	ldr	r3, [pc, #280]	; (80027b0 <HAL_RCC_OscConfig+0x2ac>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0302 	and.w	r3, r3, #2
 800269c:	2b00      	cmp	r3, #0
 800269e:	d0f0      	beq.n	8002682 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026a0:	4b43      	ldr	r3, [pc, #268]	; (80027b0 <HAL_RCC_OscConfig+0x2ac>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	691b      	ldr	r3, [r3, #16]
 80026ac:	00db      	lsls	r3, r3, #3
 80026ae:	4940      	ldr	r1, [pc, #256]	; (80027b0 <HAL_RCC_OscConfig+0x2ac>)
 80026b0:	4313      	orrs	r3, r2
 80026b2:	600b      	str	r3, [r1, #0]
 80026b4:	e015      	b.n	80026e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026b6:	4b3f      	ldr	r3, [pc, #252]	; (80027b4 <HAL_RCC_OscConfig+0x2b0>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026bc:	f7ff fc46 	bl	8001f4c <HAL_GetTick>
 80026c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026c2:	e008      	b.n	80026d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026c4:	f7ff fc42 	bl	8001f4c <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d901      	bls.n	80026d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e17b      	b.n	80029ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026d6:	4b36      	ldr	r3, [pc, #216]	; (80027b0 <HAL_RCC_OscConfig+0x2ac>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d1f0      	bne.n	80026c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0308 	and.w	r3, r3, #8
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d030      	beq.n	8002750 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	695b      	ldr	r3, [r3, #20]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d016      	beq.n	8002724 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026f6:	4b30      	ldr	r3, [pc, #192]	; (80027b8 <HAL_RCC_OscConfig+0x2b4>)
 80026f8:	2201      	movs	r2, #1
 80026fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026fc:	f7ff fc26 	bl	8001f4c <HAL_GetTick>
 8002700:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002702:	e008      	b.n	8002716 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002704:	f7ff fc22 	bl	8001f4c <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	2b02      	cmp	r3, #2
 8002710:	d901      	bls.n	8002716 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e15b      	b.n	80029ce <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002716:	4b26      	ldr	r3, [pc, #152]	; (80027b0 <HAL_RCC_OscConfig+0x2ac>)
 8002718:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800271a:	f003 0302 	and.w	r3, r3, #2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d0f0      	beq.n	8002704 <HAL_RCC_OscConfig+0x200>
 8002722:	e015      	b.n	8002750 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002724:	4b24      	ldr	r3, [pc, #144]	; (80027b8 <HAL_RCC_OscConfig+0x2b4>)
 8002726:	2200      	movs	r2, #0
 8002728:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800272a:	f7ff fc0f 	bl	8001f4c <HAL_GetTick>
 800272e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002730:	e008      	b.n	8002744 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002732:	f7ff fc0b 	bl	8001f4c <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	2b02      	cmp	r3, #2
 800273e:	d901      	bls.n	8002744 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	e144      	b.n	80029ce <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002744:	4b1a      	ldr	r3, [pc, #104]	; (80027b0 <HAL_RCC_OscConfig+0x2ac>)
 8002746:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002748:	f003 0302 	and.w	r3, r3, #2
 800274c:	2b00      	cmp	r3, #0
 800274e:	d1f0      	bne.n	8002732 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0304 	and.w	r3, r3, #4
 8002758:	2b00      	cmp	r3, #0
 800275a:	f000 80a0 	beq.w	800289e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800275e:	2300      	movs	r3, #0
 8002760:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002762:	4b13      	ldr	r3, [pc, #76]	; (80027b0 <HAL_RCC_OscConfig+0x2ac>)
 8002764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d10f      	bne.n	800278e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800276e:	2300      	movs	r3, #0
 8002770:	60bb      	str	r3, [r7, #8]
 8002772:	4b0f      	ldr	r3, [pc, #60]	; (80027b0 <HAL_RCC_OscConfig+0x2ac>)
 8002774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002776:	4a0e      	ldr	r2, [pc, #56]	; (80027b0 <HAL_RCC_OscConfig+0x2ac>)
 8002778:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800277c:	6413      	str	r3, [r2, #64]	; 0x40
 800277e:	4b0c      	ldr	r3, [pc, #48]	; (80027b0 <HAL_RCC_OscConfig+0x2ac>)
 8002780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002786:	60bb      	str	r3, [r7, #8]
 8002788:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800278a:	2301      	movs	r3, #1
 800278c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800278e:	4b0b      	ldr	r3, [pc, #44]	; (80027bc <HAL_RCC_OscConfig+0x2b8>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002796:	2b00      	cmp	r3, #0
 8002798:	d121      	bne.n	80027de <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800279a:	4b08      	ldr	r3, [pc, #32]	; (80027bc <HAL_RCC_OscConfig+0x2b8>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a07      	ldr	r2, [pc, #28]	; (80027bc <HAL_RCC_OscConfig+0x2b8>)
 80027a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027a6:	f7ff fbd1 	bl	8001f4c <HAL_GetTick>
 80027aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ac:	e011      	b.n	80027d2 <HAL_RCC_OscConfig+0x2ce>
 80027ae:	bf00      	nop
 80027b0:	40023800 	.word	0x40023800
 80027b4:	42470000 	.word	0x42470000
 80027b8:	42470e80 	.word	0x42470e80
 80027bc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027c0:	f7ff fbc4 	bl	8001f4c <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e0fd      	b.n	80029ce <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027d2:	4b81      	ldr	r3, [pc, #516]	; (80029d8 <HAL_RCC_OscConfig+0x4d4>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d0f0      	beq.n	80027c0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d106      	bne.n	80027f4 <HAL_RCC_OscConfig+0x2f0>
 80027e6:	4b7d      	ldr	r3, [pc, #500]	; (80029dc <HAL_RCC_OscConfig+0x4d8>)
 80027e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ea:	4a7c      	ldr	r2, [pc, #496]	; (80029dc <HAL_RCC_OscConfig+0x4d8>)
 80027ec:	f043 0301 	orr.w	r3, r3, #1
 80027f0:	6713      	str	r3, [r2, #112]	; 0x70
 80027f2:	e01c      	b.n	800282e <HAL_RCC_OscConfig+0x32a>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	2b05      	cmp	r3, #5
 80027fa:	d10c      	bne.n	8002816 <HAL_RCC_OscConfig+0x312>
 80027fc:	4b77      	ldr	r3, [pc, #476]	; (80029dc <HAL_RCC_OscConfig+0x4d8>)
 80027fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002800:	4a76      	ldr	r2, [pc, #472]	; (80029dc <HAL_RCC_OscConfig+0x4d8>)
 8002802:	f043 0304 	orr.w	r3, r3, #4
 8002806:	6713      	str	r3, [r2, #112]	; 0x70
 8002808:	4b74      	ldr	r3, [pc, #464]	; (80029dc <HAL_RCC_OscConfig+0x4d8>)
 800280a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800280c:	4a73      	ldr	r2, [pc, #460]	; (80029dc <HAL_RCC_OscConfig+0x4d8>)
 800280e:	f043 0301 	orr.w	r3, r3, #1
 8002812:	6713      	str	r3, [r2, #112]	; 0x70
 8002814:	e00b      	b.n	800282e <HAL_RCC_OscConfig+0x32a>
 8002816:	4b71      	ldr	r3, [pc, #452]	; (80029dc <HAL_RCC_OscConfig+0x4d8>)
 8002818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800281a:	4a70      	ldr	r2, [pc, #448]	; (80029dc <HAL_RCC_OscConfig+0x4d8>)
 800281c:	f023 0301 	bic.w	r3, r3, #1
 8002820:	6713      	str	r3, [r2, #112]	; 0x70
 8002822:	4b6e      	ldr	r3, [pc, #440]	; (80029dc <HAL_RCC_OscConfig+0x4d8>)
 8002824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002826:	4a6d      	ldr	r2, [pc, #436]	; (80029dc <HAL_RCC_OscConfig+0x4d8>)
 8002828:	f023 0304 	bic.w	r3, r3, #4
 800282c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d015      	beq.n	8002862 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002836:	f7ff fb89 	bl	8001f4c <HAL_GetTick>
 800283a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800283c:	e00a      	b.n	8002854 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800283e:	f7ff fb85 	bl	8001f4c <HAL_GetTick>
 8002842:	4602      	mov	r2, r0
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	f241 3288 	movw	r2, #5000	; 0x1388
 800284c:	4293      	cmp	r3, r2
 800284e:	d901      	bls.n	8002854 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	e0bc      	b.n	80029ce <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002854:	4b61      	ldr	r3, [pc, #388]	; (80029dc <HAL_RCC_OscConfig+0x4d8>)
 8002856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002858:	f003 0302 	and.w	r3, r3, #2
 800285c:	2b00      	cmp	r3, #0
 800285e:	d0ee      	beq.n	800283e <HAL_RCC_OscConfig+0x33a>
 8002860:	e014      	b.n	800288c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002862:	f7ff fb73 	bl	8001f4c <HAL_GetTick>
 8002866:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002868:	e00a      	b.n	8002880 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800286a:	f7ff fb6f 	bl	8001f4c <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	f241 3288 	movw	r2, #5000	; 0x1388
 8002878:	4293      	cmp	r3, r2
 800287a:	d901      	bls.n	8002880 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	e0a6      	b.n	80029ce <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002880:	4b56      	ldr	r3, [pc, #344]	; (80029dc <HAL_RCC_OscConfig+0x4d8>)
 8002882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002884:	f003 0302 	and.w	r3, r3, #2
 8002888:	2b00      	cmp	r3, #0
 800288a:	d1ee      	bne.n	800286a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800288c:	7dfb      	ldrb	r3, [r7, #23]
 800288e:	2b01      	cmp	r3, #1
 8002890:	d105      	bne.n	800289e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002892:	4b52      	ldr	r3, [pc, #328]	; (80029dc <HAL_RCC_OscConfig+0x4d8>)
 8002894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002896:	4a51      	ldr	r2, [pc, #324]	; (80029dc <HAL_RCC_OscConfig+0x4d8>)
 8002898:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800289c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	699b      	ldr	r3, [r3, #24]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	f000 8092 	beq.w	80029cc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028a8:	4b4c      	ldr	r3, [pc, #304]	; (80029dc <HAL_RCC_OscConfig+0x4d8>)
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	f003 030c 	and.w	r3, r3, #12
 80028b0:	2b08      	cmp	r3, #8
 80028b2:	d05c      	beq.n	800296e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	699b      	ldr	r3, [r3, #24]
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d141      	bne.n	8002940 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028bc:	4b48      	ldr	r3, [pc, #288]	; (80029e0 <HAL_RCC_OscConfig+0x4dc>)
 80028be:	2200      	movs	r2, #0
 80028c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c2:	f7ff fb43 	bl	8001f4c <HAL_GetTick>
 80028c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028c8:	e008      	b.n	80028dc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028ca:	f7ff fb3f 	bl	8001f4c <HAL_GetTick>
 80028ce:	4602      	mov	r2, r0
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d901      	bls.n	80028dc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80028d8:	2303      	movs	r3, #3
 80028da:	e078      	b.n	80029ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028dc:	4b3f      	ldr	r3, [pc, #252]	; (80029dc <HAL_RCC_OscConfig+0x4d8>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d1f0      	bne.n	80028ca <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	69da      	ldr	r2, [r3, #28]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a1b      	ldr	r3, [r3, #32]
 80028f0:	431a      	orrs	r2, r3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f6:	019b      	lsls	r3, r3, #6
 80028f8:	431a      	orrs	r2, r3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028fe:	085b      	lsrs	r3, r3, #1
 8002900:	3b01      	subs	r3, #1
 8002902:	041b      	lsls	r3, r3, #16
 8002904:	431a      	orrs	r2, r3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800290a:	061b      	lsls	r3, r3, #24
 800290c:	4933      	ldr	r1, [pc, #204]	; (80029dc <HAL_RCC_OscConfig+0x4d8>)
 800290e:	4313      	orrs	r3, r2
 8002910:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002912:	4b33      	ldr	r3, [pc, #204]	; (80029e0 <HAL_RCC_OscConfig+0x4dc>)
 8002914:	2201      	movs	r2, #1
 8002916:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002918:	f7ff fb18 	bl	8001f4c <HAL_GetTick>
 800291c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800291e:	e008      	b.n	8002932 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002920:	f7ff fb14 	bl	8001f4c <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b02      	cmp	r3, #2
 800292c:	d901      	bls.n	8002932 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e04d      	b.n	80029ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002932:	4b2a      	ldr	r3, [pc, #168]	; (80029dc <HAL_RCC_OscConfig+0x4d8>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d0f0      	beq.n	8002920 <HAL_RCC_OscConfig+0x41c>
 800293e:	e045      	b.n	80029cc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002940:	4b27      	ldr	r3, [pc, #156]	; (80029e0 <HAL_RCC_OscConfig+0x4dc>)
 8002942:	2200      	movs	r2, #0
 8002944:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002946:	f7ff fb01 	bl	8001f4c <HAL_GetTick>
 800294a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800294c:	e008      	b.n	8002960 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800294e:	f7ff fafd 	bl	8001f4c <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	2b02      	cmp	r3, #2
 800295a:	d901      	bls.n	8002960 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800295c:	2303      	movs	r3, #3
 800295e:	e036      	b.n	80029ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002960:	4b1e      	ldr	r3, [pc, #120]	; (80029dc <HAL_RCC_OscConfig+0x4d8>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d1f0      	bne.n	800294e <HAL_RCC_OscConfig+0x44a>
 800296c:	e02e      	b.n	80029cc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	699b      	ldr	r3, [r3, #24]
 8002972:	2b01      	cmp	r3, #1
 8002974:	d101      	bne.n	800297a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e029      	b.n	80029ce <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800297a:	4b18      	ldr	r3, [pc, #96]	; (80029dc <HAL_RCC_OscConfig+0x4d8>)
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	69db      	ldr	r3, [r3, #28]
 800298a:	429a      	cmp	r2, r3
 800298c:	d11c      	bne.n	80029c8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002998:	429a      	cmp	r2, r3
 800299a:	d115      	bne.n	80029c8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800299c:	68fa      	ldr	r2, [r7, #12]
 800299e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80029a2:	4013      	ands	r3, r2
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d10d      	bne.n	80029c8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d106      	bne.n	80029c8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d001      	beq.n	80029cc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e000      	b.n	80029ce <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3718      	adds	r7, #24
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	40007000 	.word	0x40007000
 80029dc:	40023800 	.word	0x40023800
 80029e0:	42470060 	.word	0x42470060

080029e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d101      	bne.n	80029f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e0cc      	b.n	8002b92 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029f8:	4b68      	ldr	r3, [pc, #416]	; (8002b9c <HAL_RCC_ClockConfig+0x1b8>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 030f 	and.w	r3, r3, #15
 8002a00:	683a      	ldr	r2, [r7, #0]
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d90c      	bls.n	8002a20 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a06:	4b65      	ldr	r3, [pc, #404]	; (8002b9c <HAL_RCC_ClockConfig+0x1b8>)
 8002a08:	683a      	ldr	r2, [r7, #0]
 8002a0a:	b2d2      	uxtb	r2, r2
 8002a0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a0e:	4b63      	ldr	r3, [pc, #396]	; (8002b9c <HAL_RCC_ClockConfig+0x1b8>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 030f 	and.w	r3, r3, #15
 8002a16:	683a      	ldr	r2, [r7, #0]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d001      	beq.n	8002a20 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e0b8      	b.n	8002b92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0302 	and.w	r3, r3, #2
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d020      	beq.n	8002a6e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0304 	and.w	r3, r3, #4
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d005      	beq.n	8002a44 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a38:	4b59      	ldr	r3, [pc, #356]	; (8002ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	4a58      	ldr	r2, [pc, #352]	; (8002ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a42:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0308 	and.w	r3, r3, #8
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d005      	beq.n	8002a5c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a50:	4b53      	ldr	r3, [pc, #332]	; (8002ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	4a52      	ldr	r2, [pc, #328]	; (8002ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a56:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a5a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a5c:	4b50      	ldr	r3, [pc, #320]	; (8002ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	494d      	ldr	r1, [pc, #308]	; (8002ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0301 	and.w	r3, r3, #1
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d044      	beq.n	8002b04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d107      	bne.n	8002a92 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a82:	4b47      	ldr	r3, [pc, #284]	; (8002ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d119      	bne.n	8002ac2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e07f      	b.n	8002b92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d003      	beq.n	8002aa2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a9e:	2b03      	cmp	r3, #3
 8002aa0:	d107      	bne.n	8002ab2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aa2:	4b3f      	ldr	r3, [pc, #252]	; (8002ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d109      	bne.n	8002ac2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e06f      	b.n	8002b92 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ab2:	4b3b      	ldr	r3, [pc, #236]	; (8002ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0302 	and.w	r3, r3, #2
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d101      	bne.n	8002ac2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e067      	b.n	8002b92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ac2:	4b37      	ldr	r3, [pc, #220]	; (8002ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f023 0203 	bic.w	r2, r3, #3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	4934      	ldr	r1, [pc, #208]	; (8002ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ad4:	f7ff fa3a 	bl	8001f4c <HAL_GetTick>
 8002ad8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ada:	e00a      	b.n	8002af2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002adc:	f7ff fa36 	bl	8001f4c <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d901      	bls.n	8002af2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e04f      	b.n	8002b92 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002af2:	4b2b      	ldr	r3, [pc, #172]	; (8002ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	f003 020c 	and.w	r2, r3, #12
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d1eb      	bne.n	8002adc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b04:	4b25      	ldr	r3, [pc, #148]	; (8002b9c <HAL_RCC_ClockConfig+0x1b8>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 030f 	and.w	r3, r3, #15
 8002b0c:	683a      	ldr	r2, [r7, #0]
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d20c      	bcs.n	8002b2c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b12:	4b22      	ldr	r3, [pc, #136]	; (8002b9c <HAL_RCC_ClockConfig+0x1b8>)
 8002b14:	683a      	ldr	r2, [r7, #0]
 8002b16:	b2d2      	uxtb	r2, r2
 8002b18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b1a:	4b20      	ldr	r3, [pc, #128]	; (8002b9c <HAL_RCC_ClockConfig+0x1b8>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 030f 	and.w	r3, r3, #15
 8002b22:	683a      	ldr	r2, [r7, #0]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d001      	beq.n	8002b2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e032      	b.n	8002b92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0304 	and.w	r3, r3, #4
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d008      	beq.n	8002b4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b38:	4b19      	ldr	r3, [pc, #100]	; (8002ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	4916      	ldr	r1, [pc, #88]	; (8002ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0308 	and.w	r3, r3, #8
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d009      	beq.n	8002b6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b56:	4b12      	ldr	r3, [pc, #72]	; (8002ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	691b      	ldr	r3, [r3, #16]
 8002b62:	00db      	lsls	r3, r3, #3
 8002b64:	490e      	ldr	r1, [pc, #56]	; (8002ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b6a:	f000 f821 	bl	8002bb0 <HAL_RCC_GetSysClockFreq>
 8002b6e:	4601      	mov	r1, r0
 8002b70:	4b0b      	ldr	r3, [pc, #44]	; (8002ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	091b      	lsrs	r3, r3, #4
 8002b76:	f003 030f 	and.w	r3, r3, #15
 8002b7a:	4a0a      	ldr	r2, [pc, #40]	; (8002ba4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b7c:	5cd3      	ldrb	r3, [r2, r3]
 8002b7e:	fa21 f303 	lsr.w	r3, r1, r3
 8002b82:	4a09      	ldr	r2, [pc, #36]	; (8002ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b86:	4b09      	ldr	r3, [pc, #36]	; (8002bac <HAL_RCC_ClockConfig+0x1c8>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7ff f99a 	bl	8001ec4 <HAL_InitTick>

  return HAL_OK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3710      	adds	r7, #16
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	40023c00 	.word	0x40023c00
 8002ba0:	40023800 	.word	0x40023800
 8002ba4:	0800bb38 	.word	0x0800bb38
 8002ba8:	20000254 	.word	0x20000254
 8002bac:	20000258 	.word	0x20000258

08002bb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bb2:	b085      	sub	sp, #20
 8002bb4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	607b      	str	r3, [r7, #4]
 8002bba:	2300      	movs	r3, #0
 8002bbc:	60fb      	str	r3, [r7, #12]
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bc6:	4b50      	ldr	r3, [pc, #320]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x158>)
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f003 030c 	and.w	r3, r3, #12
 8002bce:	2b04      	cmp	r3, #4
 8002bd0:	d007      	beq.n	8002be2 <HAL_RCC_GetSysClockFreq+0x32>
 8002bd2:	2b08      	cmp	r3, #8
 8002bd4:	d008      	beq.n	8002be8 <HAL_RCC_GetSysClockFreq+0x38>
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	f040 808d 	bne.w	8002cf6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bdc:	4b4b      	ldr	r3, [pc, #300]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x15c>)
 8002bde:	60bb      	str	r3, [r7, #8]
       break;
 8002be0:	e08c      	b.n	8002cfc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002be2:	4b4b      	ldr	r3, [pc, #300]	; (8002d10 <HAL_RCC_GetSysClockFreq+0x160>)
 8002be4:	60bb      	str	r3, [r7, #8]
      break;
 8002be6:	e089      	b.n	8002cfc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002be8:	4b47      	ldr	r3, [pc, #284]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x158>)
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bf0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bf2:	4b45      	ldr	r3, [pc, #276]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x158>)
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d023      	beq.n	8002c46 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bfe:	4b42      	ldr	r3, [pc, #264]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x158>)
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	099b      	lsrs	r3, r3, #6
 8002c04:	f04f 0400 	mov.w	r4, #0
 8002c08:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002c0c:	f04f 0200 	mov.w	r2, #0
 8002c10:	ea03 0501 	and.w	r5, r3, r1
 8002c14:	ea04 0602 	and.w	r6, r4, r2
 8002c18:	4a3d      	ldr	r2, [pc, #244]	; (8002d10 <HAL_RCC_GetSysClockFreq+0x160>)
 8002c1a:	fb02 f106 	mul.w	r1, r2, r6
 8002c1e:	2200      	movs	r2, #0
 8002c20:	fb02 f205 	mul.w	r2, r2, r5
 8002c24:	440a      	add	r2, r1
 8002c26:	493a      	ldr	r1, [pc, #232]	; (8002d10 <HAL_RCC_GetSysClockFreq+0x160>)
 8002c28:	fba5 0101 	umull	r0, r1, r5, r1
 8002c2c:	1853      	adds	r3, r2, r1
 8002c2e:	4619      	mov	r1, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f04f 0400 	mov.w	r4, #0
 8002c36:	461a      	mov	r2, r3
 8002c38:	4623      	mov	r3, r4
 8002c3a:	f7fd facd 	bl	80001d8 <__aeabi_uldivmod>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	460c      	mov	r4, r1
 8002c42:	60fb      	str	r3, [r7, #12]
 8002c44:	e049      	b.n	8002cda <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c46:	4b30      	ldr	r3, [pc, #192]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x158>)
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	099b      	lsrs	r3, r3, #6
 8002c4c:	f04f 0400 	mov.w	r4, #0
 8002c50:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002c54:	f04f 0200 	mov.w	r2, #0
 8002c58:	ea03 0501 	and.w	r5, r3, r1
 8002c5c:	ea04 0602 	and.w	r6, r4, r2
 8002c60:	4629      	mov	r1, r5
 8002c62:	4632      	mov	r2, r6
 8002c64:	f04f 0300 	mov.w	r3, #0
 8002c68:	f04f 0400 	mov.w	r4, #0
 8002c6c:	0154      	lsls	r4, r2, #5
 8002c6e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002c72:	014b      	lsls	r3, r1, #5
 8002c74:	4619      	mov	r1, r3
 8002c76:	4622      	mov	r2, r4
 8002c78:	1b49      	subs	r1, r1, r5
 8002c7a:	eb62 0206 	sbc.w	r2, r2, r6
 8002c7e:	f04f 0300 	mov.w	r3, #0
 8002c82:	f04f 0400 	mov.w	r4, #0
 8002c86:	0194      	lsls	r4, r2, #6
 8002c88:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002c8c:	018b      	lsls	r3, r1, #6
 8002c8e:	1a5b      	subs	r3, r3, r1
 8002c90:	eb64 0402 	sbc.w	r4, r4, r2
 8002c94:	f04f 0100 	mov.w	r1, #0
 8002c98:	f04f 0200 	mov.w	r2, #0
 8002c9c:	00e2      	lsls	r2, r4, #3
 8002c9e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002ca2:	00d9      	lsls	r1, r3, #3
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	4614      	mov	r4, r2
 8002ca8:	195b      	adds	r3, r3, r5
 8002caa:	eb44 0406 	adc.w	r4, r4, r6
 8002cae:	f04f 0100 	mov.w	r1, #0
 8002cb2:	f04f 0200 	mov.w	r2, #0
 8002cb6:	02a2      	lsls	r2, r4, #10
 8002cb8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002cbc:	0299      	lsls	r1, r3, #10
 8002cbe:	460b      	mov	r3, r1
 8002cc0:	4614      	mov	r4, r2
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	4621      	mov	r1, r4
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f04f 0400 	mov.w	r4, #0
 8002ccc:	461a      	mov	r2, r3
 8002cce:	4623      	mov	r3, r4
 8002cd0:	f7fd fa82 	bl	80001d8 <__aeabi_uldivmod>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	460c      	mov	r4, r1
 8002cd8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002cda:	4b0b      	ldr	r3, [pc, #44]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x158>)
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	0c1b      	lsrs	r3, r3, #16
 8002ce0:	f003 0303 	and.w	r3, r3, #3
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	005b      	lsls	r3, r3, #1
 8002ce8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002cea:	68fa      	ldr	r2, [r7, #12]
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cf2:	60bb      	str	r3, [r7, #8]
      break;
 8002cf4:	e002      	b.n	8002cfc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cf6:	4b05      	ldr	r3, [pc, #20]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x15c>)
 8002cf8:	60bb      	str	r3, [r7, #8]
      break;
 8002cfa:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cfc:	68bb      	ldr	r3, [r7, #8]
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3714      	adds	r7, #20
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d06:	bf00      	nop
 8002d08:	40023800 	.word	0x40023800
 8002d0c:	00f42400 	.word	0x00f42400
 8002d10:	017d7840 	.word	0x017d7840

08002d14 <__libc_init_array>:
 8002d14:	b570      	push	{r4, r5, r6, lr}
 8002d16:	4e0d      	ldr	r6, [pc, #52]	; (8002d4c <__libc_init_array+0x38>)
 8002d18:	4c0d      	ldr	r4, [pc, #52]	; (8002d50 <__libc_init_array+0x3c>)
 8002d1a:	1ba4      	subs	r4, r4, r6
 8002d1c:	10a4      	asrs	r4, r4, #2
 8002d1e:	2500      	movs	r5, #0
 8002d20:	42a5      	cmp	r5, r4
 8002d22:	d109      	bne.n	8002d38 <__libc_init_array+0x24>
 8002d24:	4e0b      	ldr	r6, [pc, #44]	; (8002d54 <__libc_init_array+0x40>)
 8002d26:	4c0c      	ldr	r4, [pc, #48]	; (8002d58 <__libc_init_array+0x44>)
 8002d28:	f000 f820 	bl	8002d6c <_init>
 8002d2c:	1ba4      	subs	r4, r4, r6
 8002d2e:	10a4      	asrs	r4, r4, #2
 8002d30:	2500      	movs	r5, #0
 8002d32:	42a5      	cmp	r5, r4
 8002d34:	d105      	bne.n	8002d42 <__libc_init_array+0x2e>
 8002d36:	bd70      	pop	{r4, r5, r6, pc}
 8002d38:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d3c:	4798      	blx	r3
 8002d3e:	3501      	adds	r5, #1
 8002d40:	e7ee      	b.n	8002d20 <__libc_init_array+0xc>
 8002d42:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d46:	4798      	blx	r3
 8002d48:	3501      	adds	r5, #1
 8002d4a:	e7f2      	b.n	8002d32 <__libc_init_array+0x1e>
 8002d4c:	0800bb50 	.word	0x0800bb50
 8002d50:	0800bb50 	.word	0x0800bb50
 8002d54:	0800bb50 	.word	0x0800bb50
 8002d58:	0800bb54 	.word	0x0800bb54

08002d5c <memset>:
 8002d5c:	4402      	add	r2, r0
 8002d5e:	4603      	mov	r3, r0
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d100      	bne.n	8002d66 <memset+0xa>
 8002d64:	4770      	bx	lr
 8002d66:	f803 1b01 	strb.w	r1, [r3], #1
 8002d6a:	e7f9      	b.n	8002d60 <memset+0x4>

08002d6c <_init>:
 8002d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d6e:	bf00      	nop
 8002d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d72:	bc08      	pop	{r3}
 8002d74:	469e      	mov	lr, r3
 8002d76:	4770      	bx	lr

08002d78 <_fini>:
 8002d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d7a:	bf00      	nop
 8002d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d7e:	bc08      	pop	{r3}
 8002d80:	469e      	mov	lr, r3
 8002d82:	4770      	bx	lr
