
prac7q2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035d4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08003774  08003774  00013774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003814  08003814  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08003814  08003814  00013814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800381c  0800381c  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800381c  0800381c  0001381c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003820  08003820  00013820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08003824  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000dac  20000084  080038a8  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000e30  080038a8  00020e30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b7cd  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d29  00000000  00000000  0002b881  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008f8  00000000  00000000  0002d5b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000800  00000000  00000000  0002dea8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016a5d  00000000  00000000  0002e6a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008b0c  00000000  00000000  00045105  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008759d  00000000  00000000  0004dc11  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d51ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002640  00000000  00000000  000d522c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000084 	.word	0x20000084
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800375c 	.word	0x0800375c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000088 	.word	0x20000088
 80001dc:	0800375c 	.word	0x0800375c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000582:	b097      	sub	sp, #92	; 0x5c
 8000584:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000586:	f000 fc07 	bl	8000d98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058a:	f000 f87b 	bl	8000684 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058e:	f000 f937 	bl	8000800 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000592:	f000 f8d5 	bl	8000740 <MX_SPI1_Init>
  MX_FATFS_Init();
 8000596:	f002 fbe3 	bl	8002d60 <MX_FATFS_Init>
  MX_USART1_UART_Init();
 800059a:	f000 f907 	bl	80007ac <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */


  SD_Init();
 800059e:	f000 fa07 	bl	80009b0 <SD_Init>

  // Set CS low
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 80005a2:	2200      	movs	r2, #0
 80005a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005a8:	4830      	ldr	r0, [pc, #192]	; (800066c <main+0xec>)
 80005aa:	f000 fef1 	bl	8001390 <HAL_GPIO_WritePin>

  SD_SendCommand(10, 0);
 80005ae:	2100      	movs	r1, #0
 80005b0:	200a      	movs	r0, #10
 80005b2:	f000 f9a5 	bl	8000900 <SD_SendCommand>
  SD_RxDataBlock(csdbuffer, 16);
 80005b6:	2110      	movs	r1, #16
 80005b8:	482d      	ldr	r0, [pc, #180]	; (8000670 <main+0xf0>)
 80005ba:	f000 fa65 	bl	8000a88 <SD_RxDataBlock>


  outlen = sprintf((char*) outstr,
		  "%02X,%02X,%02X,%02X,%02X,%02X,%02X,%02X,%02X,%02X,%02X,%02X,%02X,%02X,%02X,%02X\n",
		  csdbuffer[0], csdbuffer[1], csdbuffer[2], csdbuffer[3], csdbuffer[4], csdbuffer[5],
 80005be:	4b2c      	ldr	r3, [pc, #176]	; (8000670 <main+0xf0>)
 80005c0:	781b      	ldrb	r3, [r3, #0]
  outlen = sprintf((char*) outstr,
 80005c2:	469c      	mov	ip, r3
		  csdbuffer[0], csdbuffer[1], csdbuffer[2], csdbuffer[3], csdbuffer[4], csdbuffer[5],
 80005c4:	4b2a      	ldr	r3, [pc, #168]	; (8000670 <main+0xf0>)
 80005c6:	785b      	ldrb	r3, [r3, #1]
  outlen = sprintf((char*) outstr,
 80005c8:	469e      	mov	lr, r3
		  csdbuffer[0], csdbuffer[1], csdbuffer[2], csdbuffer[3], csdbuffer[4], csdbuffer[5],
 80005ca:	4b29      	ldr	r3, [pc, #164]	; (8000670 <main+0xf0>)
 80005cc:	789b      	ldrb	r3, [r3, #2]
  outlen = sprintf((char*) outstr,
 80005ce:	4618      	mov	r0, r3
		  csdbuffer[0], csdbuffer[1], csdbuffer[2], csdbuffer[3], csdbuffer[4], csdbuffer[5],
 80005d0:	4b27      	ldr	r3, [pc, #156]	; (8000670 <main+0xf0>)
 80005d2:	78db      	ldrb	r3, [r3, #3]
  outlen = sprintf((char*) outstr,
 80005d4:	461c      	mov	r4, r3
		  csdbuffer[0], csdbuffer[1], csdbuffer[2], csdbuffer[3], csdbuffer[4], csdbuffer[5],
 80005d6:	4b26      	ldr	r3, [pc, #152]	; (8000670 <main+0xf0>)
 80005d8:	791b      	ldrb	r3, [r3, #4]
  outlen = sprintf((char*) outstr,
 80005da:	461d      	mov	r5, r3
		  csdbuffer[0], csdbuffer[1], csdbuffer[2], csdbuffer[3], csdbuffer[4], csdbuffer[5],
 80005dc:	4b24      	ldr	r3, [pc, #144]	; (8000670 <main+0xf0>)
 80005de:	795b      	ldrb	r3, [r3, #5]
  outlen = sprintf((char*) outstr,
 80005e0:	461e      	mov	r6, r3
		  csdbuffer[6], csdbuffer[7], csdbuffer[8], csdbuffer[9], csdbuffer[10], csdbuffer[11],
 80005e2:	4b23      	ldr	r3, [pc, #140]	; (8000670 <main+0xf0>)
 80005e4:	799b      	ldrb	r3, [r3, #6]
  outlen = sprintf((char*) outstr,
 80005e6:	61fb      	str	r3, [r7, #28]
		  csdbuffer[6], csdbuffer[7], csdbuffer[8], csdbuffer[9], csdbuffer[10], csdbuffer[11],
 80005e8:	4b21      	ldr	r3, [pc, #132]	; (8000670 <main+0xf0>)
 80005ea:	79db      	ldrb	r3, [r3, #7]
  outlen = sprintf((char*) outstr,
 80005ec:	61bb      	str	r3, [r7, #24]
		  csdbuffer[6], csdbuffer[7], csdbuffer[8], csdbuffer[9], csdbuffer[10], csdbuffer[11],
 80005ee:	4b20      	ldr	r3, [pc, #128]	; (8000670 <main+0xf0>)
 80005f0:	7a1b      	ldrb	r3, [r3, #8]
  outlen = sprintf((char*) outstr,
 80005f2:	617b      	str	r3, [r7, #20]
		  csdbuffer[6], csdbuffer[7], csdbuffer[8], csdbuffer[9], csdbuffer[10], csdbuffer[11],
 80005f4:	4b1e      	ldr	r3, [pc, #120]	; (8000670 <main+0xf0>)
 80005f6:	7a5b      	ldrb	r3, [r3, #9]
  outlen = sprintf((char*) outstr,
 80005f8:	613b      	str	r3, [r7, #16]
		  csdbuffer[6], csdbuffer[7], csdbuffer[8], csdbuffer[9], csdbuffer[10], csdbuffer[11],
 80005fa:	4b1d      	ldr	r3, [pc, #116]	; (8000670 <main+0xf0>)
 80005fc:	7a9b      	ldrb	r3, [r3, #10]
  outlen = sprintf((char*) outstr,
 80005fe:	60fb      	str	r3, [r7, #12]
		  csdbuffer[6], csdbuffer[7], csdbuffer[8], csdbuffer[9], csdbuffer[10], csdbuffer[11],
 8000600:	4b1b      	ldr	r3, [pc, #108]	; (8000670 <main+0xf0>)
 8000602:	7adb      	ldrb	r3, [r3, #11]
  outlen = sprintf((char*) outstr,
 8000604:	60bb      	str	r3, [r7, #8]
		  csdbuffer[12], csdbuffer[13], csdbuffer[14], csdbuffer[15]);
 8000606:	4b1a      	ldr	r3, [pc, #104]	; (8000670 <main+0xf0>)
 8000608:	7b1b      	ldrb	r3, [r3, #12]
  outlen = sprintf((char*) outstr,
 800060a:	607b      	str	r3, [r7, #4]
		  csdbuffer[12], csdbuffer[13], csdbuffer[14], csdbuffer[15]);
 800060c:	4b18      	ldr	r3, [pc, #96]	; (8000670 <main+0xf0>)
 800060e:	7b5b      	ldrb	r3, [r3, #13]
  outlen = sprintf((char*) outstr,
 8000610:	4619      	mov	r1, r3
		  csdbuffer[12], csdbuffer[13], csdbuffer[14], csdbuffer[15]);
 8000612:	4b17      	ldr	r3, [pc, #92]	; (8000670 <main+0xf0>)
 8000614:	7b9b      	ldrb	r3, [r3, #14]
  outlen = sprintf((char*) outstr,
 8000616:	461a      	mov	r2, r3
		  csdbuffer[12], csdbuffer[13], csdbuffer[14], csdbuffer[15]);
 8000618:	4b15      	ldr	r3, [pc, #84]	; (8000670 <main+0xf0>)
 800061a:	7bdb      	ldrb	r3, [r3, #15]
  outlen = sprintf((char*) outstr,
 800061c:	930d      	str	r3, [sp, #52]	; 0x34
 800061e:	920c      	str	r2, [sp, #48]	; 0x30
 8000620:	910b      	str	r1, [sp, #44]	; 0x2c
 8000622:	687a      	ldr	r2, [r7, #4]
 8000624:	920a      	str	r2, [sp, #40]	; 0x28
 8000626:	68ba      	ldr	r2, [r7, #8]
 8000628:	9209      	str	r2, [sp, #36]	; 0x24
 800062a:	68fa      	ldr	r2, [r7, #12]
 800062c:	9208      	str	r2, [sp, #32]
 800062e:	693a      	ldr	r2, [r7, #16]
 8000630:	9207      	str	r2, [sp, #28]
 8000632:	697a      	ldr	r2, [r7, #20]
 8000634:	9206      	str	r2, [sp, #24]
 8000636:	69ba      	ldr	r2, [r7, #24]
 8000638:	9205      	str	r2, [sp, #20]
 800063a:	69fb      	ldr	r3, [r7, #28]
 800063c:	9304      	str	r3, [sp, #16]
 800063e:	9603      	str	r6, [sp, #12]
 8000640:	9502      	str	r5, [sp, #8]
 8000642:	9401      	str	r4, [sp, #4]
 8000644:	9000      	str	r0, [sp, #0]
 8000646:	4673      	mov	r3, lr
 8000648:	4662      	mov	r2, ip
 800064a:	490a      	ldr	r1, [pc, #40]	; (8000674 <main+0xf4>)
 800064c:	480a      	ldr	r0, [pc, #40]	; (8000678 <main+0xf8>)
 800064e:	f002 fc7f 	bl	8002f50 <siprintf>
 8000652:	4603      	mov	r3, r0
 8000654:	461a      	mov	r2, r3
 8000656:	4b09      	ldr	r3, [pc, #36]	; (800067c <main+0xfc>)
 8000658:	601a      	str	r2, [r3, #0]

  HAL_UART_Transmit(&huart1, outstr, outlen, 10);
 800065a:	4b08      	ldr	r3, [pc, #32]	; (800067c <main+0xfc>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	b29a      	uxth	r2, r3
 8000660:	230a      	movs	r3, #10
 8000662:	4905      	ldr	r1, [pc, #20]	; (8000678 <main+0xf8>)
 8000664:	4806      	ldr	r0, [pc, #24]	; (8000680 <main+0x100>)
 8000666:	f001 ff1c 	bl	80024a2 <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800066a:	e7fe      	b.n	800066a <main+0xea>
 800066c:	40020000 	.word	0x40020000
 8000670:	200000b8 	.word	0x200000b8
 8000674:	08003774 	.word	0x08003774
 8000678:	20000304 	.word	0x20000304
 800067c:	200006ec 	.word	0x200006ec
 8000680:	200006f4 	.word	0x200006f4

08000684 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b094      	sub	sp, #80	; 0x50
 8000688:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068a:	f107 0320 	add.w	r3, r7, #32
 800068e:	2230      	movs	r2, #48	; 0x30
 8000690:	2100      	movs	r1, #0
 8000692:	4618      	mov	r0, r3
 8000694:	f002 fc54 	bl	8002f40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000698:	f107 030c 	add.w	r3, r7, #12
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]
 80006a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a8:	2300      	movs	r3, #0
 80006aa:	60bb      	str	r3, [r7, #8]
 80006ac:	4b22      	ldr	r3, [pc, #136]	; (8000738 <SystemClock_Config+0xb4>)
 80006ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b0:	4a21      	ldr	r2, [pc, #132]	; (8000738 <SystemClock_Config+0xb4>)
 80006b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006b6:	6413      	str	r3, [r2, #64]	; 0x40
 80006b8:	4b1f      	ldr	r3, [pc, #124]	; (8000738 <SystemClock_Config+0xb4>)
 80006ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006c0:	60bb      	str	r3, [r7, #8]
 80006c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006c4:	2300      	movs	r3, #0
 80006c6:	607b      	str	r3, [r7, #4]
 80006c8:	4b1c      	ldr	r3, [pc, #112]	; (800073c <SystemClock_Config+0xb8>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a1b      	ldr	r2, [pc, #108]	; (800073c <SystemClock_Config+0xb8>)
 80006ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006d2:	6013      	str	r3, [r2, #0]
 80006d4:	4b19      	ldr	r3, [pc, #100]	; (800073c <SystemClock_Config+0xb8>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006dc:	607b      	str	r3, [r7, #4]
 80006de:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006e0:	2302      	movs	r3, #2
 80006e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e4:	2301      	movs	r3, #1
 80006e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006e8:	2310      	movs	r3, #16
 80006ea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006ec:	2300      	movs	r3, #0
 80006ee:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f0:	f107 0320 	add.w	r3, r7, #32
 80006f4:	4618      	mov	r0, r3
 80006f6:	f000 fe65 	bl	80013c4 <HAL_RCC_OscConfig>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000700:	f000 f8c2 	bl	8000888 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000704:	230f      	movs	r3, #15
 8000706:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000708:	2300      	movs	r3, #0
 800070a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800070c:	2300      	movs	r3, #0
 800070e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000710:	2300      	movs	r3, #0
 8000712:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000714:	2300      	movs	r3, #0
 8000716:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000718:	f107 030c 	add.w	r3, r7, #12
 800071c:	2100      	movs	r1, #0
 800071e:	4618      	mov	r0, r3
 8000720:	f001 f8c0 	bl	80018a4 <HAL_RCC_ClockConfig>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800072a:	f000 f8ad 	bl	8000888 <Error_Handler>
  }
}
 800072e:	bf00      	nop
 8000730:	3750      	adds	r7, #80	; 0x50
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	40023800 	.word	0x40023800
 800073c:	40007000 	.word	0x40007000

08000740 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000744:	4b17      	ldr	r3, [pc, #92]	; (80007a4 <MX_SPI1_Init+0x64>)
 8000746:	4a18      	ldr	r2, [pc, #96]	; (80007a8 <MX_SPI1_Init+0x68>)
 8000748:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800074a:	4b16      	ldr	r3, [pc, #88]	; (80007a4 <MX_SPI1_Init+0x64>)
 800074c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000750:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000752:	4b14      	ldr	r3, [pc, #80]	; (80007a4 <MX_SPI1_Init+0x64>)
 8000754:	2200      	movs	r2, #0
 8000756:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000758:	4b12      	ldr	r3, [pc, #72]	; (80007a4 <MX_SPI1_Init+0x64>)
 800075a:	2200      	movs	r2, #0
 800075c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800075e:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <MX_SPI1_Init+0x64>)
 8000760:	2200      	movs	r2, #0
 8000762:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000764:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <MX_SPI1_Init+0x64>)
 8000766:	2200      	movs	r2, #0
 8000768:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800076a:	4b0e      	ldr	r3, [pc, #56]	; (80007a4 <MX_SPI1_Init+0x64>)
 800076c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000770:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000772:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <MX_SPI1_Init+0x64>)
 8000774:	2200      	movs	r2, #0
 8000776:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000778:	4b0a      	ldr	r3, [pc, #40]	; (80007a4 <MX_SPI1_Init+0x64>)
 800077a:	2200      	movs	r2, #0
 800077c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800077e:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <MX_SPI1_Init+0x64>)
 8000780:	2200      	movs	r2, #0
 8000782:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000784:	4b07      	ldr	r3, [pc, #28]	; (80007a4 <MX_SPI1_Init+0x64>)
 8000786:	2200      	movs	r2, #0
 8000788:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800078a:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <MX_SPI1_Init+0x64>)
 800078c:	220a      	movs	r2, #10
 800078e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000790:	4804      	ldr	r0, [pc, #16]	; (80007a4 <MX_SPI1_Init+0x64>)
 8000792:	f001 fa53 	bl	8001c3c <HAL_SPI_Init>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800079c:	f000 f874 	bl	8000888 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007a0:	bf00      	nop
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	20000734 	.word	0x20000734
 80007a8:	40013000 	.word	0x40013000

080007ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007b0:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <MX_USART1_UART_Init+0x4c>)
 80007b2:	4a12      	ldr	r2, [pc, #72]	; (80007fc <MX_USART1_UART_Init+0x50>)
 80007b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007b6:	4b10      	ldr	r3, [pc, #64]	; (80007f8 <MX_USART1_UART_Init+0x4c>)
 80007b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007be:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <MX_USART1_UART_Init+0x4c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007c4:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <MX_USART1_UART_Init+0x4c>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007ca:	4b0b      	ldr	r3, [pc, #44]	; (80007f8 <MX_USART1_UART_Init+0x4c>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007d0:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <MX_USART1_UART_Init+0x4c>)
 80007d2:	220c      	movs	r2, #12
 80007d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007d6:	4b08      	ldr	r3, [pc, #32]	; (80007f8 <MX_USART1_UART_Init+0x4c>)
 80007d8:	2200      	movs	r2, #0
 80007da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007dc:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <MX_USART1_UART_Init+0x4c>)
 80007de:	2200      	movs	r2, #0
 80007e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007e2:	4805      	ldr	r0, [pc, #20]	; (80007f8 <MX_USART1_UART_Init+0x4c>)
 80007e4:	f001 fe10 	bl	8002408 <HAL_UART_Init>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80007ee:	f000 f84b 	bl	8000888 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	200006f4 	.word	0x200006f4
 80007fc:	40011000 	.word	0x40011000

08000800 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b088      	sub	sp, #32
 8000804:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000806:	f107 030c 	add.w	r3, r7, #12
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	605a      	str	r2, [r3, #4]
 8000810:	609a      	str	r2, [r3, #8]
 8000812:	60da      	str	r2, [r3, #12]
 8000814:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	60bb      	str	r3, [r7, #8]
 800081a:	4b19      	ldr	r3, [pc, #100]	; (8000880 <MX_GPIO_Init+0x80>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a18      	ldr	r2, [pc, #96]	; (8000880 <MX_GPIO_Init+0x80>)
 8000820:	f043 0301 	orr.w	r3, r3, #1
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b16      	ldr	r3, [pc, #88]	; (8000880 <MX_GPIO_Init+0x80>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0301 	and.w	r3, r3, #1
 800082e:	60bb      	str	r3, [r7, #8]
 8000830:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	607b      	str	r3, [r7, #4]
 8000836:	4b12      	ldr	r3, [pc, #72]	; (8000880 <MX_GPIO_Init+0x80>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a11      	ldr	r2, [pc, #68]	; (8000880 <MX_GPIO_Init+0x80>)
 800083c:	f043 0302 	orr.w	r3, r3, #2
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b0f      	ldr	r3, [pc, #60]	; (8000880 <MX_GPIO_Init+0x80>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f003 0302 	and.w	r3, r3, #2
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 800084e:	2200      	movs	r2, #0
 8000850:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000854:	480b      	ldr	r0, [pc, #44]	; (8000884 <MX_GPIO_Init+0x84>)
 8000856:	f000 fd9b 	bl	8001390 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800085a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800085e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000860:	2301      	movs	r3, #1
 8000862:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000868:	2300      	movs	r3, #0
 800086a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086c:	f107 030c 	add.w	r3, r7, #12
 8000870:	4619      	mov	r1, r3
 8000872:	4804      	ldr	r0, [pc, #16]	; (8000884 <MX_GPIO_Init+0x84>)
 8000874:	f000 fc0a 	bl	800108c <HAL_GPIO_Init>

}
 8000878:	bf00      	nop
 800087a:	3720      	adds	r7, #32
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	40023800 	.word	0x40023800
 8000884:	40020000 	.word	0x40020000

08000888 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
	...

08000898 <Select>:
#include "main.h"

extern SPI_HandleTypeDef hspi1;

void Select()
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 800089c:	2200      	movs	r2, #0
 800089e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008a2:	4804      	ldr	r0, [pc, #16]	; (80008b4 <Select+0x1c>)
 80008a4:	f000 fd74 	bl	8001390 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80008a8:	2001      	movs	r0, #1
 80008aa:	f000 fae7 	bl	8000e7c <HAL_Delay>
}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40020000 	.word	0x40020000

080008b8 <Deselect>:

void Deselect()
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 80008bc:	2201      	movs	r2, #1
 80008be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008c2:	4804      	ldr	r0, [pc, #16]	; (80008d4 <Deselect+0x1c>)
 80008c4:	f000 fd64 	bl	8001390 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80008c8:	2001      	movs	r0, #1
 80008ca:	f000 fad7 	bl	8000e7c <HAL_Delay>
}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40020000 	.word	0x40020000

080008d8 <SD_ReceiveByte>:
{
	Deselect();
}

uint8_t SD_ReceiveByte()
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b084      	sub	sp, #16
 80008dc:	af02      	add	r7, sp, #8
	uint8_t dummy = 0xff;
 80008de:	23ff      	movs	r3, #255	; 0xff
 80008e0:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, 10);
 80008e2:	1dba      	adds	r2, r7, #6
 80008e4:	1df9      	adds	r1, r7, #7
 80008e6:	230a      	movs	r3, #10
 80008e8:	9300      	str	r3, [sp, #0]
 80008ea:	2301      	movs	r3, #1
 80008ec:	4803      	ldr	r0, [pc, #12]	; (80008fc <SD_ReceiveByte+0x24>)
 80008ee:	f001 fb3d 	bl	8001f6c <HAL_SPI_TransmitReceive>
	return data;
 80008f2:	79bb      	ldrb	r3, [r7, #6]
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	3708      	adds	r7, #8
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	20000734 	.word	0x20000734

08000900 <SD_SendCommand>:

uint8_t SD_SendCommand(uint8_t cmd, uint32_t args)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b086      	sub	sp, #24
 8000904:	af00      	add	r7, sp, #0
 8000906:	4603      	mov	r3, r0
 8000908:	6039      	str	r1, [r7, #0]
 800090a:	71fb      	strb	r3, [r7, #7]
	uint8_t res;
	uint32_t tickstart = HAL_GetTick();
 800090c:	f000 faaa 	bl	8000e64 <HAL_GetTick>
 8000910:	6138      	str	r0, [r7, #16]
	do
	{
		res = SD_ReceiveByte();
 8000912:	f7ff ffe1 	bl	80008d8 <SD_ReceiveByte>
 8000916:	4603      	mov	r3, r0
 8000918:	73fb      	strb	r3, [r7, #15]
	} while (((HAL_GetTick() - tickstart) < 50) && (res != 0xff));
 800091a:	f000 faa3 	bl	8000e64 <HAL_GetTick>
 800091e:	4602      	mov	r2, r0
 8000920:	693b      	ldr	r3, [r7, #16]
 8000922:	1ad3      	subs	r3, r2, r3
 8000924:	2b31      	cmp	r3, #49	; 0x31
 8000926:	d802      	bhi.n	800092e <SD_SendCommand+0x2e>
 8000928:	7bfb      	ldrb	r3, [r7, #15]
 800092a:	2bff      	cmp	r3, #255	; 0xff
 800092c:	d1f1      	bne.n	8000912 <SD_SendCommand+0x12>

	uint8_t cmdbuffer[6];
	cmdbuffer[0] = 0x40 | cmd;
 800092e:	79fb      	ldrb	r3, [r7, #7]
 8000930:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000934:	b2db      	uxtb	r3, r3
 8000936:	723b      	strb	r3, [r7, #8]
	cmdbuffer[1] = (uint8_t)(args >> 24);
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	0e1b      	lsrs	r3, r3, #24
 800093c:	b2db      	uxtb	r3, r3
 800093e:	727b      	strb	r3, [r7, #9]
	cmdbuffer[2] = (uint8_t)(args >> 16);
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	0c1b      	lsrs	r3, r3, #16
 8000944:	b2db      	uxtb	r3, r3
 8000946:	72bb      	strb	r3, [r7, #10]
	cmdbuffer[3] = (uint8_t)(args >> 8);
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	0a1b      	lsrs	r3, r3, #8
 800094c:	b2db      	uxtb	r3, r3
 800094e:	72fb      	strb	r3, [r7, #11]
	cmdbuffer[4] = (uint8_t)(args);
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	b2db      	uxtb	r3, r3
 8000954:	733b      	strb	r3, [r7, #12]
	if (cmd == 0)
 8000956:	79fb      	ldrb	r3, [r7, #7]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d102      	bne.n	8000962 <SD_SendCommand+0x62>
		cmdbuffer[5] = 0x95;
 800095c:	2395      	movs	r3, #149	; 0x95
 800095e:	737b      	strb	r3, [r7, #13]
 8000960:	e007      	b.n	8000972 <SD_SendCommand+0x72>
	else if (cmd == 8)
 8000962:	79fb      	ldrb	r3, [r7, #7]
 8000964:	2b08      	cmp	r3, #8
 8000966:	d102      	bne.n	800096e <SD_SendCommand+0x6e>
		cmdbuffer[5] = 0x87;
 8000968:	2387      	movs	r3, #135	; 0x87
 800096a:	737b      	strb	r3, [r7, #13]
 800096c:	e001      	b.n	8000972 <SD_SendCommand+0x72>
	else
		cmdbuffer[5] = 1;
 800096e:	2301      	movs	r3, #1
 8000970:	737b      	strb	r3, [r7, #13]

	HAL_SPI_Transmit(&hspi1, cmdbuffer, 6, 10);
 8000972:	f107 0108 	add.w	r1, r7, #8
 8000976:	230a      	movs	r3, #10
 8000978:	2206      	movs	r2, #6
 800097a:	480c      	ldr	r0, [pc, #48]	; (80009ac <SD_SendCommand+0xac>)
 800097c:	f001 f9c2 	bl	8001d04 <HAL_SPI_Transmit>

	// read response code
	uint8_t n = 10;
 8000980:	230a      	movs	r3, #10
 8000982:	75fb      	strb	r3, [r7, #23]
	do
	{
		res = SD_ReceiveByte();
 8000984:	f7ff ffa8 	bl	80008d8 <SD_ReceiveByte>
 8000988:	4603      	mov	r3, r0
 800098a:	73fb      	strb	r3, [r7, #15]
		n--;
 800098c:	7dfb      	ldrb	r3, [r7, #23]
 800098e:	3b01      	subs	r3, #1
 8000990:	75fb      	strb	r3, [r7, #23]
	} while (((res & 0x80) == 0x80) && (n > 0));
 8000992:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000996:	2b00      	cmp	r3, #0
 8000998:	da02      	bge.n	80009a0 <SD_SendCommand+0xa0>
 800099a:	7dfb      	ldrb	r3, [r7, #23]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d1f1      	bne.n	8000984 <SD_SendCommand+0x84>

	return res;
 80009a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3718      	adds	r7, #24
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	20000734 	.word	0x20000734

080009b0 <SD_Init>:



uint8_t SD_Init()
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b086      	sub	sp, #24
 80009b4:	af00      	add	r7, sp, #0
	Deselect();
 80009b6:	f7ff ff7f 	bl	80008b8 <Deselect>

	uint8_t dummy = 0xff;
 80009ba:	23ff      	movs	r3, #255	; 0xff
 80009bc:	72fb      	strb	r3, [r7, #11]
	for (int i = 0; i < 10; i++)
 80009be:	2300      	movs	r3, #0
 80009c0:	617b      	str	r3, [r7, #20]
 80009c2:	e009      	b.n	80009d8 <SD_Init+0x28>
	{
		HAL_SPI_Transmit(&hspi1, &dummy, 1, 10);
 80009c4:	f107 010b 	add.w	r1, r7, #11
 80009c8:	230a      	movs	r3, #10
 80009ca:	2201      	movs	r2, #1
 80009cc:	482d      	ldr	r0, [pc, #180]	; (8000a84 <SD_Init+0xd4>)
 80009ce:	f001 f999 	bl	8001d04 <HAL_SPI_Transmit>
	for (int i = 0; i < 10; i++)
 80009d2:	697b      	ldr	r3, [r7, #20]
 80009d4:	3301      	adds	r3, #1
 80009d6:	617b      	str	r3, [r7, #20]
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	2b09      	cmp	r3, #9
 80009dc:	ddf2      	ble.n	80009c4 <SD_Init+0x14>
	}

	Select();
 80009de:	f7ff ff5b 	bl	8000898 <Select>

	// send command 0
	if (SD_SendCommand(0, 0) != 1)
 80009e2:	2100      	movs	r1, #0
 80009e4:	2000      	movs	r0, #0
 80009e6:	f7ff ff8b 	bl	8000900 <SD_SendCommand>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b01      	cmp	r3, #1
 80009ee:	d001      	beq.n	80009f4 <SD_Init+0x44>
		return 0;
 80009f0:	2300      	movs	r3, #0
 80009f2:	e042      	b.n	8000a7a <SD_Init+0xca>

	// send command 8
	if (SD_SendCommand(8, 0x1aa) != 1)
 80009f4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80009f8:	2008      	movs	r0, #8
 80009fa:	f7ff ff81 	bl	8000900 <SD_SendCommand>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b01      	cmp	r3, #1
 8000a02:	d001      	beq.n	8000a08 <SD_Init+0x58>
		return 0;
 8000a04:	2300      	movs	r3, #0
 8000a06:	e038      	b.n	8000a7a <SD_Init+0xca>

	// read R7 response after cmd8
	uint8_t cmdreturn[4];
	for (int i = 0; i < 4; i++)
 8000a08:	2300      	movs	r3, #0
 8000a0a:	613b      	str	r3, [r7, #16]
 8000a0c:	e00b      	b.n	8000a26 <SD_Init+0x76>
		cmdreturn[i] = SD_ReceiveByte();
 8000a0e:	f7ff ff63 	bl	80008d8 <SD_ReceiveByte>
 8000a12:	4603      	mov	r3, r0
 8000a14:	4619      	mov	r1, r3
 8000a16:	1d3a      	adds	r2, r7, #4
 8000a18:	693b      	ldr	r3, [r7, #16]
 8000a1a:	4413      	add	r3, r2
 8000a1c:	460a      	mov	r2, r1
 8000a1e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 4; i++)
 8000a20:	693b      	ldr	r3, [r7, #16]
 8000a22:	3301      	adds	r3, #1
 8000a24:	613b      	str	r3, [r7, #16]
 8000a26:	693b      	ldr	r3, [r7, #16]
 8000a28:	2b03      	cmp	r3, #3
 8000a2a:	ddf0      	ble.n	8000a0e <SD_Init+0x5e>

	if ((cmdreturn[2] != 1) && (cmdreturn[3] != 0xaa))
 8000a2c:	79bb      	ldrb	r3, [r7, #6]
 8000a2e:	2b01      	cmp	r3, #1
 8000a30:	d004      	beq.n	8000a3c <SD_Init+0x8c>
 8000a32:	79fb      	ldrb	r3, [r7, #7]
 8000a34:	2baa      	cmp	r3, #170	; 0xaa
 8000a36:	d001      	beq.n	8000a3c <SD_Init+0x8c>
		return 0;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	e01e      	b.n	8000a7a <SD_Init+0xca>

	uint32_t tickstart = HAL_GetTick();
 8000a3c:	f000 fa12 	bl	8000e64 <HAL_GetTick>
 8000a40:	60f8      	str	r0, [r7, #12]
	do
	{
		if (SD_SendCommand(55, 0) <= 1)
 8000a42:	2100      	movs	r1, #0
 8000a44:	2037      	movs	r0, #55	; 0x37
 8000a46:	f7ff ff5b 	bl	8000900 <SD_SendCommand>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b01      	cmp	r3, #1
 8000a4e:	d807      	bhi.n	8000a60 <SD_Init+0xb0>
		{
			if (SD_SendCommand(41, 1 << 30) == 0)
 8000a50:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000a54:	2029      	movs	r0, #41	; 0x29
 8000a56:	f7ff ff53 	bl	8000900 <SD_SendCommand>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d008      	beq.n	8000a72 <SD_Init+0xc2>
			{
				// ok!
				break;
			}
		}
	} while ((HAL_GetTick() - tickstart) < 1000);
 8000a60:	f000 fa00 	bl	8000e64 <HAL_GetTick>
 8000a64:	4602      	mov	r2, r0
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	1ad3      	subs	r3, r2, r3
 8000a6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a6e:	d3e8      	bcc.n	8000a42 <SD_Init+0x92>
 8000a70:	e000      	b.n	8000a74 <SD_Init+0xc4>
				break;
 8000a72:	bf00      	nop

	Deselect();
 8000a74:	f7ff ff20 	bl	80008b8 <Deselect>

	return 1;
 8000a78:	2301      	movs	r3, #1
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	3718      	adds	r7, #24
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	20000734 	.word	0x20000734

08000a88 <SD_RxDataBlock>:


uint8_t SD_RxDataBlock(uint8_t* buff, uint16_t len)
{
 8000a88:	b590      	push	{r4, r7, lr}
 8000a8a:	b087      	sub	sp, #28
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	460b      	mov	r3, r1
 8000a92:	807b      	strh	r3, [r7, #2]
	uint8_t token;

	uint32_t ticksstart = HAL_GetTick();
 8000a94:	f000 f9e6 	bl	8000e64 <HAL_GetTick>
 8000a98:	6138      	str	r0, [r7, #16]

	// loop until response received or timeout
	do
	{
		token = SD_ReceiveByte();
 8000a9a:	f7ff ff1d 	bl	80008d8 <SD_ReceiveByte>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	73fb      	strb	r3, [r7, #15]
	} while ((token == 0xff) && (HAL_GetTick() - ticksstart < 20));
 8000aa2:	7bfb      	ldrb	r3, [r7, #15]
 8000aa4:	2bff      	cmp	r3, #255	; 0xff
 8000aa6:	d106      	bne.n	8000ab6 <SD_RxDataBlock+0x2e>
 8000aa8:	f000 f9dc 	bl	8000e64 <HAL_GetTick>
 8000aac:	4602      	mov	r2, r0
 8000aae:	693b      	ldr	r3, [r7, #16]
 8000ab0:	1ad3      	subs	r3, r2, r3
 8000ab2:	2b13      	cmp	r3, #19
 8000ab4:	d9f1      	bls.n	8000a9a <SD_RxDataBlock+0x12>

	// check for invalid response
	if (token != 0xfe)
 8000ab6:	7bfb      	ldrb	r3, [r7, #15]
 8000ab8:	2bfe      	cmp	r3, #254	; 0xfe
 8000aba:	d001      	beq.n	8000ac0 <SD_RxDataBlock+0x38>
		return 0;
 8000abc:	2300      	movs	r3, #0
 8000abe:	e015      	b.n	8000aec <SD_RxDataBlock+0x64>

	// receive data
	for (int i = 0; i < len; i++)
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	617b      	str	r3, [r7, #20]
 8000ac4:	e009      	b.n	8000ada <SD_RxDataBlock+0x52>
	{
		buff[i] = SD_ReceiveByte();
 8000ac6:	697b      	ldr	r3, [r7, #20]
 8000ac8:	687a      	ldr	r2, [r7, #4]
 8000aca:	18d4      	adds	r4, r2, r3
 8000acc:	f7ff ff04 	bl	80008d8 <SD_ReceiveByte>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	7023      	strb	r3, [r4, #0]
	for (int i = 0; i < len; i++)
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	3301      	adds	r3, #1
 8000ad8:	617b      	str	r3, [r7, #20]
 8000ada:	887b      	ldrh	r3, [r7, #2]
 8000adc:	697a      	ldr	r2, [r7, #20]
 8000ade:	429a      	cmp	r2, r3
 8000ae0:	dbf1      	blt.n	8000ac6 <SD_RxDataBlock+0x3e>
	}

	// read and discard CRC
	SD_ReceiveByte();
 8000ae2:	f7ff fef9 	bl	80008d8 <SD_ReceiveByte>
	SD_ReceiveByte();
 8000ae6:	f7ff fef7 	bl	80008d8 <SD_ReceiveByte>

	// return success
	return 1;
 8000aea:	2301      	movs	r3, #1
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	371c      	adds	r7, #28
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd90      	pop	{r4, r7, pc}

08000af4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	607b      	str	r3, [r7, #4]
 8000afe:	4b10      	ldr	r3, [pc, #64]	; (8000b40 <HAL_MspInit+0x4c>)
 8000b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b02:	4a0f      	ldr	r2, [pc, #60]	; (8000b40 <HAL_MspInit+0x4c>)
 8000b04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b08:	6453      	str	r3, [r2, #68]	; 0x44
 8000b0a:	4b0d      	ldr	r3, [pc, #52]	; (8000b40 <HAL_MspInit+0x4c>)
 8000b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b12:	607b      	str	r3, [r7, #4]
 8000b14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	603b      	str	r3, [r7, #0]
 8000b1a:	4b09      	ldr	r3, [pc, #36]	; (8000b40 <HAL_MspInit+0x4c>)
 8000b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1e:	4a08      	ldr	r2, [pc, #32]	; (8000b40 <HAL_MspInit+0x4c>)
 8000b20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b24:	6413      	str	r3, [r2, #64]	; 0x40
 8000b26:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <HAL_MspInit+0x4c>)
 8000b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b2e:	603b      	str	r3, [r7, #0]
 8000b30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b32:	bf00      	nop
 8000b34:	370c      	adds	r7, #12
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	40023800 	.word	0x40023800

08000b44 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b08a      	sub	sp, #40	; 0x28
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b4c:	f107 0314 	add.w	r3, r7, #20
 8000b50:	2200      	movs	r2, #0
 8000b52:	601a      	str	r2, [r3, #0]
 8000b54:	605a      	str	r2, [r3, #4]
 8000b56:	609a      	str	r2, [r3, #8]
 8000b58:	60da      	str	r2, [r3, #12]
 8000b5a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a19      	ldr	r2, [pc, #100]	; (8000bc8 <HAL_SPI_MspInit+0x84>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d12b      	bne.n	8000bbe <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	613b      	str	r3, [r7, #16]
 8000b6a:	4b18      	ldr	r3, [pc, #96]	; (8000bcc <HAL_SPI_MspInit+0x88>)
 8000b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6e:	4a17      	ldr	r2, [pc, #92]	; (8000bcc <HAL_SPI_MspInit+0x88>)
 8000b70:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b74:	6453      	str	r3, [r2, #68]	; 0x44
 8000b76:	4b15      	ldr	r3, [pc, #84]	; (8000bcc <HAL_SPI_MspInit+0x88>)
 8000b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b7e:	613b      	str	r3, [r7, #16]
 8000b80:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	60fb      	str	r3, [r7, #12]
 8000b86:	4b11      	ldr	r3, [pc, #68]	; (8000bcc <HAL_SPI_MspInit+0x88>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	4a10      	ldr	r2, [pc, #64]	; (8000bcc <HAL_SPI_MspInit+0x88>)
 8000b8c:	f043 0301 	orr.w	r3, r3, #1
 8000b90:	6313      	str	r3, [r2, #48]	; 0x30
 8000b92:	4b0e      	ldr	r3, [pc, #56]	; (8000bcc <HAL_SPI_MspInit+0x88>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	f003 0301 	and.w	r3, r3, #1
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000b9e:	23e0      	movs	r3, #224	; 0xe0
 8000ba0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000baa:	2303      	movs	r3, #3
 8000bac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bae:	2305      	movs	r3, #5
 8000bb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb2:	f107 0314 	add.w	r3, r7, #20
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4805      	ldr	r0, [pc, #20]	; (8000bd0 <HAL_SPI_MspInit+0x8c>)
 8000bba:	f000 fa67 	bl	800108c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000bbe:	bf00      	nop
 8000bc0:	3728      	adds	r7, #40	; 0x28
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40013000 	.word	0x40013000
 8000bcc:	40023800 	.word	0x40023800
 8000bd0:	40020000 	.word	0x40020000

08000bd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b08a      	sub	sp, #40	; 0x28
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	609a      	str	r2, [r3, #8]
 8000be8:	60da      	str	r2, [r3, #12]
 8000bea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a19      	ldr	r2, [pc, #100]	; (8000c58 <HAL_UART_MspInit+0x84>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d12b      	bne.n	8000c4e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	613b      	str	r3, [r7, #16]
 8000bfa:	4b18      	ldr	r3, [pc, #96]	; (8000c5c <HAL_UART_MspInit+0x88>)
 8000bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfe:	4a17      	ldr	r2, [pc, #92]	; (8000c5c <HAL_UART_MspInit+0x88>)
 8000c00:	f043 0310 	orr.w	r3, r3, #16
 8000c04:	6453      	str	r3, [r2, #68]	; 0x44
 8000c06:	4b15      	ldr	r3, [pc, #84]	; (8000c5c <HAL_UART_MspInit+0x88>)
 8000c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c0a:	f003 0310 	and.w	r3, r3, #16
 8000c0e:	613b      	str	r3, [r7, #16]
 8000c10:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	60fb      	str	r3, [r7, #12]
 8000c16:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <HAL_UART_MspInit+0x88>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	4a10      	ldr	r2, [pc, #64]	; (8000c5c <HAL_UART_MspInit+0x88>)
 8000c1c:	f043 0302 	orr.w	r3, r3, #2
 8000c20:	6313      	str	r3, [r2, #48]	; 0x30
 8000c22:	4b0e      	ldr	r3, [pc, #56]	; (8000c5c <HAL_UART_MspInit+0x88>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	f003 0302 	and.w	r3, r3, #2
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c2e:	23c0      	movs	r3, #192	; 0xc0
 8000c30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c32:	2302      	movs	r3, #2
 8000c34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c3a:	2303      	movs	r3, #3
 8000c3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c3e:	2307      	movs	r3, #7
 8000c40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c42:	f107 0314 	add.w	r3, r7, #20
 8000c46:	4619      	mov	r1, r3
 8000c48:	4805      	ldr	r0, [pc, #20]	; (8000c60 <HAL_UART_MspInit+0x8c>)
 8000c4a:	f000 fa1f 	bl	800108c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c4e:	bf00      	nop
 8000c50:	3728      	adds	r7, #40	; 0x28
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40011000 	.word	0x40011000
 8000c5c:	40023800 	.word	0x40023800
 8000c60:	40020400 	.word	0x40020400

08000c64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c68:	bf00      	nop
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr

08000c72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c72:	b480      	push	{r7}
 8000c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c76:	e7fe      	b.n	8000c76 <HardFault_Handler+0x4>

08000c78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c7c:	e7fe      	b.n	8000c7c <MemManage_Handler+0x4>

08000c7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c82:	e7fe      	b.n	8000c82 <BusFault_Handler+0x4>

08000c84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c88:	e7fe      	b.n	8000c88 <UsageFault_Handler+0x4>

08000c8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr

08000c98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c9c:	bf00      	nop
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr

08000ca6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000caa:	bf00      	nop
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr

08000cb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cb8:	f000 f8c0 	bl	8000e3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cbc:	bf00      	nop
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000cc8:	4b11      	ldr	r3, [pc, #68]	; (8000d10 <_sbrk+0x50>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d102      	bne.n	8000cd6 <_sbrk+0x16>
		heap_end = &end;
 8000cd0:	4b0f      	ldr	r3, [pc, #60]	; (8000d10 <_sbrk+0x50>)
 8000cd2:	4a10      	ldr	r2, [pc, #64]	; (8000d14 <_sbrk+0x54>)
 8000cd4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000cd6:	4b0e      	ldr	r3, [pc, #56]	; (8000d10 <_sbrk+0x50>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000cdc:	4b0c      	ldr	r3, [pc, #48]	; (8000d10 <_sbrk+0x50>)
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	466a      	mov	r2, sp
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d907      	bls.n	8000cfa <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000cea:	f002 f8ff 	bl	8002eec <__errno>
 8000cee:	4602      	mov	r2, r0
 8000cf0:	230c      	movs	r3, #12
 8000cf2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000cf4:	f04f 33ff 	mov.w	r3, #4294967295
 8000cf8:	e006      	b.n	8000d08 <_sbrk+0x48>
	}

	heap_end += incr;
 8000cfa:	4b05      	ldr	r3, [pc, #20]	; (8000d10 <_sbrk+0x50>)
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	4413      	add	r3, r2
 8000d02:	4a03      	ldr	r2, [pc, #12]	; (8000d10 <_sbrk+0x50>)
 8000d04:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000d06:	68fb      	ldr	r3, [r7, #12]
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	3710      	adds	r7, #16
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	200000a0 	.word	0x200000a0
 8000d14:	20000e30 	.word	0x20000e30

08000d18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d1c:	4b08      	ldr	r3, [pc, #32]	; (8000d40 <SystemInit+0x28>)
 8000d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d22:	4a07      	ldr	r2, [pc, #28]	; (8000d40 <SystemInit+0x28>)
 8000d24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d2c:	4b04      	ldr	r3, [pc, #16]	; (8000d40 <SystemInit+0x28>)
 8000d2e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d32:	609a      	str	r2, [r3, #8]
#endif
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	e000ed00 	.word	0xe000ed00

08000d44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d7c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000d48:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000d4a:	e003      	b.n	8000d54 <LoopCopyDataInit>

08000d4c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000d4c:	4b0c      	ldr	r3, [pc, #48]	; (8000d80 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000d4e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000d50:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000d52:	3104      	adds	r1, #4

08000d54 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000d54:	480b      	ldr	r0, [pc, #44]	; (8000d84 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000d56:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000d58:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000d5a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000d5c:	d3f6      	bcc.n	8000d4c <CopyDataInit>
  ldr  r2, =_sbss
 8000d5e:	4a0b      	ldr	r2, [pc, #44]	; (8000d8c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000d60:	e002      	b.n	8000d68 <LoopFillZerobss>

08000d62 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000d62:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000d64:	f842 3b04 	str.w	r3, [r2], #4

08000d68 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000d68:	4b09      	ldr	r3, [pc, #36]	; (8000d90 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000d6a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000d6c:	d3f9      	bcc.n	8000d62 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d6e:	f7ff ffd3 	bl	8000d18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d72:	f002 f8c1 	bl	8002ef8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d76:	f7ff fc03 	bl	8000580 <main>
  bx  lr    
 8000d7a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d7c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000d80:	08003824 	.word	0x08003824
  ldr  r0, =_sdata
 8000d84:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000d88:	20000084 	.word	0x20000084
  ldr  r2, =_sbss
 8000d8c:	20000084 	.word	0x20000084
  ldr  r3, = _ebss
 8000d90:	20000e30 	.word	0x20000e30

08000d94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d94:	e7fe      	b.n	8000d94 <ADC_IRQHandler>
	...

08000d98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d9c:	4b0e      	ldr	r3, [pc, #56]	; (8000dd8 <HAL_Init+0x40>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a0d      	ldr	r2, [pc, #52]	; (8000dd8 <HAL_Init+0x40>)
 8000da2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000da6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000da8:	4b0b      	ldr	r3, [pc, #44]	; (8000dd8 <HAL_Init+0x40>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a0a      	ldr	r2, [pc, #40]	; (8000dd8 <HAL_Init+0x40>)
 8000dae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000db2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000db4:	4b08      	ldr	r3, [pc, #32]	; (8000dd8 <HAL_Init+0x40>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a07      	ldr	r2, [pc, #28]	; (8000dd8 <HAL_Init+0x40>)
 8000dba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dc0:	2003      	movs	r0, #3
 8000dc2:	f000 f92f 	bl	8001024 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dc6:	2000      	movs	r0, #0
 8000dc8:	f000 f808 	bl	8000ddc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dcc:	f7ff fe92 	bl	8000af4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dd0:	2300      	movs	r3, #0
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40023c00 	.word	0x40023c00

08000ddc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000de4:	4b12      	ldr	r3, [pc, #72]	; (8000e30 <HAL_InitTick+0x54>)
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	4b12      	ldr	r3, [pc, #72]	; (8000e34 <HAL_InitTick+0x58>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	4619      	mov	r1, r3
 8000dee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000df2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f000 f939 	bl	8001072 <HAL_SYSTICK_Config>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e06:	2301      	movs	r3, #1
 8000e08:	e00e      	b.n	8000e28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2b0f      	cmp	r3, #15
 8000e0e:	d80a      	bhi.n	8000e26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e10:	2200      	movs	r2, #0
 8000e12:	6879      	ldr	r1, [r7, #4]
 8000e14:	f04f 30ff 	mov.w	r0, #4294967295
 8000e18:	f000 f90f 	bl	800103a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e1c:	4a06      	ldr	r2, [pc, #24]	; (8000e38 <HAL_InitTick+0x5c>)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e22:	2300      	movs	r3, #0
 8000e24:	e000      	b.n	8000e28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e26:	2301      	movs	r3, #1
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	20000000 	.word	0x20000000
 8000e34:	20000008 	.word	0x20000008
 8000e38:	20000004 	.word	0x20000004

08000e3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e40:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <HAL_IncTick+0x20>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	461a      	mov	r2, r3
 8000e46:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <HAL_IncTick+0x24>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4413      	add	r3, r2
 8000e4c:	4a04      	ldr	r2, [pc, #16]	; (8000e60 <HAL_IncTick+0x24>)
 8000e4e:	6013      	str	r3, [r2, #0]
}
 8000e50:	bf00      	nop
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	20000008 	.word	0x20000008
 8000e60:	200009c0 	.word	0x200009c0

08000e64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  return uwTick;
 8000e68:	4b03      	ldr	r3, [pc, #12]	; (8000e78 <HAL_GetTick+0x14>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	200009c0 	.word	0x200009c0

08000e7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e84:	f7ff ffee 	bl	8000e64 <HAL_GetTick>
 8000e88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e94:	d005      	beq.n	8000ea2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e96:	4b09      	ldr	r3, [pc, #36]	; (8000ebc <HAL_Delay+0x40>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	4413      	add	r3, r2
 8000ea0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ea2:	bf00      	nop
 8000ea4:	f7ff ffde 	bl	8000e64 <HAL_GetTick>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	68bb      	ldr	r3, [r7, #8]
 8000eac:	1ad3      	subs	r3, r2, r3
 8000eae:	68fa      	ldr	r2, [r7, #12]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	d8f7      	bhi.n	8000ea4 <HAL_Delay+0x28>
  {
  }
}
 8000eb4:	bf00      	nop
 8000eb6:	3710      	adds	r7, #16
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	20000008 	.word	0x20000008

08000ec0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b085      	sub	sp, #20
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	f003 0307 	and.w	r3, r3, #7
 8000ece:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ed0:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ed6:	68ba      	ldr	r2, [r7, #8]
 8000ed8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000edc:	4013      	ands	r3, r2
 8000ede:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ee8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000eec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ef0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ef2:	4a04      	ldr	r2, [pc, #16]	; (8000f04 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	60d3      	str	r3, [r2, #12]
}
 8000ef8:	bf00      	nop
 8000efa:	3714      	adds	r7, #20
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr
 8000f04:	e000ed00 	.word	0xe000ed00

08000f08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f0c:	4b04      	ldr	r3, [pc, #16]	; (8000f20 <__NVIC_GetPriorityGrouping+0x18>)
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	0a1b      	lsrs	r3, r3, #8
 8000f12:	f003 0307 	and.w	r3, r3, #7
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	6039      	str	r1, [r7, #0]
 8000f2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	db0a      	blt.n	8000f4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	b2da      	uxtb	r2, r3
 8000f3c:	490c      	ldr	r1, [pc, #48]	; (8000f70 <__NVIC_SetPriority+0x4c>)
 8000f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f42:	0112      	lsls	r2, r2, #4
 8000f44:	b2d2      	uxtb	r2, r2
 8000f46:	440b      	add	r3, r1
 8000f48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f4c:	e00a      	b.n	8000f64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	b2da      	uxtb	r2, r3
 8000f52:	4908      	ldr	r1, [pc, #32]	; (8000f74 <__NVIC_SetPriority+0x50>)
 8000f54:	79fb      	ldrb	r3, [r7, #7]
 8000f56:	f003 030f 	and.w	r3, r3, #15
 8000f5a:	3b04      	subs	r3, #4
 8000f5c:	0112      	lsls	r2, r2, #4
 8000f5e:	b2d2      	uxtb	r2, r2
 8000f60:	440b      	add	r3, r1
 8000f62:	761a      	strb	r2, [r3, #24]
}
 8000f64:	bf00      	nop
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	e000e100 	.word	0xe000e100
 8000f74:	e000ed00 	.word	0xe000ed00

08000f78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b089      	sub	sp, #36	; 0x24
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	60b9      	str	r1, [r7, #8]
 8000f82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	f003 0307 	and.w	r3, r3, #7
 8000f8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	f1c3 0307 	rsb	r3, r3, #7
 8000f92:	2b04      	cmp	r3, #4
 8000f94:	bf28      	it	cs
 8000f96:	2304      	movcs	r3, #4
 8000f98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	3304      	adds	r3, #4
 8000f9e:	2b06      	cmp	r3, #6
 8000fa0:	d902      	bls.n	8000fa8 <NVIC_EncodePriority+0x30>
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	3b03      	subs	r3, #3
 8000fa6:	e000      	b.n	8000faa <NVIC_EncodePriority+0x32>
 8000fa8:	2300      	movs	r3, #0
 8000faa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fac:	f04f 32ff 	mov.w	r2, #4294967295
 8000fb0:	69bb      	ldr	r3, [r7, #24]
 8000fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb6:	43da      	mvns	r2, r3
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	401a      	ands	r2, r3
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fc0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fca:	43d9      	mvns	r1, r3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd0:	4313      	orrs	r3, r2
         );
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3724      	adds	r7, #36	; 0x24
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
	...

08000fe0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	3b01      	subs	r3, #1
 8000fec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ff0:	d301      	bcc.n	8000ff6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e00f      	b.n	8001016 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ff6:	4a0a      	ldr	r2, [pc, #40]	; (8001020 <SysTick_Config+0x40>)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	3b01      	subs	r3, #1
 8000ffc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ffe:	210f      	movs	r1, #15
 8001000:	f04f 30ff 	mov.w	r0, #4294967295
 8001004:	f7ff ff8e 	bl	8000f24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001008:	4b05      	ldr	r3, [pc, #20]	; (8001020 <SysTick_Config+0x40>)
 800100a:	2200      	movs	r2, #0
 800100c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800100e:	4b04      	ldr	r3, [pc, #16]	; (8001020 <SysTick_Config+0x40>)
 8001010:	2207      	movs	r2, #7
 8001012:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001014:	2300      	movs	r3, #0
}
 8001016:	4618      	mov	r0, r3
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	e000e010 	.word	0xe000e010

08001024 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f7ff ff47 	bl	8000ec0 <__NVIC_SetPriorityGrouping>
}
 8001032:	bf00      	nop
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800103a:	b580      	push	{r7, lr}
 800103c:	b086      	sub	sp, #24
 800103e:	af00      	add	r7, sp, #0
 8001040:	4603      	mov	r3, r0
 8001042:	60b9      	str	r1, [r7, #8]
 8001044:	607a      	str	r2, [r7, #4]
 8001046:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001048:	2300      	movs	r3, #0
 800104a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800104c:	f7ff ff5c 	bl	8000f08 <__NVIC_GetPriorityGrouping>
 8001050:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001052:	687a      	ldr	r2, [r7, #4]
 8001054:	68b9      	ldr	r1, [r7, #8]
 8001056:	6978      	ldr	r0, [r7, #20]
 8001058:	f7ff ff8e 	bl	8000f78 <NVIC_EncodePriority>
 800105c:	4602      	mov	r2, r0
 800105e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001062:	4611      	mov	r1, r2
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff ff5d 	bl	8000f24 <__NVIC_SetPriority>
}
 800106a:	bf00      	nop
 800106c:	3718      	adds	r7, #24
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	b082      	sub	sp, #8
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f7ff ffb0 	bl	8000fe0 <SysTick_Config>
 8001080:	4603      	mov	r3, r0
}
 8001082:	4618      	mov	r0, r3
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
	...

0800108c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800108c:	b480      	push	{r7}
 800108e:	b089      	sub	sp, #36	; 0x24
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001096:	2300      	movs	r3, #0
 8001098:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800109a:	2300      	movs	r3, #0
 800109c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800109e:	2300      	movs	r3, #0
 80010a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010a2:	2300      	movs	r3, #0
 80010a4:	61fb      	str	r3, [r7, #28]
 80010a6:	e159      	b.n	800135c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010a8:	2201      	movs	r2, #1
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	697a      	ldr	r2, [r7, #20]
 80010b8:	4013      	ands	r3, r2
 80010ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010bc:	693a      	ldr	r2, [r7, #16]
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	f040 8148 	bne.w	8001356 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d00b      	beq.n	80010e6 <HAL_GPIO_Init+0x5a>
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	2b02      	cmp	r3, #2
 80010d4:	d007      	beq.n	80010e6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010da:	2b11      	cmp	r3, #17
 80010dc:	d003      	beq.n	80010e6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	2b12      	cmp	r3, #18
 80010e4:	d130      	bne.n	8001148 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	689b      	ldr	r3, [r3, #8]
 80010ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	2203      	movs	r2, #3
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	43db      	mvns	r3, r3
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	4013      	ands	r3, r2
 80010fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	68da      	ldr	r2, [r3, #12]
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	fa02 f303 	lsl.w	r3, r2, r3
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	4313      	orrs	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800111c:	2201      	movs	r2, #1
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	43db      	mvns	r3, r3
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	4013      	ands	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	091b      	lsrs	r3, r3, #4
 8001132:	f003 0201 	and.w	r2, r3, #1
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	4313      	orrs	r3, r2
 8001140:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	2203      	movs	r2, #3
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	43db      	mvns	r3, r3
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	4013      	ands	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	689a      	ldr	r2, [r3, #8]
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	4313      	orrs	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	2b02      	cmp	r3, #2
 800117e:	d003      	beq.n	8001188 <HAL_GPIO_Init+0xfc>
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	2b12      	cmp	r3, #18
 8001186:	d123      	bne.n	80011d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	08da      	lsrs	r2, r3, #3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	3208      	adds	r2, #8
 8001190:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001194:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	f003 0307 	and.w	r3, r3, #7
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	220f      	movs	r2, #15
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	43db      	mvns	r3, r3
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	4013      	ands	r3, r2
 80011aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	691a      	ldr	r2, [r3, #16]
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	f003 0307 	and.w	r3, r3, #7
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	4313      	orrs	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	08da      	lsrs	r2, r3, #3
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	3208      	adds	r2, #8
 80011ca:	69b9      	ldr	r1, [r7, #24]
 80011cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	2203      	movs	r2, #3
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	43db      	mvns	r3, r3
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	4013      	ands	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f003 0203 	and.w	r2, r3, #3
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800120c:	2b00      	cmp	r3, #0
 800120e:	f000 80a2 	beq.w	8001356 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	60fb      	str	r3, [r7, #12]
 8001216:	4b56      	ldr	r3, [pc, #344]	; (8001370 <HAL_GPIO_Init+0x2e4>)
 8001218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800121a:	4a55      	ldr	r2, [pc, #340]	; (8001370 <HAL_GPIO_Init+0x2e4>)
 800121c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001220:	6453      	str	r3, [r2, #68]	; 0x44
 8001222:	4b53      	ldr	r3, [pc, #332]	; (8001370 <HAL_GPIO_Init+0x2e4>)
 8001224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001226:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800122e:	4a51      	ldr	r2, [pc, #324]	; (8001374 <HAL_GPIO_Init+0x2e8>)
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	089b      	lsrs	r3, r3, #2
 8001234:	3302      	adds	r3, #2
 8001236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800123a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	f003 0303 	and.w	r3, r3, #3
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	220f      	movs	r2, #15
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	43db      	mvns	r3, r3
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	4013      	ands	r3, r2
 8001250:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a48      	ldr	r2, [pc, #288]	; (8001378 <HAL_GPIO_Init+0x2ec>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d019      	beq.n	800128e <HAL_GPIO_Init+0x202>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a47      	ldr	r2, [pc, #284]	; (800137c <HAL_GPIO_Init+0x2f0>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d013      	beq.n	800128a <HAL_GPIO_Init+0x1fe>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a46      	ldr	r2, [pc, #280]	; (8001380 <HAL_GPIO_Init+0x2f4>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d00d      	beq.n	8001286 <HAL_GPIO_Init+0x1fa>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a45      	ldr	r2, [pc, #276]	; (8001384 <HAL_GPIO_Init+0x2f8>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d007      	beq.n	8001282 <HAL_GPIO_Init+0x1f6>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a44      	ldr	r2, [pc, #272]	; (8001388 <HAL_GPIO_Init+0x2fc>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d101      	bne.n	800127e <HAL_GPIO_Init+0x1f2>
 800127a:	2304      	movs	r3, #4
 800127c:	e008      	b.n	8001290 <HAL_GPIO_Init+0x204>
 800127e:	2307      	movs	r3, #7
 8001280:	e006      	b.n	8001290 <HAL_GPIO_Init+0x204>
 8001282:	2303      	movs	r3, #3
 8001284:	e004      	b.n	8001290 <HAL_GPIO_Init+0x204>
 8001286:	2302      	movs	r3, #2
 8001288:	e002      	b.n	8001290 <HAL_GPIO_Init+0x204>
 800128a:	2301      	movs	r3, #1
 800128c:	e000      	b.n	8001290 <HAL_GPIO_Init+0x204>
 800128e:	2300      	movs	r3, #0
 8001290:	69fa      	ldr	r2, [r7, #28]
 8001292:	f002 0203 	and.w	r2, r2, #3
 8001296:	0092      	lsls	r2, r2, #2
 8001298:	4093      	lsls	r3, r2
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	4313      	orrs	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012a0:	4934      	ldr	r1, [pc, #208]	; (8001374 <HAL_GPIO_Init+0x2e8>)
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	089b      	lsrs	r3, r3, #2
 80012a6:	3302      	adds	r3, #2
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012ae:	4b37      	ldr	r3, [pc, #220]	; (800138c <HAL_GPIO_Init+0x300>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	43db      	mvns	r3, r3
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	4013      	ands	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d003      	beq.n	80012d2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012d2:	4a2e      	ldr	r2, [pc, #184]	; (800138c <HAL_GPIO_Init+0x300>)
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80012d8:	4b2c      	ldr	r3, [pc, #176]	; (800138c <HAL_GPIO_Init+0x300>)
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	43db      	mvns	r3, r3
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	4013      	ands	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d003      	beq.n	80012fc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012fc:	4a23      	ldr	r2, [pc, #140]	; (800138c <HAL_GPIO_Init+0x300>)
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001302:	4b22      	ldr	r3, [pc, #136]	; (800138c <HAL_GPIO_Init+0x300>)
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	43db      	mvns	r3, r3
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	4013      	ands	r3, r2
 8001310:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d003      	beq.n	8001326 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	4313      	orrs	r3, r2
 8001324:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001326:	4a19      	ldr	r2, [pc, #100]	; (800138c <HAL_GPIO_Init+0x300>)
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800132c:	4b17      	ldr	r3, [pc, #92]	; (800138c <HAL_GPIO_Init+0x300>)
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	43db      	mvns	r3, r3
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	4013      	ands	r3, r2
 800133a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001344:	2b00      	cmp	r3, #0
 8001346:	d003      	beq.n	8001350 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	4313      	orrs	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001350:	4a0e      	ldr	r2, [pc, #56]	; (800138c <HAL_GPIO_Init+0x300>)
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	3301      	adds	r3, #1
 800135a:	61fb      	str	r3, [r7, #28]
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	2b0f      	cmp	r3, #15
 8001360:	f67f aea2 	bls.w	80010a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001364:	bf00      	nop
 8001366:	3724      	adds	r7, #36	; 0x24
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr
 8001370:	40023800 	.word	0x40023800
 8001374:	40013800 	.word	0x40013800
 8001378:	40020000 	.word	0x40020000
 800137c:	40020400 	.word	0x40020400
 8001380:	40020800 	.word	0x40020800
 8001384:	40020c00 	.word	0x40020c00
 8001388:	40021000 	.word	0x40021000
 800138c:	40013c00 	.word	0x40013c00

08001390 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	460b      	mov	r3, r1
 800139a:	807b      	strh	r3, [r7, #2]
 800139c:	4613      	mov	r3, r2
 800139e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013a0:	787b      	ldrb	r3, [r7, #1]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d003      	beq.n	80013ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013a6:	887a      	ldrh	r2, [r7, #2]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013ac:	e003      	b.n	80013b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013ae:	887b      	ldrh	r3, [r7, #2]
 80013b0:	041a      	lsls	r2, r3, #16
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	619a      	str	r2, [r3, #24]
}
 80013b6:	bf00      	nop
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
	...

080013c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d101      	bne.n	80013d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e25b      	b.n	800188e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 0301 	and.w	r3, r3, #1
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d075      	beq.n	80014ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013e2:	4ba3      	ldr	r3, [pc, #652]	; (8001670 <HAL_RCC_OscConfig+0x2ac>)
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	f003 030c 	and.w	r3, r3, #12
 80013ea:	2b04      	cmp	r3, #4
 80013ec:	d00c      	beq.n	8001408 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013ee:	4ba0      	ldr	r3, [pc, #640]	; (8001670 <HAL_RCC_OscConfig+0x2ac>)
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013f6:	2b08      	cmp	r3, #8
 80013f8:	d112      	bne.n	8001420 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013fa:	4b9d      	ldr	r3, [pc, #628]	; (8001670 <HAL_RCC_OscConfig+0x2ac>)
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001402:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001406:	d10b      	bne.n	8001420 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001408:	4b99      	ldr	r3, [pc, #612]	; (8001670 <HAL_RCC_OscConfig+0x2ac>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001410:	2b00      	cmp	r3, #0
 8001412:	d05b      	beq.n	80014cc <HAL_RCC_OscConfig+0x108>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d157      	bne.n	80014cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	e236      	b.n	800188e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001428:	d106      	bne.n	8001438 <HAL_RCC_OscConfig+0x74>
 800142a:	4b91      	ldr	r3, [pc, #580]	; (8001670 <HAL_RCC_OscConfig+0x2ac>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a90      	ldr	r2, [pc, #576]	; (8001670 <HAL_RCC_OscConfig+0x2ac>)
 8001430:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001434:	6013      	str	r3, [r2, #0]
 8001436:	e01d      	b.n	8001474 <HAL_RCC_OscConfig+0xb0>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001440:	d10c      	bne.n	800145c <HAL_RCC_OscConfig+0x98>
 8001442:	4b8b      	ldr	r3, [pc, #556]	; (8001670 <HAL_RCC_OscConfig+0x2ac>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a8a      	ldr	r2, [pc, #552]	; (8001670 <HAL_RCC_OscConfig+0x2ac>)
 8001448:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800144c:	6013      	str	r3, [r2, #0]
 800144e:	4b88      	ldr	r3, [pc, #544]	; (8001670 <HAL_RCC_OscConfig+0x2ac>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a87      	ldr	r2, [pc, #540]	; (8001670 <HAL_RCC_OscConfig+0x2ac>)
 8001454:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001458:	6013      	str	r3, [r2, #0]
 800145a:	e00b      	b.n	8001474 <HAL_RCC_OscConfig+0xb0>
 800145c:	4b84      	ldr	r3, [pc, #528]	; (8001670 <HAL_RCC_OscConfig+0x2ac>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a83      	ldr	r2, [pc, #524]	; (8001670 <HAL_RCC_OscConfig+0x2ac>)
 8001462:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001466:	6013      	str	r3, [r2, #0]
 8001468:	4b81      	ldr	r3, [pc, #516]	; (8001670 <HAL_RCC_OscConfig+0x2ac>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a80      	ldr	r2, [pc, #512]	; (8001670 <HAL_RCC_OscConfig+0x2ac>)
 800146e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001472:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d013      	beq.n	80014a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800147c:	f7ff fcf2 	bl	8000e64 <HAL_GetTick>
 8001480:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001482:	e008      	b.n	8001496 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001484:	f7ff fcee 	bl	8000e64 <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	2b64      	cmp	r3, #100	; 0x64
 8001490:	d901      	bls.n	8001496 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e1fb      	b.n	800188e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001496:	4b76      	ldr	r3, [pc, #472]	; (8001670 <HAL_RCC_OscConfig+0x2ac>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d0f0      	beq.n	8001484 <HAL_RCC_OscConfig+0xc0>
 80014a2:	e014      	b.n	80014ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a4:	f7ff fcde 	bl	8000e64 <HAL_GetTick>
 80014a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014aa:	e008      	b.n	80014be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014ac:	f7ff fcda 	bl	8000e64 <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	2b64      	cmp	r3, #100	; 0x64
 80014b8:	d901      	bls.n	80014be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e1e7      	b.n	800188e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014be:	4b6c      	ldr	r3, [pc, #432]	; (8001670 <HAL_RCC_OscConfig+0x2ac>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d1f0      	bne.n	80014ac <HAL_RCC_OscConfig+0xe8>
 80014ca:	e000      	b.n	80014ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 0302 	and.w	r3, r3, #2
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d063      	beq.n	80015a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014da:	4b65      	ldr	r3, [pc, #404]	; (8001670 <HAL_RCC_OscConfig+0x2ac>)
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	f003 030c 	and.w	r3, r3, #12
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d00b      	beq.n	80014fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014e6:	4b62      	ldr	r3, [pc, #392]	; (8001670 <HAL_RCC_OscConfig+0x2ac>)
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014ee:	2b08      	cmp	r3, #8
 80014f0:	d11c      	bne.n	800152c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014f2:	4b5f      	ldr	r3, [pc, #380]	; (8001670 <HAL_RCC_OscConfig+0x2ac>)
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d116      	bne.n	800152c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014fe:	4b5c      	ldr	r3, [pc, #368]	; (8001670 <HAL_RCC_OscConfig+0x2ac>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0302 	and.w	r3, r3, #2
 8001506:	2b00      	cmp	r3, #0
 8001508:	d005      	beq.n	8001516 <HAL_RCC_OscConfig+0x152>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	68db      	ldr	r3, [r3, #12]
 800150e:	2b01      	cmp	r3, #1
 8001510:	d001      	beq.n	8001516 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e1bb      	b.n	800188e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001516:	4b56      	ldr	r3, [pc, #344]	; (8001670 <HAL_RCC_OscConfig+0x2ac>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	691b      	ldr	r3, [r3, #16]
 8001522:	00db      	lsls	r3, r3, #3
 8001524:	4952      	ldr	r1, [pc, #328]	; (8001670 <HAL_RCC_OscConfig+0x2ac>)
 8001526:	4313      	orrs	r3, r2
 8001528:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800152a:	e03a      	b.n	80015a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d020      	beq.n	8001576 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001534:	4b4f      	ldr	r3, [pc, #316]	; (8001674 <HAL_RCC_OscConfig+0x2b0>)
 8001536:	2201      	movs	r2, #1
 8001538:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800153a:	f7ff fc93 	bl	8000e64 <HAL_GetTick>
 800153e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001540:	e008      	b.n	8001554 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001542:	f7ff fc8f 	bl	8000e64 <HAL_GetTick>
 8001546:	4602      	mov	r2, r0
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	2b02      	cmp	r3, #2
 800154e:	d901      	bls.n	8001554 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001550:	2303      	movs	r3, #3
 8001552:	e19c      	b.n	800188e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001554:	4b46      	ldr	r3, [pc, #280]	; (8001670 <HAL_RCC_OscConfig+0x2ac>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 0302 	and.w	r3, r3, #2
 800155c:	2b00      	cmp	r3, #0
 800155e:	d0f0      	beq.n	8001542 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001560:	4b43      	ldr	r3, [pc, #268]	; (8001670 <HAL_RCC_OscConfig+0x2ac>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	691b      	ldr	r3, [r3, #16]
 800156c:	00db      	lsls	r3, r3, #3
 800156e:	4940      	ldr	r1, [pc, #256]	; (8001670 <HAL_RCC_OscConfig+0x2ac>)
 8001570:	4313      	orrs	r3, r2
 8001572:	600b      	str	r3, [r1, #0]
 8001574:	e015      	b.n	80015a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001576:	4b3f      	ldr	r3, [pc, #252]	; (8001674 <HAL_RCC_OscConfig+0x2b0>)
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800157c:	f7ff fc72 	bl	8000e64 <HAL_GetTick>
 8001580:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001582:	e008      	b.n	8001596 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001584:	f7ff fc6e 	bl	8000e64 <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	2b02      	cmp	r3, #2
 8001590:	d901      	bls.n	8001596 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001592:	2303      	movs	r3, #3
 8001594:	e17b      	b.n	800188e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001596:	4b36      	ldr	r3, [pc, #216]	; (8001670 <HAL_RCC_OscConfig+0x2ac>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d1f0      	bne.n	8001584 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0308 	and.w	r3, r3, #8
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d030      	beq.n	8001610 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	695b      	ldr	r3, [r3, #20]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d016      	beq.n	80015e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015b6:	4b30      	ldr	r3, [pc, #192]	; (8001678 <HAL_RCC_OscConfig+0x2b4>)
 80015b8:	2201      	movs	r2, #1
 80015ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015bc:	f7ff fc52 	bl	8000e64 <HAL_GetTick>
 80015c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015c2:	e008      	b.n	80015d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015c4:	f7ff fc4e 	bl	8000e64 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d901      	bls.n	80015d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e15b      	b.n	800188e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015d6:	4b26      	ldr	r3, [pc, #152]	; (8001670 <HAL_RCC_OscConfig+0x2ac>)
 80015d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d0f0      	beq.n	80015c4 <HAL_RCC_OscConfig+0x200>
 80015e2:	e015      	b.n	8001610 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015e4:	4b24      	ldr	r3, [pc, #144]	; (8001678 <HAL_RCC_OscConfig+0x2b4>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ea:	f7ff fc3b 	bl	8000e64 <HAL_GetTick>
 80015ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015f0:	e008      	b.n	8001604 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015f2:	f7ff fc37 	bl	8000e64 <HAL_GetTick>
 80015f6:	4602      	mov	r2, r0
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d901      	bls.n	8001604 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001600:	2303      	movs	r3, #3
 8001602:	e144      	b.n	800188e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001604:	4b1a      	ldr	r3, [pc, #104]	; (8001670 <HAL_RCC_OscConfig+0x2ac>)
 8001606:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001608:	f003 0302 	and.w	r3, r3, #2
 800160c:	2b00      	cmp	r3, #0
 800160e:	d1f0      	bne.n	80015f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0304 	and.w	r3, r3, #4
 8001618:	2b00      	cmp	r3, #0
 800161a:	f000 80a0 	beq.w	800175e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800161e:	2300      	movs	r3, #0
 8001620:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001622:	4b13      	ldr	r3, [pc, #76]	; (8001670 <HAL_RCC_OscConfig+0x2ac>)
 8001624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d10f      	bne.n	800164e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	60bb      	str	r3, [r7, #8]
 8001632:	4b0f      	ldr	r3, [pc, #60]	; (8001670 <HAL_RCC_OscConfig+0x2ac>)
 8001634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001636:	4a0e      	ldr	r2, [pc, #56]	; (8001670 <HAL_RCC_OscConfig+0x2ac>)
 8001638:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800163c:	6413      	str	r3, [r2, #64]	; 0x40
 800163e:	4b0c      	ldr	r3, [pc, #48]	; (8001670 <HAL_RCC_OscConfig+0x2ac>)
 8001640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001646:	60bb      	str	r3, [r7, #8]
 8001648:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800164a:	2301      	movs	r3, #1
 800164c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800164e:	4b0b      	ldr	r3, [pc, #44]	; (800167c <HAL_RCC_OscConfig+0x2b8>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001656:	2b00      	cmp	r3, #0
 8001658:	d121      	bne.n	800169e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800165a:	4b08      	ldr	r3, [pc, #32]	; (800167c <HAL_RCC_OscConfig+0x2b8>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a07      	ldr	r2, [pc, #28]	; (800167c <HAL_RCC_OscConfig+0x2b8>)
 8001660:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001664:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001666:	f7ff fbfd 	bl	8000e64 <HAL_GetTick>
 800166a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800166c:	e011      	b.n	8001692 <HAL_RCC_OscConfig+0x2ce>
 800166e:	bf00      	nop
 8001670:	40023800 	.word	0x40023800
 8001674:	42470000 	.word	0x42470000
 8001678:	42470e80 	.word	0x42470e80
 800167c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001680:	f7ff fbf0 	bl	8000e64 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b02      	cmp	r3, #2
 800168c:	d901      	bls.n	8001692 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e0fd      	b.n	800188e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001692:	4b81      	ldr	r3, [pc, #516]	; (8001898 <HAL_RCC_OscConfig+0x4d4>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800169a:	2b00      	cmp	r3, #0
 800169c:	d0f0      	beq.n	8001680 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d106      	bne.n	80016b4 <HAL_RCC_OscConfig+0x2f0>
 80016a6:	4b7d      	ldr	r3, [pc, #500]	; (800189c <HAL_RCC_OscConfig+0x4d8>)
 80016a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016aa:	4a7c      	ldr	r2, [pc, #496]	; (800189c <HAL_RCC_OscConfig+0x4d8>)
 80016ac:	f043 0301 	orr.w	r3, r3, #1
 80016b0:	6713      	str	r3, [r2, #112]	; 0x70
 80016b2:	e01c      	b.n	80016ee <HAL_RCC_OscConfig+0x32a>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	2b05      	cmp	r3, #5
 80016ba:	d10c      	bne.n	80016d6 <HAL_RCC_OscConfig+0x312>
 80016bc:	4b77      	ldr	r3, [pc, #476]	; (800189c <HAL_RCC_OscConfig+0x4d8>)
 80016be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016c0:	4a76      	ldr	r2, [pc, #472]	; (800189c <HAL_RCC_OscConfig+0x4d8>)
 80016c2:	f043 0304 	orr.w	r3, r3, #4
 80016c6:	6713      	str	r3, [r2, #112]	; 0x70
 80016c8:	4b74      	ldr	r3, [pc, #464]	; (800189c <HAL_RCC_OscConfig+0x4d8>)
 80016ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016cc:	4a73      	ldr	r2, [pc, #460]	; (800189c <HAL_RCC_OscConfig+0x4d8>)
 80016ce:	f043 0301 	orr.w	r3, r3, #1
 80016d2:	6713      	str	r3, [r2, #112]	; 0x70
 80016d4:	e00b      	b.n	80016ee <HAL_RCC_OscConfig+0x32a>
 80016d6:	4b71      	ldr	r3, [pc, #452]	; (800189c <HAL_RCC_OscConfig+0x4d8>)
 80016d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016da:	4a70      	ldr	r2, [pc, #448]	; (800189c <HAL_RCC_OscConfig+0x4d8>)
 80016dc:	f023 0301 	bic.w	r3, r3, #1
 80016e0:	6713      	str	r3, [r2, #112]	; 0x70
 80016e2:	4b6e      	ldr	r3, [pc, #440]	; (800189c <HAL_RCC_OscConfig+0x4d8>)
 80016e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016e6:	4a6d      	ldr	r2, [pc, #436]	; (800189c <HAL_RCC_OscConfig+0x4d8>)
 80016e8:	f023 0304 	bic.w	r3, r3, #4
 80016ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d015      	beq.n	8001722 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016f6:	f7ff fbb5 	bl	8000e64 <HAL_GetTick>
 80016fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016fc:	e00a      	b.n	8001714 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016fe:	f7ff fbb1 	bl	8000e64 <HAL_GetTick>
 8001702:	4602      	mov	r2, r0
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	f241 3288 	movw	r2, #5000	; 0x1388
 800170c:	4293      	cmp	r3, r2
 800170e:	d901      	bls.n	8001714 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001710:	2303      	movs	r3, #3
 8001712:	e0bc      	b.n	800188e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001714:	4b61      	ldr	r3, [pc, #388]	; (800189c <HAL_RCC_OscConfig+0x4d8>)
 8001716:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001718:	f003 0302 	and.w	r3, r3, #2
 800171c:	2b00      	cmp	r3, #0
 800171e:	d0ee      	beq.n	80016fe <HAL_RCC_OscConfig+0x33a>
 8001720:	e014      	b.n	800174c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001722:	f7ff fb9f 	bl	8000e64 <HAL_GetTick>
 8001726:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001728:	e00a      	b.n	8001740 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800172a:	f7ff fb9b 	bl	8000e64 <HAL_GetTick>
 800172e:	4602      	mov	r2, r0
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	f241 3288 	movw	r2, #5000	; 0x1388
 8001738:	4293      	cmp	r3, r2
 800173a:	d901      	bls.n	8001740 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800173c:	2303      	movs	r3, #3
 800173e:	e0a6      	b.n	800188e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001740:	4b56      	ldr	r3, [pc, #344]	; (800189c <HAL_RCC_OscConfig+0x4d8>)
 8001742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001744:	f003 0302 	and.w	r3, r3, #2
 8001748:	2b00      	cmp	r3, #0
 800174a:	d1ee      	bne.n	800172a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800174c:	7dfb      	ldrb	r3, [r7, #23]
 800174e:	2b01      	cmp	r3, #1
 8001750:	d105      	bne.n	800175e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001752:	4b52      	ldr	r3, [pc, #328]	; (800189c <HAL_RCC_OscConfig+0x4d8>)
 8001754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001756:	4a51      	ldr	r2, [pc, #324]	; (800189c <HAL_RCC_OscConfig+0x4d8>)
 8001758:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800175c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	699b      	ldr	r3, [r3, #24]
 8001762:	2b00      	cmp	r3, #0
 8001764:	f000 8092 	beq.w	800188c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001768:	4b4c      	ldr	r3, [pc, #304]	; (800189c <HAL_RCC_OscConfig+0x4d8>)
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	f003 030c 	and.w	r3, r3, #12
 8001770:	2b08      	cmp	r3, #8
 8001772:	d05c      	beq.n	800182e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	699b      	ldr	r3, [r3, #24]
 8001778:	2b02      	cmp	r3, #2
 800177a:	d141      	bne.n	8001800 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800177c:	4b48      	ldr	r3, [pc, #288]	; (80018a0 <HAL_RCC_OscConfig+0x4dc>)
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001782:	f7ff fb6f 	bl	8000e64 <HAL_GetTick>
 8001786:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001788:	e008      	b.n	800179c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800178a:	f7ff fb6b 	bl	8000e64 <HAL_GetTick>
 800178e:	4602      	mov	r2, r0
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	2b02      	cmp	r3, #2
 8001796:	d901      	bls.n	800179c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001798:	2303      	movs	r3, #3
 800179a:	e078      	b.n	800188e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800179c:	4b3f      	ldr	r3, [pc, #252]	; (800189c <HAL_RCC_OscConfig+0x4d8>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d1f0      	bne.n	800178a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	69da      	ldr	r2, [r3, #28]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6a1b      	ldr	r3, [r3, #32]
 80017b0:	431a      	orrs	r2, r3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b6:	019b      	lsls	r3, r3, #6
 80017b8:	431a      	orrs	r2, r3
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017be:	085b      	lsrs	r3, r3, #1
 80017c0:	3b01      	subs	r3, #1
 80017c2:	041b      	lsls	r3, r3, #16
 80017c4:	431a      	orrs	r2, r3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ca:	061b      	lsls	r3, r3, #24
 80017cc:	4933      	ldr	r1, [pc, #204]	; (800189c <HAL_RCC_OscConfig+0x4d8>)
 80017ce:	4313      	orrs	r3, r2
 80017d0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017d2:	4b33      	ldr	r3, [pc, #204]	; (80018a0 <HAL_RCC_OscConfig+0x4dc>)
 80017d4:	2201      	movs	r2, #1
 80017d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d8:	f7ff fb44 	bl	8000e64 <HAL_GetTick>
 80017dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017de:	e008      	b.n	80017f2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017e0:	f7ff fb40 	bl	8000e64 <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e04d      	b.n	800188e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017f2:	4b2a      	ldr	r3, [pc, #168]	; (800189c <HAL_RCC_OscConfig+0x4d8>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d0f0      	beq.n	80017e0 <HAL_RCC_OscConfig+0x41c>
 80017fe:	e045      	b.n	800188c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001800:	4b27      	ldr	r3, [pc, #156]	; (80018a0 <HAL_RCC_OscConfig+0x4dc>)
 8001802:	2200      	movs	r2, #0
 8001804:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001806:	f7ff fb2d 	bl	8000e64 <HAL_GetTick>
 800180a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800180c:	e008      	b.n	8001820 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800180e:	f7ff fb29 	bl	8000e64 <HAL_GetTick>
 8001812:	4602      	mov	r2, r0
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	2b02      	cmp	r3, #2
 800181a:	d901      	bls.n	8001820 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800181c:	2303      	movs	r3, #3
 800181e:	e036      	b.n	800188e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001820:	4b1e      	ldr	r3, [pc, #120]	; (800189c <HAL_RCC_OscConfig+0x4d8>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001828:	2b00      	cmp	r3, #0
 800182a:	d1f0      	bne.n	800180e <HAL_RCC_OscConfig+0x44a>
 800182c:	e02e      	b.n	800188c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	699b      	ldr	r3, [r3, #24]
 8001832:	2b01      	cmp	r3, #1
 8001834:	d101      	bne.n	800183a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e029      	b.n	800188e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800183a:	4b18      	ldr	r3, [pc, #96]	; (800189c <HAL_RCC_OscConfig+0x4d8>)
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	69db      	ldr	r3, [r3, #28]
 800184a:	429a      	cmp	r2, r3
 800184c:	d11c      	bne.n	8001888 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001858:	429a      	cmp	r2, r3
 800185a:	d115      	bne.n	8001888 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800185c:	68fa      	ldr	r2, [r7, #12]
 800185e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001862:	4013      	ands	r3, r2
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001868:	4293      	cmp	r3, r2
 800186a:	d10d      	bne.n	8001888 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001876:	429a      	cmp	r2, r3
 8001878:	d106      	bne.n	8001888 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001884:	429a      	cmp	r2, r3
 8001886:	d001      	beq.n	800188c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e000      	b.n	800188e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800188c:	2300      	movs	r3, #0
}
 800188e:	4618      	mov	r0, r3
 8001890:	3718      	adds	r7, #24
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	40007000 	.word	0x40007000
 800189c:	40023800 	.word	0x40023800
 80018a0:	42470060 	.word	0x42470060

080018a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d101      	bne.n	80018b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e0cc      	b.n	8001a52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018b8:	4b68      	ldr	r3, [pc, #416]	; (8001a5c <HAL_RCC_ClockConfig+0x1b8>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 030f 	and.w	r3, r3, #15
 80018c0:	683a      	ldr	r2, [r7, #0]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d90c      	bls.n	80018e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018c6:	4b65      	ldr	r3, [pc, #404]	; (8001a5c <HAL_RCC_ClockConfig+0x1b8>)
 80018c8:	683a      	ldr	r2, [r7, #0]
 80018ca:	b2d2      	uxtb	r2, r2
 80018cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ce:	4b63      	ldr	r3, [pc, #396]	; (8001a5c <HAL_RCC_ClockConfig+0x1b8>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 030f 	and.w	r3, r3, #15
 80018d6:	683a      	ldr	r2, [r7, #0]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d001      	beq.n	80018e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e0b8      	b.n	8001a52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0302 	and.w	r3, r3, #2
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d020      	beq.n	800192e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0304 	and.w	r3, r3, #4
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d005      	beq.n	8001904 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018f8:	4b59      	ldr	r3, [pc, #356]	; (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	4a58      	ldr	r2, [pc, #352]	; (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 80018fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001902:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0308 	and.w	r3, r3, #8
 800190c:	2b00      	cmp	r3, #0
 800190e:	d005      	beq.n	800191c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001910:	4b53      	ldr	r3, [pc, #332]	; (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	4a52      	ldr	r2, [pc, #328]	; (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 8001916:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800191a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800191c:	4b50      	ldr	r3, [pc, #320]	; (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	494d      	ldr	r1, [pc, #308]	; (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 800192a:	4313      	orrs	r3, r2
 800192c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	2b00      	cmp	r3, #0
 8001938:	d044      	beq.n	80019c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	2b01      	cmp	r3, #1
 8001940:	d107      	bne.n	8001952 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001942:	4b47      	ldr	r3, [pc, #284]	; (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d119      	bne.n	8001982 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e07f      	b.n	8001a52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	2b02      	cmp	r3, #2
 8001958:	d003      	beq.n	8001962 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800195e:	2b03      	cmp	r3, #3
 8001960:	d107      	bne.n	8001972 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001962:	4b3f      	ldr	r3, [pc, #252]	; (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d109      	bne.n	8001982 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e06f      	b.n	8001a52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001972:	4b3b      	ldr	r3, [pc, #236]	; (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0302 	and.w	r3, r3, #2
 800197a:	2b00      	cmp	r3, #0
 800197c:	d101      	bne.n	8001982 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e067      	b.n	8001a52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001982:	4b37      	ldr	r3, [pc, #220]	; (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	f023 0203 	bic.w	r2, r3, #3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	4934      	ldr	r1, [pc, #208]	; (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 8001990:	4313      	orrs	r3, r2
 8001992:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001994:	f7ff fa66 	bl	8000e64 <HAL_GetTick>
 8001998:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800199a:	e00a      	b.n	80019b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800199c:	f7ff fa62 	bl	8000e64 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e04f      	b.n	8001a52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019b2:	4b2b      	ldr	r3, [pc, #172]	; (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f003 020c 	and.w	r2, r3, #12
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d1eb      	bne.n	800199c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019c4:	4b25      	ldr	r3, [pc, #148]	; (8001a5c <HAL_RCC_ClockConfig+0x1b8>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 030f 	and.w	r3, r3, #15
 80019cc:	683a      	ldr	r2, [r7, #0]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d20c      	bcs.n	80019ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019d2:	4b22      	ldr	r3, [pc, #136]	; (8001a5c <HAL_RCC_ClockConfig+0x1b8>)
 80019d4:	683a      	ldr	r2, [r7, #0]
 80019d6:	b2d2      	uxtb	r2, r2
 80019d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019da:	4b20      	ldr	r3, [pc, #128]	; (8001a5c <HAL_RCC_ClockConfig+0x1b8>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 030f 	and.w	r3, r3, #15
 80019e2:	683a      	ldr	r2, [r7, #0]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d001      	beq.n	80019ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e032      	b.n	8001a52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0304 	and.w	r3, r3, #4
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d008      	beq.n	8001a0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019f8:	4b19      	ldr	r3, [pc, #100]	; (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	4916      	ldr	r1, [pc, #88]	; (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a06:	4313      	orrs	r3, r2
 8001a08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0308 	and.w	r3, r3, #8
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d009      	beq.n	8001a2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a16:	4b12      	ldr	r3, [pc, #72]	; (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	691b      	ldr	r3, [r3, #16]
 8001a22:	00db      	lsls	r3, r3, #3
 8001a24:	490e      	ldr	r1, [pc, #56]	; (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a26:	4313      	orrs	r3, r2
 8001a28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a2a:	f000 f821 	bl	8001a70 <HAL_RCC_GetSysClockFreq>
 8001a2e:	4601      	mov	r1, r0
 8001a30:	4b0b      	ldr	r3, [pc, #44]	; (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	091b      	lsrs	r3, r3, #4
 8001a36:	f003 030f 	and.w	r3, r3, #15
 8001a3a:	4a0a      	ldr	r2, [pc, #40]	; (8001a64 <HAL_RCC_ClockConfig+0x1c0>)
 8001a3c:	5cd3      	ldrb	r3, [r2, r3]
 8001a3e:	fa21 f303 	lsr.w	r3, r1, r3
 8001a42:	4a09      	ldr	r2, [pc, #36]	; (8001a68 <HAL_RCC_ClockConfig+0x1c4>)
 8001a44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a46:	4b09      	ldr	r3, [pc, #36]	; (8001a6c <HAL_RCC_ClockConfig+0x1c8>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7ff f9c6 	bl	8000ddc <HAL_InitTick>

  return HAL_OK;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3710      	adds	r7, #16
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	40023c00 	.word	0x40023c00
 8001a60:	40023800 	.word	0x40023800
 8001a64:	080037c8 	.word	0x080037c8
 8001a68:	20000000 	.word	0x20000000
 8001a6c:	20000004 	.word	0x20000004

08001a70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a72:	b085      	sub	sp, #20
 8001a74:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a76:	2300      	movs	r3, #0
 8001a78:	607b      	str	r3, [r7, #4]
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	60fb      	str	r3, [r7, #12]
 8001a7e:	2300      	movs	r3, #0
 8001a80:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001a82:	2300      	movs	r3, #0
 8001a84:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a86:	4b50      	ldr	r3, [pc, #320]	; (8001bc8 <HAL_RCC_GetSysClockFreq+0x158>)
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	f003 030c 	and.w	r3, r3, #12
 8001a8e:	2b04      	cmp	r3, #4
 8001a90:	d007      	beq.n	8001aa2 <HAL_RCC_GetSysClockFreq+0x32>
 8001a92:	2b08      	cmp	r3, #8
 8001a94:	d008      	beq.n	8001aa8 <HAL_RCC_GetSysClockFreq+0x38>
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	f040 808d 	bne.w	8001bb6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a9c:	4b4b      	ldr	r3, [pc, #300]	; (8001bcc <HAL_RCC_GetSysClockFreq+0x15c>)
 8001a9e:	60bb      	str	r3, [r7, #8]
       break;
 8001aa0:	e08c      	b.n	8001bbc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001aa2:	4b4b      	ldr	r3, [pc, #300]	; (8001bd0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001aa4:	60bb      	str	r3, [r7, #8]
      break;
 8001aa6:	e089      	b.n	8001bbc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001aa8:	4b47      	ldr	r3, [pc, #284]	; (8001bc8 <HAL_RCC_GetSysClockFreq+0x158>)
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ab0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ab2:	4b45      	ldr	r3, [pc, #276]	; (8001bc8 <HAL_RCC_GetSysClockFreq+0x158>)
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d023      	beq.n	8001b06 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001abe:	4b42      	ldr	r3, [pc, #264]	; (8001bc8 <HAL_RCC_GetSysClockFreq+0x158>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	099b      	lsrs	r3, r3, #6
 8001ac4:	f04f 0400 	mov.w	r4, #0
 8001ac8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001acc:	f04f 0200 	mov.w	r2, #0
 8001ad0:	ea03 0501 	and.w	r5, r3, r1
 8001ad4:	ea04 0602 	and.w	r6, r4, r2
 8001ad8:	4a3d      	ldr	r2, [pc, #244]	; (8001bd0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001ada:	fb02 f106 	mul.w	r1, r2, r6
 8001ade:	2200      	movs	r2, #0
 8001ae0:	fb02 f205 	mul.w	r2, r2, r5
 8001ae4:	440a      	add	r2, r1
 8001ae6:	493a      	ldr	r1, [pc, #232]	; (8001bd0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001ae8:	fba5 0101 	umull	r0, r1, r5, r1
 8001aec:	1853      	adds	r3, r2, r1
 8001aee:	4619      	mov	r1, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f04f 0400 	mov.w	r4, #0
 8001af6:	461a      	mov	r2, r3
 8001af8:	4623      	mov	r3, r4
 8001afa:	f7fe fbc1 	bl	8000280 <__aeabi_uldivmod>
 8001afe:	4603      	mov	r3, r0
 8001b00:	460c      	mov	r4, r1
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	e049      	b.n	8001b9a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b06:	4b30      	ldr	r3, [pc, #192]	; (8001bc8 <HAL_RCC_GetSysClockFreq+0x158>)
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	099b      	lsrs	r3, r3, #6
 8001b0c:	f04f 0400 	mov.w	r4, #0
 8001b10:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001b14:	f04f 0200 	mov.w	r2, #0
 8001b18:	ea03 0501 	and.w	r5, r3, r1
 8001b1c:	ea04 0602 	and.w	r6, r4, r2
 8001b20:	4629      	mov	r1, r5
 8001b22:	4632      	mov	r2, r6
 8001b24:	f04f 0300 	mov.w	r3, #0
 8001b28:	f04f 0400 	mov.w	r4, #0
 8001b2c:	0154      	lsls	r4, r2, #5
 8001b2e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001b32:	014b      	lsls	r3, r1, #5
 8001b34:	4619      	mov	r1, r3
 8001b36:	4622      	mov	r2, r4
 8001b38:	1b49      	subs	r1, r1, r5
 8001b3a:	eb62 0206 	sbc.w	r2, r2, r6
 8001b3e:	f04f 0300 	mov.w	r3, #0
 8001b42:	f04f 0400 	mov.w	r4, #0
 8001b46:	0194      	lsls	r4, r2, #6
 8001b48:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001b4c:	018b      	lsls	r3, r1, #6
 8001b4e:	1a5b      	subs	r3, r3, r1
 8001b50:	eb64 0402 	sbc.w	r4, r4, r2
 8001b54:	f04f 0100 	mov.w	r1, #0
 8001b58:	f04f 0200 	mov.w	r2, #0
 8001b5c:	00e2      	lsls	r2, r4, #3
 8001b5e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001b62:	00d9      	lsls	r1, r3, #3
 8001b64:	460b      	mov	r3, r1
 8001b66:	4614      	mov	r4, r2
 8001b68:	195b      	adds	r3, r3, r5
 8001b6a:	eb44 0406 	adc.w	r4, r4, r6
 8001b6e:	f04f 0100 	mov.w	r1, #0
 8001b72:	f04f 0200 	mov.w	r2, #0
 8001b76:	02a2      	lsls	r2, r4, #10
 8001b78:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001b7c:	0299      	lsls	r1, r3, #10
 8001b7e:	460b      	mov	r3, r1
 8001b80:	4614      	mov	r4, r2
 8001b82:	4618      	mov	r0, r3
 8001b84:	4621      	mov	r1, r4
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	f04f 0400 	mov.w	r4, #0
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	4623      	mov	r3, r4
 8001b90:	f7fe fb76 	bl	8000280 <__aeabi_uldivmod>
 8001b94:	4603      	mov	r3, r0
 8001b96:	460c      	mov	r4, r1
 8001b98:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b9a:	4b0b      	ldr	r3, [pc, #44]	; (8001bc8 <HAL_RCC_GetSysClockFreq+0x158>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	0c1b      	lsrs	r3, r3, #16
 8001ba0:	f003 0303 	and.w	r3, r3, #3
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001baa:	68fa      	ldr	r2, [r7, #12]
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bb2:	60bb      	str	r3, [r7, #8]
      break;
 8001bb4:	e002      	b.n	8001bbc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001bb6:	4b05      	ldr	r3, [pc, #20]	; (8001bcc <HAL_RCC_GetSysClockFreq+0x15c>)
 8001bb8:	60bb      	str	r3, [r7, #8]
      break;
 8001bba:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bbc:	68bb      	ldr	r3, [r7, #8]
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3714      	adds	r7, #20
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	40023800 	.word	0x40023800
 8001bcc:	00f42400 	.word	0x00f42400
 8001bd0:	017d7840 	.word	0x017d7840

08001bd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bd8:	4b03      	ldr	r3, [pc, #12]	; (8001be8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001bda:	681b      	ldr	r3, [r3, #0]
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	20000000 	.word	0x20000000

08001bec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001bf0:	f7ff fff0 	bl	8001bd4 <HAL_RCC_GetHCLKFreq>
 8001bf4:	4601      	mov	r1, r0
 8001bf6:	4b05      	ldr	r3, [pc, #20]	; (8001c0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	0a9b      	lsrs	r3, r3, #10
 8001bfc:	f003 0307 	and.w	r3, r3, #7
 8001c00:	4a03      	ldr	r2, [pc, #12]	; (8001c10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c02:	5cd3      	ldrb	r3, [r2, r3]
 8001c04:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	40023800 	.word	0x40023800
 8001c10:	080037d8 	.word	0x080037d8

08001c14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c18:	f7ff ffdc 	bl	8001bd4 <HAL_RCC_GetHCLKFreq>
 8001c1c:	4601      	mov	r1, r0
 8001c1e:	4b05      	ldr	r3, [pc, #20]	; (8001c34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	0b5b      	lsrs	r3, r3, #13
 8001c24:	f003 0307 	and.w	r3, r3, #7
 8001c28:	4a03      	ldr	r2, [pc, #12]	; (8001c38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c2a:	5cd3      	ldrb	r3, [r2, r3]
 8001c2c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	40023800 	.word	0x40023800
 8001c38:	080037d8 	.word	0x080037d8

08001c3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d101      	bne.n	8001c4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e056      	b.n	8001cfc <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d106      	bne.n	8001c6e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f7fe ff6b 	bl	8000b44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2202      	movs	r2, #2
 8001c72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c84:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685a      	ldr	r2, [r3, #4]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	431a      	orrs	r2, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	431a      	orrs	r2, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	691b      	ldr	r3, [r3, #16]
 8001c9a:	431a      	orrs	r2, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	695b      	ldr	r3, [r3, #20]
 8001ca0:	431a      	orrs	r2, r3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	699b      	ldr	r3, [r3, #24]
 8001ca6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001caa:	431a      	orrs	r2, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	69db      	ldr	r3, [r3, #28]
 8001cb0:	431a      	orrs	r2, r3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6a1b      	ldr	r3, [r3, #32]
 8001cb6:	ea42 0103 	orr.w	r1, r2, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	430a      	orrs	r2, r1
 8001cc4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	699b      	ldr	r3, [r3, #24]
 8001cca:	0c1b      	lsrs	r3, r3, #16
 8001ccc:	f003 0104 	and.w	r1, r3, #4
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	430a      	orrs	r2, r1
 8001cda:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	69da      	ldr	r2, [r3, #28]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cea:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001cfa:	2300      	movs	r3, #0
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3708      	adds	r7, #8
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b088      	sub	sp, #32
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	603b      	str	r3, [r7, #0]
 8001d10:	4613      	mov	r3, r2
 8001d12:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001d14:	2300      	movs	r3, #0
 8001d16:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d101      	bne.n	8001d26 <HAL_SPI_Transmit+0x22>
 8001d22:	2302      	movs	r3, #2
 8001d24:	e11e      	b.n	8001f64 <HAL_SPI_Transmit+0x260>
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2201      	movs	r2, #1
 8001d2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001d2e:	f7ff f899 	bl	8000e64 <HAL_GetTick>
 8001d32:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001d34:	88fb      	ldrh	r3, [r7, #6]
 8001d36:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d002      	beq.n	8001d4a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001d44:	2302      	movs	r3, #2
 8001d46:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001d48:	e103      	b.n	8001f52 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d002      	beq.n	8001d56 <HAL_SPI_Transmit+0x52>
 8001d50:	88fb      	ldrh	r3, [r7, #6]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d102      	bne.n	8001d5c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001d5a:	e0fa      	b.n	8001f52 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2203      	movs	r2, #3
 8001d60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2200      	movs	r2, #0
 8001d68:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	68ba      	ldr	r2, [r7, #8]
 8001d6e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	88fa      	ldrh	r2, [r7, #6]
 8001d74:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	88fa      	ldrh	r2, [r7, #6]
 8001d7a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2200      	movs	r2, #0
 8001d86:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2200      	movs	r2, #0
 8001d92:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2200      	movs	r2, #0
 8001d98:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001da2:	d107      	bne.n	8001db4 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001db2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dbe:	2b40      	cmp	r3, #64	; 0x40
 8001dc0:	d007      	beq.n	8001dd2 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001dd0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001dda:	d14b      	bne.n	8001e74 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d002      	beq.n	8001dea <HAL_SPI_Transmit+0xe6>
 8001de4:	8afb      	ldrh	r3, [r7, #22]
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d13e      	bne.n	8001e68 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dee:	881a      	ldrh	r2, [r3, #0]
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	1c9a      	adds	r2, r3, #2
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	3b01      	subs	r3, #1
 8001e08:	b29a      	uxth	r2, r3
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001e0e:	e02b      	b.n	8001e68 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d112      	bne.n	8001e44 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e22:	881a      	ldrh	r2, [r3, #0]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2e:	1c9a      	adds	r2, r3, #2
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e38:	b29b      	uxth	r3, r3
 8001e3a:	3b01      	subs	r3, #1
 8001e3c:	b29a      	uxth	r2, r3
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	86da      	strh	r2, [r3, #54]	; 0x36
 8001e42:	e011      	b.n	8001e68 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e44:	f7ff f80e 	bl	8000e64 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	683a      	ldr	r2, [r7, #0]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d803      	bhi.n	8001e5c <HAL_SPI_Transmit+0x158>
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e5a:	d102      	bne.n	8001e62 <HAL_SPI_Transmit+0x15e>
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d102      	bne.n	8001e68 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001e66:	e074      	b.n	8001f52 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d1ce      	bne.n	8001e10 <HAL_SPI_Transmit+0x10c>
 8001e72:	e04c      	b.n	8001f0e <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d002      	beq.n	8001e82 <HAL_SPI_Transmit+0x17e>
 8001e7c:	8afb      	ldrh	r3, [r7, #22]
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d140      	bne.n	8001f04 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	330c      	adds	r3, #12
 8001e8c:	7812      	ldrb	r2, [r2, #0]
 8001e8e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e94:	1c5a      	adds	r2, r3, #1
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	3b01      	subs	r3, #1
 8001ea2:	b29a      	uxth	r2, r3
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001ea8:	e02c      	b.n	8001f04 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f003 0302 	and.w	r3, r3, #2
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d113      	bne.n	8001ee0 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	330c      	adds	r3, #12
 8001ec2:	7812      	ldrb	r2, [r2, #0]
 8001ec4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eca:	1c5a      	adds	r2, r3, #1
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	b29a      	uxth	r2, r3
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	86da      	strh	r2, [r3, #54]	; 0x36
 8001ede:	e011      	b.n	8001f04 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001ee0:	f7fe ffc0 	bl	8000e64 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	683a      	ldr	r2, [r7, #0]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d803      	bhi.n	8001ef8 <HAL_SPI_Transmit+0x1f4>
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ef6:	d102      	bne.n	8001efe <HAL_SPI_Transmit+0x1fa>
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d102      	bne.n	8001f04 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001f02:	e026      	b.n	8001f52 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d1cd      	bne.n	8001eaa <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	6839      	ldr	r1, [r7, #0]
 8001f12:	68f8      	ldr	r0, [r7, #12]
 8001f14:	f000 fa36 	bl	8002384 <SPI_EndRxTxTransaction>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d002      	beq.n	8001f24 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2220      	movs	r2, #32
 8001f22:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d10a      	bne.n	8001f42 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	613b      	str	r3, [r7, #16]
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	613b      	str	r3, [r7, #16]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	613b      	str	r3, [r7, #16]
 8001f40:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d002      	beq.n	8001f50 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	77fb      	strb	r3, [r7, #31]
 8001f4e:	e000      	b.n	8001f52 <HAL_SPI_Transmit+0x24e>
  }

error:
 8001f50:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2201      	movs	r2, #1
 8001f56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001f62:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3720      	adds	r7, #32
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b08c      	sub	sp, #48	; 0x30
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	607a      	str	r2, [r7, #4]
 8001f78:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d101      	bne.n	8001f92 <HAL_SPI_TransmitReceive+0x26>
 8001f8e:	2302      	movs	r3, #2
 8001f90:	e18a      	b.n	80022a8 <HAL_SPI_TransmitReceive+0x33c>
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2201      	movs	r2, #1
 8001f96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001f9a:	f7fe ff63 	bl	8000e64 <HAL_GetTick>
 8001f9e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001fa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001fb0:	887b      	ldrh	r3, [r7, #2]
 8001fb2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001fb4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d00f      	beq.n	8001fdc <HAL_SPI_TransmitReceive+0x70>
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001fc2:	d107      	bne.n	8001fd4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d103      	bne.n	8001fd4 <HAL_SPI_TransmitReceive+0x68>
 8001fcc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001fd0:	2b04      	cmp	r3, #4
 8001fd2:	d003      	beq.n	8001fdc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001fda:	e15b      	b.n	8002294 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d005      	beq.n	8001fee <HAL_SPI_TransmitReceive+0x82>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d002      	beq.n	8001fee <HAL_SPI_TransmitReceive+0x82>
 8001fe8:	887b      	ldrh	r3, [r7, #2]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d103      	bne.n	8001ff6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001ff4:	e14e      	b.n	8002294 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	2b04      	cmp	r3, #4
 8002000:	d003      	beq.n	800200a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2205      	movs	r2, #5
 8002006:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2200      	movs	r2, #0
 800200e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	887a      	ldrh	r2, [r7, #2]
 800201a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	887a      	ldrh	r2, [r7, #2]
 8002020:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	68ba      	ldr	r2, [r7, #8]
 8002026:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	887a      	ldrh	r2, [r7, #2]
 800202c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	887a      	ldrh	r2, [r7, #2]
 8002032:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2200      	movs	r2, #0
 8002038:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2200      	movs	r2, #0
 800203e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800204a:	2b40      	cmp	r3, #64	; 0x40
 800204c:	d007      	beq.n	800205e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800205c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002066:	d178      	bne.n	800215a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d002      	beq.n	8002076 <HAL_SPI_TransmitReceive+0x10a>
 8002070:	8b7b      	ldrh	r3, [r7, #26]
 8002072:	2b01      	cmp	r3, #1
 8002074:	d166      	bne.n	8002144 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207a:	881a      	ldrh	r2, [r3, #0]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002086:	1c9a      	adds	r2, r3, #2
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002090:	b29b      	uxth	r3, r3
 8002092:	3b01      	subs	r3, #1
 8002094:	b29a      	uxth	r2, r3
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800209a:	e053      	b.n	8002144 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d11b      	bne.n	80020e2 <HAL_SPI_TransmitReceive+0x176>
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d016      	beq.n	80020e2 <HAL_SPI_TransmitReceive+0x176>
 80020b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d113      	bne.n	80020e2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020be:	881a      	ldrh	r2, [r3, #0]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ca:	1c9a      	adds	r2, r3, #2
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020d4:	b29b      	uxth	r3, r3
 80020d6:	3b01      	subs	r3, #1
 80020d8:	b29a      	uxth	r2, r3
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80020de:	2300      	movs	r3, #0
 80020e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	f003 0301 	and.w	r3, r3, #1
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d119      	bne.n	8002124 <HAL_SPI_TransmitReceive+0x1b8>
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d014      	beq.n	8002124 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	68da      	ldr	r2, [r3, #12]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002104:	b292      	uxth	r2, r2
 8002106:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800210c:	1c9a      	adds	r2, r3, #2
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002116:	b29b      	uxth	r3, r3
 8002118:	3b01      	subs	r3, #1
 800211a:	b29a      	uxth	r2, r3
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002120:	2301      	movs	r3, #1
 8002122:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002124:	f7fe fe9e 	bl	8000e64 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002130:	429a      	cmp	r2, r3
 8002132:	d807      	bhi.n	8002144 <HAL_SPI_TransmitReceive+0x1d8>
 8002134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800213a:	d003      	beq.n	8002144 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002142:	e0a7      	b.n	8002294 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002148:	b29b      	uxth	r3, r3
 800214a:	2b00      	cmp	r3, #0
 800214c:	d1a6      	bne.n	800209c <HAL_SPI_TransmitReceive+0x130>
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002152:	b29b      	uxth	r3, r3
 8002154:	2b00      	cmp	r3, #0
 8002156:	d1a1      	bne.n	800209c <HAL_SPI_TransmitReceive+0x130>
 8002158:	e07c      	b.n	8002254 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d002      	beq.n	8002168 <HAL_SPI_TransmitReceive+0x1fc>
 8002162:	8b7b      	ldrh	r3, [r7, #26]
 8002164:	2b01      	cmp	r3, #1
 8002166:	d16b      	bne.n	8002240 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	330c      	adds	r3, #12
 8002172:	7812      	ldrb	r2, [r2, #0]
 8002174:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217a:	1c5a      	adds	r2, r3, #1
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002184:	b29b      	uxth	r3, r3
 8002186:	3b01      	subs	r3, #1
 8002188:	b29a      	uxth	r2, r3
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800218e:	e057      	b.n	8002240 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f003 0302 	and.w	r3, r3, #2
 800219a:	2b02      	cmp	r3, #2
 800219c:	d11c      	bne.n	80021d8 <HAL_SPI_TransmitReceive+0x26c>
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d017      	beq.n	80021d8 <HAL_SPI_TransmitReceive+0x26c>
 80021a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d114      	bne.n	80021d8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	330c      	adds	r3, #12
 80021b8:	7812      	ldrb	r2, [r2, #0]
 80021ba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c0:	1c5a      	adds	r2, r3, #1
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	3b01      	subs	r3, #1
 80021ce:	b29a      	uxth	r2, r3
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80021d4:	2300      	movs	r3, #0
 80021d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f003 0301 	and.w	r3, r3, #1
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d119      	bne.n	800221a <HAL_SPI_TransmitReceive+0x2ae>
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d014      	beq.n	800221a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	68da      	ldr	r2, [r3, #12]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021fa:	b2d2      	uxtb	r2, r2
 80021fc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002202:	1c5a      	adds	r2, r3, #1
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800220c:	b29b      	uxth	r3, r3
 800220e:	3b01      	subs	r3, #1
 8002210:	b29a      	uxth	r2, r3
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002216:	2301      	movs	r3, #1
 8002218:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800221a:	f7fe fe23 	bl	8000e64 <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002226:	429a      	cmp	r2, r3
 8002228:	d803      	bhi.n	8002232 <HAL_SPI_TransmitReceive+0x2c6>
 800222a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800222c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002230:	d102      	bne.n	8002238 <HAL_SPI_TransmitReceive+0x2cc>
 8002232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002234:	2b00      	cmp	r3, #0
 8002236:	d103      	bne.n	8002240 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800223e:	e029      	b.n	8002294 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002244:	b29b      	uxth	r3, r3
 8002246:	2b00      	cmp	r3, #0
 8002248:	d1a2      	bne.n	8002190 <HAL_SPI_TransmitReceive+0x224>
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800224e:	b29b      	uxth	r3, r3
 8002250:	2b00      	cmp	r3, #0
 8002252:	d19d      	bne.n	8002190 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002254:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002256:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002258:	68f8      	ldr	r0, [r7, #12]
 800225a:	f000 f893 	bl	8002384 <SPI_EndRxTxTransaction>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d006      	beq.n	8002272 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2220      	movs	r2, #32
 800226e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002270:	e010      	b.n	8002294 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d10b      	bne.n	8002292 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800227a:	2300      	movs	r3, #0
 800227c:	617b      	str	r3, [r7, #20]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	617b      	str	r3, [r7, #20]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	617b      	str	r3, [r7, #20]
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	e000      	b.n	8002294 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002292:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2200      	movs	r2, #0
 80022a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80022a4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3730      	adds	r7, #48	; 0x30
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	603b      	str	r3, [r7, #0]
 80022bc:	4613      	mov	r3, r2
 80022be:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80022c0:	e04c      	b.n	800235c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022c8:	d048      	beq.n	800235c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80022ca:	f7fe fdcb 	bl	8000e64 <HAL_GetTick>
 80022ce:	4602      	mov	r2, r0
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	683a      	ldr	r2, [r7, #0]
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d902      	bls.n	80022e0 <SPI_WaitFlagStateUntilTimeout+0x30>
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d13d      	bne.n	800235c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	685a      	ldr	r2, [r3, #4]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80022ee:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80022f8:	d111      	bne.n	800231e <SPI_WaitFlagStateUntilTimeout+0x6e>
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002302:	d004      	beq.n	800230e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800230c:	d107      	bne.n	800231e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800231c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002322:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002326:	d10f      	bne.n	8002348 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002336:	601a      	str	r2, [r3, #0]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002346:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2201      	movs	r2, #1
 800234c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2200      	movs	r2, #0
 8002354:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e00f      	b.n	800237c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	689a      	ldr	r2, [r3, #8]
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	4013      	ands	r3, r2
 8002366:	68ba      	ldr	r2, [r7, #8]
 8002368:	429a      	cmp	r2, r3
 800236a:	bf0c      	ite	eq
 800236c:	2301      	moveq	r3, #1
 800236e:	2300      	movne	r3, #0
 8002370:	b2db      	uxtb	r3, r3
 8002372:	461a      	mov	r2, r3
 8002374:	79fb      	ldrb	r3, [r7, #7]
 8002376:	429a      	cmp	r2, r3
 8002378:	d1a3      	bne.n	80022c2 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800237a:	2300      	movs	r3, #0
}
 800237c:	4618      	mov	r0, r3
 800237e:	3710      	adds	r7, #16
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b088      	sub	sp, #32
 8002388:	af02      	add	r7, sp, #8
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002390:	4b1b      	ldr	r3, [pc, #108]	; (8002400 <SPI_EndRxTxTransaction+0x7c>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a1b      	ldr	r2, [pc, #108]	; (8002404 <SPI_EndRxTxTransaction+0x80>)
 8002396:	fba2 2303 	umull	r2, r3, r2, r3
 800239a:	0d5b      	lsrs	r3, r3, #21
 800239c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80023a0:	fb02 f303 	mul.w	r3, r2, r3
 80023a4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80023ae:	d112      	bne.n	80023d6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	9300      	str	r3, [sp, #0]
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	2200      	movs	r2, #0
 80023b8:	2180      	movs	r1, #128	; 0x80
 80023ba:	68f8      	ldr	r0, [r7, #12]
 80023bc:	f7ff ff78 	bl	80022b0 <SPI_WaitFlagStateUntilTimeout>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d016      	beq.n	80023f4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ca:	f043 0220 	orr.w	r2, r3, #32
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	e00f      	b.n	80023f6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d00a      	beq.n	80023f2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	3b01      	subs	r3, #1
 80023e0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023ec:	2b80      	cmp	r3, #128	; 0x80
 80023ee:	d0f2      	beq.n	80023d6 <SPI_EndRxTxTransaction+0x52>
 80023f0:	e000      	b.n	80023f4 <SPI_EndRxTxTransaction+0x70>
        break;
 80023f2:	bf00      	nop
  }

  return HAL_OK;
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3718      	adds	r7, #24
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	20000000 	.word	0x20000000
 8002404:	165e9f81 	.word	0x165e9f81

08002408 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d101      	bne.n	800241a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e03f      	b.n	800249a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002420:	b2db      	uxtb	r3, r3
 8002422:	2b00      	cmp	r3, #0
 8002424:	d106      	bne.n	8002434 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f7fe fbd0 	bl	8000bd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2224      	movs	r2, #36	; 0x24
 8002438:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	68da      	ldr	r2, [r3, #12]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800244a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f000 f90b 	bl	8002668 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	691a      	ldr	r2, [r3, #16]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002460:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	695a      	ldr	r2, [r3, #20]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002470:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	68da      	ldr	r2, [r3, #12]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002480:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2220      	movs	r2, #32
 800248c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2220      	movs	r2, #32
 8002494:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024a2:	b580      	push	{r7, lr}
 80024a4:	b088      	sub	sp, #32
 80024a6:	af02      	add	r7, sp, #8
 80024a8:	60f8      	str	r0, [r7, #12]
 80024aa:	60b9      	str	r1, [r7, #8]
 80024ac:	603b      	str	r3, [r7, #0]
 80024ae:	4613      	mov	r3, r2
 80024b0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80024b2:	2300      	movs	r3, #0
 80024b4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2b20      	cmp	r3, #32
 80024c0:	f040 8083 	bne.w	80025ca <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d002      	beq.n	80024d0 <HAL_UART_Transmit+0x2e>
 80024ca:	88fb      	ldrh	r3, [r7, #6]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d101      	bne.n	80024d4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e07b      	b.n	80025cc <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d101      	bne.n	80024e2 <HAL_UART_Transmit+0x40>
 80024de:	2302      	movs	r3, #2
 80024e0:	e074      	b.n	80025cc <HAL_UART_Transmit+0x12a>
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2201      	movs	r2, #1
 80024e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2200      	movs	r2, #0
 80024ee:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2221      	movs	r2, #33	; 0x21
 80024f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80024f8:	f7fe fcb4 	bl	8000e64 <HAL_GetTick>
 80024fc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	88fa      	ldrh	r2, [r7, #6]
 8002502:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	88fa      	ldrh	r2, [r7, #6]
 8002508:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2200      	movs	r2, #0
 800250e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002512:	e042      	b.n	800259a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002518:	b29b      	uxth	r3, r3
 800251a:	3b01      	subs	r3, #1
 800251c:	b29a      	uxth	r2, r3
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800252a:	d122      	bne.n	8002572 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	9300      	str	r3, [sp, #0]
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	2200      	movs	r2, #0
 8002534:	2180      	movs	r1, #128	; 0x80
 8002536:	68f8      	ldr	r0, [r7, #12]
 8002538:	f000 f84c 	bl	80025d4 <UART_WaitOnFlagUntilTimeout>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e042      	b.n	80025cc <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	881b      	ldrh	r3, [r3, #0]
 800254e:	461a      	mov	r2, r3
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002558:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	691b      	ldr	r3, [r3, #16]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d103      	bne.n	800256a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	3302      	adds	r3, #2
 8002566:	60bb      	str	r3, [r7, #8]
 8002568:	e017      	b.n	800259a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	3301      	adds	r3, #1
 800256e:	60bb      	str	r3, [r7, #8]
 8002570:	e013      	b.n	800259a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	9300      	str	r3, [sp, #0]
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	2200      	movs	r2, #0
 800257a:	2180      	movs	r1, #128	; 0x80
 800257c:	68f8      	ldr	r0, [r7, #12]
 800257e:	f000 f829 	bl	80025d4 <UART_WaitOnFlagUntilTimeout>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d001      	beq.n	800258c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e01f      	b.n	80025cc <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	1c5a      	adds	r2, r3, #1
 8002590:	60ba      	str	r2, [r7, #8]
 8002592:	781a      	ldrb	r2, [r3, #0]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800259e:	b29b      	uxth	r3, r3
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d1b7      	bne.n	8002514 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	9300      	str	r3, [sp, #0]
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	2200      	movs	r2, #0
 80025ac:	2140      	movs	r1, #64	; 0x40
 80025ae:	68f8      	ldr	r0, [r7, #12]
 80025b0:	f000 f810 	bl	80025d4 <UART_WaitOnFlagUntilTimeout>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d001      	beq.n	80025be <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e006      	b.n	80025cc <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2220      	movs	r2, #32
 80025c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80025c6:	2300      	movs	r3, #0
 80025c8:	e000      	b.n	80025cc <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80025ca:	2302      	movs	r3, #2
  }
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3718      	adds	r7, #24
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	60b9      	str	r1, [r7, #8]
 80025de:	603b      	str	r3, [r7, #0]
 80025e0:	4613      	mov	r3, r2
 80025e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025e4:	e02c      	b.n	8002640 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ec:	d028      	beq.n	8002640 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d007      	beq.n	8002604 <UART_WaitOnFlagUntilTimeout+0x30>
 80025f4:	f7fe fc36 	bl	8000e64 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	69ba      	ldr	r2, [r7, #24]
 8002600:	429a      	cmp	r2, r3
 8002602:	d21d      	bcs.n	8002640 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	68da      	ldr	r2, [r3, #12]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002612:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	695a      	ldr	r2, [r3, #20]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f022 0201 	bic.w	r2, r2, #1
 8002622:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2220      	movs	r2, #32
 8002628:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2220      	movs	r2, #32
 8002630:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2200      	movs	r2, #0
 8002638:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e00f      	b.n	8002660 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	4013      	ands	r3, r2
 800264a:	68ba      	ldr	r2, [r7, #8]
 800264c:	429a      	cmp	r2, r3
 800264e:	bf0c      	ite	eq
 8002650:	2301      	moveq	r3, #1
 8002652:	2300      	movne	r3, #0
 8002654:	b2db      	uxtb	r3, r3
 8002656:	461a      	mov	r2, r3
 8002658:	79fb      	ldrb	r3, [r7, #7]
 800265a:	429a      	cmp	r2, r3
 800265c:	d0c3      	beq.n	80025e6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800265e:	2300      	movs	r3, #0
}
 8002660:	4618      	mov	r0, r3
 8002662:	3710      	adds	r7, #16
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800266c:	b085      	sub	sp, #20
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	691b      	ldr	r3, [r3, #16]
 8002678:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	68da      	ldr	r2, [r3, #12]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	430a      	orrs	r2, r1
 8002686:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	689a      	ldr	r2, [r3, #8]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	691b      	ldr	r3, [r3, #16]
 8002690:	431a      	orrs	r2, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	695b      	ldr	r3, [r3, #20]
 8002696:	431a      	orrs	r2, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	69db      	ldr	r3, [r3, #28]
 800269c:	4313      	orrs	r3, r2
 800269e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80026aa:	f023 030c 	bic.w	r3, r3, #12
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	6812      	ldr	r2, [r2, #0]
 80026b2:	68f9      	ldr	r1, [r7, #12]
 80026b4:	430b      	orrs	r3, r1
 80026b6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	695b      	ldr	r3, [r3, #20]
 80026be:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	699a      	ldr	r2, [r3, #24]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	430a      	orrs	r2, r1
 80026cc:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	69db      	ldr	r3, [r3, #28]
 80026d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026d6:	f040 818b 	bne.w	80029f0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4ac1      	ldr	r2, [pc, #772]	; (80029e4 <UART_SetConfig+0x37c>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d005      	beq.n	80026f0 <UART_SetConfig+0x88>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4abf      	ldr	r2, [pc, #764]	; (80029e8 <UART_SetConfig+0x380>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	f040 80bd 	bne.w	800286a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80026f0:	f7ff fa90 	bl	8001c14 <HAL_RCC_GetPCLK2Freq>
 80026f4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	461d      	mov	r5, r3
 80026fa:	f04f 0600 	mov.w	r6, #0
 80026fe:	46a8      	mov	r8, r5
 8002700:	46b1      	mov	r9, r6
 8002702:	eb18 0308 	adds.w	r3, r8, r8
 8002706:	eb49 0409 	adc.w	r4, r9, r9
 800270a:	4698      	mov	r8, r3
 800270c:	46a1      	mov	r9, r4
 800270e:	eb18 0805 	adds.w	r8, r8, r5
 8002712:	eb49 0906 	adc.w	r9, r9, r6
 8002716:	f04f 0100 	mov.w	r1, #0
 800271a:	f04f 0200 	mov.w	r2, #0
 800271e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002722:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002726:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800272a:	4688      	mov	r8, r1
 800272c:	4691      	mov	r9, r2
 800272e:	eb18 0005 	adds.w	r0, r8, r5
 8002732:	eb49 0106 	adc.w	r1, r9, r6
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	461d      	mov	r5, r3
 800273c:	f04f 0600 	mov.w	r6, #0
 8002740:	196b      	adds	r3, r5, r5
 8002742:	eb46 0406 	adc.w	r4, r6, r6
 8002746:	461a      	mov	r2, r3
 8002748:	4623      	mov	r3, r4
 800274a:	f7fd fd99 	bl	8000280 <__aeabi_uldivmod>
 800274e:	4603      	mov	r3, r0
 8002750:	460c      	mov	r4, r1
 8002752:	461a      	mov	r2, r3
 8002754:	4ba5      	ldr	r3, [pc, #660]	; (80029ec <UART_SetConfig+0x384>)
 8002756:	fba3 2302 	umull	r2, r3, r3, r2
 800275a:	095b      	lsrs	r3, r3, #5
 800275c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	461d      	mov	r5, r3
 8002764:	f04f 0600 	mov.w	r6, #0
 8002768:	46a9      	mov	r9, r5
 800276a:	46b2      	mov	sl, r6
 800276c:	eb19 0309 	adds.w	r3, r9, r9
 8002770:	eb4a 040a 	adc.w	r4, sl, sl
 8002774:	4699      	mov	r9, r3
 8002776:	46a2      	mov	sl, r4
 8002778:	eb19 0905 	adds.w	r9, r9, r5
 800277c:	eb4a 0a06 	adc.w	sl, sl, r6
 8002780:	f04f 0100 	mov.w	r1, #0
 8002784:	f04f 0200 	mov.w	r2, #0
 8002788:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800278c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002790:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002794:	4689      	mov	r9, r1
 8002796:	4692      	mov	sl, r2
 8002798:	eb19 0005 	adds.w	r0, r9, r5
 800279c:	eb4a 0106 	adc.w	r1, sl, r6
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	461d      	mov	r5, r3
 80027a6:	f04f 0600 	mov.w	r6, #0
 80027aa:	196b      	adds	r3, r5, r5
 80027ac:	eb46 0406 	adc.w	r4, r6, r6
 80027b0:	461a      	mov	r2, r3
 80027b2:	4623      	mov	r3, r4
 80027b4:	f7fd fd64 	bl	8000280 <__aeabi_uldivmod>
 80027b8:	4603      	mov	r3, r0
 80027ba:	460c      	mov	r4, r1
 80027bc:	461a      	mov	r2, r3
 80027be:	4b8b      	ldr	r3, [pc, #556]	; (80029ec <UART_SetConfig+0x384>)
 80027c0:	fba3 1302 	umull	r1, r3, r3, r2
 80027c4:	095b      	lsrs	r3, r3, #5
 80027c6:	2164      	movs	r1, #100	; 0x64
 80027c8:	fb01 f303 	mul.w	r3, r1, r3
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	3332      	adds	r3, #50	; 0x32
 80027d2:	4a86      	ldr	r2, [pc, #536]	; (80029ec <UART_SetConfig+0x384>)
 80027d4:	fba2 2303 	umull	r2, r3, r2, r3
 80027d8:	095b      	lsrs	r3, r3, #5
 80027da:	005b      	lsls	r3, r3, #1
 80027dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80027e0:	4498      	add	r8, r3
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	461d      	mov	r5, r3
 80027e6:	f04f 0600 	mov.w	r6, #0
 80027ea:	46a9      	mov	r9, r5
 80027ec:	46b2      	mov	sl, r6
 80027ee:	eb19 0309 	adds.w	r3, r9, r9
 80027f2:	eb4a 040a 	adc.w	r4, sl, sl
 80027f6:	4699      	mov	r9, r3
 80027f8:	46a2      	mov	sl, r4
 80027fa:	eb19 0905 	adds.w	r9, r9, r5
 80027fe:	eb4a 0a06 	adc.w	sl, sl, r6
 8002802:	f04f 0100 	mov.w	r1, #0
 8002806:	f04f 0200 	mov.w	r2, #0
 800280a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800280e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002812:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002816:	4689      	mov	r9, r1
 8002818:	4692      	mov	sl, r2
 800281a:	eb19 0005 	adds.w	r0, r9, r5
 800281e:	eb4a 0106 	adc.w	r1, sl, r6
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	461d      	mov	r5, r3
 8002828:	f04f 0600 	mov.w	r6, #0
 800282c:	196b      	adds	r3, r5, r5
 800282e:	eb46 0406 	adc.w	r4, r6, r6
 8002832:	461a      	mov	r2, r3
 8002834:	4623      	mov	r3, r4
 8002836:	f7fd fd23 	bl	8000280 <__aeabi_uldivmod>
 800283a:	4603      	mov	r3, r0
 800283c:	460c      	mov	r4, r1
 800283e:	461a      	mov	r2, r3
 8002840:	4b6a      	ldr	r3, [pc, #424]	; (80029ec <UART_SetConfig+0x384>)
 8002842:	fba3 1302 	umull	r1, r3, r3, r2
 8002846:	095b      	lsrs	r3, r3, #5
 8002848:	2164      	movs	r1, #100	; 0x64
 800284a:	fb01 f303 	mul.w	r3, r1, r3
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	00db      	lsls	r3, r3, #3
 8002852:	3332      	adds	r3, #50	; 0x32
 8002854:	4a65      	ldr	r2, [pc, #404]	; (80029ec <UART_SetConfig+0x384>)
 8002856:	fba2 2303 	umull	r2, r3, r2, r3
 800285a:	095b      	lsrs	r3, r3, #5
 800285c:	f003 0207 	and.w	r2, r3, #7
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4442      	add	r2, r8
 8002866:	609a      	str	r2, [r3, #8]
 8002868:	e26f      	b.n	8002d4a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800286a:	f7ff f9bf 	bl	8001bec <HAL_RCC_GetPCLK1Freq>
 800286e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	461d      	mov	r5, r3
 8002874:	f04f 0600 	mov.w	r6, #0
 8002878:	46a8      	mov	r8, r5
 800287a:	46b1      	mov	r9, r6
 800287c:	eb18 0308 	adds.w	r3, r8, r8
 8002880:	eb49 0409 	adc.w	r4, r9, r9
 8002884:	4698      	mov	r8, r3
 8002886:	46a1      	mov	r9, r4
 8002888:	eb18 0805 	adds.w	r8, r8, r5
 800288c:	eb49 0906 	adc.w	r9, r9, r6
 8002890:	f04f 0100 	mov.w	r1, #0
 8002894:	f04f 0200 	mov.w	r2, #0
 8002898:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800289c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80028a0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80028a4:	4688      	mov	r8, r1
 80028a6:	4691      	mov	r9, r2
 80028a8:	eb18 0005 	adds.w	r0, r8, r5
 80028ac:	eb49 0106 	adc.w	r1, r9, r6
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	461d      	mov	r5, r3
 80028b6:	f04f 0600 	mov.w	r6, #0
 80028ba:	196b      	adds	r3, r5, r5
 80028bc:	eb46 0406 	adc.w	r4, r6, r6
 80028c0:	461a      	mov	r2, r3
 80028c2:	4623      	mov	r3, r4
 80028c4:	f7fd fcdc 	bl	8000280 <__aeabi_uldivmod>
 80028c8:	4603      	mov	r3, r0
 80028ca:	460c      	mov	r4, r1
 80028cc:	461a      	mov	r2, r3
 80028ce:	4b47      	ldr	r3, [pc, #284]	; (80029ec <UART_SetConfig+0x384>)
 80028d0:	fba3 2302 	umull	r2, r3, r3, r2
 80028d4:	095b      	lsrs	r3, r3, #5
 80028d6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	461d      	mov	r5, r3
 80028de:	f04f 0600 	mov.w	r6, #0
 80028e2:	46a9      	mov	r9, r5
 80028e4:	46b2      	mov	sl, r6
 80028e6:	eb19 0309 	adds.w	r3, r9, r9
 80028ea:	eb4a 040a 	adc.w	r4, sl, sl
 80028ee:	4699      	mov	r9, r3
 80028f0:	46a2      	mov	sl, r4
 80028f2:	eb19 0905 	adds.w	r9, r9, r5
 80028f6:	eb4a 0a06 	adc.w	sl, sl, r6
 80028fa:	f04f 0100 	mov.w	r1, #0
 80028fe:	f04f 0200 	mov.w	r2, #0
 8002902:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002906:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800290a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800290e:	4689      	mov	r9, r1
 8002910:	4692      	mov	sl, r2
 8002912:	eb19 0005 	adds.w	r0, r9, r5
 8002916:	eb4a 0106 	adc.w	r1, sl, r6
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	461d      	mov	r5, r3
 8002920:	f04f 0600 	mov.w	r6, #0
 8002924:	196b      	adds	r3, r5, r5
 8002926:	eb46 0406 	adc.w	r4, r6, r6
 800292a:	461a      	mov	r2, r3
 800292c:	4623      	mov	r3, r4
 800292e:	f7fd fca7 	bl	8000280 <__aeabi_uldivmod>
 8002932:	4603      	mov	r3, r0
 8002934:	460c      	mov	r4, r1
 8002936:	461a      	mov	r2, r3
 8002938:	4b2c      	ldr	r3, [pc, #176]	; (80029ec <UART_SetConfig+0x384>)
 800293a:	fba3 1302 	umull	r1, r3, r3, r2
 800293e:	095b      	lsrs	r3, r3, #5
 8002940:	2164      	movs	r1, #100	; 0x64
 8002942:	fb01 f303 	mul.w	r3, r1, r3
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	00db      	lsls	r3, r3, #3
 800294a:	3332      	adds	r3, #50	; 0x32
 800294c:	4a27      	ldr	r2, [pc, #156]	; (80029ec <UART_SetConfig+0x384>)
 800294e:	fba2 2303 	umull	r2, r3, r2, r3
 8002952:	095b      	lsrs	r3, r3, #5
 8002954:	005b      	lsls	r3, r3, #1
 8002956:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800295a:	4498      	add	r8, r3
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	461d      	mov	r5, r3
 8002960:	f04f 0600 	mov.w	r6, #0
 8002964:	46a9      	mov	r9, r5
 8002966:	46b2      	mov	sl, r6
 8002968:	eb19 0309 	adds.w	r3, r9, r9
 800296c:	eb4a 040a 	adc.w	r4, sl, sl
 8002970:	4699      	mov	r9, r3
 8002972:	46a2      	mov	sl, r4
 8002974:	eb19 0905 	adds.w	r9, r9, r5
 8002978:	eb4a 0a06 	adc.w	sl, sl, r6
 800297c:	f04f 0100 	mov.w	r1, #0
 8002980:	f04f 0200 	mov.w	r2, #0
 8002984:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002988:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800298c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002990:	4689      	mov	r9, r1
 8002992:	4692      	mov	sl, r2
 8002994:	eb19 0005 	adds.w	r0, r9, r5
 8002998:	eb4a 0106 	adc.w	r1, sl, r6
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	461d      	mov	r5, r3
 80029a2:	f04f 0600 	mov.w	r6, #0
 80029a6:	196b      	adds	r3, r5, r5
 80029a8:	eb46 0406 	adc.w	r4, r6, r6
 80029ac:	461a      	mov	r2, r3
 80029ae:	4623      	mov	r3, r4
 80029b0:	f7fd fc66 	bl	8000280 <__aeabi_uldivmod>
 80029b4:	4603      	mov	r3, r0
 80029b6:	460c      	mov	r4, r1
 80029b8:	461a      	mov	r2, r3
 80029ba:	4b0c      	ldr	r3, [pc, #48]	; (80029ec <UART_SetConfig+0x384>)
 80029bc:	fba3 1302 	umull	r1, r3, r3, r2
 80029c0:	095b      	lsrs	r3, r3, #5
 80029c2:	2164      	movs	r1, #100	; 0x64
 80029c4:	fb01 f303 	mul.w	r3, r1, r3
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	00db      	lsls	r3, r3, #3
 80029cc:	3332      	adds	r3, #50	; 0x32
 80029ce:	4a07      	ldr	r2, [pc, #28]	; (80029ec <UART_SetConfig+0x384>)
 80029d0:	fba2 2303 	umull	r2, r3, r2, r3
 80029d4:	095b      	lsrs	r3, r3, #5
 80029d6:	f003 0207 	and.w	r2, r3, #7
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4442      	add	r2, r8
 80029e0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80029e2:	e1b2      	b.n	8002d4a <UART_SetConfig+0x6e2>
 80029e4:	40011000 	.word	0x40011000
 80029e8:	40011400 	.word	0x40011400
 80029ec:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4ad7      	ldr	r2, [pc, #860]	; (8002d54 <UART_SetConfig+0x6ec>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d005      	beq.n	8002a06 <UART_SetConfig+0x39e>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4ad6      	ldr	r2, [pc, #856]	; (8002d58 <UART_SetConfig+0x6f0>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	f040 80d1 	bne.w	8002ba8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002a06:	f7ff f905 	bl	8001c14 <HAL_RCC_GetPCLK2Freq>
 8002a0a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	469a      	mov	sl, r3
 8002a10:	f04f 0b00 	mov.w	fp, #0
 8002a14:	46d0      	mov	r8, sl
 8002a16:	46d9      	mov	r9, fp
 8002a18:	eb18 0308 	adds.w	r3, r8, r8
 8002a1c:	eb49 0409 	adc.w	r4, r9, r9
 8002a20:	4698      	mov	r8, r3
 8002a22:	46a1      	mov	r9, r4
 8002a24:	eb18 080a 	adds.w	r8, r8, sl
 8002a28:	eb49 090b 	adc.w	r9, r9, fp
 8002a2c:	f04f 0100 	mov.w	r1, #0
 8002a30:	f04f 0200 	mov.w	r2, #0
 8002a34:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002a38:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002a3c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002a40:	4688      	mov	r8, r1
 8002a42:	4691      	mov	r9, r2
 8002a44:	eb1a 0508 	adds.w	r5, sl, r8
 8002a48:	eb4b 0609 	adc.w	r6, fp, r9
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	4619      	mov	r1, r3
 8002a52:	f04f 0200 	mov.w	r2, #0
 8002a56:	f04f 0300 	mov.w	r3, #0
 8002a5a:	f04f 0400 	mov.w	r4, #0
 8002a5e:	0094      	lsls	r4, r2, #2
 8002a60:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002a64:	008b      	lsls	r3, r1, #2
 8002a66:	461a      	mov	r2, r3
 8002a68:	4623      	mov	r3, r4
 8002a6a:	4628      	mov	r0, r5
 8002a6c:	4631      	mov	r1, r6
 8002a6e:	f7fd fc07 	bl	8000280 <__aeabi_uldivmod>
 8002a72:	4603      	mov	r3, r0
 8002a74:	460c      	mov	r4, r1
 8002a76:	461a      	mov	r2, r3
 8002a78:	4bb8      	ldr	r3, [pc, #736]	; (8002d5c <UART_SetConfig+0x6f4>)
 8002a7a:	fba3 2302 	umull	r2, r3, r3, r2
 8002a7e:	095b      	lsrs	r3, r3, #5
 8002a80:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	469b      	mov	fp, r3
 8002a88:	f04f 0c00 	mov.w	ip, #0
 8002a8c:	46d9      	mov	r9, fp
 8002a8e:	46e2      	mov	sl, ip
 8002a90:	eb19 0309 	adds.w	r3, r9, r9
 8002a94:	eb4a 040a 	adc.w	r4, sl, sl
 8002a98:	4699      	mov	r9, r3
 8002a9a:	46a2      	mov	sl, r4
 8002a9c:	eb19 090b 	adds.w	r9, r9, fp
 8002aa0:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002aa4:	f04f 0100 	mov.w	r1, #0
 8002aa8:	f04f 0200 	mov.w	r2, #0
 8002aac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ab0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002ab4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002ab8:	4689      	mov	r9, r1
 8002aba:	4692      	mov	sl, r2
 8002abc:	eb1b 0509 	adds.w	r5, fp, r9
 8002ac0:	eb4c 060a 	adc.w	r6, ip, sl
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	4619      	mov	r1, r3
 8002aca:	f04f 0200 	mov.w	r2, #0
 8002ace:	f04f 0300 	mov.w	r3, #0
 8002ad2:	f04f 0400 	mov.w	r4, #0
 8002ad6:	0094      	lsls	r4, r2, #2
 8002ad8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002adc:	008b      	lsls	r3, r1, #2
 8002ade:	461a      	mov	r2, r3
 8002ae0:	4623      	mov	r3, r4
 8002ae2:	4628      	mov	r0, r5
 8002ae4:	4631      	mov	r1, r6
 8002ae6:	f7fd fbcb 	bl	8000280 <__aeabi_uldivmod>
 8002aea:	4603      	mov	r3, r0
 8002aec:	460c      	mov	r4, r1
 8002aee:	461a      	mov	r2, r3
 8002af0:	4b9a      	ldr	r3, [pc, #616]	; (8002d5c <UART_SetConfig+0x6f4>)
 8002af2:	fba3 1302 	umull	r1, r3, r3, r2
 8002af6:	095b      	lsrs	r3, r3, #5
 8002af8:	2164      	movs	r1, #100	; 0x64
 8002afa:	fb01 f303 	mul.w	r3, r1, r3
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	011b      	lsls	r3, r3, #4
 8002b02:	3332      	adds	r3, #50	; 0x32
 8002b04:	4a95      	ldr	r2, [pc, #596]	; (8002d5c <UART_SetConfig+0x6f4>)
 8002b06:	fba2 2303 	umull	r2, r3, r2, r3
 8002b0a:	095b      	lsrs	r3, r3, #5
 8002b0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b10:	4498      	add	r8, r3
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	469b      	mov	fp, r3
 8002b16:	f04f 0c00 	mov.w	ip, #0
 8002b1a:	46d9      	mov	r9, fp
 8002b1c:	46e2      	mov	sl, ip
 8002b1e:	eb19 0309 	adds.w	r3, r9, r9
 8002b22:	eb4a 040a 	adc.w	r4, sl, sl
 8002b26:	4699      	mov	r9, r3
 8002b28:	46a2      	mov	sl, r4
 8002b2a:	eb19 090b 	adds.w	r9, r9, fp
 8002b2e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002b32:	f04f 0100 	mov.w	r1, #0
 8002b36:	f04f 0200 	mov.w	r2, #0
 8002b3a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b3e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002b42:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002b46:	4689      	mov	r9, r1
 8002b48:	4692      	mov	sl, r2
 8002b4a:	eb1b 0509 	adds.w	r5, fp, r9
 8002b4e:	eb4c 060a 	adc.w	r6, ip, sl
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	4619      	mov	r1, r3
 8002b58:	f04f 0200 	mov.w	r2, #0
 8002b5c:	f04f 0300 	mov.w	r3, #0
 8002b60:	f04f 0400 	mov.w	r4, #0
 8002b64:	0094      	lsls	r4, r2, #2
 8002b66:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002b6a:	008b      	lsls	r3, r1, #2
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	4623      	mov	r3, r4
 8002b70:	4628      	mov	r0, r5
 8002b72:	4631      	mov	r1, r6
 8002b74:	f7fd fb84 	bl	8000280 <__aeabi_uldivmod>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	460c      	mov	r4, r1
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	4b77      	ldr	r3, [pc, #476]	; (8002d5c <UART_SetConfig+0x6f4>)
 8002b80:	fba3 1302 	umull	r1, r3, r3, r2
 8002b84:	095b      	lsrs	r3, r3, #5
 8002b86:	2164      	movs	r1, #100	; 0x64
 8002b88:	fb01 f303 	mul.w	r3, r1, r3
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	011b      	lsls	r3, r3, #4
 8002b90:	3332      	adds	r3, #50	; 0x32
 8002b92:	4a72      	ldr	r2, [pc, #456]	; (8002d5c <UART_SetConfig+0x6f4>)
 8002b94:	fba2 2303 	umull	r2, r3, r2, r3
 8002b98:	095b      	lsrs	r3, r3, #5
 8002b9a:	f003 020f 	and.w	r2, r3, #15
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4442      	add	r2, r8
 8002ba4:	609a      	str	r2, [r3, #8]
 8002ba6:	e0d0      	b.n	8002d4a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002ba8:	f7ff f820 	bl	8001bec <HAL_RCC_GetPCLK1Freq>
 8002bac:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	469a      	mov	sl, r3
 8002bb2:	f04f 0b00 	mov.w	fp, #0
 8002bb6:	46d0      	mov	r8, sl
 8002bb8:	46d9      	mov	r9, fp
 8002bba:	eb18 0308 	adds.w	r3, r8, r8
 8002bbe:	eb49 0409 	adc.w	r4, r9, r9
 8002bc2:	4698      	mov	r8, r3
 8002bc4:	46a1      	mov	r9, r4
 8002bc6:	eb18 080a 	adds.w	r8, r8, sl
 8002bca:	eb49 090b 	adc.w	r9, r9, fp
 8002bce:	f04f 0100 	mov.w	r1, #0
 8002bd2:	f04f 0200 	mov.w	r2, #0
 8002bd6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002bda:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002bde:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002be2:	4688      	mov	r8, r1
 8002be4:	4691      	mov	r9, r2
 8002be6:	eb1a 0508 	adds.w	r5, sl, r8
 8002bea:	eb4b 0609 	adc.w	r6, fp, r9
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	f04f 0200 	mov.w	r2, #0
 8002bf8:	f04f 0300 	mov.w	r3, #0
 8002bfc:	f04f 0400 	mov.w	r4, #0
 8002c00:	0094      	lsls	r4, r2, #2
 8002c02:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002c06:	008b      	lsls	r3, r1, #2
 8002c08:	461a      	mov	r2, r3
 8002c0a:	4623      	mov	r3, r4
 8002c0c:	4628      	mov	r0, r5
 8002c0e:	4631      	mov	r1, r6
 8002c10:	f7fd fb36 	bl	8000280 <__aeabi_uldivmod>
 8002c14:	4603      	mov	r3, r0
 8002c16:	460c      	mov	r4, r1
 8002c18:	461a      	mov	r2, r3
 8002c1a:	4b50      	ldr	r3, [pc, #320]	; (8002d5c <UART_SetConfig+0x6f4>)
 8002c1c:	fba3 2302 	umull	r2, r3, r3, r2
 8002c20:	095b      	lsrs	r3, r3, #5
 8002c22:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	469b      	mov	fp, r3
 8002c2a:	f04f 0c00 	mov.w	ip, #0
 8002c2e:	46d9      	mov	r9, fp
 8002c30:	46e2      	mov	sl, ip
 8002c32:	eb19 0309 	adds.w	r3, r9, r9
 8002c36:	eb4a 040a 	adc.w	r4, sl, sl
 8002c3a:	4699      	mov	r9, r3
 8002c3c:	46a2      	mov	sl, r4
 8002c3e:	eb19 090b 	adds.w	r9, r9, fp
 8002c42:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002c46:	f04f 0100 	mov.w	r1, #0
 8002c4a:	f04f 0200 	mov.w	r2, #0
 8002c4e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c52:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002c56:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002c5a:	4689      	mov	r9, r1
 8002c5c:	4692      	mov	sl, r2
 8002c5e:	eb1b 0509 	adds.w	r5, fp, r9
 8002c62:	eb4c 060a 	adc.w	r6, ip, sl
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	f04f 0200 	mov.w	r2, #0
 8002c70:	f04f 0300 	mov.w	r3, #0
 8002c74:	f04f 0400 	mov.w	r4, #0
 8002c78:	0094      	lsls	r4, r2, #2
 8002c7a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002c7e:	008b      	lsls	r3, r1, #2
 8002c80:	461a      	mov	r2, r3
 8002c82:	4623      	mov	r3, r4
 8002c84:	4628      	mov	r0, r5
 8002c86:	4631      	mov	r1, r6
 8002c88:	f7fd fafa 	bl	8000280 <__aeabi_uldivmod>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	460c      	mov	r4, r1
 8002c90:	461a      	mov	r2, r3
 8002c92:	4b32      	ldr	r3, [pc, #200]	; (8002d5c <UART_SetConfig+0x6f4>)
 8002c94:	fba3 1302 	umull	r1, r3, r3, r2
 8002c98:	095b      	lsrs	r3, r3, #5
 8002c9a:	2164      	movs	r1, #100	; 0x64
 8002c9c:	fb01 f303 	mul.w	r3, r1, r3
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	011b      	lsls	r3, r3, #4
 8002ca4:	3332      	adds	r3, #50	; 0x32
 8002ca6:	4a2d      	ldr	r2, [pc, #180]	; (8002d5c <UART_SetConfig+0x6f4>)
 8002ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cac:	095b      	lsrs	r3, r3, #5
 8002cae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cb2:	4498      	add	r8, r3
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	469b      	mov	fp, r3
 8002cb8:	f04f 0c00 	mov.w	ip, #0
 8002cbc:	46d9      	mov	r9, fp
 8002cbe:	46e2      	mov	sl, ip
 8002cc0:	eb19 0309 	adds.w	r3, r9, r9
 8002cc4:	eb4a 040a 	adc.w	r4, sl, sl
 8002cc8:	4699      	mov	r9, r3
 8002cca:	46a2      	mov	sl, r4
 8002ccc:	eb19 090b 	adds.w	r9, r9, fp
 8002cd0:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002cd4:	f04f 0100 	mov.w	r1, #0
 8002cd8:	f04f 0200 	mov.w	r2, #0
 8002cdc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ce0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002ce4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002ce8:	4689      	mov	r9, r1
 8002cea:	4692      	mov	sl, r2
 8002cec:	eb1b 0509 	adds.w	r5, fp, r9
 8002cf0:	eb4c 060a 	adc.w	r6, ip, sl
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	f04f 0200 	mov.w	r2, #0
 8002cfe:	f04f 0300 	mov.w	r3, #0
 8002d02:	f04f 0400 	mov.w	r4, #0
 8002d06:	0094      	lsls	r4, r2, #2
 8002d08:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002d0c:	008b      	lsls	r3, r1, #2
 8002d0e:	461a      	mov	r2, r3
 8002d10:	4623      	mov	r3, r4
 8002d12:	4628      	mov	r0, r5
 8002d14:	4631      	mov	r1, r6
 8002d16:	f7fd fab3 	bl	8000280 <__aeabi_uldivmod>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	460c      	mov	r4, r1
 8002d1e:	461a      	mov	r2, r3
 8002d20:	4b0e      	ldr	r3, [pc, #56]	; (8002d5c <UART_SetConfig+0x6f4>)
 8002d22:	fba3 1302 	umull	r1, r3, r3, r2
 8002d26:	095b      	lsrs	r3, r3, #5
 8002d28:	2164      	movs	r1, #100	; 0x64
 8002d2a:	fb01 f303 	mul.w	r3, r1, r3
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	011b      	lsls	r3, r3, #4
 8002d32:	3332      	adds	r3, #50	; 0x32
 8002d34:	4a09      	ldr	r2, [pc, #36]	; (8002d5c <UART_SetConfig+0x6f4>)
 8002d36:	fba2 2303 	umull	r2, r3, r2, r3
 8002d3a:	095b      	lsrs	r3, r3, #5
 8002d3c:	f003 020f 	and.w	r2, r3, #15
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4442      	add	r2, r8
 8002d46:	609a      	str	r2, [r3, #8]
}
 8002d48:	e7ff      	b.n	8002d4a <UART_SetConfig+0x6e2>
 8002d4a:	bf00      	nop
 8002d4c:	3714      	adds	r7, #20
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d54:	40011000 	.word	0x40011000
 8002d58:	40011400 	.word	0x40011400
 8002d5c:	51eb851f 	.word	0x51eb851f

08002d60 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8002d64:	4904      	ldr	r1, [pc, #16]	; (8002d78 <MX_FATFS_Init+0x18>)
 8002d66:	4805      	ldr	r0, [pc, #20]	; (8002d7c <MX_FATFS_Init+0x1c>)
 8002d68:	f000 f8b0 	bl	8002ecc <FATFS_LinkDriver>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	461a      	mov	r2, r3
 8002d70:	4b03      	ldr	r3, [pc, #12]	; (8002d80 <MX_FATFS_Init+0x20>)
 8002d72:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8002d74:	bf00      	nop
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	200009c4 	.word	0x200009c4
 8002d7c:	2000000c 	.word	0x2000000c
 8002d80:	200009c8 	.word	0x200009c8

08002d84 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8002d8e:	4b06      	ldr	r3, [pc, #24]	; (8002da8 <USER_initialize+0x24>)
 8002d90:	2201      	movs	r2, #1
 8002d92:	701a      	strb	r2, [r3, #0]
    return Stat;
 8002d94:	4b04      	ldr	r3, [pc, #16]	; (8002da8 <USER_initialize+0x24>)
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	370c      	adds	r7, #12
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	20000009 	.word	0x20000009

08002dac <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	4603      	mov	r3, r0
 8002db4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8002db6:	4b06      	ldr	r3, [pc, #24]	; (8002dd0 <USER_status+0x24>)
 8002db8:	2201      	movs	r2, #1
 8002dba:	701a      	strb	r2, [r3, #0]
    return Stat;
 8002dbc:	4b04      	ldr	r3, [pc, #16]	; (8002dd0 <USER_status+0x24>)
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	370c      	adds	r7, #12
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	20000009 	.word	0x20000009

08002dd4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b085      	sub	sp, #20
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	60b9      	str	r1, [r7, #8]
 8002ddc:	607a      	str	r2, [r7, #4]
 8002dde:	603b      	str	r3, [r7, #0]
 8002de0:	4603      	mov	r3, r0
 8002de2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8002de4:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3714      	adds	r7, #20
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr

08002df2 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{ 
 8002df2:	b480      	push	{r7}
 8002df4:	b085      	sub	sp, #20
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	607a      	str	r2, [r7, #4]
 8002dfc:	603b      	str	r3, [r7, #0]
 8002dfe:	4603      	mov	r3, r0
 8002e00:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8002e02:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3714      	adds	r7, #20
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b085      	sub	sp, #20
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	4603      	mov	r3, r0
 8002e18:	603a      	str	r2, [r7, #0]
 8002e1a:	71fb      	strb	r3, [r7, #7]
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	73fb      	strb	r3, [r7, #15]
    return res;
 8002e24:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3714      	adds	r7, #20
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
	...

08002e34 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b087      	sub	sp, #28
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	4613      	mov	r3, r2
 8002e40:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8002e42:	2301      	movs	r3, #1
 8002e44:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8002e46:	2300      	movs	r3, #0
 8002e48:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8002e4a:	4b1f      	ldr	r3, [pc, #124]	; (8002ec8 <FATFS_LinkDriverEx+0x94>)
 8002e4c:	7a5b      	ldrb	r3, [r3, #9]
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d131      	bne.n	8002eb8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8002e54:	4b1c      	ldr	r3, [pc, #112]	; (8002ec8 <FATFS_LinkDriverEx+0x94>)
 8002e56:	7a5b      	ldrb	r3, [r3, #9]
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	4b1a      	ldr	r3, [pc, #104]	; (8002ec8 <FATFS_LinkDriverEx+0x94>)
 8002e5e:	2100      	movs	r1, #0
 8002e60:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8002e62:	4b19      	ldr	r3, [pc, #100]	; (8002ec8 <FATFS_LinkDriverEx+0x94>)
 8002e64:	7a5b      	ldrb	r3, [r3, #9]
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	4a17      	ldr	r2, [pc, #92]	; (8002ec8 <FATFS_LinkDriverEx+0x94>)
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	4413      	add	r3, r2
 8002e6e:	68fa      	ldr	r2, [r7, #12]
 8002e70:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8002e72:	4b15      	ldr	r3, [pc, #84]	; (8002ec8 <FATFS_LinkDriverEx+0x94>)
 8002e74:	7a5b      	ldrb	r3, [r3, #9]
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	461a      	mov	r2, r3
 8002e7a:	4b13      	ldr	r3, [pc, #76]	; (8002ec8 <FATFS_LinkDriverEx+0x94>)
 8002e7c:	4413      	add	r3, r2
 8002e7e:	79fa      	ldrb	r2, [r7, #7]
 8002e80:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8002e82:	4b11      	ldr	r3, [pc, #68]	; (8002ec8 <FATFS_LinkDriverEx+0x94>)
 8002e84:	7a5b      	ldrb	r3, [r3, #9]
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	1c5a      	adds	r2, r3, #1
 8002e8a:	b2d1      	uxtb	r1, r2
 8002e8c:	4a0e      	ldr	r2, [pc, #56]	; (8002ec8 <FATFS_LinkDriverEx+0x94>)
 8002e8e:	7251      	strb	r1, [r2, #9]
 8002e90:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8002e92:	7dbb      	ldrb	r3, [r7, #22]
 8002e94:	3330      	adds	r3, #48	; 0x30
 8002e96:	b2da      	uxtb	r2, r3
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	223a      	movs	r2, #58	; 0x3a
 8002ea2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	3302      	adds	r3, #2
 8002ea8:	222f      	movs	r2, #47	; 0x2f
 8002eaa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	3303      	adds	r3, #3
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8002eb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	371c      	adds	r7, #28
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	200000a4 	.word	0x200000a4

08002ecc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	6839      	ldr	r1, [r7, #0]
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f7ff ffaa 	bl	8002e34 <FATFS_LinkDriverEx>
 8002ee0:	4603      	mov	r3, r0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3708      	adds	r7, #8
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
	...

08002eec <__errno>:
 8002eec:	4b01      	ldr	r3, [pc, #4]	; (8002ef4 <__errno+0x8>)
 8002eee:	6818      	ldr	r0, [r3, #0]
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop
 8002ef4:	20000020 	.word	0x20000020

08002ef8 <__libc_init_array>:
 8002ef8:	b570      	push	{r4, r5, r6, lr}
 8002efa:	4e0d      	ldr	r6, [pc, #52]	; (8002f30 <__libc_init_array+0x38>)
 8002efc:	4c0d      	ldr	r4, [pc, #52]	; (8002f34 <__libc_init_array+0x3c>)
 8002efe:	1ba4      	subs	r4, r4, r6
 8002f00:	10a4      	asrs	r4, r4, #2
 8002f02:	2500      	movs	r5, #0
 8002f04:	42a5      	cmp	r5, r4
 8002f06:	d109      	bne.n	8002f1c <__libc_init_array+0x24>
 8002f08:	4e0b      	ldr	r6, [pc, #44]	; (8002f38 <__libc_init_array+0x40>)
 8002f0a:	4c0c      	ldr	r4, [pc, #48]	; (8002f3c <__libc_init_array+0x44>)
 8002f0c:	f000 fc26 	bl	800375c <_init>
 8002f10:	1ba4      	subs	r4, r4, r6
 8002f12:	10a4      	asrs	r4, r4, #2
 8002f14:	2500      	movs	r5, #0
 8002f16:	42a5      	cmp	r5, r4
 8002f18:	d105      	bne.n	8002f26 <__libc_init_array+0x2e>
 8002f1a:	bd70      	pop	{r4, r5, r6, pc}
 8002f1c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f20:	4798      	blx	r3
 8002f22:	3501      	adds	r5, #1
 8002f24:	e7ee      	b.n	8002f04 <__libc_init_array+0xc>
 8002f26:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f2a:	4798      	blx	r3
 8002f2c:	3501      	adds	r5, #1
 8002f2e:	e7f2      	b.n	8002f16 <__libc_init_array+0x1e>
 8002f30:	0800381c 	.word	0x0800381c
 8002f34:	0800381c 	.word	0x0800381c
 8002f38:	0800381c 	.word	0x0800381c
 8002f3c:	08003820 	.word	0x08003820

08002f40 <memset>:
 8002f40:	4402      	add	r2, r0
 8002f42:	4603      	mov	r3, r0
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d100      	bne.n	8002f4a <memset+0xa>
 8002f48:	4770      	bx	lr
 8002f4a:	f803 1b01 	strb.w	r1, [r3], #1
 8002f4e:	e7f9      	b.n	8002f44 <memset+0x4>

08002f50 <siprintf>:
 8002f50:	b40e      	push	{r1, r2, r3}
 8002f52:	b500      	push	{lr}
 8002f54:	b09c      	sub	sp, #112	; 0x70
 8002f56:	ab1d      	add	r3, sp, #116	; 0x74
 8002f58:	9002      	str	r0, [sp, #8]
 8002f5a:	9006      	str	r0, [sp, #24]
 8002f5c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002f60:	4809      	ldr	r0, [pc, #36]	; (8002f88 <siprintf+0x38>)
 8002f62:	9107      	str	r1, [sp, #28]
 8002f64:	9104      	str	r1, [sp, #16]
 8002f66:	4909      	ldr	r1, [pc, #36]	; (8002f8c <siprintf+0x3c>)
 8002f68:	f853 2b04 	ldr.w	r2, [r3], #4
 8002f6c:	9105      	str	r1, [sp, #20]
 8002f6e:	6800      	ldr	r0, [r0, #0]
 8002f70:	9301      	str	r3, [sp, #4]
 8002f72:	a902      	add	r1, sp, #8
 8002f74:	f000 f866 	bl	8003044 <_svfiprintf_r>
 8002f78:	9b02      	ldr	r3, [sp, #8]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	701a      	strb	r2, [r3, #0]
 8002f7e:	b01c      	add	sp, #112	; 0x70
 8002f80:	f85d eb04 	ldr.w	lr, [sp], #4
 8002f84:	b003      	add	sp, #12
 8002f86:	4770      	bx	lr
 8002f88:	20000020 	.word	0x20000020
 8002f8c:	ffff0208 	.word	0xffff0208

08002f90 <__ssputs_r>:
 8002f90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f94:	688e      	ldr	r6, [r1, #8]
 8002f96:	429e      	cmp	r6, r3
 8002f98:	4682      	mov	sl, r0
 8002f9a:	460c      	mov	r4, r1
 8002f9c:	4690      	mov	r8, r2
 8002f9e:	4699      	mov	r9, r3
 8002fa0:	d837      	bhi.n	8003012 <__ssputs_r+0x82>
 8002fa2:	898a      	ldrh	r2, [r1, #12]
 8002fa4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002fa8:	d031      	beq.n	800300e <__ssputs_r+0x7e>
 8002faa:	6825      	ldr	r5, [r4, #0]
 8002fac:	6909      	ldr	r1, [r1, #16]
 8002fae:	1a6f      	subs	r7, r5, r1
 8002fb0:	6965      	ldr	r5, [r4, #20]
 8002fb2:	2302      	movs	r3, #2
 8002fb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002fb8:	fb95 f5f3 	sdiv	r5, r5, r3
 8002fbc:	f109 0301 	add.w	r3, r9, #1
 8002fc0:	443b      	add	r3, r7
 8002fc2:	429d      	cmp	r5, r3
 8002fc4:	bf38      	it	cc
 8002fc6:	461d      	movcc	r5, r3
 8002fc8:	0553      	lsls	r3, r2, #21
 8002fca:	d530      	bpl.n	800302e <__ssputs_r+0x9e>
 8002fcc:	4629      	mov	r1, r5
 8002fce:	f000 fb2b 	bl	8003628 <_malloc_r>
 8002fd2:	4606      	mov	r6, r0
 8002fd4:	b950      	cbnz	r0, 8002fec <__ssputs_r+0x5c>
 8002fd6:	230c      	movs	r3, #12
 8002fd8:	f8ca 3000 	str.w	r3, [sl]
 8002fdc:	89a3      	ldrh	r3, [r4, #12]
 8002fde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fe2:	81a3      	strh	r3, [r4, #12]
 8002fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8002fe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002fec:	463a      	mov	r2, r7
 8002fee:	6921      	ldr	r1, [r4, #16]
 8002ff0:	f000 faa8 	bl	8003544 <memcpy>
 8002ff4:	89a3      	ldrh	r3, [r4, #12]
 8002ff6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002ffa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ffe:	81a3      	strh	r3, [r4, #12]
 8003000:	6126      	str	r6, [r4, #16]
 8003002:	6165      	str	r5, [r4, #20]
 8003004:	443e      	add	r6, r7
 8003006:	1bed      	subs	r5, r5, r7
 8003008:	6026      	str	r6, [r4, #0]
 800300a:	60a5      	str	r5, [r4, #8]
 800300c:	464e      	mov	r6, r9
 800300e:	454e      	cmp	r6, r9
 8003010:	d900      	bls.n	8003014 <__ssputs_r+0x84>
 8003012:	464e      	mov	r6, r9
 8003014:	4632      	mov	r2, r6
 8003016:	4641      	mov	r1, r8
 8003018:	6820      	ldr	r0, [r4, #0]
 800301a:	f000 fa9e 	bl	800355a <memmove>
 800301e:	68a3      	ldr	r3, [r4, #8]
 8003020:	1b9b      	subs	r3, r3, r6
 8003022:	60a3      	str	r3, [r4, #8]
 8003024:	6823      	ldr	r3, [r4, #0]
 8003026:	441e      	add	r6, r3
 8003028:	6026      	str	r6, [r4, #0]
 800302a:	2000      	movs	r0, #0
 800302c:	e7dc      	b.n	8002fe8 <__ssputs_r+0x58>
 800302e:	462a      	mov	r2, r5
 8003030:	f000 fb54 	bl	80036dc <_realloc_r>
 8003034:	4606      	mov	r6, r0
 8003036:	2800      	cmp	r0, #0
 8003038:	d1e2      	bne.n	8003000 <__ssputs_r+0x70>
 800303a:	6921      	ldr	r1, [r4, #16]
 800303c:	4650      	mov	r0, sl
 800303e:	f000 faa5 	bl	800358c <_free_r>
 8003042:	e7c8      	b.n	8002fd6 <__ssputs_r+0x46>

08003044 <_svfiprintf_r>:
 8003044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003048:	461d      	mov	r5, r3
 800304a:	898b      	ldrh	r3, [r1, #12]
 800304c:	061f      	lsls	r7, r3, #24
 800304e:	b09d      	sub	sp, #116	; 0x74
 8003050:	4680      	mov	r8, r0
 8003052:	460c      	mov	r4, r1
 8003054:	4616      	mov	r6, r2
 8003056:	d50f      	bpl.n	8003078 <_svfiprintf_r+0x34>
 8003058:	690b      	ldr	r3, [r1, #16]
 800305a:	b96b      	cbnz	r3, 8003078 <_svfiprintf_r+0x34>
 800305c:	2140      	movs	r1, #64	; 0x40
 800305e:	f000 fae3 	bl	8003628 <_malloc_r>
 8003062:	6020      	str	r0, [r4, #0]
 8003064:	6120      	str	r0, [r4, #16]
 8003066:	b928      	cbnz	r0, 8003074 <_svfiprintf_r+0x30>
 8003068:	230c      	movs	r3, #12
 800306a:	f8c8 3000 	str.w	r3, [r8]
 800306e:	f04f 30ff 	mov.w	r0, #4294967295
 8003072:	e0c8      	b.n	8003206 <_svfiprintf_r+0x1c2>
 8003074:	2340      	movs	r3, #64	; 0x40
 8003076:	6163      	str	r3, [r4, #20]
 8003078:	2300      	movs	r3, #0
 800307a:	9309      	str	r3, [sp, #36]	; 0x24
 800307c:	2320      	movs	r3, #32
 800307e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003082:	2330      	movs	r3, #48	; 0x30
 8003084:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003088:	9503      	str	r5, [sp, #12]
 800308a:	f04f 0b01 	mov.w	fp, #1
 800308e:	4637      	mov	r7, r6
 8003090:	463d      	mov	r5, r7
 8003092:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003096:	b10b      	cbz	r3, 800309c <_svfiprintf_r+0x58>
 8003098:	2b25      	cmp	r3, #37	; 0x25
 800309a:	d13e      	bne.n	800311a <_svfiprintf_r+0xd6>
 800309c:	ebb7 0a06 	subs.w	sl, r7, r6
 80030a0:	d00b      	beq.n	80030ba <_svfiprintf_r+0x76>
 80030a2:	4653      	mov	r3, sl
 80030a4:	4632      	mov	r2, r6
 80030a6:	4621      	mov	r1, r4
 80030a8:	4640      	mov	r0, r8
 80030aa:	f7ff ff71 	bl	8002f90 <__ssputs_r>
 80030ae:	3001      	adds	r0, #1
 80030b0:	f000 80a4 	beq.w	80031fc <_svfiprintf_r+0x1b8>
 80030b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80030b6:	4453      	add	r3, sl
 80030b8:	9309      	str	r3, [sp, #36]	; 0x24
 80030ba:	783b      	ldrb	r3, [r7, #0]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	f000 809d 	beq.w	80031fc <_svfiprintf_r+0x1b8>
 80030c2:	2300      	movs	r3, #0
 80030c4:	f04f 32ff 	mov.w	r2, #4294967295
 80030c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80030cc:	9304      	str	r3, [sp, #16]
 80030ce:	9307      	str	r3, [sp, #28]
 80030d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80030d4:	931a      	str	r3, [sp, #104]	; 0x68
 80030d6:	462f      	mov	r7, r5
 80030d8:	2205      	movs	r2, #5
 80030da:	f817 1b01 	ldrb.w	r1, [r7], #1
 80030de:	4850      	ldr	r0, [pc, #320]	; (8003220 <_svfiprintf_r+0x1dc>)
 80030e0:	f7fd f87e 	bl	80001e0 <memchr>
 80030e4:	9b04      	ldr	r3, [sp, #16]
 80030e6:	b9d0      	cbnz	r0, 800311e <_svfiprintf_r+0xda>
 80030e8:	06d9      	lsls	r1, r3, #27
 80030ea:	bf44      	itt	mi
 80030ec:	2220      	movmi	r2, #32
 80030ee:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80030f2:	071a      	lsls	r2, r3, #28
 80030f4:	bf44      	itt	mi
 80030f6:	222b      	movmi	r2, #43	; 0x2b
 80030f8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80030fc:	782a      	ldrb	r2, [r5, #0]
 80030fe:	2a2a      	cmp	r2, #42	; 0x2a
 8003100:	d015      	beq.n	800312e <_svfiprintf_r+0xea>
 8003102:	9a07      	ldr	r2, [sp, #28]
 8003104:	462f      	mov	r7, r5
 8003106:	2000      	movs	r0, #0
 8003108:	250a      	movs	r5, #10
 800310a:	4639      	mov	r1, r7
 800310c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003110:	3b30      	subs	r3, #48	; 0x30
 8003112:	2b09      	cmp	r3, #9
 8003114:	d94d      	bls.n	80031b2 <_svfiprintf_r+0x16e>
 8003116:	b1b8      	cbz	r0, 8003148 <_svfiprintf_r+0x104>
 8003118:	e00f      	b.n	800313a <_svfiprintf_r+0xf6>
 800311a:	462f      	mov	r7, r5
 800311c:	e7b8      	b.n	8003090 <_svfiprintf_r+0x4c>
 800311e:	4a40      	ldr	r2, [pc, #256]	; (8003220 <_svfiprintf_r+0x1dc>)
 8003120:	1a80      	subs	r0, r0, r2
 8003122:	fa0b f000 	lsl.w	r0, fp, r0
 8003126:	4318      	orrs	r0, r3
 8003128:	9004      	str	r0, [sp, #16]
 800312a:	463d      	mov	r5, r7
 800312c:	e7d3      	b.n	80030d6 <_svfiprintf_r+0x92>
 800312e:	9a03      	ldr	r2, [sp, #12]
 8003130:	1d11      	adds	r1, r2, #4
 8003132:	6812      	ldr	r2, [r2, #0]
 8003134:	9103      	str	r1, [sp, #12]
 8003136:	2a00      	cmp	r2, #0
 8003138:	db01      	blt.n	800313e <_svfiprintf_r+0xfa>
 800313a:	9207      	str	r2, [sp, #28]
 800313c:	e004      	b.n	8003148 <_svfiprintf_r+0x104>
 800313e:	4252      	negs	r2, r2
 8003140:	f043 0302 	orr.w	r3, r3, #2
 8003144:	9207      	str	r2, [sp, #28]
 8003146:	9304      	str	r3, [sp, #16]
 8003148:	783b      	ldrb	r3, [r7, #0]
 800314a:	2b2e      	cmp	r3, #46	; 0x2e
 800314c:	d10c      	bne.n	8003168 <_svfiprintf_r+0x124>
 800314e:	787b      	ldrb	r3, [r7, #1]
 8003150:	2b2a      	cmp	r3, #42	; 0x2a
 8003152:	d133      	bne.n	80031bc <_svfiprintf_r+0x178>
 8003154:	9b03      	ldr	r3, [sp, #12]
 8003156:	1d1a      	adds	r2, r3, #4
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	9203      	str	r2, [sp, #12]
 800315c:	2b00      	cmp	r3, #0
 800315e:	bfb8      	it	lt
 8003160:	f04f 33ff 	movlt.w	r3, #4294967295
 8003164:	3702      	adds	r7, #2
 8003166:	9305      	str	r3, [sp, #20]
 8003168:	4d2e      	ldr	r5, [pc, #184]	; (8003224 <_svfiprintf_r+0x1e0>)
 800316a:	7839      	ldrb	r1, [r7, #0]
 800316c:	2203      	movs	r2, #3
 800316e:	4628      	mov	r0, r5
 8003170:	f7fd f836 	bl	80001e0 <memchr>
 8003174:	b138      	cbz	r0, 8003186 <_svfiprintf_r+0x142>
 8003176:	2340      	movs	r3, #64	; 0x40
 8003178:	1b40      	subs	r0, r0, r5
 800317a:	fa03 f000 	lsl.w	r0, r3, r0
 800317e:	9b04      	ldr	r3, [sp, #16]
 8003180:	4303      	orrs	r3, r0
 8003182:	3701      	adds	r7, #1
 8003184:	9304      	str	r3, [sp, #16]
 8003186:	7839      	ldrb	r1, [r7, #0]
 8003188:	4827      	ldr	r0, [pc, #156]	; (8003228 <_svfiprintf_r+0x1e4>)
 800318a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800318e:	2206      	movs	r2, #6
 8003190:	1c7e      	adds	r6, r7, #1
 8003192:	f7fd f825 	bl	80001e0 <memchr>
 8003196:	2800      	cmp	r0, #0
 8003198:	d038      	beq.n	800320c <_svfiprintf_r+0x1c8>
 800319a:	4b24      	ldr	r3, [pc, #144]	; (800322c <_svfiprintf_r+0x1e8>)
 800319c:	bb13      	cbnz	r3, 80031e4 <_svfiprintf_r+0x1a0>
 800319e:	9b03      	ldr	r3, [sp, #12]
 80031a0:	3307      	adds	r3, #7
 80031a2:	f023 0307 	bic.w	r3, r3, #7
 80031a6:	3308      	adds	r3, #8
 80031a8:	9303      	str	r3, [sp, #12]
 80031aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80031ac:	444b      	add	r3, r9
 80031ae:	9309      	str	r3, [sp, #36]	; 0x24
 80031b0:	e76d      	b.n	800308e <_svfiprintf_r+0x4a>
 80031b2:	fb05 3202 	mla	r2, r5, r2, r3
 80031b6:	2001      	movs	r0, #1
 80031b8:	460f      	mov	r7, r1
 80031ba:	e7a6      	b.n	800310a <_svfiprintf_r+0xc6>
 80031bc:	2300      	movs	r3, #0
 80031be:	3701      	adds	r7, #1
 80031c0:	9305      	str	r3, [sp, #20]
 80031c2:	4619      	mov	r1, r3
 80031c4:	250a      	movs	r5, #10
 80031c6:	4638      	mov	r0, r7
 80031c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80031cc:	3a30      	subs	r2, #48	; 0x30
 80031ce:	2a09      	cmp	r2, #9
 80031d0:	d903      	bls.n	80031da <_svfiprintf_r+0x196>
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d0c8      	beq.n	8003168 <_svfiprintf_r+0x124>
 80031d6:	9105      	str	r1, [sp, #20]
 80031d8:	e7c6      	b.n	8003168 <_svfiprintf_r+0x124>
 80031da:	fb05 2101 	mla	r1, r5, r1, r2
 80031de:	2301      	movs	r3, #1
 80031e0:	4607      	mov	r7, r0
 80031e2:	e7f0      	b.n	80031c6 <_svfiprintf_r+0x182>
 80031e4:	ab03      	add	r3, sp, #12
 80031e6:	9300      	str	r3, [sp, #0]
 80031e8:	4622      	mov	r2, r4
 80031ea:	4b11      	ldr	r3, [pc, #68]	; (8003230 <_svfiprintf_r+0x1ec>)
 80031ec:	a904      	add	r1, sp, #16
 80031ee:	4640      	mov	r0, r8
 80031f0:	f3af 8000 	nop.w
 80031f4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80031f8:	4681      	mov	r9, r0
 80031fa:	d1d6      	bne.n	80031aa <_svfiprintf_r+0x166>
 80031fc:	89a3      	ldrh	r3, [r4, #12]
 80031fe:	065b      	lsls	r3, r3, #25
 8003200:	f53f af35 	bmi.w	800306e <_svfiprintf_r+0x2a>
 8003204:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003206:	b01d      	add	sp, #116	; 0x74
 8003208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800320c:	ab03      	add	r3, sp, #12
 800320e:	9300      	str	r3, [sp, #0]
 8003210:	4622      	mov	r2, r4
 8003212:	4b07      	ldr	r3, [pc, #28]	; (8003230 <_svfiprintf_r+0x1ec>)
 8003214:	a904      	add	r1, sp, #16
 8003216:	4640      	mov	r0, r8
 8003218:	f000 f882 	bl	8003320 <_printf_i>
 800321c:	e7ea      	b.n	80031f4 <_svfiprintf_r+0x1b0>
 800321e:	bf00      	nop
 8003220:	080037e0 	.word	0x080037e0
 8003224:	080037e6 	.word	0x080037e6
 8003228:	080037ea 	.word	0x080037ea
 800322c:	00000000 	.word	0x00000000
 8003230:	08002f91 	.word	0x08002f91

08003234 <_printf_common>:
 8003234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003238:	4691      	mov	r9, r2
 800323a:	461f      	mov	r7, r3
 800323c:	688a      	ldr	r2, [r1, #8]
 800323e:	690b      	ldr	r3, [r1, #16]
 8003240:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003244:	4293      	cmp	r3, r2
 8003246:	bfb8      	it	lt
 8003248:	4613      	movlt	r3, r2
 800324a:	f8c9 3000 	str.w	r3, [r9]
 800324e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003252:	4606      	mov	r6, r0
 8003254:	460c      	mov	r4, r1
 8003256:	b112      	cbz	r2, 800325e <_printf_common+0x2a>
 8003258:	3301      	adds	r3, #1
 800325a:	f8c9 3000 	str.w	r3, [r9]
 800325e:	6823      	ldr	r3, [r4, #0]
 8003260:	0699      	lsls	r1, r3, #26
 8003262:	bf42      	ittt	mi
 8003264:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003268:	3302      	addmi	r3, #2
 800326a:	f8c9 3000 	strmi.w	r3, [r9]
 800326e:	6825      	ldr	r5, [r4, #0]
 8003270:	f015 0506 	ands.w	r5, r5, #6
 8003274:	d107      	bne.n	8003286 <_printf_common+0x52>
 8003276:	f104 0a19 	add.w	sl, r4, #25
 800327a:	68e3      	ldr	r3, [r4, #12]
 800327c:	f8d9 2000 	ldr.w	r2, [r9]
 8003280:	1a9b      	subs	r3, r3, r2
 8003282:	42ab      	cmp	r3, r5
 8003284:	dc28      	bgt.n	80032d8 <_printf_common+0xa4>
 8003286:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800328a:	6822      	ldr	r2, [r4, #0]
 800328c:	3300      	adds	r3, #0
 800328e:	bf18      	it	ne
 8003290:	2301      	movne	r3, #1
 8003292:	0692      	lsls	r2, r2, #26
 8003294:	d42d      	bmi.n	80032f2 <_printf_common+0xbe>
 8003296:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800329a:	4639      	mov	r1, r7
 800329c:	4630      	mov	r0, r6
 800329e:	47c0      	blx	r8
 80032a0:	3001      	adds	r0, #1
 80032a2:	d020      	beq.n	80032e6 <_printf_common+0xb2>
 80032a4:	6823      	ldr	r3, [r4, #0]
 80032a6:	68e5      	ldr	r5, [r4, #12]
 80032a8:	f8d9 2000 	ldr.w	r2, [r9]
 80032ac:	f003 0306 	and.w	r3, r3, #6
 80032b0:	2b04      	cmp	r3, #4
 80032b2:	bf08      	it	eq
 80032b4:	1aad      	subeq	r5, r5, r2
 80032b6:	68a3      	ldr	r3, [r4, #8]
 80032b8:	6922      	ldr	r2, [r4, #16]
 80032ba:	bf0c      	ite	eq
 80032bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80032c0:	2500      	movne	r5, #0
 80032c2:	4293      	cmp	r3, r2
 80032c4:	bfc4      	itt	gt
 80032c6:	1a9b      	subgt	r3, r3, r2
 80032c8:	18ed      	addgt	r5, r5, r3
 80032ca:	f04f 0900 	mov.w	r9, #0
 80032ce:	341a      	adds	r4, #26
 80032d0:	454d      	cmp	r5, r9
 80032d2:	d11a      	bne.n	800330a <_printf_common+0xd6>
 80032d4:	2000      	movs	r0, #0
 80032d6:	e008      	b.n	80032ea <_printf_common+0xb6>
 80032d8:	2301      	movs	r3, #1
 80032da:	4652      	mov	r2, sl
 80032dc:	4639      	mov	r1, r7
 80032de:	4630      	mov	r0, r6
 80032e0:	47c0      	blx	r8
 80032e2:	3001      	adds	r0, #1
 80032e4:	d103      	bne.n	80032ee <_printf_common+0xba>
 80032e6:	f04f 30ff 	mov.w	r0, #4294967295
 80032ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032ee:	3501      	adds	r5, #1
 80032f0:	e7c3      	b.n	800327a <_printf_common+0x46>
 80032f2:	18e1      	adds	r1, r4, r3
 80032f4:	1c5a      	adds	r2, r3, #1
 80032f6:	2030      	movs	r0, #48	; 0x30
 80032f8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80032fc:	4422      	add	r2, r4
 80032fe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003302:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003306:	3302      	adds	r3, #2
 8003308:	e7c5      	b.n	8003296 <_printf_common+0x62>
 800330a:	2301      	movs	r3, #1
 800330c:	4622      	mov	r2, r4
 800330e:	4639      	mov	r1, r7
 8003310:	4630      	mov	r0, r6
 8003312:	47c0      	blx	r8
 8003314:	3001      	adds	r0, #1
 8003316:	d0e6      	beq.n	80032e6 <_printf_common+0xb2>
 8003318:	f109 0901 	add.w	r9, r9, #1
 800331c:	e7d8      	b.n	80032d0 <_printf_common+0x9c>
	...

08003320 <_printf_i>:
 8003320:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003324:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003328:	460c      	mov	r4, r1
 800332a:	7e09      	ldrb	r1, [r1, #24]
 800332c:	b085      	sub	sp, #20
 800332e:	296e      	cmp	r1, #110	; 0x6e
 8003330:	4617      	mov	r7, r2
 8003332:	4606      	mov	r6, r0
 8003334:	4698      	mov	r8, r3
 8003336:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003338:	f000 80b3 	beq.w	80034a2 <_printf_i+0x182>
 800333c:	d822      	bhi.n	8003384 <_printf_i+0x64>
 800333e:	2963      	cmp	r1, #99	; 0x63
 8003340:	d036      	beq.n	80033b0 <_printf_i+0x90>
 8003342:	d80a      	bhi.n	800335a <_printf_i+0x3a>
 8003344:	2900      	cmp	r1, #0
 8003346:	f000 80b9 	beq.w	80034bc <_printf_i+0x19c>
 800334a:	2958      	cmp	r1, #88	; 0x58
 800334c:	f000 8083 	beq.w	8003456 <_printf_i+0x136>
 8003350:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003354:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003358:	e032      	b.n	80033c0 <_printf_i+0xa0>
 800335a:	2964      	cmp	r1, #100	; 0x64
 800335c:	d001      	beq.n	8003362 <_printf_i+0x42>
 800335e:	2969      	cmp	r1, #105	; 0x69
 8003360:	d1f6      	bne.n	8003350 <_printf_i+0x30>
 8003362:	6820      	ldr	r0, [r4, #0]
 8003364:	6813      	ldr	r3, [r2, #0]
 8003366:	0605      	lsls	r5, r0, #24
 8003368:	f103 0104 	add.w	r1, r3, #4
 800336c:	d52a      	bpl.n	80033c4 <_printf_i+0xa4>
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	6011      	str	r1, [r2, #0]
 8003372:	2b00      	cmp	r3, #0
 8003374:	da03      	bge.n	800337e <_printf_i+0x5e>
 8003376:	222d      	movs	r2, #45	; 0x2d
 8003378:	425b      	negs	r3, r3
 800337a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800337e:	486f      	ldr	r0, [pc, #444]	; (800353c <_printf_i+0x21c>)
 8003380:	220a      	movs	r2, #10
 8003382:	e039      	b.n	80033f8 <_printf_i+0xd8>
 8003384:	2973      	cmp	r1, #115	; 0x73
 8003386:	f000 809d 	beq.w	80034c4 <_printf_i+0x1a4>
 800338a:	d808      	bhi.n	800339e <_printf_i+0x7e>
 800338c:	296f      	cmp	r1, #111	; 0x6f
 800338e:	d020      	beq.n	80033d2 <_printf_i+0xb2>
 8003390:	2970      	cmp	r1, #112	; 0x70
 8003392:	d1dd      	bne.n	8003350 <_printf_i+0x30>
 8003394:	6823      	ldr	r3, [r4, #0]
 8003396:	f043 0320 	orr.w	r3, r3, #32
 800339a:	6023      	str	r3, [r4, #0]
 800339c:	e003      	b.n	80033a6 <_printf_i+0x86>
 800339e:	2975      	cmp	r1, #117	; 0x75
 80033a0:	d017      	beq.n	80033d2 <_printf_i+0xb2>
 80033a2:	2978      	cmp	r1, #120	; 0x78
 80033a4:	d1d4      	bne.n	8003350 <_printf_i+0x30>
 80033a6:	2378      	movs	r3, #120	; 0x78
 80033a8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80033ac:	4864      	ldr	r0, [pc, #400]	; (8003540 <_printf_i+0x220>)
 80033ae:	e055      	b.n	800345c <_printf_i+0x13c>
 80033b0:	6813      	ldr	r3, [r2, #0]
 80033b2:	1d19      	adds	r1, r3, #4
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	6011      	str	r1, [r2, #0]
 80033b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80033bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80033c0:	2301      	movs	r3, #1
 80033c2:	e08c      	b.n	80034de <_printf_i+0x1be>
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	6011      	str	r1, [r2, #0]
 80033c8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80033cc:	bf18      	it	ne
 80033ce:	b21b      	sxthne	r3, r3
 80033d0:	e7cf      	b.n	8003372 <_printf_i+0x52>
 80033d2:	6813      	ldr	r3, [r2, #0]
 80033d4:	6825      	ldr	r5, [r4, #0]
 80033d6:	1d18      	adds	r0, r3, #4
 80033d8:	6010      	str	r0, [r2, #0]
 80033da:	0628      	lsls	r0, r5, #24
 80033dc:	d501      	bpl.n	80033e2 <_printf_i+0xc2>
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	e002      	b.n	80033e8 <_printf_i+0xc8>
 80033e2:	0668      	lsls	r0, r5, #25
 80033e4:	d5fb      	bpl.n	80033de <_printf_i+0xbe>
 80033e6:	881b      	ldrh	r3, [r3, #0]
 80033e8:	4854      	ldr	r0, [pc, #336]	; (800353c <_printf_i+0x21c>)
 80033ea:	296f      	cmp	r1, #111	; 0x6f
 80033ec:	bf14      	ite	ne
 80033ee:	220a      	movne	r2, #10
 80033f0:	2208      	moveq	r2, #8
 80033f2:	2100      	movs	r1, #0
 80033f4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80033f8:	6865      	ldr	r5, [r4, #4]
 80033fa:	60a5      	str	r5, [r4, #8]
 80033fc:	2d00      	cmp	r5, #0
 80033fe:	f2c0 8095 	blt.w	800352c <_printf_i+0x20c>
 8003402:	6821      	ldr	r1, [r4, #0]
 8003404:	f021 0104 	bic.w	r1, r1, #4
 8003408:	6021      	str	r1, [r4, #0]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d13d      	bne.n	800348a <_printf_i+0x16a>
 800340e:	2d00      	cmp	r5, #0
 8003410:	f040 808e 	bne.w	8003530 <_printf_i+0x210>
 8003414:	4665      	mov	r5, ip
 8003416:	2a08      	cmp	r2, #8
 8003418:	d10b      	bne.n	8003432 <_printf_i+0x112>
 800341a:	6823      	ldr	r3, [r4, #0]
 800341c:	07db      	lsls	r3, r3, #31
 800341e:	d508      	bpl.n	8003432 <_printf_i+0x112>
 8003420:	6923      	ldr	r3, [r4, #16]
 8003422:	6862      	ldr	r2, [r4, #4]
 8003424:	429a      	cmp	r2, r3
 8003426:	bfde      	ittt	le
 8003428:	2330      	movle	r3, #48	; 0x30
 800342a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800342e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003432:	ebac 0305 	sub.w	r3, ip, r5
 8003436:	6123      	str	r3, [r4, #16]
 8003438:	f8cd 8000 	str.w	r8, [sp]
 800343c:	463b      	mov	r3, r7
 800343e:	aa03      	add	r2, sp, #12
 8003440:	4621      	mov	r1, r4
 8003442:	4630      	mov	r0, r6
 8003444:	f7ff fef6 	bl	8003234 <_printf_common>
 8003448:	3001      	adds	r0, #1
 800344a:	d14d      	bne.n	80034e8 <_printf_i+0x1c8>
 800344c:	f04f 30ff 	mov.w	r0, #4294967295
 8003450:	b005      	add	sp, #20
 8003452:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003456:	4839      	ldr	r0, [pc, #228]	; (800353c <_printf_i+0x21c>)
 8003458:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800345c:	6813      	ldr	r3, [r2, #0]
 800345e:	6821      	ldr	r1, [r4, #0]
 8003460:	1d1d      	adds	r5, r3, #4
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	6015      	str	r5, [r2, #0]
 8003466:	060a      	lsls	r2, r1, #24
 8003468:	d50b      	bpl.n	8003482 <_printf_i+0x162>
 800346a:	07ca      	lsls	r2, r1, #31
 800346c:	bf44      	itt	mi
 800346e:	f041 0120 	orrmi.w	r1, r1, #32
 8003472:	6021      	strmi	r1, [r4, #0]
 8003474:	b91b      	cbnz	r3, 800347e <_printf_i+0x15e>
 8003476:	6822      	ldr	r2, [r4, #0]
 8003478:	f022 0220 	bic.w	r2, r2, #32
 800347c:	6022      	str	r2, [r4, #0]
 800347e:	2210      	movs	r2, #16
 8003480:	e7b7      	b.n	80033f2 <_printf_i+0xd2>
 8003482:	064d      	lsls	r5, r1, #25
 8003484:	bf48      	it	mi
 8003486:	b29b      	uxthmi	r3, r3
 8003488:	e7ef      	b.n	800346a <_printf_i+0x14a>
 800348a:	4665      	mov	r5, ip
 800348c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003490:	fb02 3311 	mls	r3, r2, r1, r3
 8003494:	5cc3      	ldrb	r3, [r0, r3]
 8003496:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800349a:	460b      	mov	r3, r1
 800349c:	2900      	cmp	r1, #0
 800349e:	d1f5      	bne.n	800348c <_printf_i+0x16c>
 80034a0:	e7b9      	b.n	8003416 <_printf_i+0xf6>
 80034a2:	6813      	ldr	r3, [r2, #0]
 80034a4:	6825      	ldr	r5, [r4, #0]
 80034a6:	6961      	ldr	r1, [r4, #20]
 80034a8:	1d18      	adds	r0, r3, #4
 80034aa:	6010      	str	r0, [r2, #0]
 80034ac:	0628      	lsls	r0, r5, #24
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	d501      	bpl.n	80034b6 <_printf_i+0x196>
 80034b2:	6019      	str	r1, [r3, #0]
 80034b4:	e002      	b.n	80034bc <_printf_i+0x19c>
 80034b6:	066a      	lsls	r2, r5, #25
 80034b8:	d5fb      	bpl.n	80034b2 <_printf_i+0x192>
 80034ba:	8019      	strh	r1, [r3, #0]
 80034bc:	2300      	movs	r3, #0
 80034be:	6123      	str	r3, [r4, #16]
 80034c0:	4665      	mov	r5, ip
 80034c2:	e7b9      	b.n	8003438 <_printf_i+0x118>
 80034c4:	6813      	ldr	r3, [r2, #0]
 80034c6:	1d19      	adds	r1, r3, #4
 80034c8:	6011      	str	r1, [r2, #0]
 80034ca:	681d      	ldr	r5, [r3, #0]
 80034cc:	6862      	ldr	r2, [r4, #4]
 80034ce:	2100      	movs	r1, #0
 80034d0:	4628      	mov	r0, r5
 80034d2:	f7fc fe85 	bl	80001e0 <memchr>
 80034d6:	b108      	cbz	r0, 80034dc <_printf_i+0x1bc>
 80034d8:	1b40      	subs	r0, r0, r5
 80034da:	6060      	str	r0, [r4, #4]
 80034dc:	6863      	ldr	r3, [r4, #4]
 80034de:	6123      	str	r3, [r4, #16]
 80034e0:	2300      	movs	r3, #0
 80034e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80034e6:	e7a7      	b.n	8003438 <_printf_i+0x118>
 80034e8:	6923      	ldr	r3, [r4, #16]
 80034ea:	462a      	mov	r2, r5
 80034ec:	4639      	mov	r1, r7
 80034ee:	4630      	mov	r0, r6
 80034f0:	47c0      	blx	r8
 80034f2:	3001      	adds	r0, #1
 80034f4:	d0aa      	beq.n	800344c <_printf_i+0x12c>
 80034f6:	6823      	ldr	r3, [r4, #0]
 80034f8:	079b      	lsls	r3, r3, #30
 80034fa:	d413      	bmi.n	8003524 <_printf_i+0x204>
 80034fc:	68e0      	ldr	r0, [r4, #12]
 80034fe:	9b03      	ldr	r3, [sp, #12]
 8003500:	4298      	cmp	r0, r3
 8003502:	bfb8      	it	lt
 8003504:	4618      	movlt	r0, r3
 8003506:	e7a3      	b.n	8003450 <_printf_i+0x130>
 8003508:	2301      	movs	r3, #1
 800350a:	464a      	mov	r2, r9
 800350c:	4639      	mov	r1, r7
 800350e:	4630      	mov	r0, r6
 8003510:	47c0      	blx	r8
 8003512:	3001      	adds	r0, #1
 8003514:	d09a      	beq.n	800344c <_printf_i+0x12c>
 8003516:	3501      	adds	r5, #1
 8003518:	68e3      	ldr	r3, [r4, #12]
 800351a:	9a03      	ldr	r2, [sp, #12]
 800351c:	1a9b      	subs	r3, r3, r2
 800351e:	42ab      	cmp	r3, r5
 8003520:	dcf2      	bgt.n	8003508 <_printf_i+0x1e8>
 8003522:	e7eb      	b.n	80034fc <_printf_i+0x1dc>
 8003524:	2500      	movs	r5, #0
 8003526:	f104 0919 	add.w	r9, r4, #25
 800352a:	e7f5      	b.n	8003518 <_printf_i+0x1f8>
 800352c:	2b00      	cmp	r3, #0
 800352e:	d1ac      	bne.n	800348a <_printf_i+0x16a>
 8003530:	7803      	ldrb	r3, [r0, #0]
 8003532:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003536:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800353a:	e76c      	b.n	8003416 <_printf_i+0xf6>
 800353c:	080037f1 	.word	0x080037f1
 8003540:	08003802 	.word	0x08003802

08003544 <memcpy>:
 8003544:	b510      	push	{r4, lr}
 8003546:	1e43      	subs	r3, r0, #1
 8003548:	440a      	add	r2, r1
 800354a:	4291      	cmp	r1, r2
 800354c:	d100      	bne.n	8003550 <memcpy+0xc>
 800354e:	bd10      	pop	{r4, pc}
 8003550:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003554:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003558:	e7f7      	b.n	800354a <memcpy+0x6>

0800355a <memmove>:
 800355a:	4288      	cmp	r0, r1
 800355c:	b510      	push	{r4, lr}
 800355e:	eb01 0302 	add.w	r3, r1, r2
 8003562:	d807      	bhi.n	8003574 <memmove+0x1a>
 8003564:	1e42      	subs	r2, r0, #1
 8003566:	4299      	cmp	r1, r3
 8003568:	d00a      	beq.n	8003580 <memmove+0x26>
 800356a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800356e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003572:	e7f8      	b.n	8003566 <memmove+0xc>
 8003574:	4283      	cmp	r3, r0
 8003576:	d9f5      	bls.n	8003564 <memmove+0xa>
 8003578:	1881      	adds	r1, r0, r2
 800357a:	1ad2      	subs	r2, r2, r3
 800357c:	42d3      	cmn	r3, r2
 800357e:	d100      	bne.n	8003582 <memmove+0x28>
 8003580:	bd10      	pop	{r4, pc}
 8003582:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003586:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800358a:	e7f7      	b.n	800357c <memmove+0x22>

0800358c <_free_r>:
 800358c:	b538      	push	{r3, r4, r5, lr}
 800358e:	4605      	mov	r5, r0
 8003590:	2900      	cmp	r1, #0
 8003592:	d045      	beq.n	8003620 <_free_r+0x94>
 8003594:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003598:	1f0c      	subs	r4, r1, #4
 800359a:	2b00      	cmp	r3, #0
 800359c:	bfb8      	it	lt
 800359e:	18e4      	addlt	r4, r4, r3
 80035a0:	f000 f8d2 	bl	8003748 <__malloc_lock>
 80035a4:	4a1f      	ldr	r2, [pc, #124]	; (8003624 <_free_r+0x98>)
 80035a6:	6813      	ldr	r3, [r2, #0]
 80035a8:	4610      	mov	r0, r2
 80035aa:	b933      	cbnz	r3, 80035ba <_free_r+0x2e>
 80035ac:	6063      	str	r3, [r4, #4]
 80035ae:	6014      	str	r4, [r2, #0]
 80035b0:	4628      	mov	r0, r5
 80035b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80035b6:	f000 b8c8 	b.w	800374a <__malloc_unlock>
 80035ba:	42a3      	cmp	r3, r4
 80035bc:	d90c      	bls.n	80035d8 <_free_r+0x4c>
 80035be:	6821      	ldr	r1, [r4, #0]
 80035c0:	1862      	adds	r2, r4, r1
 80035c2:	4293      	cmp	r3, r2
 80035c4:	bf04      	itt	eq
 80035c6:	681a      	ldreq	r2, [r3, #0]
 80035c8:	685b      	ldreq	r3, [r3, #4]
 80035ca:	6063      	str	r3, [r4, #4]
 80035cc:	bf04      	itt	eq
 80035ce:	1852      	addeq	r2, r2, r1
 80035d0:	6022      	streq	r2, [r4, #0]
 80035d2:	6004      	str	r4, [r0, #0]
 80035d4:	e7ec      	b.n	80035b0 <_free_r+0x24>
 80035d6:	4613      	mov	r3, r2
 80035d8:	685a      	ldr	r2, [r3, #4]
 80035da:	b10a      	cbz	r2, 80035e0 <_free_r+0x54>
 80035dc:	42a2      	cmp	r2, r4
 80035de:	d9fa      	bls.n	80035d6 <_free_r+0x4a>
 80035e0:	6819      	ldr	r1, [r3, #0]
 80035e2:	1858      	adds	r0, r3, r1
 80035e4:	42a0      	cmp	r0, r4
 80035e6:	d10b      	bne.n	8003600 <_free_r+0x74>
 80035e8:	6820      	ldr	r0, [r4, #0]
 80035ea:	4401      	add	r1, r0
 80035ec:	1858      	adds	r0, r3, r1
 80035ee:	4282      	cmp	r2, r0
 80035f0:	6019      	str	r1, [r3, #0]
 80035f2:	d1dd      	bne.n	80035b0 <_free_r+0x24>
 80035f4:	6810      	ldr	r0, [r2, #0]
 80035f6:	6852      	ldr	r2, [r2, #4]
 80035f8:	605a      	str	r2, [r3, #4]
 80035fa:	4401      	add	r1, r0
 80035fc:	6019      	str	r1, [r3, #0]
 80035fe:	e7d7      	b.n	80035b0 <_free_r+0x24>
 8003600:	d902      	bls.n	8003608 <_free_r+0x7c>
 8003602:	230c      	movs	r3, #12
 8003604:	602b      	str	r3, [r5, #0]
 8003606:	e7d3      	b.n	80035b0 <_free_r+0x24>
 8003608:	6820      	ldr	r0, [r4, #0]
 800360a:	1821      	adds	r1, r4, r0
 800360c:	428a      	cmp	r2, r1
 800360e:	bf04      	itt	eq
 8003610:	6811      	ldreq	r1, [r2, #0]
 8003612:	6852      	ldreq	r2, [r2, #4]
 8003614:	6062      	str	r2, [r4, #4]
 8003616:	bf04      	itt	eq
 8003618:	1809      	addeq	r1, r1, r0
 800361a:	6021      	streq	r1, [r4, #0]
 800361c:	605c      	str	r4, [r3, #4]
 800361e:	e7c7      	b.n	80035b0 <_free_r+0x24>
 8003620:	bd38      	pop	{r3, r4, r5, pc}
 8003622:	bf00      	nop
 8003624:	200000b0 	.word	0x200000b0

08003628 <_malloc_r>:
 8003628:	b570      	push	{r4, r5, r6, lr}
 800362a:	1ccd      	adds	r5, r1, #3
 800362c:	f025 0503 	bic.w	r5, r5, #3
 8003630:	3508      	adds	r5, #8
 8003632:	2d0c      	cmp	r5, #12
 8003634:	bf38      	it	cc
 8003636:	250c      	movcc	r5, #12
 8003638:	2d00      	cmp	r5, #0
 800363a:	4606      	mov	r6, r0
 800363c:	db01      	blt.n	8003642 <_malloc_r+0x1a>
 800363e:	42a9      	cmp	r1, r5
 8003640:	d903      	bls.n	800364a <_malloc_r+0x22>
 8003642:	230c      	movs	r3, #12
 8003644:	6033      	str	r3, [r6, #0]
 8003646:	2000      	movs	r0, #0
 8003648:	bd70      	pop	{r4, r5, r6, pc}
 800364a:	f000 f87d 	bl	8003748 <__malloc_lock>
 800364e:	4a21      	ldr	r2, [pc, #132]	; (80036d4 <_malloc_r+0xac>)
 8003650:	6814      	ldr	r4, [r2, #0]
 8003652:	4621      	mov	r1, r4
 8003654:	b991      	cbnz	r1, 800367c <_malloc_r+0x54>
 8003656:	4c20      	ldr	r4, [pc, #128]	; (80036d8 <_malloc_r+0xb0>)
 8003658:	6823      	ldr	r3, [r4, #0]
 800365a:	b91b      	cbnz	r3, 8003664 <_malloc_r+0x3c>
 800365c:	4630      	mov	r0, r6
 800365e:	f000 f863 	bl	8003728 <_sbrk_r>
 8003662:	6020      	str	r0, [r4, #0]
 8003664:	4629      	mov	r1, r5
 8003666:	4630      	mov	r0, r6
 8003668:	f000 f85e 	bl	8003728 <_sbrk_r>
 800366c:	1c43      	adds	r3, r0, #1
 800366e:	d124      	bne.n	80036ba <_malloc_r+0x92>
 8003670:	230c      	movs	r3, #12
 8003672:	6033      	str	r3, [r6, #0]
 8003674:	4630      	mov	r0, r6
 8003676:	f000 f868 	bl	800374a <__malloc_unlock>
 800367a:	e7e4      	b.n	8003646 <_malloc_r+0x1e>
 800367c:	680b      	ldr	r3, [r1, #0]
 800367e:	1b5b      	subs	r3, r3, r5
 8003680:	d418      	bmi.n	80036b4 <_malloc_r+0x8c>
 8003682:	2b0b      	cmp	r3, #11
 8003684:	d90f      	bls.n	80036a6 <_malloc_r+0x7e>
 8003686:	600b      	str	r3, [r1, #0]
 8003688:	50cd      	str	r5, [r1, r3]
 800368a:	18cc      	adds	r4, r1, r3
 800368c:	4630      	mov	r0, r6
 800368e:	f000 f85c 	bl	800374a <__malloc_unlock>
 8003692:	f104 000b 	add.w	r0, r4, #11
 8003696:	1d23      	adds	r3, r4, #4
 8003698:	f020 0007 	bic.w	r0, r0, #7
 800369c:	1ac3      	subs	r3, r0, r3
 800369e:	d0d3      	beq.n	8003648 <_malloc_r+0x20>
 80036a0:	425a      	negs	r2, r3
 80036a2:	50e2      	str	r2, [r4, r3]
 80036a4:	e7d0      	b.n	8003648 <_malloc_r+0x20>
 80036a6:	428c      	cmp	r4, r1
 80036a8:	684b      	ldr	r3, [r1, #4]
 80036aa:	bf16      	itet	ne
 80036ac:	6063      	strne	r3, [r4, #4]
 80036ae:	6013      	streq	r3, [r2, #0]
 80036b0:	460c      	movne	r4, r1
 80036b2:	e7eb      	b.n	800368c <_malloc_r+0x64>
 80036b4:	460c      	mov	r4, r1
 80036b6:	6849      	ldr	r1, [r1, #4]
 80036b8:	e7cc      	b.n	8003654 <_malloc_r+0x2c>
 80036ba:	1cc4      	adds	r4, r0, #3
 80036bc:	f024 0403 	bic.w	r4, r4, #3
 80036c0:	42a0      	cmp	r0, r4
 80036c2:	d005      	beq.n	80036d0 <_malloc_r+0xa8>
 80036c4:	1a21      	subs	r1, r4, r0
 80036c6:	4630      	mov	r0, r6
 80036c8:	f000 f82e 	bl	8003728 <_sbrk_r>
 80036cc:	3001      	adds	r0, #1
 80036ce:	d0cf      	beq.n	8003670 <_malloc_r+0x48>
 80036d0:	6025      	str	r5, [r4, #0]
 80036d2:	e7db      	b.n	800368c <_malloc_r+0x64>
 80036d4:	200000b0 	.word	0x200000b0
 80036d8:	200000b4 	.word	0x200000b4

080036dc <_realloc_r>:
 80036dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036de:	4607      	mov	r7, r0
 80036e0:	4614      	mov	r4, r2
 80036e2:	460e      	mov	r6, r1
 80036e4:	b921      	cbnz	r1, 80036f0 <_realloc_r+0x14>
 80036e6:	4611      	mov	r1, r2
 80036e8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80036ec:	f7ff bf9c 	b.w	8003628 <_malloc_r>
 80036f0:	b922      	cbnz	r2, 80036fc <_realloc_r+0x20>
 80036f2:	f7ff ff4b 	bl	800358c <_free_r>
 80036f6:	4625      	mov	r5, r4
 80036f8:	4628      	mov	r0, r5
 80036fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036fc:	f000 f826 	bl	800374c <_malloc_usable_size_r>
 8003700:	42a0      	cmp	r0, r4
 8003702:	d20f      	bcs.n	8003724 <_realloc_r+0x48>
 8003704:	4621      	mov	r1, r4
 8003706:	4638      	mov	r0, r7
 8003708:	f7ff ff8e 	bl	8003628 <_malloc_r>
 800370c:	4605      	mov	r5, r0
 800370e:	2800      	cmp	r0, #0
 8003710:	d0f2      	beq.n	80036f8 <_realloc_r+0x1c>
 8003712:	4631      	mov	r1, r6
 8003714:	4622      	mov	r2, r4
 8003716:	f7ff ff15 	bl	8003544 <memcpy>
 800371a:	4631      	mov	r1, r6
 800371c:	4638      	mov	r0, r7
 800371e:	f7ff ff35 	bl	800358c <_free_r>
 8003722:	e7e9      	b.n	80036f8 <_realloc_r+0x1c>
 8003724:	4635      	mov	r5, r6
 8003726:	e7e7      	b.n	80036f8 <_realloc_r+0x1c>

08003728 <_sbrk_r>:
 8003728:	b538      	push	{r3, r4, r5, lr}
 800372a:	4c06      	ldr	r4, [pc, #24]	; (8003744 <_sbrk_r+0x1c>)
 800372c:	2300      	movs	r3, #0
 800372e:	4605      	mov	r5, r0
 8003730:	4608      	mov	r0, r1
 8003732:	6023      	str	r3, [r4, #0]
 8003734:	f7fd fac4 	bl	8000cc0 <_sbrk>
 8003738:	1c43      	adds	r3, r0, #1
 800373a:	d102      	bne.n	8003742 <_sbrk_r+0x1a>
 800373c:	6823      	ldr	r3, [r4, #0]
 800373e:	b103      	cbz	r3, 8003742 <_sbrk_r+0x1a>
 8003740:	602b      	str	r3, [r5, #0]
 8003742:	bd38      	pop	{r3, r4, r5, pc}
 8003744:	20000e2c 	.word	0x20000e2c

08003748 <__malloc_lock>:
 8003748:	4770      	bx	lr

0800374a <__malloc_unlock>:
 800374a:	4770      	bx	lr

0800374c <_malloc_usable_size_r>:
 800374c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003750:	1f18      	subs	r0, r3, #4
 8003752:	2b00      	cmp	r3, #0
 8003754:	bfbc      	itt	lt
 8003756:	580b      	ldrlt	r3, [r1, r0]
 8003758:	18c0      	addlt	r0, r0, r3
 800375a:	4770      	bx	lr

0800375c <_init>:
 800375c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800375e:	bf00      	nop
 8003760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003762:	bc08      	pop	{r3}
 8003764:	469e      	mov	lr, r3
 8003766:	4770      	bx	lr

08003768 <_fini>:
 8003768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800376a:	bf00      	nop
 800376c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800376e:	bc08      	pop	{r3}
 8003770:	469e      	mov	lr, r3
 8003772:	4770      	bx	lr
